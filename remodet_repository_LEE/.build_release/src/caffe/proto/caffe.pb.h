// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe.proto

#ifndef PROTOBUF_caffe_2eproto__INCLUDED
#define PROTOBUF_caffe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace caffe {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_caffe_2eproto();
void protobuf_AssignDesc_caffe_2eproto();
void protobuf_ShutdownFile_caffe_2eproto();

class AccuracyParameter;
class AllocateIdParameter;
class AnnotatedDataParameter;
class AnnotatedDatum;
class AnnotatedPersonDatum;
class Annotation;
class AnnotationGroup;
class AnnotationPart;
class Annotation_P;
class ArgMaxParameter;
class BBoxLossParameter;
class BGCropParameter;
class BatchNormParameter;
class BatchSampler;
class BiasParameter;
class BlobProto;
class BlobProtoVector;
class BlobShape;
class BoxMatchingParameter;
class ClipSptialmapParameter;
class Color;
class ColorParameter;
class ConcatParameter;
class ConnectLimbParameter;
class ContrastiveLossParameter;
class ConvolutionParameter;
class CropParameter;
class DataParameter;
class Datum;
class DenseBBoxLossParameter;
class DenseImageDataParameter;
class DetectionEvaluateParameter;
class DetectionMcOutputParameter;
class DetectionMultiMcOutputParameter;
class DetectionOutputParameter;
class DistoredParameter;
class DistortionParameter;
class DropoutParameter;
class DummyDataParameter;
class ELUParameter;
class EasymatchParameter;
class EltwiseParameter;
class EmbedParameter;
class EmitConstraint;
class EnforceOneParameter;
class ExpParameter;
class ExpansionParameter;
class FTrackerDataLoaderParameter;
class FTrackerDataParameter;
class FillerParameter;
class FlattenParameter;
class FocusLossParameter;
class GhmcLossParameter;
class GradClipParameter;
class HDF5DataParameter;
class HDF5OutputParameter;
class HandPoseDataParameter;
class HingeLossParameter;
class ImResizeParameter;
class ImageDataParameter;
class InfogainLossParameter;
class InnerProductParameter;
class InputParameter;
class InterpParameter;
class KpsEvalParameter;
class KpsGenParameter;
class LRNParameter;
class LabelMap;
class LabelMapItem;
class LabeledMatchParameter;
class LayerParameter;
class LogParameter;
class LossParameter;
class MVNParameter;
class MarginInnerProductParameter;
class MaskGenParameter;
class MaskLossParameter;
class MatchParameter;
class McBoxLossParameter;
class MemoryDataParameter;
class MinihandDataParameter;
class MinihandTransformationParameter;
class MultiBoxLossParameter;
class MultiMcBoxLossParameter;
class NetParameter;
class NetState;
class NetStateRule;
class NmsParameter;
class NoiseParameter;
class NonMaximumSuppressionParameter;
class NormalizeParameter;
class NormalizedBBox;
class PReLUParameter;
class ParamSpec;
class ParameterParameter;
class PeaksFindParameter;
class PermuteParameter;
class PersonBBox;
class PoolingParameter;
class PoseDataParameter;
class PoseDataTransformationParameter;
class PoseDetParameter;
class PoseEvalParameter;
class PowerParameter;
class PriorBoxParameter;
class PythonParameter;
class ROIPoolingParameter;
class RandomCropParameter;
class ReLUParameter;
class RecurrentParameter;
class ReductionParameter;
class ReidDataParameter;
class ReidTransformationParameter;
class ReorgParameter;
class ReshapeParameter;
class ResizeBlobParameter;
class ResizeParameter;
class RoiAlignParameter;
class RoiDataParameter;
class RoiResizeParameter;
class SPPParameter;
class SaltPepperParameter;
class SampleConstraint;
class Sampler;
class SaveOutputParameter;
class ScaleParameter;
class SegAccuracyParameter;
class SegDataTransformationParameter;
class SigmoidParameter;
class SliceParameter;
class SmoothL1LossParameter;
class SoftmaxParameter;
class SolverParameter;
class SolverState;
class SpatialDropoutParameter;
class SplitLabelParameter;
class TanHParameter;
class ThresholdParameter;
class TileParameter;
class TrackerDataLoaderParameter;
class TrackerDataParameter;
class TrackerMcLossParameter;
class TrackerMcOutParameter;
class TrackerPriorParameter;
class TransformationParameter;
class TrueRoiParameter;
class TwoClassBalancedSigmoidCrossEntropyLossParameter;
class UnifiedDataParameter;
class UnifiedTransformationParameter;
class UnlabeledMatchParameter;
class V0LayerParameter;
class V1LayerParameter;
class VideoDataParameter;
class VideoTrackerParameter;
class VideoframeParameter;
class VisualMaskParameter;
class VisualizeBoxposeParameter;
class VisualizeParameter;
class VisualizeposeParameter;
class WindowDataParameter;

enum EmitConstraint_EmitType {
  EmitConstraint_EmitType_CENTER = 0,
  EmitConstraint_EmitType_MIN_OVERLAP = 1
};
bool EmitConstraint_EmitType_IsValid(int value);
const EmitConstraint_EmitType EmitConstraint_EmitType_EmitType_MIN = EmitConstraint_EmitType_CENTER;
const EmitConstraint_EmitType EmitConstraint_EmitType_EmitType_MAX = EmitConstraint_EmitType_MIN_OVERLAP;
const int EmitConstraint_EmitType_EmitType_ARRAYSIZE = EmitConstraint_EmitType_EmitType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EmitConstraint_EmitType_descriptor();
inline const ::std::string& EmitConstraint_EmitType_Name(EmitConstraint_EmitType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EmitConstraint_EmitType_descriptor(), value);
}
inline bool EmitConstraint_EmitType_Parse(
    const ::std::string& name, EmitConstraint_EmitType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmitConstraint_EmitType>(
    EmitConstraint_EmitType_descriptor(), name, value);
}
enum AnnotatedPersonDatum_AnnotatedPersonType {
  AnnotatedPersonDatum_AnnotatedPersonType_BBOX = 0
};
bool AnnotatedPersonDatum_AnnotatedPersonType_IsValid(int value);
const AnnotatedPersonDatum_AnnotatedPersonType AnnotatedPersonDatum_AnnotatedPersonType_AnnotatedPersonType_MIN = AnnotatedPersonDatum_AnnotatedPersonType_BBOX;
const AnnotatedPersonDatum_AnnotatedPersonType AnnotatedPersonDatum_AnnotatedPersonType_AnnotatedPersonType_MAX = AnnotatedPersonDatum_AnnotatedPersonType_BBOX;
const int AnnotatedPersonDatum_AnnotatedPersonType_AnnotatedPersonType_ARRAYSIZE = AnnotatedPersonDatum_AnnotatedPersonType_AnnotatedPersonType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AnnotatedPersonDatum_AnnotatedPersonType_descriptor();
inline const ::std::string& AnnotatedPersonDatum_AnnotatedPersonType_Name(AnnotatedPersonDatum_AnnotatedPersonType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AnnotatedPersonDatum_AnnotatedPersonType_descriptor(), value);
}
inline bool AnnotatedPersonDatum_AnnotatedPersonType_Parse(
    const ::std::string& name, AnnotatedPersonDatum_AnnotatedPersonType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AnnotatedPersonDatum_AnnotatedPersonType>(
    AnnotatedPersonDatum_AnnotatedPersonType_descriptor(), name, value);
}
enum AnnotatedDatum_AnnotationType {
  AnnotatedDatum_AnnotationType_BBOX = 0
};
bool AnnotatedDatum_AnnotationType_IsValid(int value);
const AnnotatedDatum_AnnotationType AnnotatedDatum_AnnotationType_AnnotationType_MIN = AnnotatedDatum_AnnotationType_BBOX;
const AnnotatedDatum_AnnotationType AnnotatedDatum_AnnotationType_AnnotationType_MAX = AnnotatedDatum_AnnotationType_BBOX;
const int AnnotatedDatum_AnnotationType_AnnotationType_ARRAYSIZE = AnnotatedDatum_AnnotationType_AnnotationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AnnotatedDatum_AnnotationType_descriptor();
inline const ::std::string& AnnotatedDatum_AnnotationType_Name(AnnotatedDatum_AnnotationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AnnotatedDatum_AnnotationType_descriptor(), value);
}
inline bool AnnotatedDatum_AnnotationType_Parse(
    const ::std::string& name, AnnotatedDatum_AnnotationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AnnotatedDatum_AnnotationType>(
    AnnotatedDatum_AnnotationType_descriptor(), name, value);
}
enum FillerParameter_VarianceNorm {
  FillerParameter_VarianceNorm_FAN_IN = 0,
  FillerParameter_VarianceNorm_FAN_OUT = 1,
  FillerParameter_VarianceNorm_AVERAGE = 2
};
bool FillerParameter_VarianceNorm_IsValid(int value);
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MIN = FillerParameter_VarianceNorm_FAN_IN;
const FillerParameter_VarianceNorm FillerParameter_VarianceNorm_VarianceNorm_MAX = FillerParameter_VarianceNorm_AVERAGE;
const int FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE = FillerParameter_VarianceNorm_VarianceNorm_MAX + 1;

const ::google::protobuf::EnumDescriptor* FillerParameter_VarianceNorm_descriptor();
inline const ::std::string& FillerParameter_VarianceNorm_Name(FillerParameter_VarianceNorm value) {
  return ::google::protobuf::internal::NameOfEnum(
    FillerParameter_VarianceNorm_descriptor(), value);
}
inline bool FillerParameter_VarianceNorm_Parse(
    const ::std::string& name, FillerParameter_VarianceNorm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FillerParameter_VarianceNorm>(
    FillerParameter_VarianceNorm_descriptor(), name, value);
}
enum SolverParameter_SnapshotFormat {
  SolverParameter_SnapshotFormat_HDF5 = 0,
  SolverParameter_SnapshotFormat_BINARYPROTO = 1
};
bool SolverParameter_SnapshotFormat_IsValid(int value);
const SolverParameter_SnapshotFormat SolverParameter_SnapshotFormat_SnapshotFormat_MIN = SolverParameter_SnapshotFormat_HDF5;
const SolverParameter_SnapshotFormat SolverParameter_SnapshotFormat_SnapshotFormat_MAX = SolverParameter_SnapshotFormat_BINARYPROTO;
const int SolverParameter_SnapshotFormat_SnapshotFormat_ARRAYSIZE = SolverParameter_SnapshotFormat_SnapshotFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SnapshotFormat_descriptor();
inline const ::std::string& SolverParameter_SnapshotFormat_Name(SolverParameter_SnapshotFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SnapshotFormat_descriptor(), value);
}
inline bool SolverParameter_SnapshotFormat_Parse(
    const ::std::string& name, SolverParameter_SnapshotFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SnapshotFormat>(
    SolverParameter_SnapshotFormat_descriptor(), name, value);
}
enum SolverParameter_SolverMode {
  SolverParameter_SolverMode_CPU = 0,
  SolverParameter_SolverMode_GPU = 1
};
bool SolverParameter_SolverMode_IsValid(int value);
const SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MIN = SolverParameter_SolverMode_CPU;
const SolverParameter_SolverMode SolverParameter_SolverMode_SolverMode_MAX = SolverParameter_SolverMode_GPU;
const int SolverParameter_SolverMode_SolverMode_ARRAYSIZE = SolverParameter_SolverMode_SolverMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SolverMode_descriptor();
inline const ::std::string& SolverParameter_SolverMode_Name(SolverParameter_SolverMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SolverMode_descriptor(), value);
}
inline bool SolverParameter_SolverMode_Parse(
    const ::std::string& name, SolverParameter_SolverMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SolverMode>(
    SolverParameter_SolverMode_descriptor(), name, value);
}
enum SolverParameter_SolverType {
  SolverParameter_SolverType_SGD = 0,
  SolverParameter_SolverType_NESTEROV = 1,
  SolverParameter_SolverType_ADAGRAD = 2,
  SolverParameter_SolverType_RMSPROP = 3,
  SolverParameter_SolverType_ADADELTA = 4,
  SolverParameter_SolverType_ADAM = 5
};
bool SolverParameter_SolverType_IsValid(int value);
const SolverParameter_SolverType SolverParameter_SolverType_SolverType_MIN = SolverParameter_SolverType_SGD;
const SolverParameter_SolverType SolverParameter_SolverType_SolverType_MAX = SolverParameter_SolverType_ADAM;
const int SolverParameter_SolverType_SolverType_ARRAYSIZE = SolverParameter_SolverType_SolverType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SolverParameter_SolverType_descriptor();
inline const ::std::string& SolverParameter_SolverType_Name(SolverParameter_SolverType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SolverParameter_SolverType_descriptor(), value);
}
inline bool SolverParameter_SolverType_Parse(
    const ::std::string& name, SolverParameter_SolverType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverParameter_SolverType>(
    SolverParameter_SolverType_descriptor(), name, value);
}
enum ParamSpec_DimCheckMode {
  ParamSpec_DimCheckMode_STRICT = 0,
  ParamSpec_DimCheckMode_PERMISSIVE = 1
};
bool ParamSpec_DimCheckMode_IsValid(int value);
const ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MIN = ParamSpec_DimCheckMode_STRICT;
const ParamSpec_DimCheckMode ParamSpec_DimCheckMode_DimCheckMode_MAX = ParamSpec_DimCheckMode_PERMISSIVE;
const int ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE = ParamSpec_DimCheckMode_DimCheckMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParamSpec_DimCheckMode_descriptor();
inline const ::std::string& ParamSpec_DimCheckMode_Name(ParamSpec_DimCheckMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParamSpec_DimCheckMode_descriptor(), value);
}
inline bool ParamSpec_DimCheckMode_Parse(
    const ::std::string& name, ParamSpec_DimCheckMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParamSpec_DimCheckMode>(
    ParamSpec_DimCheckMode_descriptor(), name, value);
}
enum SegAccuracyParameter_AccuracyMetric {
  SegAccuracyParameter_AccuracyMetric_PixelAccuracy = 0,
  SegAccuracyParameter_AccuracyMetric_ClassAccuracy = 1,
  SegAccuracyParameter_AccuracyMetric_PixelIOU = 2
};
bool SegAccuracyParameter_AccuracyMetric_IsValid(int value);
const SegAccuracyParameter_AccuracyMetric SegAccuracyParameter_AccuracyMetric_AccuracyMetric_MIN = SegAccuracyParameter_AccuracyMetric_PixelAccuracy;
const SegAccuracyParameter_AccuracyMetric SegAccuracyParameter_AccuracyMetric_AccuracyMetric_MAX = SegAccuracyParameter_AccuracyMetric_PixelIOU;
const int SegAccuracyParameter_AccuracyMetric_AccuracyMetric_ARRAYSIZE = SegAccuracyParameter_AccuracyMetric_AccuracyMetric_MAX + 1;

const ::google::protobuf::EnumDescriptor* SegAccuracyParameter_AccuracyMetric_descriptor();
inline const ::std::string& SegAccuracyParameter_AccuracyMetric_Name(SegAccuracyParameter_AccuracyMetric value) {
  return ::google::protobuf::internal::NameOfEnum(
    SegAccuracyParameter_AccuracyMetric_descriptor(), value);
}
inline bool SegAccuracyParameter_AccuracyMetric_Parse(
    const ::std::string& name, SegAccuracyParameter_AccuracyMetric* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SegAccuracyParameter_AccuracyMetric>(
    SegAccuracyParameter_AccuracyMetric_descriptor(), name, value);
}
enum MarginInnerProductParameter_MarginType {
  MarginInnerProductParameter_MarginType_SINGLE = 0,
  MarginInnerProductParameter_MarginType_DOUBLE = 1,
  MarginInnerProductParameter_MarginType_TRIPLE = 2,
  MarginInnerProductParameter_MarginType_QUADRUPLE = 3
};
bool MarginInnerProductParameter_MarginType_IsValid(int value);
const MarginInnerProductParameter_MarginType MarginInnerProductParameter_MarginType_MarginType_MIN = MarginInnerProductParameter_MarginType_SINGLE;
const MarginInnerProductParameter_MarginType MarginInnerProductParameter_MarginType_MarginType_MAX = MarginInnerProductParameter_MarginType_QUADRUPLE;
const int MarginInnerProductParameter_MarginType_MarginType_ARRAYSIZE = MarginInnerProductParameter_MarginType_MarginType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MarginInnerProductParameter_MarginType_descriptor();
inline const ::std::string& MarginInnerProductParameter_MarginType_Name(MarginInnerProductParameter_MarginType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MarginInnerProductParameter_MarginType_descriptor(), value);
}
inline bool MarginInnerProductParameter_MarginType_Parse(
    const ::std::string& name, MarginInnerProductParameter_MarginType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarginInnerProductParameter_MarginType>(
    MarginInnerProductParameter_MarginType_descriptor(), name, value);
}
enum ResizeParameter_Resize_mode {
  ResizeParameter_Resize_mode_WARP = 1,
  ResizeParameter_Resize_mode_FIT_SMALL_SIZE = 2,
  ResizeParameter_Resize_mode_FIT_LARGE_SIZE_AND_PAD = 3
};
bool ResizeParameter_Resize_mode_IsValid(int value);
const ResizeParameter_Resize_mode ResizeParameter_Resize_mode_Resize_mode_MIN = ResizeParameter_Resize_mode_WARP;
const ResizeParameter_Resize_mode ResizeParameter_Resize_mode_Resize_mode_MAX = ResizeParameter_Resize_mode_FIT_LARGE_SIZE_AND_PAD;
const int ResizeParameter_Resize_mode_Resize_mode_ARRAYSIZE = ResizeParameter_Resize_mode_Resize_mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResizeParameter_Resize_mode_descriptor();
inline const ::std::string& ResizeParameter_Resize_mode_Name(ResizeParameter_Resize_mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResizeParameter_Resize_mode_descriptor(), value);
}
inline bool ResizeParameter_Resize_mode_Parse(
    const ::std::string& name, ResizeParameter_Resize_mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResizeParameter_Resize_mode>(
    ResizeParameter_Resize_mode_descriptor(), name, value);
}
enum ResizeParameter_Pad_mode {
  ResizeParameter_Pad_mode_CONSTANT = 1,
  ResizeParameter_Pad_mode_MIRRORED = 2,
  ResizeParameter_Pad_mode_REPEAT_NEAREST = 3
};
bool ResizeParameter_Pad_mode_IsValid(int value);
const ResizeParameter_Pad_mode ResizeParameter_Pad_mode_Pad_mode_MIN = ResizeParameter_Pad_mode_CONSTANT;
const ResizeParameter_Pad_mode ResizeParameter_Pad_mode_Pad_mode_MAX = ResizeParameter_Pad_mode_REPEAT_NEAREST;
const int ResizeParameter_Pad_mode_Pad_mode_ARRAYSIZE = ResizeParameter_Pad_mode_Pad_mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResizeParameter_Pad_mode_descriptor();
inline const ::std::string& ResizeParameter_Pad_mode_Name(ResizeParameter_Pad_mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResizeParameter_Pad_mode_descriptor(), value);
}
inline bool ResizeParameter_Pad_mode_Parse(
    const ::std::string& name, ResizeParameter_Pad_mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResizeParameter_Pad_mode>(
    ResizeParameter_Pad_mode_descriptor(), name, value);
}
enum ResizeParameter_Interp_mode {
  ResizeParameter_Interp_mode_LINEAR = 1,
  ResizeParameter_Interp_mode_AREA = 2,
  ResizeParameter_Interp_mode_NEAREST = 3,
  ResizeParameter_Interp_mode_CUBIC = 4,
  ResizeParameter_Interp_mode_LANCZOS4 = 5
};
bool ResizeParameter_Interp_mode_IsValid(int value);
const ResizeParameter_Interp_mode ResizeParameter_Interp_mode_Interp_mode_MIN = ResizeParameter_Interp_mode_LINEAR;
const ResizeParameter_Interp_mode ResizeParameter_Interp_mode_Interp_mode_MAX = ResizeParameter_Interp_mode_LANCZOS4;
const int ResizeParameter_Interp_mode_Interp_mode_ARRAYSIZE = ResizeParameter_Interp_mode_Interp_mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResizeParameter_Interp_mode_descriptor();
inline const ::std::string& ResizeParameter_Interp_mode_Name(ResizeParameter_Interp_mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResizeParameter_Interp_mode_descriptor(), value);
}
inline bool ResizeParameter_Interp_mode_Parse(
    const ::std::string& name, ResizeParameter_Interp_mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResizeParameter_Interp_mode>(
    ResizeParameter_Interp_mode_descriptor(), name, value);
}
enum UnifiedTransformationParameter_PutToBlob_mode {
  UnifiedTransformationParameter_PutToBlob_mode_RAND = 1,
  UnifiedTransformationParameter_PutToBlob_mode_CENTER = 2,
  UnifiedTransformationParameter_PutToBlob_mode_TOP = 3
};
bool UnifiedTransformationParameter_PutToBlob_mode_IsValid(int value);
const UnifiedTransformationParameter_PutToBlob_mode UnifiedTransformationParameter_PutToBlob_mode_PutToBlob_mode_MIN = UnifiedTransformationParameter_PutToBlob_mode_RAND;
const UnifiedTransformationParameter_PutToBlob_mode UnifiedTransformationParameter_PutToBlob_mode_PutToBlob_mode_MAX = UnifiedTransformationParameter_PutToBlob_mode_TOP;
const int UnifiedTransformationParameter_PutToBlob_mode_PutToBlob_mode_ARRAYSIZE = UnifiedTransformationParameter_PutToBlob_mode_PutToBlob_mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnifiedTransformationParameter_PutToBlob_mode_descriptor();
inline const ::std::string& UnifiedTransformationParameter_PutToBlob_mode_Name(UnifiedTransformationParameter_PutToBlob_mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnifiedTransformationParameter_PutToBlob_mode_descriptor(), value);
}
inline bool UnifiedTransformationParameter_PutToBlob_mode_Parse(
    const ::std::string& name, UnifiedTransformationParameter_PutToBlob_mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnifiedTransformationParameter_PutToBlob_mode>(
    UnifiedTransformationParameter_PutToBlob_mode_descriptor(), name, value);
}
enum LossParameter_NormalizationMode {
  LossParameter_NormalizationMode_FULL = 0,
  LossParameter_NormalizationMode_VALID = 1,
  LossParameter_NormalizationMode_BATCH_SIZE = 2,
  LossParameter_NormalizationMode_NONE = 3
};
bool LossParameter_NormalizationMode_IsValid(int value);
const LossParameter_NormalizationMode LossParameter_NormalizationMode_NormalizationMode_MIN = LossParameter_NormalizationMode_FULL;
const LossParameter_NormalizationMode LossParameter_NormalizationMode_NormalizationMode_MAX = LossParameter_NormalizationMode_NONE;
const int LossParameter_NormalizationMode_NormalizationMode_ARRAYSIZE = LossParameter_NormalizationMode_NormalizationMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* LossParameter_NormalizationMode_descriptor();
inline const ::std::string& LossParameter_NormalizationMode_Name(LossParameter_NormalizationMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    LossParameter_NormalizationMode_descriptor(), value);
}
inline bool LossParameter_NormalizationMode_Parse(
    const ::std::string& name, LossParameter_NormalizationMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LossParameter_NormalizationMode>(
    LossParameter_NormalizationMode_descriptor(), name, value);
}
enum ConvolutionParameter_Engine {
  ConvolutionParameter_Engine_DEFAULT = 0,
  ConvolutionParameter_Engine_CAFFE = 1,
  ConvolutionParameter_Engine_CUDNN = 2
};
bool ConvolutionParameter_Engine_IsValid(int value);
const ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MIN = ConvolutionParameter_Engine_DEFAULT;
const ConvolutionParameter_Engine ConvolutionParameter_Engine_Engine_MAX = ConvolutionParameter_Engine_CUDNN;
const int ConvolutionParameter_Engine_Engine_ARRAYSIZE = ConvolutionParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConvolutionParameter_Engine_descriptor();
inline const ::std::string& ConvolutionParameter_Engine_Name(ConvolutionParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConvolutionParameter_Engine_descriptor(), value);
}
inline bool ConvolutionParameter_Engine_Parse(
    const ::std::string& name, ConvolutionParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConvolutionParameter_Engine>(
    ConvolutionParameter_Engine_descriptor(), name, value);
}
enum DataParameter_DB {
  DataParameter_DB_LEVELDB = 0,
  DataParameter_DB_LMDB = 1
};
bool DataParameter_DB_IsValid(int value);
const DataParameter_DB DataParameter_DB_DB_MIN = DataParameter_DB_LEVELDB;
const DataParameter_DB DataParameter_DB_DB_MAX = DataParameter_DB_LMDB;
const int DataParameter_DB_DB_ARRAYSIZE = DataParameter_DB_DB_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataParameter_DB_descriptor();
inline const ::std::string& DataParameter_DB_Name(DataParameter_DB value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataParameter_DB_descriptor(), value);
}
inline bool DataParameter_DB_Parse(
    const ::std::string& name, DataParameter_DB* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataParameter_DB>(
    DataParameter_DB_descriptor(), name, value);
}
enum McBoxLossParameter_CodeLocType {
  McBoxLossParameter_CodeLocType_YOLO = 0,
  McBoxLossParameter_CodeLocType_SSD = 1
};
bool McBoxLossParameter_CodeLocType_IsValid(int value);
const McBoxLossParameter_CodeLocType McBoxLossParameter_CodeLocType_CodeLocType_MIN = McBoxLossParameter_CodeLocType_YOLO;
const McBoxLossParameter_CodeLocType McBoxLossParameter_CodeLocType_CodeLocType_MAX = McBoxLossParameter_CodeLocType_SSD;
const int McBoxLossParameter_CodeLocType_CodeLocType_ARRAYSIZE = McBoxLossParameter_CodeLocType_CodeLocType_MAX + 1;

const ::google::protobuf::EnumDescriptor* McBoxLossParameter_CodeLocType_descriptor();
inline const ::std::string& McBoxLossParameter_CodeLocType_Name(McBoxLossParameter_CodeLocType value) {
  return ::google::protobuf::internal::NameOfEnum(
    McBoxLossParameter_CodeLocType_descriptor(), value);
}
inline bool McBoxLossParameter_CodeLocType_Parse(
    const ::std::string& name, McBoxLossParameter_CodeLocType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<McBoxLossParameter_CodeLocType>(
    McBoxLossParameter_CodeLocType_descriptor(), name, value);
}
enum DetectionOutputParameter_NmsType {
  DetectionOutputParameter_NmsType_Ori = 0,
  DetectionOutputParameter_NmsType_Fast = 1,
  DetectionOutputParameter_NmsType_FastVote = 2,
  DetectionOutputParameter_NmsType_OriSoft = 3
};
bool DetectionOutputParameter_NmsType_IsValid(int value);
const DetectionOutputParameter_NmsType DetectionOutputParameter_NmsType_NmsType_MIN = DetectionOutputParameter_NmsType_Ori;
const DetectionOutputParameter_NmsType DetectionOutputParameter_NmsType_NmsType_MAX = DetectionOutputParameter_NmsType_OriSoft;
const int DetectionOutputParameter_NmsType_NmsType_ARRAYSIZE = DetectionOutputParameter_NmsType_NmsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DetectionOutputParameter_NmsType_descriptor();
inline const ::std::string& DetectionOutputParameter_NmsType_Name(DetectionOutputParameter_NmsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DetectionOutputParameter_NmsType_descriptor(), value);
}
inline bool DetectionOutputParameter_NmsType_Parse(
    const ::std::string& name, DetectionOutputParameter_NmsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DetectionOutputParameter_NmsType>(
    DetectionOutputParameter_NmsType_descriptor(), name, value);
}
enum DetectionOutputParameter_SoftType {
  DetectionOutputParameter_SoftType_Power2 = 0,
  DetectionOutputParameter_SoftType_Power3 = 1,
  DetectionOutputParameter_SoftType_weight04 = 2,
  DetectionOutputParameter_SoftType_weight04vote = 4,
  DetectionOutputParameter_SoftType_Power2vote = 3
};
bool DetectionOutputParameter_SoftType_IsValid(int value);
const DetectionOutputParameter_SoftType DetectionOutputParameter_SoftType_SoftType_MIN = DetectionOutputParameter_SoftType_Power2;
const DetectionOutputParameter_SoftType DetectionOutputParameter_SoftType_SoftType_MAX = DetectionOutputParameter_SoftType_weight04vote;
const int DetectionOutputParameter_SoftType_SoftType_ARRAYSIZE = DetectionOutputParameter_SoftType_SoftType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DetectionOutputParameter_SoftType_descriptor();
inline const ::std::string& DetectionOutputParameter_SoftType_Name(DetectionOutputParameter_SoftType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DetectionOutputParameter_SoftType_descriptor(), value);
}
inline bool DetectionOutputParameter_SoftType_Parse(
    const ::std::string& name, DetectionOutputParameter_SoftType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DetectionOutputParameter_SoftType>(
    DetectionOutputParameter_SoftType_descriptor(), name, value);
}
enum EltwiseParameter_EltwiseOp {
  EltwiseParameter_EltwiseOp_PROD = 0,
  EltwiseParameter_EltwiseOp_SUM = 1,
  EltwiseParameter_EltwiseOp_MAX = 2
};
bool EltwiseParameter_EltwiseOp_IsValid(int value);
const EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MIN = EltwiseParameter_EltwiseOp_PROD;
const EltwiseParameter_EltwiseOp EltwiseParameter_EltwiseOp_EltwiseOp_MAX = EltwiseParameter_EltwiseOp_MAX;
const int EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE = EltwiseParameter_EltwiseOp_EltwiseOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* EltwiseParameter_EltwiseOp_descriptor();
inline const ::std::string& EltwiseParameter_EltwiseOp_Name(EltwiseParameter_EltwiseOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    EltwiseParameter_EltwiseOp_descriptor(), value);
}
inline bool EltwiseParameter_EltwiseOp_Parse(
    const ::std::string& name, EltwiseParameter_EltwiseOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EltwiseParameter_EltwiseOp>(
    EltwiseParameter_EltwiseOp_descriptor(), name, value);
}
enum HingeLossParameter_Norm {
  HingeLossParameter_Norm_L1 = 1,
  HingeLossParameter_Norm_L2 = 2
};
bool HingeLossParameter_Norm_IsValid(int value);
const HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MIN = HingeLossParameter_Norm_L1;
const HingeLossParameter_Norm HingeLossParameter_Norm_Norm_MAX = HingeLossParameter_Norm_L2;
const int HingeLossParameter_Norm_Norm_ARRAYSIZE = HingeLossParameter_Norm_Norm_MAX + 1;

const ::google::protobuf::EnumDescriptor* HingeLossParameter_Norm_descriptor();
inline const ::std::string& HingeLossParameter_Norm_Name(HingeLossParameter_Norm value) {
  return ::google::protobuf::internal::NameOfEnum(
    HingeLossParameter_Norm_descriptor(), value);
}
inline bool HingeLossParameter_Norm_Parse(
    const ::std::string& name, HingeLossParameter_Norm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HingeLossParameter_Norm>(
    HingeLossParameter_Norm_descriptor(), name, value);
}
enum ReorgParameter_SampleType {
  ReorgParameter_SampleType_DOWN = 0,
  ReorgParameter_SampleType_UP = 1
};
bool ReorgParameter_SampleType_IsValid(int value);
const ReorgParameter_SampleType ReorgParameter_SampleType_SampleType_MIN = ReorgParameter_SampleType_DOWN;
const ReorgParameter_SampleType ReorgParameter_SampleType_SampleType_MAX = ReorgParameter_SampleType_UP;
const int ReorgParameter_SampleType_SampleType_ARRAYSIZE = ReorgParameter_SampleType_SampleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReorgParameter_SampleType_descriptor();
inline const ::std::string& ReorgParameter_SampleType_Name(ReorgParameter_SampleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReorgParameter_SampleType_descriptor(), value);
}
inline bool ReorgParameter_SampleType_Parse(
    const ::std::string& name, ReorgParameter_SampleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReorgParameter_SampleType>(
    ReorgParameter_SampleType_descriptor(), name, value);
}
enum LRNParameter_NormRegion {
  LRNParameter_NormRegion_ACROSS_CHANNELS = 0,
  LRNParameter_NormRegion_WITHIN_CHANNEL = 1
};
bool LRNParameter_NormRegion_IsValid(int value);
const LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MIN = LRNParameter_NormRegion_ACROSS_CHANNELS;
const LRNParameter_NormRegion LRNParameter_NormRegion_NormRegion_MAX = LRNParameter_NormRegion_WITHIN_CHANNEL;
const int LRNParameter_NormRegion_NormRegion_ARRAYSIZE = LRNParameter_NormRegion_NormRegion_MAX + 1;

const ::google::protobuf::EnumDescriptor* LRNParameter_NormRegion_descriptor();
inline const ::std::string& LRNParameter_NormRegion_Name(LRNParameter_NormRegion value) {
  return ::google::protobuf::internal::NameOfEnum(
    LRNParameter_NormRegion_descriptor(), value);
}
inline bool LRNParameter_NormRegion_Parse(
    const ::std::string& name, LRNParameter_NormRegion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNParameter_NormRegion>(
    LRNParameter_NormRegion_descriptor(), name, value);
}
enum LRNParameter_Engine {
  LRNParameter_Engine_DEFAULT = 0,
  LRNParameter_Engine_CAFFE = 1,
  LRNParameter_Engine_CUDNN = 2
};
bool LRNParameter_Engine_IsValid(int value);
const LRNParameter_Engine LRNParameter_Engine_Engine_MIN = LRNParameter_Engine_DEFAULT;
const LRNParameter_Engine LRNParameter_Engine_Engine_MAX = LRNParameter_Engine_CUDNN;
const int LRNParameter_Engine_Engine_ARRAYSIZE = LRNParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* LRNParameter_Engine_descriptor();
inline const ::std::string& LRNParameter_Engine_Name(LRNParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    LRNParameter_Engine_descriptor(), value);
}
inline bool LRNParameter_Engine_Parse(
    const ::std::string& name, LRNParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LRNParameter_Engine>(
    LRNParameter_Engine_descriptor(), name, value);
}
enum MultiBoxLossParameter_LocLossType {
  MultiBoxLossParameter_LocLossType_L2 = 0,
  MultiBoxLossParameter_LocLossType_SMOOTH_L1 = 1
};
bool MultiBoxLossParameter_LocLossType_IsValid(int value);
const MultiBoxLossParameter_LocLossType MultiBoxLossParameter_LocLossType_LocLossType_MIN = MultiBoxLossParameter_LocLossType_L2;
const MultiBoxLossParameter_LocLossType MultiBoxLossParameter_LocLossType_LocLossType_MAX = MultiBoxLossParameter_LocLossType_SMOOTH_L1;
const int MultiBoxLossParameter_LocLossType_LocLossType_ARRAYSIZE = MultiBoxLossParameter_LocLossType_LocLossType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MultiBoxLossParameter_LocLossType_descriptor();
inline const ::std::string& MultiBoxLossParameter_LocLossType_Name(MultiBoxLossParameter_LocLossType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MultiBoxLossParameter_LocLossType_descriptor(), value);
}
inline bool MultiBoxLossParameter_LocLossType_Parse(
    const ::std::string& name, MultiBoxLossParameter_LocLossType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MultiBoxLossParameter_LocLossType>(
    MultiBoxLossParameter_LocLossType_descriptor(), name, value);
}
enum MultiBoxLossParameter_ConfLossType {
  MultiBoxLossParameter_ConfLossType_SOFTMAX = 0,
  MultiBoxLossParameter_ConfLossType_LOGISTIC = 1
};
bool MultiBoxLossParameter_ConfLossType_IsValid(int value);
const MultiBoxLossParameter_ConfLossType MultiBoxLossParameter_ConfLossType_ConfLossType_MIN = MultiBoxLossParameter_ConfLossType_SOFTMAX;
const MultiBoxLossParameter_ConfLossType MultiBoxLossParameter_ConfLossType_ConfLossType_MAX = MultiBoxLossParameter_ConfLossType_LOGISTIC;
const int MultiBoxLossParameter_ConfLossType_ConfLossType_ARRAYSIZE = MultiBoxLossParameter_ConfLossType_ConfLossType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MultiBoxLossParameter_ConfLossType_descriptor();
inline const ::std::string& MultiBoxLossParameter_ConfLossType_Name(MultiBoxLossParameter_ConfLossType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MultiBoxLossParameter_ConfLossType_descriptor(), value);
}
inline bool MultiBoxLossParameter_ConfLossType_Parse(
    const ::std::string& name, MultiBoxLossParameter_ConfLossType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MultiBoxLossParameter_ConfLossType>(
    MultiBoxLossParameter_ConfLossType_descriptor(), name, value);
}
enum MultiBoxLossParameter_MatchType {
  MultiBoxLossParameter_MatchType_BIPARTITE = 0,
  MultiBoxLossParameter_MatchType_PER_PREDICTION = 1
};
bool MultiBoxLossParameter_MatchType_IsValid(int value);
const MultiBoxLossParameter_MatchType MultiBoxLossParameter_MatchType_MatchType_MIN = MultiBoxLossParameter_MatchType_BIPARTITE;
const MultiBoxLossParameter_MatchType MultiBoxLossParameter_MatchType_MatchType_MAX = MultiBoxLossParameter_MatchType_PER_PREDICTION;
const int MultiBoxLossParameter_MatchType_MatchType_ARRAYSIZE = MultiBoxLossParameter_MatchType_MatchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MultiBoxLossParameter_MatchType_descriptor();
inline const ::std::string& MultiBoxLossParameter_MatchType_Name(MultiBoxLossParameter_MatchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MultiBoxLossParameter_MatchType_descriptor(), value);
}
inline bool MultiBoxLossParameter_MatchType_Parse(
    const ::std::string& name, MultiBoxLossParameter_MatchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MultiBoxLossParameter_MatchType>(
    MultiBoxLossParameter_MatchType_descriptor(), name, value);
}
enum BBoxLossParameter_EffectiveMode {
  BBoxLossParameter_EffectiveMode_BOTTOMSIZE = 1,
  BBoxLossParameter_EffectiveMode_IMAGESIZE = 2
};
bool BBoxLossParameter_EffectiveMode_IsValid(int value);
const BBoxLossParameter_EffectiveMode BBoxLossParameter_EffectiveMode_EffectiveMode_MIN = BBoxLossParameter_EffectiveMode_BOTTOMSIZE;
const BBoxLossParameter_EffectiveMode BBoxLossParameter_EffectiveMode_EffectiveMode_MAX = BBoxLossParameter_EffectiveMode_IMAGESIZE;
const int BBoxLossParameter_EffectiveMode_EffectiveMode_ARRAYSIZE = BBoxLossParameter_EffectiveMode_EffectiveMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* BBoxLossParameter_EffectiveMode_descriptor();
inline const ::std::string& BBoxLossParameter_EffectiveMode_Name(BBoxLossParameter_EffectiveMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    BBoxLossParameter_EffectiveMode_descriptor(), value);
}
inline bool BBoxLossParameter_EffectiveMode_Parse(
    const ::std::string& name, BBoxLossParameter_EffectiveMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BBoxLossParameter_EffectiveMode>(
    BBoxLossParameter_EffectiveMode_descriptor(), name, value);
}
enum BBoxLossParameter_MatchTypeAnchorGT {
  BBoxLossParameter_MatchTypeAnchorGT_WEIGHTIOU = 1,
  BBoxLossParameter_MatchTypeAnchorGT_EXTRACHECKCOVERAGE = 2,
  BBoxLossParameter_MatchTypeAnchorGT_REMOVELARGMARGIN = 3
};
bool BBoxLossParameter_MatchTypeAnchorGT_IsValid(int value);
const BBoxLossParameter_MatchTypeAnchorGT BBoxLossParameter_MatchTypeAnchorGT_MatchTypeAnchorGT_MIN = BBoxLossParameter_MatchTypeAnchorGT_WEIGHTIOU;
const BBoxLossParameter_MatchTypeAnchorGT BBoxLossParameter_MatchTypeAnchorGT_MatchTypeAnchorGT_MAX = BBoxLossParameter_MatchTypeAnchorGT_REMOVELARGMARGIN;
const int BBoxLossParameter_MatchTypeAnchorGT_MatchTypeAnchorGT_ARRAYSIZE = BBoxLossParameter_MatchTypeAnchorGT_MatchTypeAnchorGT_MAX + 1;

const ::google::protobuf::EnumDescriptor* BBoxLossParameter_MatchTypeAnchorGT_descriptor();
inline const ::std::string& BBoxLossParameter_MatchTypeAnchorGT_Name(BBoxLossParameter_MatchTypeAnchorGT value) {
  return ::google::protobuf::internal::NameOfEnum(
    BBoxLossParameter_MatchTypeAnchorGT_descriptor(), value);
}
inline bool BBoxLossParameter_MatchTypeAnchorGT_Parse(
    const ::std::string& name, BBoxLossParameter_MatchTypeAnchorGT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BBoxLossParameter_MatchTypeAnchorGT>(
    BBoxLossParameter_MatchTypeAnchorGT_descriptor(), name, value);
}
enum DenseBBoxLossParameter_EffectiveMode {
  DenseBBoxLossParameter_EffectiveMode_BOTTOMSIZE = 1,
  DenseBBoxLossParameter_EffectiveMode_IMAGESIZE = 2
};
bool DenseBBoxLossParameter_EffectiveMode_IsValid(int value);
const DenseBBoxLossParameter_EffectiveMode DenseBBoxLossParameter_EffectiveMode_EffectiveMode_MIN = DenseBBoxLossParameter_EffectiveMode_BOTTOMSIZE;
const DenseBBoxLossParameter_EffectiveMode DenseBBoxLossParameter_EffectiveMode_EffectiveMode_MAX = DenseBBoxLossParameter_EffectiveMode_IMAGESIZE;
const int DenseBBoxLossParameter_EffectiveMode_EffectiveMode_ARRAYSIZE = DenseBBoxLossParameter_EffectiveMode_EffectiveMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* DenseBBoxLossParameter_EffectiveMode_descriptor();
inline const ::std::string& DenseBBoxLossParameter_EffectiveMode_Name(DenseBBoxLossParameter_EffectiveMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    DenseBBoxLossParameter_EffectiveMode_descriptor(), value);
}
inline bool DenseBBoxLossParameter_EffectiveMode_Parse(
    const ::std::string& name, DenseBBoxLossParameter_EffectiveMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DenseBBoxLossParameter_EffectiveMode>(
    DenseBBoxLossParameter_EffectiveMode_descriptor(), name, value);
}
enum MultiMcBoxLossParameter_ConfLossType {
  MultiMcBoxLossParameter_ConfLossType_SOFTMAX = 0,
  MultiMcBoxLossParameter_ConfLossType_LOGISTIC = 1
};
bool MultiMcBoxLossParameter_ConfLossType_IsValid(int value);
const MultiMcBoxLossParameter_ConfLossType MultiMcBoxLossParameter_ConfLossType_ConfLossType_MIN = MultiMcBoxLossParameter_ConfLossType_SOFTMAX;
const MultiMcBoxLossParameter_ConfLossType MultiMcBoxLossParameter_ConfLossType_ConfLossType_MAX = MultiMcBoxLossParameter_ConfLossType_LOGISTIC;
const int MultiMcBoxLossParameter_ConfLossType_ConfLossType_ARRAYSIZE = MultiMcBoxLossParameter_ConfLossType_ConfLossType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MultiMcBoxLossParameter_ConfLossType_descriptor();
inline const ::std::string& MultiMcBoxLossParameter_ConfLossType_Name(MultiMcBoxLossParameter_ConfLossType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MultiMcBoxLossParameter_ConfLossType_descriptor(), value);
}
inline bool MultiMcBoxLossParameter_ConfLossType_Parse(
    const ::std::string& name, MultiMcBoxLossParameter_ConfLossType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MultiMcBoxLossParameter_ConfLossType>(
    MultiMcBoxLossParameter_ConfLossType_descriptor(), name, value);
}
enum PoolingParameter_PoolMethod {
  PoolingParameter_PoolMethod_MAX = 0,
  PoolingParameter_PoolMethod_AVE = 1,
  PoolingParameter_PoolMethod_STOCHASTIC = 2
};
bool PoolingParameter_PoolMethod_IsValid(int value);
const PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MIN = PoolingParameter_PoolMethod_MAX;
const PoolingParameter_PoolMethod PoolingParameter_PoolMethod_PoolMethod_MAX = PoolingParameter_PoolMethod_STOCHASTIC;
const int PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE = PoolingParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_PoolMethod_descriptor();
inline const ::std::string& PoolingParameter_PoolMethod_Name(PoolingParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_PoolMethod_descriptor(), value);
}
inline bool PoolingParameter_PoolMethod_Parse(
    const ::std::string& name, PoolingParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_PoolMethod>(
    PoolingParameter_PoolMethod_descriptor(), name, value);
}
enum PoolingParameter_Engine {
  PoolingParameter_Engine_DEFAULT = 0,
  PoolingParameter_Engine_CAFFE = 1,
  PoolingParameter_Engine_CUDNN = 2
};
bool PoolingParameter_Engine_IsValid(int value);
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MIN = PoolingParameter_Engine_DEFAULT;
const PoolingParameter_Engine PoolingParameter_Engine_Engine_MAX = PoolingParameter_Engine_CUDNN;
const int PoolingParameter_Engine_Engine_ARRAYSIZE = PoolingParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* PoolingParameter_Engine_descriptor();
inline const ::std::string& PoolingParameter_Engine_Name(PoolingParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    PoolingParameter_Engine_descriptor(), value);
}
inline bool PoolingParameter_Engine_Parse(
    const ::std::string& name, PoolingParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PoolingParameter_Engine>(
    PoolingParameter_Engine_descriptor(), name, value);
}
enum PriorBoxParameter_CodeType {
  PriorBoxParameter_CodeType_CORNER = 1,
  PriorBoxParameter_CodeType_CENTER_SIZE = 2
};
bool PriorBoxParameter_CodeType_IsValid(int value);
const PriorBoxParameter_CodeType PriorBoxParameter_CodeType_CodeType_MIN = PriorBoxParameter_CodeType_CORNER;
const PriorBoxParameter_CodeType PriorBoxParameter_CodeType_CodeType_MAX = PriorBoxParameter_CodeType_CENTER_SIZE;
const int PriorBoxParameter_CodeType_CodeType_ARRAYSIZE = PriorBoxParameter_CodeType_CodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PriorBoxParameter_CodeType_descriptor();
inline const ::std::string& PriorBoxParameter_CodeType_Name(PriorBoxParameter_CodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PriorBoxParameter_CodeType_descriptor(), value);
}
inline bool PriorBoxParameter_CodeType_Parse(
    const ::std::string& name, PriorBoxParameter_CodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PriorBoxParameter_CodeType>(
    PriorBoxParameter_CodeType_descriptor(), name, value);
}
enum ReductionParameter_ReductionOp {
  ReductionParameter_ReductionOp_SUM = 1,
  ReductionParameter_ReductionOp_ASUM = 2,
  ReductionParameter_ReductionOp_SUMSQ = 3,
  ReductionParameter_ReductionOp_MEAN = 4
};
bool ReductionParameter_ReductionOp_IsValid(int value);
const ReductionParameter_ReductionOp ReductionParameter_ReductionOp_ReductionOp_MIN = ReductionParameter_ReductionOp_SUM;
const ReductionParameter_ReductionOp ReductionParameter_ReductionOp_ReductionOp_MAX = ReductionParameter_ReductionOp_MEAN;
const int ReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE = ReductionParameter_ReductionOp_ReductionOp_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReductionParameter_ReductionOp_descriptor();
inline const ::std::string& ReductionParameter_ReductionOp_Name(ReductionParameter_ReductionOp value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReductionParameter_ReductionOp_descriptor(), value);
}
inline bool ReductionParameter_ReductionOp_Parse(
    const ::std::string& name, ReductionParameter_ReductionOp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReductionParameter_ReductionOp>(
    ReductionParameter_ReductionOp_descriptor(), name, value);
}
enum ReLUParameter_Engine {
  ReLUParameter_Engine_DEFAULT = 0,
  ReLUParameter_Engine_CAFFE = 1,
  ReLUParameter_Engine_CUDNN = 2
};
bool ReLUParameter_Engine_IsValid(int value);
const ReLUParameter_Engine ReLUParameter_Engine_Engine_MIN = ReLUParameter_Engine_DEFAULT;
const ReLUParameter_Engine ReLUParameter_Engine_Engine_MAX = ReLUParameter_Engine_CUDNN;
const int ReLUParameter_Engine_Engine_ARRAYSIZE = ReLUParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReLUParameter_Engine_descriptor();
inline const ::std::string& ReLUParameter_Engine_Name(ReLUParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReLUParameter_Engine_descriptor(), value);
}
inline bool ReLUParameter_Engine_Parse(
    const ::std::string& name, ReLUParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReLUParameter_Engine>(
    ReLUParameter_Engine_descriptor(), name, value);
}
enum SigmoidParameter_Engine {
  SigmoidParameter_Engine_DEFAULT = 0,
  SigmoidParameter_Engine_CAFFE = 1,
  SigmoidParameter_Engine_CUDNN = 2
};
bool SigmoidParameter_Engine_IsValid(int value);
const SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MIN = SigmoidParameter_Engine_DEFAULT;
const SigmoidParameter_Engine SigmoidParameter_Engine_Engine_MAX = SigmoidParameter_Engine_CUDNN;
const int SigmoidParameter_Engine_Engine_ARRAYSIZE = SigmoidParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SigmoidParameter_Engine_descriptor();
inline const ::std::string& SigmoidParameter_Engine_Name(SigmoidParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SigmoidParameter_Engine_descriptor(), value);
}
inline bool SigmoidParameter_Engine_Parse(
    const ::std::string& name, SigmoidParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SigmoidParameter_Engine>(
    SigmoidParameter_Engine_descriptor(), name, value);
}
enum SoftmaxParameter_Engine {
  SoftmaxParameter_Engine_DEFAULT = 0,
  SoftmaxParameter_Engine_CAFFE = 1,
  SoftmaxParameter_Engine_CUDNN = 2
};
bool SoftmaxParameter_Engine_IsValid(int value);
const SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MIN = SoftmaxParameter_Engine_DEFAULT;
const SoftmaxParameter_Engine SoftmaxParameter_Engine_Engine_MAX = SoftmaxParameter_Engine_CUDNN;
const int SoftmaxParameter_Engine_Engine_ARRAYSIZE = SoftmaxParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SoftmaxParameter_Engine_descriptor();
inline const ::std::string& SoftmaxParameter_Engine_Name(SoftmaxParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SoftmaxParameter_Engine_descriptor(), value);
}
inline bool SoftmaxParameter_Engine_Parse(
    const ::std::string& name, SoftmaxParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SoftmaxParameter_Engine>(
    SoftmaxParameter_Engine_descriptor(), name, value);
}
enum TanHParameter_Engine {
  TanHParameter_Engine_DEFAULT = 0,
  TanHParameter_Engine_CAFFE = 1,
  TanHParameter_Engine_CUDNN = 2
};
bool TanHParameter_Engine_IsValid(int value);
const TanHParameter_Engine TanHParameter_Engine_Engine_MIN = TanHParameter_Engine_DEFAULT;
const TanHParameter_Engine TanHParameter_Engine_Engine_MAX = TanHParameter_Engine_CUDNN;
const int TanHParameter_Engine_Engine_ARRAYSIZE = TanHParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* TanHParameter_Engine_descriptor();
inline const ::std::string& TanHParameter_Engine_Name(TanHParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    TanHParameter_Engine_descriptor(), value);
}
inline bool TanHParameter_Engine_Parse(
    const ::std::string& name, TanHParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TanHParameter_Engine>(
    TanHParameter_Engine_descriptor(), name, value);
}
enum VideoDataParameter_VideoType {
  VideoDataParameter_VideoType_WEBCAM = 0,
  VideoDataParameter_VideoType_VIDEO = 1
};
bool VideoDataParameter_VideoType_IsValid(int value);
const VideoDataParameter_VideoType VideoDataParameter_VideoType_VideoType_MIN = VideoDataParameter_VideoType_WEBCAM;
const VideoDataParameter_VideoType VideoDataParameter_VideoType_VideoType_MAX = VideoDataParameter_VideoType_VIDEO;
const int VideoDataParameter_VideoType_VideoType_ARRAYSIZE = VideoDataParameter_VideoType_VideoType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VideoDataParameter_VideoType_descriptor();
inline const ::std::string& VideoDataParameter_VideoType_Name(VideoDataParameter_VideoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VideoDataParameter_VideoType_descriptor(), value);
}
inline bool VideoDataParameter_VideoType_Parse(
    const ::std::string& name, VideoDataParameter_VideoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VideoDataParameter_VideoType>(
    VideoDataParameter_VideoType_descriptor(), name, value);
}
enum VideoframeParameter_VideoType {
  VideoframeParameter_VideoType_WEBCAM = 0,
  VideoframeParameter_VideoType_VIDEO = 1
};
bool VideoframeParameter_VideoType_IsValid(int value);
const VideoframeParameter_VideoType VideoframeParameter_VideoType_VideoType_MIN = VideoframeParameter_VideoType_WEBCAM;
const VideoframeParameter_VideoType VideoframeParameter_VideoType_VideoType_MAX = VideoframeParameter_VideoType_VIDEO;
const int VideoframeParameter_VideoType_VideoType_ARRAYSIZE = VideoframeParameter_VideoType_VideoType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VideoframeParameter_VideoType_descriptor();
inline const ::std::string& VideoframeParameter_VideoType_Name(VideoframeParameter_VideoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VideoframeParameter_VideoType_descriptor(), value);
}
inline bool VideoframeParameter_VideoType_Parse(
    const ::std::string& name, VideoframeParameter_VideoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VideoframeParameter_VideoType>(
    VideoframeParameter_VideoType_descriptor(), name, value);
}
enum VisualizeposeParameter_DrawType {
  VisualizeposeParameter_DrawType_POSE = 0,
  VisualizeposeParameter_DrawType_HEATMAP_ID = 1,
  VisualizeposeParameter_DrawType_HEATMAP_FROM = 2,
  VisualizeposeParameter_DrawType_VECMAP_ID = 3,
  VisualizeposeParameter_DrawType_VECMAP_FROM = 4
};
bool VisualizeposeParameter_DrawType_IsValid(int value);
const VisualizeposeParameter_DrawType VisualizeposeParameter_DrawType_DrawType_MIN = VisualizeposeParameter_DrawType_POSE;
const VisualizeposeParameter_DrawType VisualizeposeParameter_DrawType_DrawType_MAX = VisualizeposeParameter_DrawType_VECMAP_FROM;
const int VisualizeposeParameter_DrawType_DrawType_ARRAYSIZE = VisualizeposeParameter_DrawType_DrawType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VisualizeposeParameter_DrawType_descriptor();
inline const ::std::string& VisualizeposeParameter_DrawType_Name(VisualizeposeParameter_DrawType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VisualizeposeParameter_DrawType_descriptor(), value);
}
inline bool VisualizeposeParameter_DrawType_Parse(
    const ::std::string& name, VisualizeposeParameter_DrawType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VisualizeposeParameter_DrawType>(
    VisualizeposeParameter_DrawType_descriptor(), name, value);
}
enum VisualizeBoxposeParameter_BPDrawType {
  VisualizeBoxposeParameter_BPDrawType_BOX = 0,
  VisualizeBoxposeParameter_BPDrawType_POSE = 1,
  VisualizeBoxposeParameter_BPDrawType_HEATMAP = 2,
  VisualizeBoxposeParameter_BPDrawType_VECMAP = 3,
  VisualizeBoxposeParameter_BPDrawType_POSE_BOX = 4,
  VisualizeBoxposeParameter_BPDrawType_HEATMAP_BOX = 5,
  VisualizeBoxposeParameter_BPDrawType_VECMAP_BOX = 6
};
bool VisualizeBoxposeParameter_BPDrawType_IsValid(int value);
const VisualizeBoxposeParameter_BPDrawType VisualizeBoxposeParameter_BPDrawType_BPDrawType_MIN = VisualizeBoxposeParameter_BPDrawType_BOX;
const VisualizeBoxposeParameter_BPDrawType VisualizeBoxposeParameter_BPDrawType_BPDrawType_MAX = VisualizeBoxposeParameter_BPDrawType_VECMAP_BOX;
const int VisualizeBoxposeParameter_BPDrawType_BPDrawType_ARRAYSIZE = VisualizeBoxposeParameter_BPDrawType_BPDrawType_MAX + 1;

const ::google::protobuf::EnumDescriptor* VisualizeBoxposeParameter_BPDrawType_descriptor();
inline const ::std::string& VisualizeBoxposeParameter_BPDrawType_Name(VisualizeBoxposeParameter_BPDrawType value) {
  return ::google::protobuf::internal::NameOfEnum(
    VisualizeBoxposeParameter_BPDrawType_descriptor(), value);
}
inline bool VisualizeBoxposeParameter_BPDrawType_Parse(
    const ::std::string& name, VisualizeBoxposeParameter_BPDrawType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VisualizeBoxposeParameter_BPDrawType>(
    VisualizeBoxposeParameter_BPDrawType_descriptor(), name, value);
}
enum SPPParameter_PoolMethod {
  SPPParameter_PoolMethod_MAX = 0,
  SPPParameter_PoolMethod_AVE = 1,
  SPPParameter_PoolMethod_STOCHASTIC = 2
};
bool SPPParameter_PoolMethod_IsValid(int value);
const SPPParameter_PoolMethod SPPParameter_PoolMethod_PoolMethod_MIN = SPPParameter_PoolMethod_MAX;
const SPPParameter_PoolMethod SPPParameter_PoolMethod_PoolMethod_MAX = SPPParameter_PoolMethod_STOCHASTIC;
const int SPPParameter_PoolMethod_PoolMethod_ARRAYSIZE = SPPParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* SPPParameter_PoolMethod_descriptor();
inline const ::std::string& SPPParameter_PoolMethod_Name(SPPParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    SPPParameter_PoolMethod_descriptor(), value);
}
inline bool SPPParameter_PoolMethod_Parse(
    const ::std::string& name, SPPParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SPPParameter_PoolMethod>(
    SPPParameter_PoolMethod_descriptor(), name, value);
}
enum SPPParameter_Engine {
  SPPParameter_Engine_DEFAULT = 0,
  SPPParameter_Engine_CAFFE = 1,
  SPPParameter_Engine_CUDNN = 2
};
bool SPPParameter_Engine_IsValid(int value);
const SPPParameter_Engine SPPParameter_Engine_Engine_MIN = SPPParameter_Engine_DEFAULT;
const SPPParameter_Engine SPPParameter_Engine_Engine_MAX = SPPParameter_Engine_CUDNN;
const int SPPParameter_Engine_Engine_ARRAYSIZE = SPPParameter_Engine_Engine_MAX + 1;

const ::google::protobuf::EnumDescriptor* SPPParameter_Engine_descriptor();
inline const ::std::string& SPPParameter_Engine_Name(SPPParameter_Engine value) {
  return ::google::protobuf::internal::NameOfEnum(
    SPPParameter_Engine_descriptor(), value);
}
inline bool SPPParameter_Engine_Parse(
    const ::std::string& name, SPPParameter_Engine* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SPPParameter_Engine>(
    SPPParameter_Engine_descriptor(), name, value);
}
enum V1LayerParameter_LayerType {
  V1LayerParameter_LayerType_NONE = 0,
  V1LayerParameter_LayerType_ABSVAL = 35,
  V1LayerParameter_LayerType_ACCURACY = 1,
  V1LayerParameter_LayerType_ARGMAX = 30,
  V1LayerParameter_LayerType_BNLL = 2,
  V1LayerParameter_LayerType_CONCAT = 3,
  V1LayerParameter_LayerType_CONTRASTIVE_LOSS = 37,
  V1LayerParameter_LayerType_CONVOLUTION = 4,
  V1LayerParameter_LayerType_DATA = 5,
  V1LayerParameter_LayerType_DECONVOLUTION = 39,
  V1LayerParameter_LayerType_DROPOUT = 6,
  V1LayerParameter_LayerType_DUMMY_DATA = 32,
  V1LayerParameter_LayerType_EUCLIDEAN_LOSS = 7,
  V1LayerParameter_LayerType_ELTWISE = 25,
  V1LayerParameter_LayerType_EXP = 38,
  V1LayerParameter_LayerType_FLATTEN = 8,
  V1LayerParameter_LayerType_HDF5_DATA = 9,
  V1LayerParameter_LayerType_HDF5_OUTPUT = 10,
  V1LayerParameter_LayerType_HINGE_LOSS = 28,
  V1LayerParameter_LayerType_IM2COL = 11,
  V1LayerParameter_LayerType_IMAGE_DATA = 12,
  V1LayerParameter_LayerType_INFOGAIN_LOSS = 13,
  V1LayerParameter_LayerType_INNER_PRODUCT = 14,
  V1LayerParameter_LayerType_LRN = 15,
  V1LayerParameter_LayerType_MEMORY_DATA = 29,
  V1LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS = 16,
  V1LayerParameter_LayerType_MVN = 34,
  V1LayerParameter_LayerType_POOLING = 17,
  V1LayerParameter_LayerType_POWER = 26,
  V1LayerParameter_LayerType_RELU = 18,
  V1LayerParameter_LayerType_SIGMOID = 19,
  V1LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS = 27,
  V1LayerParameter_LayerType_SILENCE = 36,
  V1LayerParameter_LayerType_SOFTMAX = 20,
  V1LayerParameter_LayerType_SOFTMAX_LOSS = 21,
  V1LayerParameter_LayerType_SPLIT = 22,
  V1LayerParameter_LayerType_SLICE = 33,
  V1LayerParameter_LayerType_TANH = 23,
  V1LayerParameter_LayerType_WINDOW_DATA = 24,
  V1LayerParameter_LayerType_THRESHOLD = 31
};
bool V1LayerParameter_LayerType_IsValid(int value);
const V1LayerParameter_LayerType V1LayerParameter_LayerType_LayerType_MIN = V1LayerParameter_LayerType_NONE;
const V1LayerParameter_LayerType V1LayerParameter_LayerType_LayerType_MAX = V1LayerParameter_LayerType_DECONVOLUTION;
const int V1LayerParameter_LayerType_LayerType_ARRAYSIZE = V1LayerParameter_LayerType_LayerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* V1LayerParameter_LayerType_descriptor();
inline const ::std::string& V1LayerParameter_LayerType_Name(V1LayerParameter_LayerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    V1LayerParameter_LayerType_descriptor(), value);
}
inline bool V1LayerParameter_LayerType_Parse(
    const ::std::string& name, V1LayerParameter_LayerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V1LayerParameter_LayerType>(
    V1LayerParameter_LayerType_descriptor(), name, value);
}
enum V1LayerParameter_DimCheckMode {
  V1LayerParameter_DimCheckMode_STRICT = 0,
  V1LayerParameter_DimCheckMode_PERMISSIVE = 1
};
bool V1LayerParameter_DimCheckMode_IsValid(int value);
const V1LayerParameter_DimCheckMode V1LayerParameter_DimCheckMode_DimCheckMode_MIN = V1LayerParameter_DimCheckMode_STRICT;
const V1LayerParameter_DimCheckMode V1LayerParameter_DimCheckMode_DimCheckMode_MAX = V1LayerParameter_DimCheckMode_PERMISSIVE;
const int V1LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE = V1LayerParameter_DimCheckMode_DimCheckMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* V1LayerParameter_DimCheckMode_descriptor();
inline const ::std::string& V1LayerParameter_DimCheckMode_Name(V1LayerParameter_DimCheckMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    V1LayerParameter_DimCheckMode_descriptor(), value);
}
inline bool V1LayerParameter_DimCheckMode_Parse(
    const ::std::string& name, V1LayerParameter_DimCheckMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V1LayerParameter_DimCheckMode>(
    V1LayerParameter_DimCheckMode_descriptor(), name, value);
}
enum V0LayerParameter_PoolMethod {
  V0LayerParameter_PoolMethod_MAX = 0,
  V0LayerParameter_PoolMethod_AVE = 1,
  V0LayerParameter_PoolMethod_STOCHASTIC = 2
};
bool V0LayerParameter_PoolMethod_IsValid(int value);
const V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MIN = V0LayerParameter_PoolMethod_MAX;
const V0LayerParameter_PoolMethod V0LayerParameter_PoolMethod_PoolMethod_MAX = V0LayerParameter_PoolMethod_STOCHASTIC;
const int V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE = V0LayerParameter_PoolMethod_PoolMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* V0LayerParameter_PoolMethod_descriptor();
inline const ::std::string& V0LayerParameter_PoolMethod_Name(V0LayerParameter_PoolMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    V0LayerParameter_PoolMethod_descriptor(), value);
}
inline bool V0LayerParameter_PoolMethod_Parse(
    const ::std::string& name, V0LayerParameter_PoolMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<V0LayerParameter_PoolMethod>(
    V0LayerParameter_PoolMethod_descriptor(), name, value);
}
enum Phase {
  TRAIN = 0,
  TEST = 1
};
bool Phase_IsValid(int value);
const Phase Phase_MIN = TRAIN;
const Phase Phase_MAX = TEST;
const int Phase_ARRAYSIZE = Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* Phase_descriptor();
inline const ::std::string& Phase_Name(Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    Phase_descriptor(), value);
}
inline bool Phase_Parse(
    const ::std::string& name, Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Phase>(
    Phase_descriptor(), name, value);
}
// ===================================================================

class BlobShape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BlobShape) */ {
 public:
  BlobShape();
  virtual ~BlobShape();

  BlobShape(const BlobShape& from);

  inline BlobShape& operator=(const BlobShape& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobShape& default_instance();

  void Swap(BlobShape* other);

  // implements Message ----------------------------------------------

  inline BlobShape* New() const { return New(NULL); }

  BlobShape* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobShape& from);
  void MergeFrom(const BlobShape& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlobShape* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 dim = 1 [packed = true];
  int dim_size() const;
  void clear_dim();
  static const int kDimFieldNumber = 1;
  ::google::protobuf::int64 dim(int index) const;
  void set_dim(int index, ::google::protobuf::int64 value);
  void add_dim(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_dim();

  // @@protoc_insertion_point(class_scope:caffe.BlobShape)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > dim_;
  mutable int _dim_cached_byte_size_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static BlobShape* default_instance_;
};
// -------------------------------------------------------------------

class BlobProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BlobProto) */ {
 public:
  BlobProto();
  virtual ~BlobProto();

  BlobProto(const BlobProto& from);

  inline BlobProto& operator=(const BlobProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProto& default_instance();

  void Swap(BlobProto* other);

  // implements Message ----------------------------------------------

  inline BlobProto* New() const { return New(NULL); }

  BlobProto* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobProto& from);
  void MergeFrom(const BlobProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlobProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.BlobShape shape = 7;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 7;
  const ::caffe::BlobShape& shape() const;
  ::caffe::BlobShape* mutable_shape();
  ::caffe::BlobShape* release_shape();
  void set_allocated_shape(::caffe::BlobShape* shape);

  // repeated float data = 5 [packed = true];
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 5;
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // repeated float diff = 6 [packed = true];
  int diff_size() const;
  void clear_diff();
  static const int kDiffFieldNumber = 6;
  float diff(int index) const;
  void set_diff(int index, float value);
  void add_diff(float value);
  const ::google::protobuf::RepeatedField< float >&
      diff() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_diff();

  // repeated double double_data = 8 [packed = true];
  int double_data_size() const;
  void clear_double_data();
  static const int kDoubleDataFieldNumber = 8;
  double double_data(int index) const;
  void set_double_data(int index, double value);
  void add_double_data(double value);
  const ::google::protobuf::RepeatedField< double >&
      double_data() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_double_data();

  // repeated double double_diff = 9 [packed = true];
  int double_diff_size() const;
  void clear_double_diff();
  static const int kDoubleDiffFieldNumber = 9;
  double double_diff(int index) const;
  void set_double_diff(int index, double value);
  void add_double_diff(double value);
  const ::google::protobuf::RepeatedField< double >&
      double_diff() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_double_diff();

  // optional int32 num = 1 [default = 0];
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 1;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // optional int32 channels = 2 [default = 0];
  bool has_channels() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 2;
  ::google::protobuf::int32 channels() const;
  void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 3 [default = 0];
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 width = 4 [default = 0];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.BlobProto)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::BlobShape* shape_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > diff_;
  mutable int _diff_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_data_;
  mutable int _double_data_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > double_diff_;
  mutable int _double_diff_cached_byte_size_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static BlobProto* default_instance_;
};
// -------------------------------------------------------------------

class BlobProtoVector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BlobProtoVector) */ {
 public:
  BlobProtoVector();
  virtual ~BlobProtoVector();

  BlobProtoVector(const BlobProtoVector& from);

  inline BlobProtoVector& operator=(const BlobProtoVector& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlobProtoVector& default_instance();

  void Swap(BlobProtoVector* other);

  // implements Message ----------------------------------------------

  inline BlobProtoVector* New() const { return New(NULL); }

  BlobProtoVector* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlobProtoVector& from);
  void MergeFrom(const BlobProtoVector& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlobProtoVector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobProto blobs = 1;
  int blobs_size() const;
  void clear_blobs();
  static const int kBlobsFieldNumber = 1;
  const ::caffe::BlobProto& blobs(int index) const;
  ::caffe::BlobProto* mutable_blobs(int index);
  ::caffe::BlobProto* add_blobs();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;

  // @@protoc_insertion_point(class_scope:caffe.BlobProtoVector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static BlobProtoVector* default_instance_;
};
// -------------------------------------------------------------------

class Datum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.Datum) */ {
 public:
  Datum();
  virtual ~Datum();

  Datum(const Datum& from);

  inline Datum& operator=(const Datum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Datum& default_instance();

  void Swap(Datum* other);

  // implements Message ----------------------------------------------

  inline Datum* New() const { return New(NULL); }

  Datum* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Datum& from);
  void MergeFrom(const Datum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Datum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 channels = 1;
  bool has_channels() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 1;
  ::google::protobuf::int32 channels() const;
  void set_channels(::google::protobuf::int32 value);

  // optional int32 height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 width = 3;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional bytes data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional int32 label = 5;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 5;
  ::google::protobuf::int32 label() const;
  void set_label(::google::protobuf::int32 value);

  // repeated float float_data = 6;
  int float_data_size() const;
  void clear_float_data();
  static const int kFloatDataFieldNumber = 6;
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      float_data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_float_data();

  // optional bool encoded = 7 [default = false];
  bool has_encoded() const;
  void clear_encoded();
  static const int kEncodedFieldNumber = 7;
  bool encoded() const;
  void set_encoded(bool value);

  // @@protoc_insertion_point(class_scope:caffe.Datum)
 private:
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_encoded();
  inline void clear_has_encoded();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 channels_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 label_;
  ::google::protobuf::RepeatedField< float > float_data_;
  bool encoded_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static Datum* default_instance_;
};
// -------------------------------------------------------------------

class LabelMapItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LabelMapItem) */ {
 public:
  LabelMapItem();
  virtual ~LabelMapItem();

  LabelMapItem(const LabelMapItem& from);

  inline LabelMapItem& operator=(const LabelMapItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelMapItem& default_instance();

  void Swap(LabelMapItem* other);

  // implements Message ----------------------------------------------

  inline LabelMapItem* New() const { return New(NULL); }

  LabelMapItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabelMapItem& from);
  void MergeFrom(const LabelMapItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LabelMapItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 label = 2;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 2;
  ::google::protobuf::int32 label() const;
  void set_label(::google::protobuf::int32 value);

  // optional string display_name = 3;
  bool has_display_name() const;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 3;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // @@protoc_insertion_point(class_scope:caffe.LabelMapItem)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_display_name();
  inline void clear_has_display_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::int32 label_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static LabelMapItem* default_instance_;
};
// -------------------------------------------------------------------

class LabelMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LabelMap) */ {
 public:
  LabelMap();
  virtual ~LabelMap();

  LabelMap(const LabelMap& from);

  inline LabelMap& operator=(const LabelMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabelMap& default_instance();

  void Swap(LabelMap* other);

  // implements Message ----------------------------------------------

  inline LabelMap* New() const { return New(NULL); }

  LabelMap* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabelMap& from);
  void MergeFrom(const LabelMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LabelMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.LabelMapItem item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  const ::caffe::LabelMapItem& item(int index) const;
  ::caffe::LabelMapItem* mutable_item(int index);
  ::caffe::LabelMapItem* add_item();
  ::google::protobuf::RepeatedPtrField< ::caffe::LabelMapItem >*
      mutable_item();
  const ::google::protobuf::RepeatedPtrField< ::caffe::LabelMapItem >&
      item() const;

  // @@protoc_insertion_point(class_scope:caffe.LabelMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::LabelMapItem > item_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static LabelMap* default_instance_;
};
// -------------------------------------------------------------------

class Sampler : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.Sampler) */ {
 public:
  Sampler();
  virtual ~Sampler();

  Sampler(const Sampler& from);

  inline Sampler& operator=(const Sampler& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sampler& default_instance();

  void Swap(Sampler* other);

  // implements Message ----------------------------------------------

  inline Sampler* New() const { return New(NULL); }

  Sampler* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sampler& from);
  void MergeFrom(const Sampler& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Sampler* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float min_scale = 1 [default = 1];
  bool has_min_scale() const;
  void clear_min_scale();
  static const int kMinScaleFieldNumber = 1;
  float min_scale() const;
  void set_min_scale(float value);

  // optional float max_scale = 2 [default = 1];
  bool has_max_scale() const;
  void clear_max_scale();
  static const int kMaxScaleFieldNumber = 2;
  float max_scale() const;
  void set_max_scale(float value);

  // optional float min_aspect_ratio = 3 [default = 1];
  bool has_min_aspect_ratio() const;
  void clear_min_aspect_ratio();
  static const int kMinAspectRatioFieldNumber = 3;
  float min_aspect_ratio() const;
  void set_min_aspect_ratio(float value);

  // optional float max_aspect_ratio = 4 [default = 1];
  bool has_max_aspect_ratio() const;
  void clear_max_aspect_ratio();
  static const int kMaxAspectRatioFieldNumber = 4;
  float max_aspect_ratio() const;
  void set_max_aspect_ratio(float value);

  // @@protoc_insertion_point(class_scope:caffe.Sampler)
 private:
  inline void set_has_min_scale();
  inline void clear_has_min_scale();
  inline void set_has_max_scale();
  inline void clear_has_max_scale();
  inline void set_has_min_aspect_ratio();
  inline void clear_has_min_aspect_ratio();
  inline void set_has_max_aspect_ratio();
  inline void clear_has_max_aspect_ratio();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float min_scale_;
  float max_scale_;
  float min_aspect_ratio_;
  float max_aspect_ratio_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static Sampler* default_instance_;
};
// -------------------------------------------------------------------

class SampleConstraint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SampleConstraint) */ {
 public:
  SampleConstraint();
  virtual ~SampleConstraint();

  SampleConstraint(const SampleConstraint& from);

  inline SampleConstraint& operator=(const SampleConstraint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SampleConstraint& default_instance();

  void Swap(SampleConstraint* other);

  // implements Message ----------------------------------------------

  inline SampleConstraint* New() const { return New(NULL); }

  SampleConstraint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SampleConstraint& from);
  void MergeFrom(const SampleConstraint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SampleConstraint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float min_jaccard_overlap = 1;
  bool has_min_jaccard_overlap() const;
  void clear_min_jaccard_overlap();
  static const int kMinJaccardOverlapFieldNumber = 1;
  float min_jaccard_overlap() const;
  void set_min_jaccard_overlap(float value);

  // optional float max_jaccard_overlap = 2;
  bool has_max_jaccard_overlap() const;
  void clear_max_jaccard_overlap();
  static const int kMaxJaccardOverlapFieldNumber = 2;
  float max_jaccard_overlap() const;
  void set_max_jaccard_overlap(float value);

  // optional float min_sample_coverage = 3;
  bool has_min_sample_coverage() const;
  void clear_min_sample_coverage();
  static const int kMinSampleCoverageFieldNumber = 3;
  float min_sample_coverage() const;
  void set_min_sample_coverage(float value);

  // optional float max_sample_coverage = 4;
  bool has_max_sample_coverage() const;
  void clear_max_sample_coverage();
  static const int kMaxSampleCoverageFieldNumber = 4;
  float max_sample_coverage() const;
  void set_max_sample_coverage(float value);

  // optional float min_object_coverage = 5;
  bool has_min_object_coverage() const;
  void clear_min_object_coverage();
  static const int kMinObjectCoverageFieldNumber = 5;
  float min_object_coverage() const;
  void set_min_object_coverage(float value);

  // optional float max_object_coverage = 6;
  bool has_max_object_coverage() const;
  void clear_max_object_coverage();
  static const int kMaxObjectCoverageFieldNumber = 6;
  float max_object_coverage() const;
  void set_max_object_coverage(float value);

  // @@protoc_insertion_point(class_scope:caffe.SampleConstraint)
 private:
  inline void set_has_min_jaccard_overlap();
  inline void clear_has_min_jaccard_overlap();
  inline void set_has_max_jaccard_overlap();
  inline void clear_has_max_jaccard_overlap();
  inline void set_has_min_sample_coverage();
  inline void clear_has_min_sample_coverage();
  inline void set_has_max_sample_coverage();
  inline void clear_has_max_sample_coverage();
  inline void set_has_min_object_coverage();
  inline void clear_has_min_object_coverage();
  inline void set_has_max_object_coverage();
  inline void clear_has_max_object_coverage();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float min_jaccard_overlap_;
  float max_jaccard_overlap_;
  float min_sample_coverage_;
  float max_sample_coverage_;
  float min_object_coverage_;
  float max_object_coverage_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SampleConstraint* default_instance_;
};
// -------------------------------------------------------------------

class BatchSampler : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BatchSampler) */ {
 public:
  BatchSampler();
  virtual ~BatchSampler();

  BatchSampler(const BatchSampler& from);

  inline BatchSampler& operator=(const BatchSampler& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchSampler& default_instance();

  void Swap(BatchSampler* other);

  // implements Message ----------------------------------------------

  inline BatchSampler* New() const { return New(NULL); }

  BatchSampler* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchSampler& from);
  void MergeFrom(const BatchSampler& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BatchSampler* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_original_image = 1 [default = true];
  bool has_use_original_image() const;
  void clear_use_original_image();
  static const int kUseOriginalImageFieldNumber = 1;
  bool use_original_image() const;
  void set_use_original_image(bool value);

  // optional .caffe.Sampler sampler = 2;
  bool has_sampler() const;
  void clear_sampler();
  static const int kSamplerFieldNumber = 2;
  const ::caffe::Sampler& sampler() const;
  ::caffe::Sampler* mutable_sampler();
  ::caffe::Sampler* release_sampler();
  void set_allocated_sampler(::caffe::Sampler* sampler);

  // optional .caffe.SampleConstraint sample_constraint = 3;
  bool has_sample_constraint() const;
  void clear_sample_constraint();
  static const int kSampleConstraintFieldNumber = 3;
  const ::caffe::SampleConstraint& sample_constraint() const;
  ::caffe::SampleConstraint* mutable_sample_constraint();
  ::caffe::SampleConstraint* release_sample_constraint();
  void set_allocated_sample_constraint(::caffe::SampleConstraint* sample_constraint);

  // optional uint32 max_sample = 4;
  bool has_max_sample() const;
  void clear_max_sample();
  static const int kMaxSampleFieldNumber = 4;
  ::google::protobuf::uint32 max_sample() const;
  void set_max_sample(::google::protobuf::uint32 value);

  // optional uint32 max_trials = 5 [default = 100];
  bool has_max_trials() const;
  void clear_max_trials();
  static const int kMaxTrialsFieldNumber = 5;
  ::google::protobuf::uint32 max_trials() const;
  void set_max_trials(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.BatchSampler)
 private:
  inline void set_has_use_original_image();
  inline void clear_has_use_original_image();
  inline void set_has_sampler();
  inline void clear_has_sampler();
  inline void set_has_sample_constraint();
  inline void clear_has_sample_constraint();
  inline void set_has_max_sample();
  inline void clear_has_max_sample();
  inline void set_has_max_trials();
  inline void clear_has_max_trials();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::Sampler* sampler_;
  bool use_original_image_;
  ::google::protobuf::uint32 max_sample_;
  ::caffe::SampleConstraint* sample_constraint_;
  ::google::protobuf::uint32 max_trials_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static BatchSampler* default_instance_;
};
// -------------------------------------------------------------------

class EmitConstraint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.EmitConstraint) */ {
 public:
  EmitConstraint();
  virtual ~EmitConstraint();

  EmitConstraint(const EmitConstraint& from);

  inline EmitConstraint& operator=(const EmitConstraint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmitConstraint& default_instance();

  void Swap(EmitConstraint* other);

  // implements Message ----------------------------------------------

  inline EmitConstraint* New() const { return New(NULL); }

  EmitConstraint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmitConstraint& from);
  void MergeFrom(const EmitConstraint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EmitConstraint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EmitConstraint_EmitType EmitType;
  static const EmitType CENTER =
    EmitConstraint_EmitType_CENTER;
  static const EmitType MIN_OVERLAP =
    EmitConstraint_EmitType_MIN_OVERLAP;
  static inline bool EmitType_IsValid(int value) {
    return EmitConstraint_EmitType_IsValid(value);
  }
  static const EmitType EmitType_MIN =
    EmitConstraint_EmitType_EmitType_MIN;
  static const EmitType EmitType_MAX =
    EmitConstraint_EmitType_EmitType_MAX;
  static const int EmitType_ARRAYSIZE =
    EmitConstraint_EmitType_EmitType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EmitType_descriptor() {
    return EmitConstraint_EmitType_descriptor();
  }
  static inline const ::std::string& EmitType_Name(EmitType value) {
    return EmitConstraint_EmitType_Name(value);
  }
  static inline bool EmitType_Parse(const ::std::string& name,
      EmitType* value) {
    return EmitConstraint_EmitType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.EmitConstraint.EmitType emit_type = 1 [default = CENTER];
  bool has_emit_type() const;
  void clear_emit_type();
  static const int kEmitTypeFieldNumber = 1;
  ::caffe::EmitConstraint_EmitType emit_type() const;
  void set_emit_type(::caffe::EmitConstraint_EmitType value);

  // optional float emit_overlap = 2;
  bool has_emit_overlap() const;
  void clear_emit_overlap();
  static const int kEmitOverlapFieldNumber = 2;
  float emit_overlap() const;
  void set_emit_overlap(float value);

  // optional float emit_overlap_dir = 3;
  bool has_emit_overlap_dir() const;
  void clear_emit_overlap_dir();
  static const int kEmitOverlapDirFieldNumber = 3;
  float emit_overlap_dir() const;
  void set_emit_overlap_dir(float value);

  // optional float emit_overlap_pose = 4;
  bool has_emit_overlap_pose() const;
  void clear_emit_overlap_pose();
  static const int kEmitOverlapPoseFieldNumber = 4;
  float emit_overlap_pose() const;
  void set_emit_overlap_pose(float value);

  // @@protoc_insertion_point(class_scope:caffe.EmitConstraint)
 private:
  inline void set_has_emit_type();
  inline void clear_has_emit_type();
  inline void set_has_emit_overlap();
  inline void clear_has_emit_overlap();
  inline void set_has_emit_overlap_dir();
  inline void clear_has_emit_overlap_dir();
  inline void set_has_emit_overlap_pose();
  inline void clear_has_emit_overlap_pose();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int emit_type_;
  float emit_overlap_;
  float emit_overlap_dir_;
  float emit_overlap_pose_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static EmitConstraint* default_instance_;
};
// -------------------------------------------------------------------

class NormalizedBBox : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NormalizedBBox) */ {
 public:
  NormalizedBBox();
  virtual ~NormalizedBBox();

  NormalizedBBox(const NormalizedBBox& from);

  inline NormalizedBBox& operator=(const NormalizedBBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NormalizedBBox& default_instance();

  void Swap(NormalizedBBox* other);

  // implements Message ----------------------------------------------

  inline NormalizedBBox* New() const { return New(NULL); }

  NormalizedBBox* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NormalizedBBox& from);
  void MergeFrom(const NormalizedBBox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NormalizedBBox* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float xmin = 1;
  bool has_xmin() const;
  void clear_xmin();
  static const int kXminFieldNumber = 1;
  float xmin() const;
  void set_xmin(float value);

  // optional float ymin = 2;
  bool has_ymin() const;
  void clear_ymin();
  static const int kYminFieldNumber = 2;
  float ymin() const;
  void set_ymin(float value);

  // optional float xmax = 3;
  bool has_xmax() const;
  void clear_xmax();
  static const int kXmaxFieldNumber = 3;
  float xmax() const;
  void set_xmax(float value);

  // optional float ymax = 4;
  bool has_ymax() const;
  void clear_ymax();
  static const int kYmaxFieldNumber = 4;
  float ymax() const;
  void set_ymax(float value);

  // optional int32 label = 5;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 5;
  ::google::protobuf::int32 label() const;
  void set_label(::google::protobuf::int32 value);

  // optional bool difficult = 6 [default = false];
  bool has_difficult() const;
  void clear_difficult();
  static const int kDifficultFieldNumber = 6;
  bool difficult() const;
  void set_difficult(bool value);

  // optional float score = 7;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 7;
  float score() const;
  void set_score(float value);

  // optional float size = 8;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 8;
  float size() const;
  void set_size(float value);

  // optional int32 pose = 9 [default = 0];
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 9;
  ::google::protobuf::int32 pose() const;
  void set_pose(::google::protobuf::int32 value);

  // optional int32 dir = 10 [default = 0];
  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 10;
  ::google::protobuf::int32 dir() const;
  void set_dir(::google::protobuf::int32 value);

  // optional bool truncated = 11 [default = true];
  bool has_truncated() const;
  void clear_truncated();
  static const int kTruncatedFieldNumber = 11;
  bool truncated() const;
  void set_truncated(bool value);

  // optional bool main = 12 [default = false];
  bool has_main() const;
  void clear_main();
  static const int kMainFieldNumber = 12;
  bool main() const;
  void set_main(bool value);

  // optional float pose_conf = 13 [default = 0];
  bool has_pose_conf() const;
  void clear_pose_conf();
  static const int kPoseConfFieldNumber = 13;
  float pose_conf() const;
  void set_pose_conf(float value);

  // optional float dir_conf = 14 [default = 0];
  bool has_dir_conf() const;
  void clear_dir_conf();
  static const int kDirConfFieldNumber = 14;
  float dir_conf() const;
  void set_dir_conf(float value);

  // optional bool state = 15 [default = false];
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 15;
  bool state() const;
  void set_state(bool value);

  // @@protoc_insertion_point(class_scope:caffe.NormalizedBBox)
 private:
  inline void set_has_xmin();
  inline void clear_has_xmin();
  inline void set_has_ymin();
  inline void clear_has_ymin();
  inline void set_has_xmax();
  inline void clear_has_xmax();
  inline void set_has_ymax();
  inline void clear_has_ymax();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_difficult();
  inline void clear_has_difficult();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_pose();
  inline void clear_has_pose();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_truncated();
  inline void clear_has_truncated();
  inline void set_has_main();
  inline void clear_has_main();
  inline void set_has_pose_conf();
  inline void clear_has_pose_conf();
  inline void set_has_dir_conf();
  inline void clear_has_dir_conf();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float xmin_;
  float ymin_;
  float xmax_;
  float ymax_;
  ::google::protobuf::int32 label_;
  float score_;
  float size_;
  ::google::protobuf::int32 pose_;
  ::google::protobuf::int32 dir_;
  bool difficult_;
  bool truncated_;
  bool main_;
  bool state_;
  float pose_conf_;
  float dir_conf_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static NormalizedBBox* default_instance_;
};
// -------------------------------------------------------------------

class PersonBBox : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PersonBBox) */ {
 public:
  PersonBBox();
  virtual ~PersonBBox();

  PersonBBox(const PersonBBox& from);

  inline PersonBBox& operator=(const PersonBBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PersonBBox& default_instance();

  void Swap(PersonBBox* other);

  // implements Message ----------------------------------------------

  inline PersonBBox* New() const { return New(NULL); }

  PersonBBox* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PersonBBox& from);
  void MergeFrom(const PersonBBox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PersonBBox* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.NormalizedBBox body = 1;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 1;
  const ::caffe::NormalizedBBox& body() const;
  ::caffe::NormalizedBBox* mutable_body();
  ::caffe::NormalizedBBox* release_body();
  void set_allocated_body(::caffe::NormalizedBBox* body);

  // optional .caffe.NormalizedBBox head = 2;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 2;
  const ::caffe::NormalizedBBox& head() const;
  ::caffe::NormalizedBBox* mutable_head();
  ::caffe::NormalizedBBox* release_head();
  void set_allocated_head(::caffe::NormalizedBBox* head);

  // optional .caffe.NormalizedBBox torso = 3;
  bool has_torso() const;
  void clear_torso();
  static const int kTorsoFieldNumber = 3;
  const ::caffe::NormalizedBBox& torso() const;
  ::caffe::NormalizedBBox* mutable_torso();
  ::caffe::NormalizedBBox* release_torso();
  void set_allocated_torso(::caffe::NormalizedBBox* torso);

  // repeated .caffe.NormalizedBBox arm = 4;
  int arm_size() const;
  void clear_arm();
  static const int kArmFieldNumber = 4;
  const ::caffe::NormalizedBBox& arm(int index) const;
  ::caffe::NormalizedBBox* mutable_arm(int index);
  ::caffe::NormalizedBBox* add_arm();
  ::google::protobuf::RepeatedPtrField< ::caffe::NormalizedBBox >*
      mutable_arm();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NormalizedBBox >&
      arm() const;

  // repeated .caffe.NormalizedBBox leg = 5;
  int leg_size() const;
  void clear_leg();
  static const int kLegFieldNumber = 5;
  const ::caffe::NormalizedBBox& leg(int index) const;
  ::caffe::NormalizedBBox* mutable_leg(int index);
  ::caffe::NormalizedBBox* add_leg();
  ::google::protobuf::RepeatedPtrField< ::caffe::NormalizedBBox >*
      mutable_leg();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NormalizedBBox >&
      leg() const;

  // repeated .caffe.NormalizedBBox hand = 6;
  int hand_size() const;
  void clear_hand();
  static const int kHandFieldNumber = 6;
  const ::caffe::NormalizedBBox& hand(int index) const;
  ::caffe::NormalizedBBox* mutable_hand(int index);
  ::caffe::NormalizedBBox* add_hand();
  ::google::protobuf::RepeatedPtrField< ::caffe::NormalizedBBox >*
      mutable_hand();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NormalizedBBox >&
      hand() const;

  // repeated .caffe.NormalizedBBox foot = 7;
  int foot_size() const;
  void clear_foot();
  static const int kFootFieldNumber = 7;
  const ::caffe::NormalizedBBox& foot(int index) const;
  ::caffe::NormalizedBBox* mutable_foot(int index);
  ::caffe::NormalizedBBox* add_foot();
  ::google::protobuf::RepeatedPtrField< ::caffe::NormalizedBBox >*
      mutable_foot();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NormalizedBBox >&
      foot() const;

  // @@protoc_insertion_point(class_scope:caffe.PersonBBox)
 private:
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_torso();
  inline void clear_has_torso();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::NormalizedBBox* body_;
  ::caffe::NormalizedBBox* head_;
  ::caffe::NormalizedBBox* torso_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NormalizedBBox > arm_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NormalizedBBox > leg_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NormalizedBBox > hand_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NormalizedBBox > foot_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static PersonBBox* default_instance_;
};
// -------------------------------------------------------------------

class AnnotatedPersonDatum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.AnnotatedPersonDatum) */ {
 public:
  AnnotatedPersonDatum();
  virtual ~AnnotatedPersonDatum();

  AnnotatedPersonDatum(const AnnotatedPersonDatum& from);

  inline AnnotatedPersonDatum& operator=(const AnnotatedPersonDatum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnotatedPersonDatum& default_instance();

  void Swap(AnnotatedPersonDatum* other);

  // implements Message ----------------------------------------------

  inline AnnotatedPersonDatum* New() const { return New(NULL); }

  AnnotatedPersonDatum* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnnotatedPersonDatum& from);
  void MergeFrom(const AnnotatedPersonDatum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnnotatedPersonDatum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AnnotatedPersonDatum_AnnotatedPersonType AnnotatedPersonType;
  static const AnnotatedPersonType BBOX =
    AnnotatedPersonDatum_AnnotatedPersonType_BBOX;
  static inline bool AnnotatedPersonType_IsValid(int value) {
    return AnnotatedPersonDatum_AnnotatedPersonType_IsValid(value);
  }
  static const AnnotatedPersonType AnnotatedPersonType_MIN =
    AnnotatedPersonDatum_AnnotatedPersonType_AnnotatedPersonType_MIN;
  static const AnnotatedPersonType AnnotatedPersonType_MAX =
    AnnotatedPersonDatum_AnnotatedPersonType_AnnotatedPersonType_MAX;
  static const int AnnotatedPersonType_ARRAYSIZE =
    AnnotatedPersonDatum_AnnotatedPersonType_AnnotatedPersonType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AnnotatedPersonType_descriptor() {
    return AnnotatedPersonDatum_AnnotatedPersonType_descriptor();
  }
  static inline const ::std::string& AnnotatedPersonType_Name(AnnotatedPersonType value) {
    return AnnotatedPersonDatum_AnnotatedPersonType_Name(value);
  }
  static inline bool AnnotatedPersonType_Parse(const ::std::string& name,
      AnnotatedPersonType* value) {
    return AnnotatedPersonDatum_AnnotatedPersonType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.Datum datum = 1;
  bool has_datum() const;
  void clear_datum();
  static const int kDatumFieldNumber = 1;
  const ::caffe::Datum& datum() const;
  ::caffe::Datum* mutable_datum();
  ::caffe::Datum* release_datum();
  void set_allocated_datum(::caffe::Datum* datum);

  // repeated .caffe.PersonBBox person = 2;
  int person_size() const;
  void clear_person();
  static const int kPersonFieldNumber = 2;
  const ::caffe::PersonBBox& person(int index) const;
  ::caffe::PersonBBox* mutable_person(int index);
  ::caffe::PersonBBox* add_person();
  ::google::protobuf::RepeatedPtrField< ::caffe::PersonBBox >*
      mutable_person();
  const ::google::protobuf::RepeatedPtrField< ::caffe::PersonBBox >&
      person() const;

  // optional .caffe.AnnotatedPersonDatum.AnnotatedPersonType type = 3 [default = BBOX];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::caffe::AnnotatedPersonDatum_AnnotatedPersonType type() const;
  void set_type(::caffe::AnnotatedPersonDatum_AnnotatedPersonType value);

  // @@protoc_insertion_point(class_scope:caffe.AnnotatedPersonDatum)
 private:
  inline void set_has_datum();
  inline void clear_has_datum();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::Datum* datum_;
  ::google::protobuf::RepeatedPtrField< ::caffe::PersonBBox > person_;
  int type_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static AnnotatedPersonDatum* default_instance_;
};
// -------------------------------------------------------------------

class Annotation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.Annotation) */ {
 public:
  Annotation();
  virtual ~Annotation();

  Annotation(const Annotation& from);

  inline Annotation& operator=(const Annotation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Annotation& default_instance();

  void Swap(Annotation* other);

  // implements Message ----------------------------------------------

  inline Annotation* New() const { return New(NULL); }

  Annotation* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Annotation& from);
  void MergeFrom(const Annotation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Annotation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 instance_id = 1 [default = 0];
  bool has_instance_id() const;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 1;
  ::google::protobuf::int32 instance_id() const;
  void set_instance_id(::google::protobuf::int32 value);

  // optional .caffe.NormalizedBBox bbox = 2;
  bool has_bbox() const;
  void clear_bbox();
  static const int kBboxFieldNumber = 2;
  const ::caffe::NormalizedBBox& bbox() const;
  ::caffe::NormalizedBBox* mutable_bbox();
  ::caffe::NormalizedBBox* release_bbox();
  void set_allocated_bbox(::caffe::NormalizedBBox* bbox);

  // @@protoc_insertion_point(class_scope:caffe.Annotation)
 private:
  inline void set_has_instance_id();
  inline void clear_has_instance_id();
  inline void set_has_bbox();
  inline void clear_has_bbox();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::NormalizedBBox* bbox_;
  ::google::protobuf::int32 instance_id_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static Annotation* default_instance_;
};
// -------------------------------------------------------------------

class Annotation_P : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.Annotation_P) */ {
 public:
  Annotation_P();
  virtual ~Annotation_P();

  Annotation_P(const Annotation_P& from);

  inline Annotation_P& operator=(const Annotation_P& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Annotation_P& default_instance();

  void Swap(Annotation_P* other);

  // implements Message ----------------------------------------------

  inline Annotation_P* New() const { return New(NULL); }

  Annotation_P* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Annotation_P& from);
  void MergeFrom(const Annotation_P& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Annotation_P* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 body_id = 1 [default = 0];
  bool has_body_id() const;
  void clear_body_id();
  static const int kBodyIdFieldNumber = 1;
  ::google::protobuf::int32 body_id() const;
  void set_body_id(::google::protobuf::int32 value);

  // optional int32 instance_id = 2 [default = 0];
  bool has_instance_id() const;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 2;
  ::google::protobuf::int32 instance_id() const;
  void set_instance_id(::google::protobuf::int32 value);

  // optional .caffe.NormalizedBBox bbox = 3;
  bool has_bbox() const;
  void clear_bbox();
  static const int kBboxFieldNumber = 3;
  const ::caffe::NormalizedBBox& bbox() const;
  ::caffe::NormalizedBBox* mutable_bbox();
  ::caffe::NormalizedBBox* release_bbox();
  void set_allocated_bbox(::caffe::NormalizedBBox* bbox);

  // @@protoc_insertion_point(class_scope:caffe.Annotation_P)
 private:
  inline void set_has_body_id();
  inline void clear_has_body_id();
  inline void set_has_instance_id();
  inline void clear_has_instance_id();
  inline void set_has_bbox();
  inline void clear_has_bbox();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 body_id_;
  ::google::protobuf::int32 instance_id_;
  ::caffe::NormalizedBBox* bbox_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static Annotation_P* default_instance_;
};
// -------------------------------------------------------------------

class AnnotationPart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.AnnotationPart) */ {
 public:
  AnnotationPart();
  virtual ~AnnotationPart();

  AnnotationPart(const AnnotationPart& from);

  inline AnnotationPart& operator=(const AnnotationPart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnotationPart& default_instance();

  void Swap(AnnotationPart* other);

  // implements Message ----------------------------------------------

  inline AnnotationPart* New() const { return New(NULL); }

  AnnotationPart* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnnotationPart& from);
  void MergeFrom(const AnnotationPart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnnotationPart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string part_name = 1 [default = ""];
  bool has_part_name() const;
  void clear_part_name();
  static const int kPartNameFieldNumber = 1;
  const ::std::string& part_name() const;
  void set_part_name(const ::std::string& value);
  void set_part_name(const char* value);
  void set_part_name(const char* value, size_t size);
  ::std::string* mutable_part_name();
  ::std::string* release_part_name();
  void set_allocated_part_name(::std::string* part_name);

  // optional int32 part_label = 2;
  bool has_part_label() const;
  void clear_part_label();
  static const int kPartLabelFieldNumber = 2;
  ::google::protobuf::int32 part_label() const;
  void set_part_label(::google::protobuf::int32 value);

  // repeated .caffe.Annotation_P annotation = 3;
  int annotation_size() const;
  void clear_annotation();
  static const int kAnnotationFieldNumber = 3;
  const ::caffe::Annotation_P& annotation(int index) const;
  ::caffe::Annotation_P* mutable_annotation(int index);
  ::caffe::Annotation_P* add_annotation();
  ::google::protobuf::RepeatedPtrField< ::caffe::Annotation_P >*
      mutable_annotation();
  const ::google::protobuf::RepeatedPtrField< ::caffe::Annotation_P >&
      annotation() const;

  // @@protoc_insertion_point(class_scope:caffe.AnnotationPart)
 private:
  inline void set_has_part_name();
  inline void clear_has_part_name();
  inline void set_has_part_label();
  inline void clear_has_part_label();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr part_name_;
  ::google::protobuf::RepeatedPtrField< ::caffe::Annotation_P > annotation_;
  ::google::protobuf::int32 part_label_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static AnnotationPart* default_instance_;
};
// -------------------------------------------------------------------

class AnnotationGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.AnnotationGroup) */ {
 public:
  AnnotationGroup();
  virtual ~AnnotationGroup();

  AnnotationGroup(const AnnotationGroup& from);

  inline AnnotationGroup& operator=(const AnnotationGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnotationGroup& default_instance();

  void Swap(AnnotationGroup* other);

  // implements Message ----------------------------------------------

  inline AnnotationGroup* New() const { return New(NULL); }

  AnnotationGroup* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnnotationGroup& from);
  void MergeFrom(const AnnotationGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnnotationGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 group_label = 1;
  bool has_group_label() const;
  void clear_group_label();
  static const int kGroupLabelFieldNumber = 1;
  ::google::protobuf::int32 group_label() const;
  void set_group_label(::google::protobuf::int32 value);

  // repeated .caffe.Annotation annotation = 2;
  int annotation_size() const;
  void clear_annotation();
  static const int kAnnotationFieldNumber = 2;
  const ::caffe::Annotation& annotation(int index) const;
  ::caffe::Annotation* mutable_annotation(int index);
  ::caffe::Annotation* add_annotation();
  ::google::protobuf::RepeatedPtrField< ::caffe::Annotation >*
      mutable_annotation();
  const ::google::protobuf::RepeatedPtrField< ::caffe::Annotation >&
      annotation() const;

  // @@protoc_insertion_point(class_scope:caffe.AnnotationGroup)
 private:
  inline void set_has_group_label();
  inline void clear_has_group_label();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::Annotation > annotation_;
  ::google::protobuf::int32 group_label_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static AnnotationGroup* default_instance_;
};
// -------------------------------------------------------------------

class AnnotatedDatum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.AnnotatedDatum) */ {
 public:
  AnnotatedDatum();
  virtual ~AnnotatedDatum();

  AnnotatedDatum(const AnnotatedDatum& from);

  inline AnnotatedDatum& operator=(const AnnotatedDatum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnotatedDatum& default_instance();

  void Swap(AnnotatedDatum* other);

  // implements Message ----------------------------------------------

  inline AnnotatedDatum* New() const { return New(NULL); }

  AnnotatedDatum* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnnotatedDatum& from);
  void MergeFrom(const AnnotatedDatum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnnotatedDatum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AnnotatedDatum_AnnotationType AnnotationType;
  static const AnnotationType BBOX =
    AnnotatedDatum_AnnotationType_BBOX;
  static inline bool AnnotationType_IsValid(int value) {
    return AnnotatedDatum_AnnotationType_IsValid(value);
  }
  static const AnnotationType AnnotationType_MIN =
    AnnotatedDatum_AnnotationType_AnnotationType_MIN;
  static const AnnotationType AnnotationType_MAX =
    AnnotatedDatum_AnnotationType_AnnotationType_MAX;
  static const int AnnotationType_ARRAYSIZE =
    AnnotatedDatum_AnnotationType_AnnotationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AnnotationType_descriptor() {
    return AnnotatedDatum_AnnotationType_descriptor();
  }
  static inline const ::std::string& AnnotationType_Name(AnnotationType value) {
    return AnnotatedDatum_AnnotationType_Name(value);
  }
  static inline bool AnnotationType_Parse(const ::std::string& name,
      AnnotationType* value) {
    return AnnotatedDatum_AnnotationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.Datum datum = 1;
  bool has_datum() const;
  void clear_datum();
  static const int kDatumFieldNumber = 1;
  const ::caffe::Datum& datum() const;
  ::caffe::Datum* mutable_datum();
  ::caffe::Datum* release_datum();
  void set_allocated_datum(::caffe::Datum* datum);

  // optional .caffe.AnnotatedDatum.AnnotationType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::caffe::AnnotatedDatum_AnnotationType type() const;
  void set_type(::caffe::AnnotatedDatum_AnnotationType value);

  // repeated .caffe.AnnotationGroup annotation_group = 3;
  int annotation_group_size() const;
  void clear_annotation_group();
  static const int kAnnotationGroupFieldNumber = 3;
  const ::caffe::AnnotationGroup& annotation_group(int index) const;
  ::caffe::AnnotationGroup* mutable_annotation_group(int index);
  ::caffe::AnnotationGroup* add_annotation_group();
  ::google::protobuf::RepeatedPtrField< ::caffe::AnnotationGroup >*
      mutable_annotation_group();
  const ::google::protobuf::RepeatedPtrField< ::caffe::AnnotationGroup >&
      annotation_group() const;

  // @@protoc_insertion_point(class_scope:caffe.AnnotatedDatum)
 private:
  inline void set_has_datum();
  inline void clear_has_datum();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::Datum* datum_;
  ::google::protobuf::RepeatedPtrField< ::caffe::AnnotationGroup > annotation_group_;
  int type_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static AnnotatedDatum* default_instance_;
};
// -------------------------------------------------------------------

class Color : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.Color) */ {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Color& default_instance();

  void Swap(Color* other);

  // implements Message ----------------------------------------------

  inline Color* New() const { return New(NULL); }

  Color* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Color* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 val = 1;
  int val_size() const;
  void clear_val();
  static const int kValFieldNumber = 1;
  ::google::protobuf::int32 val(int index) const;
  void set_val(int index, ::google::protobuf::int32 value);
  void add_val(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      val() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_val();

  // @@protoc_insertion_point(class_scope:caffe.Color)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > val_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static Color* default_instance_;
};
// -------------------------------------------------------------------

class ColorParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ColorParameter) */ {
 public:
  ColorParameter();
  virtual ~ColorParameter();

  ColorParameter(const ColorParameter& from);

  inline ColorParameter& operator=(const ColorParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColorParameter& default_instance();

  void Swap(ColorParameter* other);

  // implements Message ----------------------------------------------

  inline ColorParameter* New() const { return New(NULL); }

  ColorParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ColorParameter& from);
  void MergeFrom(const ColorParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ColorParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.Color rgb = 1;
  int rgb_size() const;
  void clear_rgb();
  static const int kRgbFieldNumber = 1;
  const ::caffe::Color& rgb(int index) const;
  ::caffe::Color* mutable_rgb(int index);
  ::caffe::Color* add_rgb();
  ::google::protobuf::RepeatedPtrField< ::caffe::Color >*
      mutable_rgb();
  const ::google::protobuf::RepeatedPtrField< ::caffe::Color >&
      rgb() const;

  // @@protoc_insertion_point(class_scope:caffe.ColorParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::Color > rgb_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ColorParameter* default_instance_;
};
// -------------------------------------------------------------------

class VisualizeParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.VisualizeParameter) */ {
 public:
  VisualizeParameter();
  virtual ~VisualizeParameter();

  VisualizeParameter(const VisualizeParameter& from);

  inline VisualizeParameter& operator=(const VisualizeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VisualizeParameter& default_instance();

  void Swap(VisualizeParameter* other);

  // implements Message ----------------------------------------------

  inline VisualizeParameter* New() const { return New(NULL); }

  VisualizeParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VisualizeParameter& from);
  void MergeFrom(const VisualizeParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VisualizeParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool visualize = 1;
  bool has_visualize() const;
  void clear_visualize();
  static const int kVisualizeFieldNumber = 1;
  bool visualize() const;
  void set_visualize(bool value);

  // optional float conf_threshold = 5 [default = 0.5];
  bool has_conf_threshold() const;
  void clear_conf_threshold();
  static const int kConfThresholdFieldNumber = 5;
  float conf_threshold() const;
  void set_conf_threshold(float value);

  // optional float size_threshold = 6 [default = 0];
  bool has_size_threshold() const;
  void clear_size_threshold();
  static const int kSizeThresholdFieldNumber = 6;
  float size_threshold() const;
  void set_size_threshold(float value);

  // optional int32 display_maxsize = 2;
  bool has_display_maxsize() const;
  void clear_display_maxsize();
  static const int kDisplayMaxsizeFieldNumber = 2;
  ::google::protobuf::int32 display_maxsize() const;
  void set_display_maxsize(::google::protobuf::int32 value);

  // optional int32 line_width = 3;
  bool has_line_width() const;
  void clear_line_width();
  static const int kLineWidthFieldNumber = 3;
  ::google::protobuf::int32 line_width() const;
  void set_line_width(::google::protobuf::int32 value);

  // optional .caffe.ColorParameter color_param = 11;
  bool has_color_param() const;
  void clear_color_param();
  static const int kColorParamFieldNumber = 11;
  const ::caffe::ColorParameter& color_param() const;
  ::caffe::ColorParameter* mutable_color_param();
  ::caffe::ColorParameter* release_color_param();
  void set_allocated_color_param(::caffe::ColorParameter* color_param);

  // @@protoc_insertion_point(class_scope:caffe.VisualizeParameter)
 private:
  inline void set_has_visualize();
  inline void clear_has_visualize();
  inline void set_has_conf_threshold();
  inline void clear_has_conf_threshold();
  inline void set_has_size_threshold();
  inline void clear_has_size_threshold();
  inline void set_has_display_maxsize();
  inline void clear_has_display_maxsize();
  inline void set_has_line_width();
  inline void clear_has_line_width();
  inline void set_has_color_param();
  inline void clear_has_color_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool visualize_;
  float conf_threshold_;
  float size_threshold_;
  ::google::protobuf::int32 display_maxsize_;
  ::caffe::ColorParameter* color_param_;
  ::google::protobuf::int32 line_width_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static VisualizeParameter* default_instance_;
};
// -------------------------------------------------------------------

class FillerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.FillerParameter) */ {
 public:
  FillerParameter();
  virtual ~FillerParameter();

  FillerParameter(const FillerParameter& from);

  inline FillerParameter& operator=(const FillerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FillerParameter& default_instance();

  void Swap(FillerParameter* other);

  // implements Message ----------------------------------------------

  inline FillerParameter* New() const { return New(NULL); }

  FillerParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FillerParameter& from);
  void MergeFrom(const FillerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FillerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FillerParameter_VarianceNorm VarianceNorm;
  static const VarianceNorm FAN_IN =
    FillerParameter_VarianceNorm_FAN_IN;
  static const VarianceNorm FAN_OUT =
    FillerParameter_VarianceNorm_FAN_OUT;
  static const VarianceNorm AVERAGE =
    FillerParameter_VarianceNorm_AVERAGE;
  static inline bool VarianceNorm_IsValid(int value) {
    return FillerParameter_VarianceNorm_IsValid(value);
  }
  static const VarianceNorm VarianceNorm_MIN =
    FillerParameter_VarianceNorm_VarianceNorm_MIN;
  static const VarianceNorm VarianceNorm_MAX =
    FillerParameter_VarianceNorm_VarianceNorm_MAX;
  static const int VarianceNorm_ARRAYSIZE =
    FillerParameter_VarianceNorm_VarianceNorm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VarianceNorm_descriptor() {
    return FillerParameter_VarianceNorm_descriptor();
  }
  static inline const ::std::string& VarianceNorm_Name(VarianceNorm value) {
    return FillerParameter_VarianceNorm_Name(value);
  }
  static inline bool VarianceNorm_Parse(const ::std::string& name,
      VarianceNorm* value) {
    return FillerParameter_VarianceNorm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "constant"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional float value = 2 [default = 0];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // optional float min = 3 [default = 0];
  bool has_min() const;
  void clear_min();
  static const int kMinFieldNumber = 3;
  float min() const;
  void set_min(float value);

  // optional float max = 4 [default = 1];
  bool has_max() const;
  void clear_max();
  static const int kMaxFieldNumber = 4;
  float max() const;
  void set_max(float value);

  // optional float mean = 5 [default = 0];
  bool has_mean() const;
  void clear_mean();
  static const int kMeanFieldNumber = 5;
  float mean() const;
  void set_mean(float value);

  // optional float std = 6 [default = 1];
  bool has_std() const;
  void clear_std();
  static const int kStdFieldNumber = 6;
  float std() const;
  void set_std(float value);

  // optional int32 sparse = 7 [default = -1];
  bool has_sparse() const;
  void clear_sparse();
  static const int kSparseFieldNumber = 7;
  ::google::protobuf::int32 sparse() const;
  void set_sparse(::google::protobuf::int32 value);

  // optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
  bool has_variance_norm() const;
  void clear_variance_norm();
  static const int kVarianceNormFieldNumber = 8;
  ::caffe::FillerParameter_VarianceNorm variance_norm() const;
  void set_variance_norm(::caffe::FillerParameter_VarianceNorm value);

  // @@protoc_insertion_point(class_scope:caffe.FillerParameter)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();
  inline void set_has_mean();
  inline void clear_has_mean();
  inline void set_has_std();
  inline void clear_has_std();
  inline void set_has_sparse();
  inline void clear_has_sparse();
  inline void set_has_variance_norm();
  inline void clear_has_variance_norm();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_type_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  float value_;
  float min_;
  float max_;
  float mean_;
  float std_;
  ::google::protobuf::int32 sparse_;
  int variance_norm_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static FillerParameter* default_instance_;
};
// -------------------------------------------------------------------

class NetParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NetParameter) */ {
 public:
  NetParameter();
  virtual ~NetParameter();

  NetParameter(const NetParameter& from);

  inline NetParameter& operator=(const NetParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetParameter& default_instance();

  void Swap(NetParameter* other);

  // implements Message ----------------------------------------------

  inline NetParameter* New() const { return New(NULL); }

  NetParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetParameter& from);
  void MergeFrom(const NetParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated string input = 3;
  int input_size() const;
  void clear_input();
  static const int kInputFieldNumber = 3;
  const ::std::string& input(int index) const;
  ::std::string* mutable_input(int index);
  void set_input(int index, const ::std::string& value);
  void set_input(int index, const char* value);
  void set_input(int index, const char* value, size_t size);
  ::std::string* add_input();
  void add_input(const ::std::string& value);
  void add_input(const char* value);
  void add_input(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& input() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input();

  // repeated .caffe.BlobShape input_shape = 8;
  int input_shape_size() const;
  void clear_input_shape();
  static const int kInputShapeFieldNumber = 8;
  const ::caffe::BlobShape& input_shape(int index) const;
  ::caffe::BlobShape* mutable_input_shape(int index);
  ::caffe::BlobShape* add_input_shape();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
      mutable_input_shape();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
      input_shape() const;

  // repeated int32 input_dim = 4;
  int input_dim_size() const;
  void clear_input_dim();
  static const int kInputDimFieldNumber = 4;
  ::google::protobuf::int32 input_dim(int index) const;
  void set_input_dim(int index, ::google::protobuf::int32 value);
  void add_input_dim(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      input_dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_input_dim();

  // optional bool force_backward = 5 [default = false];
  bool has_force_backward() const;
  void clear_force_backward();
  static const int kForceBackwardFieldNumber = 5;
  bool force_backward() const;
  void set_force_backward(bool value);

  // optional .caffe.NetState state = 6;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 6;
  const ::caffe::NetState& state() const;
  ::caffe::NetState* mutable_state();
  ::caffe::NetState* release_state();
  void set_allocated_state(::caffe::NetState* state);

  // optional bool debug_info = 7 [default = false];
  bool has_debug_info() const;
  void clear_debug_info();
  static const int kDebugInfoFieldNumber = 7;
  bool debug_info() const;
  void set_debug_info(bool value);

  // repeated .caffe.LayerParameter layer = 100;
  int layer_size() const;
  void clear_layer();
  static const int kLayerFieldNumber = 100;
  const ::caffe::LayerParameter& layer(int index) const;
  ::caffe::LayerParameter* mutable_layer(int index);
  ::caffe::LayerParameter* add_layer();
  ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >*
      mutable_layer();
  const ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >&
      layer() const;

  // repeated .caffe.V1LayerParameter layers = 2;
  int layers_size() const;
  void clear_layers();
  static const int kLayersFieldNumber = 2;
  const ::caffe::V1LayerParameter& layers(int index) const;
  ::caffe::V1LayerParameter* mutable_layers(int index);
  ::caffe::V1LayerParameter* add_layers();
  ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >*
      mutable_layers();
  const ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >&
      layers() const;

  // @@protoc_insertion_point(class_scope:caffe.NetParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_force_backward();
  inline void clear_has_force_backward();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_debug_info();
  inline void clear_has_debug_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape > input_shape_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > input_dim_;
  ::caffe::NetState* state_;
  ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter > layer_;
  ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter > layers_;
  bool force_backward_;
  bool debug_info_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static NetParameter* default_instance_;
};
// -------------------------------------------------------------------

class SolverParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SolverParameter) */ {
 public:
  SolverParameter();
  virtual ~SolverParameter();

  SolverParameter(const SolverParameter& from);

  inline SolverParameter& operator=(const SolverParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverParameter& default_instance();

  void Swap(SolverParameter* other);

  // implements Message ----------------------------------------------

  inline SolverParameter* New() const { return New(NULL); }

  SolverParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverParameter& from);
  void MergeFrom(const SolverParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SolverParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SolverParameter_SnapshotFormat SnapshotFormat;
  static const SnapshotFormat HDF5 =
    SolverParameter_SnapshotFormat_HDF5;
  static const SnapshotFormat BINARYPROTO =
    SolverParameter_SnapshotFormat_BINARYPROTO;
  static inline bool SnapshotFormat_IsValid(int value) {
    return SolverParameter_SnapshotFormat_IsValid(value);
  }
  static const SnapshotFormat SnapshotFormat_MIN =
    SolverParameter_SnapshotFormat_SnapshotFormat_MIN;
  static const SnapshotFormat SnapshotFormat_MAX =
    SolverParameter_SnapshotFormat_SnapshotFormat_MAX;
  static const int SnapshotFormat_ARRAYSIZE =
    SolverParameter_SnapshotFormat_SnapshotFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SnapshotFormat_descriptor() {
    return SolverParameter_SnapshotFormat_descriptor();
  }
  static inline const ::std::string& SnapshotFormat_Name(SnapshotFormat value) {
    return SolverParameter_SnapshotFormat_Name(value);
  }
  static inline bool SnapshotFormat_Parse(const ::std::string& name,
      SnapshotFormat* value) {
    return SolverParameter_SnapshotFormat_Parse(name, value);
  }

  typedef SolverParameter_SolverMode SolverMode;
  static const SolverMode CPU =
    SolverParameter_SolverMode_CPU;
  static const SolverMode GPU =
    SolverParameter_SolverMode_GPU;
  static inline bool SolverMode_IsValid(int value) {
    return SolverParameter_SolverMode_IsValid(value);
  }
  static const SolverMode SolverMode_MIN =
    SolverParameter_SolverMode_SolverMode_MIN;
  static const SolverMode SolverMode_MAX =
    SolverParameter_SolverMode_SolverMode_MAX;
  static const int SolverMode_ARRAYSIZE =
    SolverParameter_SolverMode_SolverMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SolverMode_descriptor() {
    return SolverParameter_SolverMode_descriptor();
  }
  static inline const ::std::string& SolverMode_Name(SolverMode value) {
    return SolverParameter_SolverMode_Name(value);
  }
  static inline bool SolverMode_Parse(const ::std::string& name,
      SolverMode* value) {
    return SolverParameter_SolverMode_Parse(name, value);
  }

  typedef SolverParameter_SolverType SolverType;
  static const SolverType SGD =
    SolverParameter_SolverType_SGD;
  static const SolverType NESTEROV =
    SolverParameter_SolverType_NESTEROV;
  static const SolverType ADAGRAD =
    SolverParameter_SolverType_ADAGRAD;
  static const SolverType RMSPROP =
    SolverParameter_SolverType_RMSPROP;
  static const SolverType ADADELTA =
    SolverParameter_SolverType_ADADELTA;
  static const SolverType ADAM =
    SolverParameter_SolverType_ADAM;
  static inline bool SolverType_IsValid(int value) {
    return SolverParameter_SolverType_IsValid(value);
  }
  static const SolverType SolverType_MIN =
    SolverParameter_SolverType_SolverType_MIN;
  static const SolverType SolverType_MAX =
    SolverParameter_SolverType_SolverType_MAX;
  static const int SolverType_ARRAYSIZE =
    SolverParameter_SolverType_SolverType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SolverType_descriptor() {
    return SolverParameter_SolverType_descriptor();
  }
  static inline const ::std::string& SolverType_Name(SolverType value) {
    return SolverParameter_SolverType_Name(value);
  }
  static inline bool SolverType_Parse(const ::std::string& name,
      SolverType* value) {
    return SolverParameter_SolverType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string net = 24;
  bool has_net() const;
  void clear_net();
  static const int kNetFieldNumber = 24;
  const ::std::string& net() const;
  void set_net(const ::std::string& value);
  void set_net(const char* value);
  void set_net(const char* value, size_t size);
  ::std::string* mutable_net();
  ::std::string* release_net();
  void set_allocated_net(::std::string* net);

  // optional .caffe.NetParameter net_param = 25;
  bool has_net_param() const;
  void clear_net_param();
  static const int kNetParamFieldNumber = 25;
  const ::caffe::NetParameter& net_param() const;
  ::caffe::NetParameter* mutable_net_param();
  ::caffe::NetParameter* release_net_param();
  void set_allocated_net_param(::caffe::NetParameter* net_param);

  // optional string train_net = 1;
  bool has_train_net() const;
  void clear_train_net();
  static const int kTrainNetFieldNumber = 1;
  const ::std::string& train_net() const;
  void set_train_net(const ::std::string& value);
  void set_train_net(const char* value);
  void set_train_net(const char* value, size_t size);
  ::std::string* mutable_train_net();
  ::std::string* release_train_net();
  void set_allocated_train_net(::std::string* train_net);

  // repeated string test_net = 2;
  int test_net_size() const;
  void clear_test_net();
  static const int kTestNetFieldNumber = 2;
  const ::std::string& test_net(int index) const;
  ::std::string* mutable_test_net(int index);
  void set_test_net(int index, const ::std::string& value);
  void set_test_net(int index, const char* value);
  void set_test_net(int index, const char* value, size_t size);
  ::std::string* add_test_net();
  void add_test_net(const ::std::string& value);
  void add_test_net(const char* value);
  void add_test_net(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_net() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_net();

  // optional .caffe.NetParameter train_net_param = 21;
  bool has_train_net_param() const;
  void clear_train_net_param();
  static const int kTrainNetParamFieldNumber = 21;
  const ::caffe::NetParameter& train_net_param() const;
  ::caffe::NetParameter* mutable_train_net_param();
  ::caffe::NetParameter* release_train_net_param();
  void set_allocated_train_net_param(::caffe::NetParameter* train_net_param);

  // repeated .caffe.NetParameter test_net_param = 22;
  int test_net_param_size() const;
  void clear_test_net_param();
  static const int kTestNetParamFieldNumber = 22;
  const ::caffe::NetParameter& test_net_param(int index) const;
  ::caffe::NetParameter* mutable_test_net_param(int index);
  ::caffe::NetParameter* add_test_net_param();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >*
      mutable_test_net_param();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >&
      test_net_param() const;

  // optional .caffe.NetState train_state = 26;
  bool has_train_state() const;
  void clear_train_state();
  static const int kTrainStateFieldNumber = 26;
  const ::caffe::NetState& train_state() const;
  ::caffe::NetState* mutable_train_state();
  ::caffe::NetState* release_train_state();
  void set_allocated_train_state(::caffe::NetState* train_state);

  // repeated .caffe.NetState test_state = 27;
  int test_state_size() const;
  void clear_test_state();
  static const int kTestStateFieldNumber = 27;
  const ::caffe::NetState& test_state(int index) const;
  ::caffe::NetState* mutable_test_state(int index);
  ::caffe::NetState* add_test_state();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetState >*
      mutable_test_state();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetState >&
      test_state() const;

  // optional string eval_type = 41 [default = "classification"];
  bool has_eval_type() const;
  void clear_eval_type();
  static const int kEvalTypeFieldNumber = 41;
  const ::std::string& eval_type() const;
  void set_eval_type(const ::std::string& value);
  void set_eval_type(const char* value);
  void set_eval_type(const char* value, size_t size);
  ::std::string* mutable_eval_type();
  ::std::string* release_eval_type();
  void set_allocated_eval_type(::std::string* eval_type);

  // repeated string test_net_type = 59;
  int test_net_type_size() const;
  void clear_test_net_type();
  static const int kTestNetTypeFieldNumber = 59;
  const ::std::string& test_net_type(int index) const;
  ::std::string* mutable_test_net_type(int index);
  void set_test_net_type(int index, const ::std::string& value);
  void set_test_net_type(int index, const char* value);
  void set_test_net_type(int index, const char* value, size_t size);
  ::std::string* add_test_net_type();
  void add_test_net_type(const ::std::string& value);
  void add_test_net_type(const char* value);
  void add_test_net_type(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& test_net_type() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test_net_type();

  // repeated string tracker_test_vottype_dir = 44;
  int tracker_test_vottype_dir_size() const;
  void clear_tracker_test_vottype_dir();
  static const int kTrackerTestVottypeDirFieldNumber = 44;
  const ::std::string& tracker_test_vottype_dir(int index) const;
  ::std::string* mutable_tracker_test_vottype_dir(int index);
  void set_tracker_test_vottype_dir(int index, const ::std::string& value);
  void set_tracker_test_vottype_dir(int index, const char* value);
  void set_tracker_test_vottype_dir(int index, const char* value, size_t size);
  ::std::string* add_tracker_test_vottype_dir();
  void add_tracker_test_vottype_dir(const ::std::string& value);
  void add_tracker_test_vottype_dir(const char* value);
  void add_tracker_test_vottype_dir(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tracker_test_vottype_dir() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tracker_test_vottype_dir();

  // repeated string tracker_test_alovtype_image_dir = 45;
  int tracker_test_alovtype_image_dir_size() const;
  void clear_tracker_test_alovtype_image_dir();
  static const int kTrackerTestAlovtypeImageDirFieldNumber = 45;
  const ::std::string& tracker_test_alovtype_image_dir(int index) const;
  ::std::string* mutable_tracker_test_alovtype_image_dir(int index);
  void set_tracker_test_alovtype_image_dir(int index, const ::std::string& value);
  void set_tracker_test_alovtype_image_dir(int index, const char* value);
  void set_tracker_test_alovtype_image_dir(int index, const char* value, size_t size);
  ::std::string* add_tracker_test_alovtype_image_dir();
  void add_tracker_test_alovtype_image_dir(const ::std::string& value);
  void add_tracker_test_alovtype_image_dir(const char* value);
  void add_tracker_test_alovtype_image_dir(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tracker_test_alovtype_image_dir() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tracker_test_alovtype_image_dir();

  // repeated string tracker_test_alovtype_annos_dir = 46;
  int tracker_test_alovtype_annos_dir_size() const;
  void clear_tracker_test_alovtype_annos_dir();
  static const int kTrackerTestAlovtypeAnnosDirFieldNumber = 46;
  const ::std::string& tracker_test_alovtype_annos_dir(int index) const;
  ::std::string* mutable_tracker_test_alovtype_annos_dir(int index);
  void set_tracker_test_alovtype_annos_dir(int index, const ::std::string& value);
  void set_tracker_test_alovtype_annos_dir(int index, const char* value);
  void set_tracker_test_alovtype_annos_dir(int index, const char* value, size_t size);
  ::std::string* add_tracker_test_alovtype_annos_dir();
  void add_tracker_test_alovtype_annos_dir(const ::std::string& value);
  void add_tracker_test_alovtype_annos_dir(const char* value);
  void add_tracker_test_alovtype_annos_dir(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tracker_test_alovtype_annos_dir() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tracker_test_alovtype_annos_dir();

  // optional bool show_tracking = 47 [default = false];
  bool has_show_tracking() const;
  void clear_show_tracking();
  static const int kShowTrackingFieldNumber = 47;
  bool show_tracking() const;
  void set_show_tracking(bool value);

  // optional string tracker_test_out_folder = 48;
  bool has_tracker_test_out_folder() const;
  void clear_tracker_test_out_folder();
  static const int kTrackerTestOutFolderFieldNumber = 48;
  const ::std::string& tracker_test_out_folder() const;
  void set_tracker_test_out_folder(const ::std::string& value);
  void set_tracker_test_out_folder(const char* value);
  void set_tracker_test_out_folder(const char* value, size_t size);
  ::std::string* mutable_tracker_test_out_folder();
  ::std::string* release_tracker_test_out_folder();
  void set_allocated_tracker_test_out_folder(::std::string* tracker_test_out_folder);

  // optional bool save_tracking = 49 [default = false];
  bool has_save_tracking() const;
  void clear_save_tracking();
  static const int kSaveTrackingFieldNumber = 49;
  bool save_tracking() const;
  void set_save_tracking(bool value);

  // optional string tracker_test_save_folder = 50;
  bool has_tracker_test_save_folder() const;
  void clear_tracker_test_save_folder();
  static const int kTrackerTestSaveFolderFieldNumber = 50;
  const ::std::string& tracker_test_save_folder() const;
  void set_tracker_test_save_folder(const ::std::string& value);
  void set_tracker_test_save_folder(const char* value);
  void set_tracker_test_save_folder(const char* value, size_t size);
  ::std::string* mutable_tracker_test_save_folder();
  ::std::string* release_tracker_test_save_folder();
  void set_allocated_tracker_test_save_folder(::std::string* tracker_test_save_folder);

  // optional .caffe.VideoTrackerParameter video_tracker_parameter = 51;
  bool has_video_tracker_parameter() const;
  void clear_video_tracker_parameter();
  static const int kVideoTrackerParameterFieldNumber = 51;
  const ::caffe::VideoTrackerParameter& video_tracker_parameter() const;
  ::caffe::VideoTrackerParameter* mutable_video_tracker_parameter();
  ::caffe::VideoTrackerParameter* release_video_tracker_parameter();
  void set_allocated_video_tracker_parameter(::caffe::VideoTrackerParameter* video_tracker_parameter);

  // optional bool test_use_camera = 52 [default = false];
  bool has_test_use_camera() const;
  void clear_test_use_camera();
  static const int kTestUseCameraFieldNumber = 52;
  bool test_use_camera() const;
  void set_test_use_camera(bool value);

  // optional string ap_version = 42 [default = "Integral"];
  bool has_ap_version() const;
  void clear_ap_version();
  static const int kApVersionFieldNumber = 42;
  const ::std::string& ap_version() const;
  void set_ap_version(const ::std::string& value);
  void set_ap_version(const char* value);
  void set_ap_version(const char* value, size_t size);
  ::std::string* mutable_ap_version();
  ::std::string* release_ap_version();
  void set_allocated_ap_version(::std::string* ap_version);

  // repeated int32 test_iter = 3;
  int test_iter_size() const;
  void clear_test_iter();
  static const int kTestIterFieldNumber = 3;
  ::google::protobuf::int32 test_iter(int index) const;
  void set_test_iter(int index, ::google::protobuf::int32 value);
  void add_test_iter(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test_iter() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test_iter();

  // optional int32 test_interval = 4 [default = 0];
  bool has_test_interval() const;
  void clear_test_interval();
  static const int kTestIntervalFieldNumber = 4;
  ::google::protobuf::int32 test_interval() const;
  void set_test_interval(::google::protobuf::int32 value);

  // optional bool test_compute_loss = 19 [default = false];
  bool has_test_compute_loss() const;
  void clear_test_compute_loss();
  static const int kTestComputeLossFieldNumber = 19;
  bool test_compute_loss() const;
  void set_test_compute_loss(bool value);

  // optional bool test_initialization = 32 [default = true];
  bool has_test_initialization() const;
  void clear_test_initialization();
  static const int kTestInitializationFieldNumber = 32;
  bool test_initialization() const;
  void set_test_initialization(bool value);

  // optional float base_lr = 5;
  bool has_base_lr() const;
  void clear_base_lr();
  static const int kBaseLrFieldNumber = 5;
  float base_lr() const;
  void set_base_lr(float value);

  // optional int32 display = 6;
  bool has_display() const;
  void clear_display();
  static const int kDisplayFieldNumber = 6;
  ::google::protobuf::int32 display() const;
  void set_display(::google::protobuf::int32 value);

  // optional int32 average_loss = 33 [default = 1];
  bool has_average_loss() const;
  void clear_average_loss();
  static const int kAverageLossFieldNumber = 33;
  ::google::protobuf::int32 average_loss() const;
  void set_average_loss(::google::protobuf::int32 value);

  // optional int32 max_iter = 7;
  bool has_max_iter() const;
  void clear_max_iter();
  static const int kMaxIterFieldNumber = 7;
  ::google::protobuf::int32 max_iter() const;
  void set_max_iter(::google::protobuf::int32 value);

  // optional int32 iter_size = 36 [default = 1];
  bool has_iter_size() const;
  void clear_iter_size();
  static const int kIterSizeFieldNumber = 36;
  ::google::protobuf::int32 iter_size() const;
  void set_iter_size(::google::protobuf::int32 value);

  // optional string lr_policy = 8;
  bool has_lr_policy() const;
  void clear_lr_policy();
  static const int kLrPolicyFieldNumber = 8;
  const ::std::string& lr_policy() const;
  void set_lr_policy(const ::std::string& value);
  void set_lr_policy(const char* value);
  void set_lr_policy(const char* value, size_t size);
  ::std::string* mutable_lr_policy();
  ::std::string* release_lr_policy();
  void set_allocated_lr_policy(::std::string* lr_policy);

  // optional float gamma = 9;
  bool has_gamma() const;
  void clear_gamma();
  static const int kGammaFieldNumber = 9;
  float gamma() const;
  void set_gamma(float value);

  // optional float power = 10;
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 10;
  float power() const;
  void set_power(float value);

  // optional float momentum = 11;
  bool has_momentum() const;
  void clear_momentum();
  static const int kMomentumFieldNumber = 11;
  float momentum() const;
  void set_momentum(float value);

  // optional float weight_decay = 12;
  bool has_weight_decay() const;
  void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 12;
  float weight_decay() const;
  void set_weight_decay(float value);

  // optional string regularization_type = 29 [default = "L2"];
  bool has_regularization_type() const;
  void clear_regularization_type();
  static const int kRegularizationTypeFieldNumber = 29;
  const ::std::string& regularization_type() const;
  void set_regularization_type(const ::std::string& value);
  void set_regularization_type(const char* value);
  void set_regularization_type(const char* value, size_t size);
  ::std::string* mutable_regularization_type();
  ::std::string* release_regularization_type();
  void set_allocated_regularization_type(::std::string* regularization_type);

  // optional int32 stepsize = 13;
  bool has_stepsize() const;
  void clear_stepsize();
  static const int kStepsizeFieldNumber = 13;
  ::google::protobuf::int32 stepsize() const;
  void set_stepsize(::google::protobuf::int32 value);

  // repeated int32 stepvalue = 34;
  int stepvalue_size() const;
  void clear_stepvalue();
  static const int kStepvalueFieldNumber = 34;
  ::google::protobuf::int32 stepvalue(int index) const;
  void set_stepvalue(int index, ::google::protobuf::int32 value);
  void add_stepvalue(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      stepvalue() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_stepvalue();

  // repeated int32 plateau_winsize = 43;
  int plateau_winsize_size() const;
  void clear_plateau_winsize();
  static const int kPlateauWinsizeFieldNumber = 43;
  ::google::protobuf::int32 plateau_winsize(int index) const;
  void set_plateau_winsize(int index, ::google::protobuf::int32 value);
  void add_plateau_winsize(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      plateau_winsize() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_plateau_winsize();

  // optional float clip_gradients = 35 [default = -1];
  bool has_clip_gradients() const;
  void clear_clip_gradients();
  static const int kClipGradientsFieldNumber = 35;
  float clip_gradients() const;
  void set_clip_gradients(float value);

  // optional int32 snapshot = 14 [default = 0];
  bool has_snapshot() const;
  void clear_snapshot();
  static const int kSnapshotFieldNumber = 14;
  ::google::protobuf::int32 snapshot() const;
  void set_snapshot(::google::protobuf::int32 value);

  // optional string snapshot_prefix = 15;
  bool has_snapshot_prefix() const;
  void clear_snapshot_prefix();
  static const int kSnapshotPrefixFieldNumber = 15;
  const ::std::string& snapshot_prefix() const;
  void set_snapshot_prefix(const ::std::string& value);
  void set_snapshot_prefix(const char* value);
  void set_snapshot_prefix(const char* value, size_t size);
  ::std::string* mutable_snapshot_prefix();
  ::std::string* release_snapshot_prefix();
  void set_allocated_snapshot_prefix(::std::string* snapshot_prefix);

  // optional bool snapshot_diff = 16 [default = false];
  bool has_snapshot_diff() const;
  void clear_snapshot_diff();
  static const int kSnapshotDiffFieldNumber = 16;
  bool snapshot_diff() const;
  void set_snapshot_diff(bool value);

  // optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
  bool has_snapshot_format() const;
  void clear_snapshot_format();
  static const int kSnapshotFormatFieldNumber = 37;
  ::caffe::SolverParameter_SnapshotFormat snapshot_format() const;
  void set_snapshot_format(::caffe::SolverParameter_SnapshotFormat value);

  // optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
  bool has_solver_mode() const;
  void clear_solver_mode();
  static const int kSolverModeFieldNumber = 17;
  ::caffe::SolverParameter_SolverMode solver_mode() const;
  void set_solver_mode(::caffe::SolverParameter_SolverMode value);

  // optional int32 device_id = 18 [default = 0];
  bool has_device_id() const;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 18;
  ::google::protobuf::int32 device_id() const;
  void set_device_id(::google::protobuf::int32 value);

  // optional int64 random_seed = 20 [default = -1];
  bool has_random_seed() const;
  void clear_random_seed();
  static const int kRandomSeedFieldNumber = 20;
  ::google::protobuf::int64 random_seed() const;
  void set_random_seed(::google::protobuf::int64 value);

  // optional string type = 40 [default = "SGD"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 40;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional float delta = 31 [default = 1e-08];
  bool has_delta() const;
  void clear_delta();
  static const int kDeltaFieldNumber = 31;
  float delta() const;
  void set_delta(float value);

  // optional float momentum2 = 39 [default = 0.999];
  bool has_momentum2() const;
  void clear_momentum2();
  static const int kMomentum2FieldNumber = 39;
  float momentum2() const;
  void set_momentum2(float value);

  // optional float rms_decay = 38 [default = 0.99];
  bool has_rms_decay() const;
  void clear_rms_decay();
  static const int kRmsDecayFieldNumber = 38;
  float rms_decay() const;
  void set_rms_decay(float value);

  // optional bool debug_info = 23 [default = false];
  bool has_debug_info() const;
  void clear_debug_info();
  static const int kDebugInfoFieldNumber = 23;
  bool debug_info() const;
  void set_debug_info(bool value);

  // optional bool snapshot_after_train = 28 [default = true];
  bool has_snapshot_after_train() const;
  void clear_snapshot_after_train();
  static const int kSnapshotAfterTrainFieldNumber = 28;
  bool snapshot_after_train() const;
  void set_snapshot_after_train(bool value);

  // optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
  bool has_solver_type() const;
  void clear_solver_type();
  static const int kSolverTypeFieldNumber = 30;
  ::caffe::SolverParameter_SolverType solver_type() const;
  void set_solver_type(::caffe::SolverParameter_SolverType value);

  // @@protoc_insertion_point(class_scope:caffe.SolverParameter)
 private:
  inline void set_has_net();
  inline void clear_has_net();
  inline void set_has_net_param();
  inline void clear_has_net_param();
  inline void set_has_train_net();
  inline void clear_has_train_net();
  inline void set_has_train_net_param();
  inline void clear_has_train_net_param();
  inline void set_has_train_state();
  inline void clear_has_train_state();
  inline void set_has_eval_type();
  inline void clear_has_eval_type();
  inline void set_has_show_tracking();
  inline void clear_has_show_tracking();
  inline void set_has_tracker_test_out_folder();
  inline void clear_has_tracker_test_out_folder();
  inline void set_has_save_tracking();
  inline void clear_has_save_tracking();
  inline void set_has_tracker_test_save_folder();
  inline void clear_has_tracker_test_save_folder();
  inline void set_has_video_tracker_parameter();
  inline void clear_has_video_tracker_parameter();
  inline void set_has_test_use_camera();
  inline void clear_has_test_use_camera();
  inline void set_has_ap_version();
  inline void clear_has_ap_version();
  inline void set_has_test_interval();
  inline void clear_has_test_interval();
  inline void set_has_test_compute_loss();
  inline void clear_has_test_compute_loss();
  inline void set_has_test_initialization();
  inline void clear_has_test_initialization();
  inline void set_has_base_lr();
  inline void clear_has_base_lr();
  inline void set_has_display();
  inline void clear_has_display();
  inline void set_has_average_loss();
  inline void clear_has_average_loss();
  inline void set_has_max_iter();
  inline void clear_has_max_iter();
  inline void set_has_iter_size();
  inline void clear_has_iter_size();
  inline void set_has_lr_policy();
  inline void clear_has_lr_policy();
  inline void set_has_gamma();
  inline void clear_has_gamma();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_momentum();
  inline void clear_has_momentum();
  inline void set_has_weight_decay();
  inline void clear_has_weight_decay();
  inline void set_has_regularization_type();
  inline void clear_has_regularization_type();
  inline void set_has_stepsize();
  inline void clear_has_stepsize();
  inline void set_has_clip_gradients();
  inline void clear_has_clip_gradients();
  inline void set_has_snapshot();
  inline void clear_has_snapshot();
  inline void set_has_snapshot_prefix();
  inline void clear_has_snapshot_prefix();
  inline void set_has_snapshot_diff();
  inline void clear_has_snapshot_diff();
  inline void set_has_snapshot_format();
  inline void clear_has_snapshot_format();
  inline void set_has_solver_mode();
  inline void clear_has_solver_mode();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_random_seed();
  inline void clear_has_random_seed();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_delta();
  inline void clear_has_delta();
  inline void set_has_momentum2();
  inline void clear_has_momentum2();
  inline void set_has_rms_decay();
  inline void clear_has_rms_decay();
  inline void set_has_debug_info();
  inline void clear_has_debug_info();
  inline void set_has_snapshot_after_train();
  inline void clear_has_snapshot_after_train();
  inline void set_has_solver_type();
  inline void clear_has_solver_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::internal::ArenaStringPtr net_;
  ::caffe::NetParameter* net_param_;
  ::google::protobuf::internal::ArenaStringPtr train_net_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_net_;
  ::caffe::NetParameter* train_net_param_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter > test_net_param_;
  ::caffe::NetState* train_state_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetState > test_state_;
  static ::std::string* _default_eval_type_;
  ::google::protobuf::internal::ArenaStringPtr eval_type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test_net_type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tracker_test_vottype_dir_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tracker_test_alovtype_image_dir_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tracker_test_alovtype_annos_dir_;
  ::google::protobuf::internal::ArenaStringPtr tracker_test_out_folder_;
  ::google::protobuf::internal::ArenaStringPtr tracker_test_save_folder_;
  ::caffe::VideoTrackerParameter* video_tracker_parameter_;
  bool show_tracking_;
  bool save_tracking_;
  bool test_use_camera_;
  bool test_compute_loss_;
  ::google::protobuf::int32 test_interval_;
  static ::std::string* _default_ap_version_;
  ::google::protobuf::internal::ArenaStringPtr ap_version_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_iter_;
  float base_lr_;
  ::google::protobuf::int32 display_;
  ::google::protobuf::int32 average_loss_;
  ::google::protobuf::int32 max_iter_;
  ::google::protobuf::internal::ArenaStringPtr lr_policy_;
  ::google::protobuf::int32 iter_size_;
  float gamma_;
  float power_;
  float momentum_;
  static ::std::string* _default_regularization_type_;
  ::google::protobuf::internal::ArenaStringPtr regularization_type_;
  float weight_decay_;
  ::google::protobuf::int32 stepsize_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > stepvalue_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > plateau_winsize_;
  float clip_gradients_;
  ::google::protobuf::int32 snapshot_;
  ::google::protobuf::internal::ArenaStringPtr snapshot_prefix_;
  bool test_initialization_;
  bool snapshot_diff_;
  bool debug_info_;
  bool snapshot_after_train_;
  int snapshot_format_;
  int solver_mode_;
  ::google::protobuf::int32 device_id_;
  ::google::protobuf::int64 random_seed_;
  static ::std::string* _default_type_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  float delta_;
  float momentum2_;
  float rms_decay_;
  int solver_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SolverParameter* default_instance_;
};
// -------------------------------------------------------------------

class SolverState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SolverState) */ {
 public:
  SolverState();
  virtual ~SolverState();

  SolverState(const SolverState& from);

  inline SolverState& operator=(const SolverState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolverState& default_instance();

  void Swap(SolverState* other);

  // implements Message ----------------------------------------------

  inline SolverState* New() const { return New(NULL); }

  SolverState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolverState& from);
  void MergeFrom(const SolverState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SolverState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iter = 1;
  bool has_iter() const;
  void clear_iter();
  static const int kIterFieldNumber = 1;
  ::google::protobuf::int32 iter() const;
  void set_iter(::google::protobuf::int32 value);

  // optional string learned_net = 2;
  bool has_learned_net() const;
  void clear_learned_net();
  static const int kLearnedNetFieldNumber = 2;
  const ::std::string& learned_net() const;
  void set_learned_net(const ::std::string& value);
  void set_learned_net(const char* value);
  void set_learned_net(const char* value, size_t size);
  ::std::string* mutable_learned_net();
  ::std::string* release_learned_net();
  void set_allocated_learned_net(::std::string* learned_net);

  // repeated .caffe.BlobProto history = 3;
  int history_size() const;
  void clear_history();
  static const int kHistoryFieldNumber = 3;
  const ::caffe::BlobProto& history(int index) const;
  ::caffe::BlobProto* mutable_history(int index);
  ::caffe::BlobProto* add_history();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_history();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      history() const;

  // optional int32 current_step = 4 [default = 0];
  bool has_current_step() const;
  void clear_current_step();
  static const int kCurrentStepFieldNumber = 4;
  ::google::protobuf::int32 current_step() const;
  void set_current_step(::google::protobuf::int32 value);

  // optional float minimum_loss = 5 [default = 1e+38];
  bool has_minimum_loss() const;
  void clear_minimum_loss();
  static const int kMinimumLossFieldNumber = 5;
  float minimum_loss() const;
  void set_minimum_loss(float value);

  // optional int32 iter_last_event = 6 [default = 0];
  bool has_iter_last_event() const;
  void clear_iter_last_event();
  static const int kIterLastEventFieldNumber = 6;
  ::google::protobuf::int32 iter_last_event() const;
  void set_iter_last_event(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.SolverState)
 private:
  inline void set_has_iter();
  inline void clear_has_iter();
  inline void set_has_learned_net();
  inline void clear_has_learned_net();
  inline void set_has_current_step();
  inline void clear_has_current_step();
  inline void set_has_minimum_loss();
  inline void clear_has_minimum_loss();
  inline void set_has_iter_last_event();
  inline void clear_has_iter_last_event();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr learned_net_;
  ::google::protobuf::int32 iter_;
  ::google::protobuf::int32 current_step_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > history_;
  float minimum_loss_;
  ::google::protobuf::int32 iter_last_event_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SolverState* default_instance_;
};
// -------------------------------------------------------------------

class NetState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NetState) */ {
 public:
  NetState();
  virtual ~NetState();

  NetState(const NetState& from);

  inline NetState& operator=(const NetState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetState& default_instance();

  void Swap(NetState* other);

  // implements Message ----------------------------------------------

  inline NetState* New() const { return New(NULL); }

  NetState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetState& from);
  void MergeFrom(const NetState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.Phase phase = 1 [default = TEST];
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 1;
  ::caffe::Phase phase() const;
  void set_phase(::caffe::Phase value);

  // optional int32 level = 2 [default = 0];
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // repeated string stage = 3;
  int stage_size() const;
  void clear_stage();
  static const int kStageFieldNumber = 3;
  const ::std::string& stage(int index) const;
  ::std::string* mutable_stage(int index);
  void set_stage(int index, const ::std::string& value);
  void set_stage(int index, const char* value);
  void set_stage(int index, const char* value, size_t size);
  ::std::string* add_stage();
  void add_stage(const ::std::string& value);
  void add_stage(const char* value);
  void add_stage(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stage() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stage();

  // @@protoc_insertion_point(class_scope:caffe.NetState)
 private:
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int phase_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stage_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static NetState* default_instance_;
};
// -------------------------------------------------------------------

class NetStateRule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NetStateRule) */ {
 public:
  NetStateRule();
  virtual ~NetStateRule();

  NetStateRule(const NetStateRule& from);

  inline NetStateRule& operator=(const NetStateRule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetStateRule& default_instance();

  void Swap(NetStateRule* other);

  // implements Message ----------------------------------------------

  inline NetStateRule* New() const { return New(NULL); }

  NetStateRule* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetStateRule& from);
  void MergeFrom(const NetStateRule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetStateRule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.Phase phase = 1;
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 1;
  ::caffe::Phase phase() const;
  void set_phase(::caffe::Phase value);

  // optional int32 min_level = 2;
  bool has_min_level() const;
  void clear_min_level();
  static const int kMinLevelFieldNumber = 2;
  ::google::protobuf::int32 min_level() const;
  void set_min_level(::google::protobuf::int32 value);

  // optional int32 max_level = 3;
  bool has_max_level() const;
  void clear_max_level();
  static const int kMaxLevelFieldNumber = 3;
  ::google::protobuf::int32 max_level() const;
  void set_max_level(::google::protobuf::int32 value);

  // repeated string stage = 4;
  int stage_size() const;
  void clear_stage();
  static const int kStageFieldNumber = 4;
  const ::std::string& stage(int index) const;
  ::std::string* mutable_stage(int index);
  void set_stage(int index, const ::std::string& value);
  void set_stage(int index, const char* value);
  void set_stage(int index, const char* value, size_t size);
  ::std::string* add_stage();
  void add_stage(const ::std::string& value);
  void add_stage(const char* value);
  void add_stage(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stage() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stage();

  // repeated string not_stage = 5;
  int not_stage_size() const;
  void clear_not_stage();
  static const int kNotStageFieldNumber = 5;
  const ::std::string& not_stage(int index) const;
  ::std::string* mutable_not_stage(int index);
  void set_not_stage(int index, const ::std::string& value);
  void set_not_stage(int index, const char* value);
  void set_not_stage(int index, const char* value, size_t size);
  ::std::string* add_not_stage();
  void add_not_stage(const ::std::string& value);
  void add_not_stage(const char* value);
  void add_not_stage(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& not_stage() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_not_stage();

  // @@protoc_insertion_point(class_scope:caffe.NetStateRule)
 private:
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_min_level();
  inline void clear_has_min_level();
  inline void set_has_max_level();
  inline void clear_has_max_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int phase_;
  ::google::protobuf::int32 min_level_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stage_;
  ::google::protobuf::RepeatedPtrField< ::std::string> not_stage_;
  ::google::protobuf::int32 max_level_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static NetStateRule* default_instance_;
};
// -------------------------------------------------------------------

class ParamSpec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ParamSpec) */ {
 public:
  ParamSpec();
  virtual ~ParamSpec();

  ParamSpec(const ParamSpec& from);

  inline ParamSpec& operator=(const ParamSpec& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamSpec& default_instance();

  void Swap(ParamSpec* other);

  // implements Message ----------------------------------------------

  inline ParamSpec* New() const { return New(NULL); }

  ParamSpec* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParamSpec& from);
  void MergeFrom(const ParamSpec& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ParamSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ParamSpec_DimCheckMode DimCheckMode;
  static const DimCheckMode STRICT =
    ParamSpec_DimCheckMode_STRICT;
  static const DimCheckMode PERMISSIVE =
    ParamSpec_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return ParamSpec_DimCheckMode_IsValid(value);
  }
  static const DimCheckMode DimCheckMode_MIN =
    ParamSpec_DimCheckMode_DimCheckMode_MIN;
  static const DimCheckMode DimCheckMode_MAX =
    ParamSpec_DimCheckMode_DimCheckMode_MAX;
  static const int DimCheckMode_ARRAYSIZE =
    ParamSpec_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DimCheckMode_descriptor() {
    return ParamSpec_DimCheckMode_descriptor();
  }
  static inline const ::std::string& DimCheckMode_Name(DimCheckMode value) {
    return ParamSpec_DimCheckMode_Name(value);
  }
  static inline bool DimCheckMode_Parse(const ::std::string& name,
      DimCheckMode* value) {
    return ParamSpec_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
  bool has_share_mode() const;
  void clear_share_mode();
  static const int kShareModeFieldNumber = 2;
  ::caffe::ParamSpec_DimCheckMode share_mode() const;
  void set_share_mode(::caffe::ParamSpec_DimCheckMode value);

  // optional float lr_mult = 3 [default = 0];
  bool has_lr_mult() const;
  void clear_lr_mult();
  static const int kLrMultFieldNumber = 3;
  float lr_mult() const;
  void set_lr_mult(float value);

  // optional float decay_mult = 4 [default = 0];
  bool has_decay_mult() const;
  void clear_decay_mult();
  static const int kDecayMultFieldNumber = 4;
  float decay_mult() const;
  void set_decay_mult(float value);

  // @@protoc_insertion_point(class_scope:caffe.ParamSpec)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_share_mode();
  inline void clear_has_share_mode();
  inline void set_has_lr_mult();
  inline void clear_has_lr_mult();
  inline void set_has_decay_mult();
  inline void clear_has_decay_mult();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int share_mode_;
  float lr_mult_;
  float decay_mult_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ParamSpec* default_instance_;
};
// -------------------------------------------------------------------

class LayerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LayerParameter) */ {
 public:
  LayerParameter();
  virtual ~LayerParameter();

  LayerParameter(const LayerParameter& from);

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerParameter& default_instance();

  void Swap(LayerParameter* other);

  // implements Message ----------------------------------------------

  inline LayerParameter* New() const { return New(NULL); }

  LayerParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerParameter& from);
  void MergeFrom(const LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // repeated string bottom = 3;
  int bottom_size() const;
  void clear_bottom();
  static const int kBottomFieldNumber = 3;
  const ::std::string& bottom(int index) const;
  ::std::string* mutable_bottom(int index);
  void set_bottom(int index, const ::std::string& value);
  void set_bottom(int index, const char* value);
  void set_bottom(int index, const char* value, size_t size);
  ::std::string* add_bottom();
  void add_bottom(const ::std::string& value);
  void add_bottom(const char* value);
  void add_bottom(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 4;
  int top_size() const;
  void clear_top();
  static const int kTopFieldNumber = 4;
  const ::std::string& top(int index) const;
  ::std::string* mutable_top(int index);
  void set_top(int index, const ::std::string& value);
  void set_top(int index, const char* value);
  void set_top(int index, const char* value, size_t size);
  ::std::string* add_top();
  void add_top(const ::std::string& value);
  void add_top(const char* value);
  void add_top(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // optional .caffe.Phase phase = 10;
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 10;
  ::caffe::Phase phase() const;
  void set_phase(::caffe::Phase value);

  // repeated float loss_weight = 5;
  int loss_weight_size() const;
  void clear_loss_weight();
  static const int kLossWeightFieldNumber = 5;
  float loss_weight(int index) const;
  void set_loss_weight(int index, float value);
  void add_loss_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      loss_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_loss_weight();

  // repeated .caffe.ParamSpec param = 6;
  int param_size() const;
  void clear_param();
  static const int kParamFieldNumber = 6;
  const ::caffe::ParamSpec& param(int index) const;
  ::caffe::ParamSpec* mutable_param(int index);
  ::caffe::ParamSpec* add_param();
  ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
      mutable_param();
  const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
      param() const;

  // repeated .caffe.BlobProto blobs = 7;
  int blobs_size() const;
  void clear_blobs();
  static const int kBlobsFieldNumber = 7;
  const ::caffe::BlobProto& blobs(int index) const;
  ::caffe::BlobProto* mutable_blobs(int index);
  ::caffe::BlobProto* add_blobs();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;

  // optional float weight_satvalue = 373 [default = -1];
  bool has_weight_satvalue() const;
  void clear_weight_satvalue();
  static const int kWeightSatvalueFieldNumber = 373;
  float weight_satvalue() const;
  void set_weight_satvalue(float value);

  // repeated bool propagate_down = 11;
  int propagate_down_size() const;
  void clear_propagate_down();
  static const int kPropagateDownFieldNumber = 11;
  bool propagate_down(int index) const;
  void set_propagate_down(int index, bool value);
  void add_propagate_down(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      propagate_down() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_propagate_down();

  // repeated .caffe.NetStateRule include = 8;
  int include_size() const;
  void clear_include();
  static const int kIncludeFieldNumber = 8;
  const ::caffe::NetStateRule& include(int index) const;
  ::caffe::NetStateRule* mutable_include(int index);
  ::caffe::NetStateRule* add_include();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_include();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      include() const;

  // repeated .caffe.NetStateRule exclude = 9;
  int exclude_size() const;
  void clear_exclude();
  static const int kExcludeFieldNumber = 9;
  const ::caffe::NetStateRule& exclude(int index) const;
  ::caffe::NetStateRule* mutable_exclude(int index);
  ::caffe::NetStateRule* add_exclude();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_exclude();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      exclude() const;

  // optional .caffe.TransformationParameter transform_param = 100;
  bool has_transform_param() const;
  void clear_transform_param();
  static const int kTransformParamFieldNumber = 100;
  const ::caffe::TransformationParameter& transform_param() const;
  ::caffe::TransformationParameter* mutable_transform_param();
  ::caffe::TransformationParameter* release_transform_param();
  void set_allocated_transform_param(::caffe::TransformationParameter* transform_param);

  // optional .caffe.PoseDataTransformationParameter pose_data_transform_param = 193;
  bool has_pose_data_transform_param() const;
  void clear_pose_data_transform_param();
  static const int kPoseDataTransformParamFieldNumber = 193;
  const ::caffe::PoseDataTransformationParameter& pose_data_transform_param() const;
  ::caffe::PoseDataTransformationParameter* mutable_pose_data_transform_param();
  ::caffe::PoseDataTransformationParameter* release_pose_data_transform_param();
  void set_allocated_pose_data_transform_param(::caffe::PoseDataTransformationParameter* pose_data_transform_param);

  // optional .caffe.ReidTransformationParameter reid_transform_param = 199;
  bool has_reid_transform_param() const;
  void clear_reid_transform_param();
  static const int kReidTransformParamFieldNumber = 199;
  const ::caffe::ReidTransformationParameter& reid_transform_param() const;
  ::caffe::ReidTransformationParameter* mutable_reid_transform_param();
  ::caffe::ReidTransformationParameter* release_reid_transform_param();
  void set_allocated_reid_transform_param(::caffe::ReidTransformationParameter* reid_transform_param);

  // optional .caffe.UnifiedTransformationParameter unified_data_transform_param = 217;
  bool has_unified_data_transform_param() const;
  void clear_unified_data_transform_param();
  static const int kUnifiedDataTransformParamFieldNumber = 217;
  const ::caffe::UnifiedTransformationParameter& unified_data_transform_param() const;
  ::caffe::UnifiedTransformationParameter* mutable_unified_data_transform_param();
  ::caffe::UnifiedTransformationParameter* release_unified_data_transform_param();
  void set_allocated_unified_data_transform_param(::caffe::UnifiedTransformationParameter* unified_data_transform_param);

  // optional .caffe.LossParameter loss_param = 101;
  bool has_loss_param() const;
  void clear_loss_param();
  static const int kLossParamFieldNumber = 101;
  const ::caffe::LossParameter& loss_param() const;
  ::caffe::LossParameter* mutable_loss_param();
  ::caffe::LossParameter* release_loss_param();
  void set_allocated_loss_param(::caffe::LossParameter* loss_param);

  // optional .caffe.AccuracyParameter accuracy_param = 102;
  bool has_accuracy_param() const;
  void clear_accuracy_param();
  static const int kAccuracyParamFieldNumber = 102;
  const ::caffe::AccuracyParameter& accuracy_param() const;
  ::caffe::AccuracyParameter* mutable_accuracy_param();
  ::caffe::AccuracyParameter* release_accuracy_param();
  void set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param);

  // optional .caffe.AnnotatedDataParameter annotated_data_param = 200;
  bool has_annotated_data_param() const;
  void clear_annotated_data_param();
  static const int kAnnotatedDataParamFieldNumber = 200;
  const ::caffe::AnnotatedDataParameter& annotated_data_param() const;
  ::caffe::AnnotatedDataParameter* mutable_annotated_data_param();
  ::caffe::AnnotatedDataParameter* release_annotated_data_param();
  void set_allocated_annotated_data_param(::caffe::AnnotatedDataParameter* annotated_data_param);

  // optional .caffe.ArgMaxParameter argmax_param = 103;
  bool has_argmax_param() const;
  void clear_argmax_param();
  static const int kArgmaxParamFieldNumber = 103;
  const ::caffe::ArgMaxParameter& argmax_param() const;
  ::caffe::ArgMaxParameter* mutable_argmax_param();
  ::caffe::ArgMaxParameter* release_argmax_param();
  void set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param);

  // optional .caffe.AllocateIdParameter allocate_id_param = 279;
  bool has_allocate_id_param() const;
  void clear_allocate_id_param();
  static const int kAllocateIdParamFieldNumber = 279;
  const ::caffe::AllocateIdParameter& allocate_id_param() const;
  ::caffe::AllocateIdParameter* mutable_allocate_id_param();
  ::caffe::AllocateIdParameter* release_allocate_id_param();
  void set_allocated_allocate_id_param(::caffe::AllocateIdParameter* allocate_id_param);

  // optional .caffe.BatchNormParameter batch_norm_param = 139;
  bool has_batch_norm_param() const;
  void clear_batch_norm_param();
  static const int kBatchNormParamFieldNumber = 139;
  const ::caffe::BatchNormParameter& batch_norm_param() const;
  ::caffe::BatchNormParameter* mutable_batch_norm_param();
  ::caffe::BatchNormParameter* release_batch_norm_param();
  void set_allocated_batch_norm_param(::caffe::BatchNormParameter* batch_norm_param);

  // optional .caffe.BiasParameter bias_param = 141;
  bool has_bias_param() const;
  void clear_bias_param();
  static const int kBiasParamFieldNumber = 141;
  const ::caffe::BiasParameter& bias_param() const;
  ::caffe::BiasParameter* mutable_bias_param();
  ::caffe::BiasParameter* release_bias_param();
  void set_allocated_bias_param(::caffe::BiasParameter* bias_param);

  // optional .caffe.ConcatParameter concat_param = 104;
  bool has_concat_param() const;
  void clear_concat_param();
  static const int kConcatParamFieldNumber = 104;
  const ::caffe::ConcatParameter& concat_param() const;
  ::caffe::ConcatParameter* mutable_concat_param();
  ::caffe::ConcatParameter* release_concat_param();
  void set_allocated_concat_param(::caffe::ConcatParameter* concat_param);

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
  bool has_contrastive_loss_param() const;
  void clear_contrastive_loss_param();
  static const int kContrastiveLossParamFieldNumber = 105;
  const ::caffe::ContrastiveLossParameter& contrastive_loss_param() const;
  ::caffe::ContrastiveLossParameter* mutable_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* release_contrastive_loss_param();
  void set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param);

  // optional .caffe.ConvolutionParameter convolution_param = 106;
  bool has_convolution_param() const;
  void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 106;
  const ::caffe::ConvolutionParameter& convolution_param() const;
  ::caffe::ConvolutionParameter* mutable_convolution_param();
  ::caffe::ConvolutionParameter* release_convolution_param();
  void set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param);

  // optional .caffe.CropParameter crop_param = 144;
  bool has_crop_param() const;
  void clear_crop_param();
  static const int kCropParamFieldNumber = 144;
  const ::caffe::CropParameter& crop_param() const;
  ::caffe::CropParameter* mutable_crop_param();
  ::caffe::CropParameter* release_crop_param();
  void set_allocated_crop_param(::caffe::CropParameter* crop_param);

  // optional .caffe.ConnectLimbParameter connect_limb_param = 168;
  bool has_connect_limb_param() const;
  void clear_connect_limb_param();
  static const int kConnectLimbParamFieldNumber = 168;
  const ::caffe::ConnectLimbParameter& connect_limb_param() const;
  ::caffe::ConnectLimbParameter* mutable_connect_limb_param();
  ::caffe::ConnectLimbParameter* release_connect_limb_param();
  void set_allocated_connect_limb_param(::caffe::ConnectLimbParameter* connect_limb_param);

  // optional .caffe.DataParameter data_param = 107;
  bool has_data_param() const;
  void clear_data_param();
  static const int kDataParamFieldNumber = 107;
  const ::caffe::DataParameter& data_param() const;
  ::caffe::DataParameter* mutable_data_param();
  ::caffe::DataParameter* release_data_param();
  void set_allocated_data_param(::caffe::DataParameter* data_param);

  // optional .caffe.DetectionEvaluateParameter detection_evaluate_param = 205;
  bool has_detection_evaluate_param() const;
  void clear_detection_evaluate_param();
  static const int kDetectionEvaluateParamFieldNumber = 205;
  const ::caffe::DetectionEvaluateParameter& detection_evaluate_param() const;
  ::caffe::DetectionEvaluateParameter* mutable_detection_evaluate_param();
  ::caffe::DetectionEvaluateParameter* release_detection_evaluate_param();
  void set_allocated_detection_evaluate_param(::caffe::DetectionEvaluateParameter* detection_evaluate_param);

  // optional .caffe.DetectionOutputParameter detection_output_param = 204;
  bool has_detection_output_param() const;
  void clear_detection_output_param();
  static const int kDetectionOutputParamFieldNumber = 204;
  const ::caffe::DetectionOutputParameter& detection_output_param() const;
  ::caffe::DetectionOutputParameter* mutable_detection_output_param();
  ::caffe::DetectionOutputParameter* release_detection_output_param();
  void set_allocated_detection_output_param(::caffe::DetectionOutputParameter* detection_output_param);

  // optional .caffe.DetectionMcOutputParameter detection_mc_output_param = 192;
  bool has_detection_mc_output_param() const;
  void clear_detection_mc_output_param();
  static const int kDetectionMcOutputParamFieldNumber = 192;
  const ::caffe::DetectionMcOutputParameter& detection_mc_output_param() const;
  ::caffe::DetectionMcOutputParameter* mutable_detection_mc_output_param();
  ::caffe::DetectionMcOutputParameter* release_detection_mc_output_param();
  void set_allocated_detection_mc_output_param(::caffe::DetectionMcOutputParameter* detection_mc_output_param);

  // optional .caffe.DropoutParameter dropout_param = 108;
  bool has_dropout_param() const;
  void clear_dropout_param();
  static const int kDropoutParamFieldNumber = 108;
  const ::caffe::DropoutParameter& dropout_param() const;
  ::caffe::DropoutParameter* mutable_dropout_param();
  ::caffe::DropoutParameter* release_dropout_param();
  void set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param);

  // optional .caffe.DummyDataParameter dummy_data_param = 109;
  bool has_dummy_data_param() const;
  void clear_dummy_data_param();
  static const int kDummyDataParamFieldNumber = 109;
  const ::caffe::DummyDataParameter& dummy_data_param() const;
  ::caffe::DummyDataParameter* mutable_dummy_data_param();
  ::caffe::DummyDataParameter* release_dummy_data_param();
  void set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param);

  // optional .caffe.EltwiseParameter eltwise_param = 110;
  bool has_eltwise_param() const;
  void clear_eltwise_param();
  static const int kEltwiseParamFieldNumber = 110;
  const ::caffe::EltwiseParameter& eltwise_param() const;
  ::caffe::EltwiseParameter* mutable_eltwise_param();
  ::caffe::EltwiseParameter* release_eltwise_param();
  void set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param);

  // optional .caffe.ELUParameter elu_param = 140;
  bool has_elu_param() const;
  void clear_elu_param();
  static const int kEluParamFieldNumber = 140;
  const ::caffe::ELUParameter& elu_param() const;
  ::caffe::ELUParameter* mutable_elu_param();
  ::caffe::ELUParameter* release_elu_param();
  void set_allocated_elu_param(::caffe::ELUParameter* elu_param);

  // optional .caffe.EmbedParameter embed_param = 137;
  bool has_embed_param() const;
  void clear_embed_param();
  static const int kEmbedParamFieldNumber = 137;
  const ::caffe::EmbedParameter& embed_param() const;
  ::caffe::EmbedParameter* mutable_embed_param();
  ::caffe::EmbedParameter* release_embed_param();
  void set_allocated_embed_param(::caffe::EmbedParameter* embed_param);

  // optional .caffe.EasymatchParameter easy_match_param = 163;
  bool has_easy_match_param() const;
  void clear_easy_match_param();
  static const int kEasyMatchParamFieldNumber = 163;
  const ::caffe::EasymatchParameter& easy_match_param() const;
  ::caffe::EasymatchParameter* mutable_easy_match_param();
  ::caffe::EasymatchParameter* release_easy_match_param();
  void set_allocated_easy_match_param(::caffe::EasymatchParameter* easy_match_param);

  // optional .caffe.MatchParameter match_param = 164;
  bool has_match_param() const;
  void clear_match_param();
  static const int kMatchParamFieldNumber = 164;
  const ::caffe::MatchParameter& match_param() const;
  ::caffe::MatchParameter* mutable_match_param();
  ::caffe::MatchParameter* release_match_param();
  void set_allocated_match_param(::caffe::MatchParameter* match_param);

  // optional .caffe.ExpParameter exp_param = 111;
  bool has_exp_param() const;
  void clear_exp_param();
  static const int kExpParamFieldNumber = 111;
  const ::caffe::ExpParameter& exp_param() const;
  ::caffe::ExpParameter* mutable_exp_param();
  ::caffe::ExpParameter* release_exp_param();
  void set_allocated_exp_param(::caffe::ExpParameter* exp_param);

  // optional .caffe.FlattenParameter flatten_param = 135;
  bool has_flatten_param() const;
  void clear_flatten_param();
  static const int kFlattenParamFieldNumber = 135;
  const ::caffe::FlattenParameter& flatten_param() const;
  ::caffe::FlattenParameter* mutable_flatten_param();
  ::caffe::FlattenParameter* release_flatten_param();
  void set_allocated_flatten_param(::caffe::FlattenParameter* flatten_param);

  // optional .caffe.GradClipParameter grad_clip_param = 231;
  bool has_grad_clip_param() const;
  void clear_grad_clip_param();
  static const int kGradClipParamFieldNumber = 231;
  const ::caffe::GradClipParameter& grad_clip_param() const;
  ::caffe::GradClipParameter* mutable_grad_clip_param();
  ::caffe::GradClipParameter* release_grad_clip_param();
  void set_allocated_grad_clip_param(::caffe::GradClipParameter* grad_clip_param);

  // optional .caffe.HDF5DataParameter hdf5_data_param = 112;
  bool has_hdf5_data_param() const;
  void clear_hdf5_data_param();
  static const int kHdf5DataParamFieldNumber = 112;
  const ::caffe::HDF5DataParameter& hdf5_data_param() const;
  ::caffe::HDF5DataParameter* mutable_hdf5_data_param();
  ::caffe::HDF5DataParameter* release_hdf5_data_param();
  void set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
  bool has_hdf5_output_param() const;
  void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 113;
  const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);

  // optional .caffe.HingeLossParameter hinge_loss_param = 114;
  bool has_hinge_loss_param() const;
  void clear_hinge_loss_param();
  static const int kHingeLossParamFieldNumber = 114;
  const ::caffe::HingeLossParameter& hinge_loss_param() const;
  ::caffe::HingeLossParameter* mutable_hinge_loss_param();
  ::caffe::HingeLossParameter* release_hinge_loss_param();
  void set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param);

  // optional .caffe.ImageDataParameter image_data_param = 115;
  bool has_image_data_param() const;
  void clear_image_data_param();
  static const int kImageDataParamFieldNumber = 115;
  const ::caffe::ImageDataParameter& image_data_param() const;
  ::caffe::ImageDataParameter* mutable_image_data_param();
  ::caffe::ImageDataParameter* release_image_data_param();
  void set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param);

  // optional .caffe.InfogainLossParameter infogain_loss_param = 116;
  bool has_infogain_loss_param() const;
  void clear_infogain_loss_param();
  static const int kInfogainLossParamFieldNumber = 116;
  const ::caffe::InfogainLossParameter& infogain_loss_param() const;
  ::caffe::InfogainLossParameter* mutable_infogain_loss_param();
  ::caffe::InfogainLossParameter* release_infogain_loss_param();
  void set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param);

  // optional .caffe.InnerProductParameter inner_product_param = 117;
  bool has_inner_product_param() const;
  void clear_inner_product_param();
  static const int kInnerProductParamFieldNumber = 117;
  const ::caffe::InnerProductParameter& inner_product_param() const;
  ::caffe::InnerProductParameter* mutable_inner_product_param();
  ::caffe::InnerProductParameter* release_inner_product_param();
  void set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param);

  // optional .caffe.InputParameter input_param = 143;
  bool has_input_param() const;
  void clear_input_param();
  static const int kInputParamFieldNumber = 143;
  const ::caffe::InputParameter& input_param() const;
  ::caffe::InputParameter* mutable_input_param();
  ::caffe::InputParameter* release_input_param();
  void set_allocated_input_param(::caffe::InputParameter* input_param);

  // optional .caffe.ImResizeParameter imresize_param = 149;
  bool has_imresize_param() const;
  void clear_imresize_param();
  static const int kImresizeParamFieldNumber = 149;
  const ::caffe::ImResizeParameter& imresize_param() const;
  ::caffe::ImResizeParameter* mutable_imresize_param();
  ::caffe::ImResizeParameter* release_imresize_param();
  void set_allocated_imresize_param(::caffe::ImResizeParameter* imresize_param);

  // optional .caffe.LogParameter log_param = 134;
  bool has_log_param() const;
  void clear_log_param();
  static const int kLogParamFieldNumber = 134;
  const ::caffe::LogParameter& log_param() const;
  ::caffe::LogParameter* mutable_log_param();
  ::caffe::LogParameter* release_log_param();
  void set_allocated_log_param(::caffe::LogParameter* log_param);

  // optional .caffe.LRNParameter lrn_param = 118;
  bool has_lrn_param() const;
  void clear_lrn_param();
  static const int kLrnParamFieldNumber = 118;
  const ::caffe::LRNParameter& lrn_param() const;
  ::caffe::LRNParameter* mutable_lrn_param();
  ::caffe::LRNParameter* release_lrn_param();
  void set_allocated_lrn_param(::caffe::LRNParameter* lrn_param);

  // optional .caffe.LabeledMatchParameter labeled_match_param = 247;
  bool has_labeled_match_param() const;
  void clear_labeled_match_param();
  static const int kLabeledMatchParamFieldNumber = 247;
  const ::caffe::LabeledMatchParameter& labeled_match_param() const;
  ::caffe::LabeledMatchParameter* mutable_labeled_match_param();
  ::caffe::LabeledMatchParameter* release_labeled_match_param();
  void set_allocated_labeled_match_param(::caffe::LabeledMatchParameter* labeled_match_param);

  // optional .caffe.UnlabeledMatchParameter unlabeled_match_param = 248;
  bool has_unlabeled_match_param() const;
  void clear_unlabeled_match_param();
  static const int kUnlabeledMatchParamFieldNumber = 248;
  const ::caffe::UnlabeledMatchParameter& unlabeled_match_param() const;
  ::caffe::UnlabeledMatchParameter* mutable_unlabeled_match_param();
  ::caffe::UnlabeledMatchParameter* release_unlabeled_match_param();
  void set_allocated_unlabeled_match_param(::caffe::UnlabeledMatchParameter* unlabeled_match_param);

  // optional .caffe.MemoryDataParameter memory_data_param = 119;
  bool has_memory_data_param() const;
  void clear_memory_data_param();
  static const int kMemoryDataParamFieldNumber = 119;
  const ::caffe::MemoryDataParameter& memory_data_param() const;
  ::caffe::MemoryDataParameter* mutable_memory_data_param();
  ::caffe::MemoryDataParameter* release_memory_data_param();
  void set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param);

  // optional .caffe.MaskGenParameter mask_gen_param = 229;
  bool has_mask_gen_param() const;
  void clear_mask_gen_param();
  static const int kMaskGenParamFieldNumber = 229;
  const ::caffe::MaskGenParameter& mask_gen_param() const;
  ::caffe::MaskGenParameter* mutable_mask_gen_param();
  ::caffe::MaskGenParameter* release_mask_gen_param();
  void set_allocated_mask_gen_param(::caffe::MaskGenParameter* mask_gen_param);

  // optional .caffe.KpsGenParameter kps_gen_param = 230;
  bool has_kps_gen_param() const;
  void clear_kps_gen_param();
  static const int kKpsGenParamFieldNumber = 230;
  const ::caffe::KpsGenParameter& kps_gen_param() const;
  ::caffe::KpsGenParameter* mutable_kps_gen_param();
  ::caffe::KpsGenParameter* release_kps_gen_param();
  void set_allocated_kps_gen_param(::caffe::KpsGenParameter* kps_gen_param);

  // optional .caffe.KpsEvalParameter kps_eval_param = 233;
  bool has_kps_eval_param() const;
  void clear_kps_eval_param();
  static const int kKpsEvalParamFieldNumber = 233;
  const ::caffe::KpsEvalParameter& kps_eval_param() const;
  ::caffe::KpsEvalParameter* mutable_kps_eval_param();
  ::caffe::KpsEvalParameter* release_kps_eval_param();
  void set_allocated_kps_eval_param(::caffe::KpsEvalParameter* kps_eval_param);

  // optional .caffe.MultiBoxLossParameter multibox_loss_param = 201;
  bool has_multibox_loss_param() const;
  void clear_multibox_loss_param();
  static const int kMultiboxLossParamFieldNumber = 201;
  const ::caffe::MultiBoxLossParameter& multibox_loss_param() const;
  ::caffe::MultiBoxLossParameter* mutable_multibox_loss_param();
  ::caffe::MultiBoxLossParameter* release_multibox_loss_param();
  void set_allocated_multibox_loss_param(::caffe::MultiBoxLossParameter* multibox_loss_param);

  // optional .caffe.BBoxLossParameter bbox_loss_param = 251;
  bool has_bbox_loss_param() const;
  void clear_bbox_loss_param();
  static const int kBboxLossParamFieldNumber = 251;
  const ::caffe::BBoxLossParameter& bbox_loss_param() const;
  ::caffe::BBoxLossParameter* mutable_bbox_loss_param();
  ::caffe::BBoxLossParameter* release_bbox_loss_param();
  void set_allocated_bbox_loss_param(::caffe::BBoxLossParameter* bbox_loss_param);

  // optional .caffe.DenseBBoxLossParameter dense_bbox_loss_param = 253;
  bool has_dense_bbox_loss_param() const;
  void clear_dense_bbox_loss_param();
  static const int kDenseBboxLossParamFieldNumber = 253;
  const ::caffe::DenseBBoxLossParameter& dense_bbox_loss_param() const;
  ::caffe::DenseBBoxLossParameter* mutable_dense_bbox_loss_param();
  ::caffe::DenseBBoxLossParameter* release_dense_bbox_loss_param();
  void set_allocated_dense_bbox_loss_param(::caffe::DenseBBoxLossParameter* dense_bbox_loss_param);

  // optional .caffe.McBoxLossParameter mcbox_loss_param = 188;
  bool has_mcbox_loss_param() const;
  void clear_mcbox_loss_param();
  static const int kMcboxLossParamFieldNumber = 188;
  const ::caffe::McBoxLossParameter& mcbox_loss_param() const;
  ::caffe::McBoxLossParameter* mutable_mcbox_loss_param();
  ::caffe::McBoxLossParameter* release_mcbox_loss_param();
  void set_allocated_mcbox_loss_param(::caffe::McBoxLossParameter* mcbox_loss_param);

  // optional .caffe.MultiMcBoxLossParameter multimcbox_loss_param = 210;
  bool has_multimcbox_loss_param() const;
  void clear_multimcbox_loss_param();
  static const int kMultimcboxLossParamFieldNumber = 210;
  const ::caffe::MultiMcBoxLossParameter& multimcbox_loss_param() const;
  ::caffe::MultiMcBoxLossParameter* mutable_multimcbox_loss_param();
  ::caffe::MultiMcBoxLossParameter* release_multimcbox_loss_param();
  void set_allocated_multimcbox_loss_param(::caffe::MultiMcBoxLossParameter* multimcbox_loss_param);

  // optional .caffe.MVNParameter mvn_param = 120;
  bool has_mvn_param() const;
  void clear_mvn_param();
  static const int kMvnParamFieldNumber = 120;
  const ::caffe::MVNParameter& mvn_param() const;
  ::caffe::MVNParameter* mutable_mvn_param();
  ::caffe::MVNParameter* release_mvn_param();
  void set_allocated_mvn_param(::caffe::MVNParameter* mvn_param);

  // optional .caffe.MaskLossParameter mask_loss_param = 274;
  bool has_mask_loss_param() const;
  void clear_mask_loss_param();
  static const int kMaskLossParamFieldNumber = 274;
  const ::caffe::MaskLossParameter& mask_loss_param() const;
  ::caffe::MaskLossParameter* mutable_mask_loss_param();
  ::caffe::MaskLossParameter* release_mask_loss_param();
  void set_allocated_mask_loss_param(::caffe::MaskLossParameter* mask_loss_param);

  // optional .caffe.NormalizeParameter norm_param = 206;
  bool has_norm_param() const;
  void clear_norm_param();
  static const int kNormParamFieldNumber = 206;
  const ::caffe::NormalizeParameter& norm_param() const;
  ::caffe::NormalizeParameter* mutable_norm_param();
  ::caffe::NormalizeParameter* release_norm_param();
  void set_allocated_norm_param(::caffe::NormalizeParameter* norm_param);

  // optional .caffe.NmsParameter nms_param = 209;
  bool has_nms_param() const;
  void clear_nms_param();
  static const int kNmsParamFieldNumber = 209;
  const ::caffe::NmsParameter& nms_param() const;
  ::caffe::NmsParameter* mutable_nms_param();
  ::caffe::NmsParameter* release_nms_param();
  void set_allocated_nms_param(::caffe::NmsParameter* nms_param);

  // optional .caffe.ParameterParameter parameter_param = 145;
  bool has_parameter_param() const;
  void clear_parameter_param();
  static const int kParameterParamFieldNumber = 145;
  const ::caffe::ParameterParameter& parameter_param() const;
  ::caffe::ParameterParameter* mutable_parameter_param();
  ::caffe::ParameterParameter* release_parameter_param();
  void set_allocated_parameter_param(::caffe::ParameterParameter* parameter_param);

  // optional .caffe.PermuteParameter permute_param = 202;
  bool has_permute_param() const;
  void clear_permute_param();
  static const int kPermuteParamFieldNumber = 202;
  const ::caffe::PermuteParameter& permute_param() const;
  ::caffe::PermuteParameter* mutable_permute_param();
  ::caffe::PermuteParameter* release_permute_param();
  void set_allocated_permute_param(::caffe::PermuteParameter* permute_param);

  // optional .caffe.PoolingParameter pooling_param = 121;
  bool has_pooling_param() const;
  void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 121;
  const ::caffe::PoolingParameter& pooling_param() const;
  ::caffe::PoolingParameter* mutable_pooling_param();
  ::caffe::PoolingParameter* release_pooling_param();
  void set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param);

  // optional .caffe.PowerParameter power_param = 122;
  bool has_power_param() const;
  void clear_power_param();
  static const int kPowerParamFieldNumber = 122;
  const ::caffe::PowerParameter& power_param() const;
  ::caffe::PowerParameter* mutable_power_param();
  ::caffe::PowerParameter* release_power_param();
  void set_allocated_power_param(::caffe::PowerParameter* power_param);

  // optional .caffe.PoseDataParameter pose_data_param = 177;
  bool has_pose_data_param() const;
  void clear_pose_data_param();
  static const int kPoseDataParamFieldNumber = 177;
  const ::caffe::PoseDataParameter& pose_data_param() const;
  ::caffe::PoseDataParameter* mutable_pose_data_param();
  ::caffe::PoseDataParameter* release_pose_data_param();
  void set_allocated_pose_data_param(::caffe::PoseDataParameter* pose_data_param);

  // optional .caffe.PoseEvalParameter pose_eval_param = 178;
  bool has_pose_eval_param() const;
  void clear_pose_eval_param();
  static const int kPoseEvalParamFieldNumber = 178;
  const ::caffe::PoseEvalParameter& pose_eval_param() const;
  ::caffe::PoseEvalParameter* mutable_pose_eval_param();
  ::caffe::PoseEvalParameter* release_pose_eval_param();
  void set_allocated_pose_eval_param(::caffe::PoseEvalParameter* pose_eval_param);

  // optional .caffe.PoseDetParameter pose_det_param = 179;
  bool has_pose_det_param() const;
  void clear_pose_det_param();
  static const int kPoseDetParamFieldNumber = 179;
  const ::caffe::PoseDetParameter& pose_det_param() const;
  ::caffe::PoseDetParameter* mutable_pose_det_param();
  ::caffe::PoseDetParameter* release_pose_det_param();
  void set_allocated_pose_det_param(::caffe::PoseDetParameter* pose_det_param);

  // optional .caffe.PeaksFindParameter peaks_find_param = 181;
  bool has_peaks_find_param() const;
  void clear_peaks_find_param();
  static const int kPeaksFindParamFieldNumber = 181;
  const ::caffe::PeaksFindParameter& peaks_find_param() const;
  ::caffe::PeaksFindParameter* mutable_peaks_find_param();
  ::caffe::PeaksFindParameter* release_peaks_find_param();
  void set_allocated_peaks_find_param(::caffe::PeaksFindParameter* peaks_find_param);

  // optional .caffe.PReLUParameter prelu_param = 131;
  bool has_prelu_param() const;
  void clear_prelu_param();
  static const int kPreluParamFieldNumber = 131;
  const ::caffe::PReLUParameter& prelu_param() const;
  ::caffe::PReLUParameter* mutable_prelu_param();
  ::caffe::PReLUParameter* release_prelu_param();
  void set_allocated_prelu_param(::caffe::PReLUParameter* prelu_param);

  // optional .caffe.PriorBoxParameter prior_box_param = 203;
  bool has_prior_box_param() const;
  void clear_prior_box_param();
  static const int kPriorBoxParamFieldNumber = 203;
  const ::caffe::PriorBoxParameter& prior_box_param() const;
  ::caffe::PriorBoxParameter* mutable_prior_box_param();
  ::caffe::PriorBoxParameter* release_prior_box_param();
  void set_allocated_prior_box_param(::caffe::PriorBoxParameter* prior_box_param);

  // optional .caffe.PythonParameter python_param = 130;
  bool has_python_param() const;
  void clear_python_param();
  static const int kPythonParamFieldNumber = 130;
  const ::caffe::PythonParameter& python_param() const;
  ::caffe::PythonParameter* mutable_python_param();
  ::caffe::PythonParameter* release_python_param();
  void set_allocated_python_param(::caffe::PythonParameter* python_param);

  // optional .caffe.RecurrentParameter recurrent_param = 146;
  bool has_recurrent_param() const;
  void clear_recurrent_param();
  static const int kRecurrentParamFieldNumber = 146;
  const ::caffe::RecurrentParameter& recurrent_param() const;
  ::caffe::RecurrentParameter* mutable_recurrent_param();
  ::caffe::RecurrentParameter* release_recurrent_param();
  void set_allocated_recurrent_param(::caffe::RecurrentParameter* recurrent_param);

  // optional .caffe.ReductionParameter reduction_param = 136;
  bool has_reduction_param() const;
  void clear_reduction_param();
  static const int kReductionParamFieldNumber = 136;
  const ::caffe::ReductionParameter& reduction_param() const;
  ::caffe::ReductionParameter* mutable_reduction_param();
  ::caffe::ReductionParameter* release_reduction_param();
  void set_allocated_reduction_param(::caffe::ReductionParameter* reduction_param);

  // optional .caffe.ReLUParameter relu_param = 123;
  bool has_relu_param() const;
  void clear_relu_param();
  static const int kReluParamFieldNumber = 123;
  const ::caffe::ReLUParameter& relu_param() const;
  ::caffe::ReLUParameter* mutable_relu_param();
  ::caffe::ReLUParameter* release_relu_param();
  void set_allocated_relu_param(::caffe::ReLUParameter* relu_param);

  // optional .caffe.ReidDataParameter reid_data_param = 277;
  bool has_reid_data_param() const;
  void clear_reid_data_param();
  static const int kReidDataParamFieldNumber = 277;
  const ::caffe::ReidDataParameter& reid_data_param() const;
  ::caffe::ReidDataParameter* mutable_reid_data_param();
  ::caffe::ReidDataParameter* release_reid_data_param();
  void set_allocated_reid_data_param(::caffe::ReidDataParameter* reid_data_param);

  // optional .caffe.RoiResizeParameter roi_resize_param = 195;
  bool has_roi_resize_param() const;
  void clear_roi_resize_param();
  static const int kRoiResizeParamFieldNumber = 195;
  const ::caffe::RoiResizeParameter& roi_resize_param() const;
  ::caffe::RoiResizeParameter* mutable_roi_resize_param();
  ::caffe::RoiResizeParameter* release_roi_resize_param();
  void set_allocated_roi_resize_param(::caffe::RoiResizeParameter* roi_resize_param);

  // optional .caffe.RoiAlignParameter roi_align_param = 196;
  bool has_roi_align_param() const;
  void clear_roi_align_param();
  static const int kRoiAlignParamFieldNumber = 196;
  const ::caffe::RoiAlignParameter& roi_align_param() const;
  ::caffe::RoiAlignParameter* mutable_roi_align_param();
  ::caffe::RoiAlignParameter* release_roi_align_param();
  void set_allocated_roi_align_param(::caffe::RoiAlignParameter* roi_align_param);

  // optional .caffe.FocusLossParameter focus_loss_param = 265;
  bool has_focus_loss_param() const;
  void clear_focus_loss_param();
  static const int kFocusLossParamFieldNumber = 265;
  const ::caffe::FocusLossParameter& focus_loss_param() const;
  ::caffe::FocusLossParameter* mutable_focus_loss_param();
  ::caffe::FocusLossParameter* release_focus_loss_param();
  void set_allocated_focus_loss_param(::caffe::FocusLossParameter* focus_loss_param);

  // optional .caffe.RoiDataParameter roi_data_param = 258;
  bool has_roi_data_param() const;
  void clear_roi_data_param();
  static const int kRoiDataParamFieldNumber = 258;
  const ::caffe::RoiDataParameter& roi_data_param() const;
  ::caffe::RoiDataParameter* mutable_roi_data_param();
  ::caffe::RoiDataParameter* release_roi_data_param();
  void set_allocated_roi_data_param(::caffe::RoiDataParameter* roi_data_param);

  // optional .caffe.ResizeBlobParameter resize_layer_param = 194;
  bool has_resize_layer_param() const;
  void clear_resize_layer_param();
  static const int kResizeLayerParamFieldNumber = 194;
  const ::caffe::ResizeBlobParameter& resize_layer_param() const;
  ::caffe::ResizeBlobParameter* mutable_resize_layer_param();
  ::caffe::ResizeBlobParameter* release_resize_layer_param();
  void set_allocated_resize_layer_param(::caffe::ResizeBlobParameter* resize_layer_param);

  // optional .caffe.ReorgParameter reorg_param = 150;
  bool has_reorg_param() const;
  void clear_reorg_param();
  static const int kReorgParamFieldNumber = 150;
  const ::caffe::ReorgParameter& reorg_param() const;
  ::caffe::ReorgParameter* mutable_reorg_param();
  ::caffe::ReorgParameter* release_reorg_param();
  void set_allocated_reorg_param(::caffe::ReorgParameter* reorg_param);

  // optional .caffe.ReshapeParameter reshape_param = 133;
  bool has_reshape_param() const;
  void clear_reshape_param();
  static const int kReshapeParamFieldNumber = 133;
  const ::caffe::ReshapeParameter& reshape_param() const;
  ::caffe::ReshapeParameter* mutable_reshape_param();
  ::caffe::ReshapeParameter* release_reshape_param();
  void set_allocated_reshape_param(::caffe::ReshapeParameter* reshape_param);

  // optional .caffe.ROIPoolingParameter roi_pooling_param = 167;
  bool has_roi_pooling_param() const;
  void clear_roi_pooling_param();
  static const int kRoiPoolingParamFieldNumber = 167;
  const ::caffe::ROIPoolingParameter& roi_pooling_param() const;
  ::caffe::ROIPoolingParameter* mutable_roi_pooling_param();
  ::caffe::ROIPoolingParameter* release_roi_pooling_param();
  void set_allocated_roi_pooling_param(::caffe::ROIPoolingParameter* roi_pooling_param);

  // optional .caffe.BoxMatchingParameter box_matching_param = 261;
  bool has_box_matching_param() const;
  void clear_box_matching_param();
  static const int kBoxMatchingParamFieldNumber = 261;
  const ::caffe::BoxMatchingParameter& box_matching_param() const;
  ::caffe::BoxMatchingParameter* mutable_box_matching_param();
  ::caffe::BoxMatchingParameter* release_box_matching_param();
  void set_allocated_box_matching_param(::caffe::BoxMatchingParameter* box_matching_param);

  // optional .caffe.ScaleParameter scale_param = 142;
  bool has_scale_param() const;
  void clear_scale_param();
  static const int kScaleParamFieldNumber = 142;
  const ::caffe::ScaleParameter& scale_param() const;
  ::caffe::ScaleParameter* mutable_scale_param();
  ::caffe::ScaleParameter* release_scale_param();
  void set_allocated_scale_param(::caffe::ScaleParameter* scale_param);

  // optional .caffe.SigmoidParameter sigmoid_param = 124;
  bool has_sigmoid_param() const;
  void clear_sigmoid_param();
  static const int kSigmoidParamFieldNumber = 124;
  const ::caffe::SigmoidParameter& sigmoid_param() const;
  ::caffe::SigmoidParameter* mutable_sigmoid_param();
  ::caffe::SigmoidParameter* release_sigmoid_param();
  void set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param);

  // optional .caffe.SoftmaxParameter softmax_param = 125;
  bool has_softmax_param() const;
  void clear_softmax_param();
  static const int kSoftmaxParamFieldNumber = 125;
  const ::caffe::SoftmaxParameter& softmax_param() const;
  ::caffe::SoftmaxParameter* mutable_softmax_param();
  ::caffe::SoftmaxParameter* release_softmax_param();
  void set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param);

  // optional .caffe.SPPParameter spp_param = 132;
  bool has_spp_param() const;
  void clear_spp_param();
  static const int kSppParamFieldNumber = 132;
  const ::caffe::SPPParameter& spp_param() const;
  ::caffe::SPPParameter* mutable_spp_param();
  ::caffe::SPPParameter* release_spp_param();
  void set_allocated_spp_param(::caffe::SPPParameter* spp_param);

  // optional .caffe.SliceParameter slice_param = 126;
  bool has_slice_param() const;
  void clear_slice_param();
  static const int kSliceParamFieldNumber = 126;
  const ::caffe::SliceParameter& slice_param() const;
  ::caffe::SliceParameter* mutable_slice_param();
  ::caffe::SliceParameter* release_slice_param();
  void set_allocated_slice_param(::caffe::SliceParameter* slice_param);

  // optional .caffe.SplitLabelParameter split_label_param = 252;
  bool has_split_label_param() const;
  void clear_split_label_param();
  static const int kSplitLabelParamFieldNumber = 252;
  const ::caffe::SplitLabelParameter& split_label_param() const;
  ::caffe::SplitLabelParameter* mutable_split_label_param();
  ::caffe::SplitLabelParameter* release_split_label_param();
  void set_allocated_split_label_param(::caffe::SplitLabelParameter* split_label_param);

  // optional .caffe.TanHParameter tanh_param = 127;
  bool has_tanh_param() const;
  void clear_tanh_param();
  static const int kTanhParamFieldNumber = 127;
  const ::caffe::TanHParameter& tanh_param() const;
  ::caffe::TanHParameter* mutable_tanh_param();
  ::caffe::TanHParameter* release_tanh_param();
  void set_allocated_tanh_param(::caffe::TanHParameter* tanh_param);

  // optional .caffe.ThresholdParameter threshold_param = 128;
  bool has_threshold_param() const;
  void clear_threshold_param();
  static const int kThresholdParamFieldNumber = 128;
  const ::caffe::ThresholdParameter& threshold_param() const;
  ::caffe::ThresholdParameter* mutable_threshold_param();
  ::caffe::ThresholdParameter* release_threshold_param();
  void set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param);

  // optional .caffe.TileParameter tile_param = 138;
  bool has_tile_param() const;
  void clear_tile_param();
  static const int kTileParamFieldNumber = 138;
  const ::caffe::TileParameter& tile_param() const;
  ::caffe::TileParameter* mutable_tile_param();
  ::caffe::TileParameter* release_tile_param();
  void set_allocated_tile_param(::caffe::TileParameter* tile_param);

  // optional .caffe.TrackerDataParameter tracker_data_param = 171;
  bool has_tracker_data_param() const;
  void clear_tracker_data_param();
  static const int kTrackerDataParamFieldNumber = 171;
  const ::caffe::TrackerDataParameter& tracker_data_param() const;
  ::caffe::TrackerDataParameter* mutable_tracker_data_param();
  ::caffe::TrackerDataParameter* release_tracker_data_param();
  void set_allocated_tracker_data_param(::caffe::TrackerDataParameter* tracker_data_param);

  // optional .caffe.TrackerMcOutParameter tracker_mcout_param = 184;
  bool has_tracker_mcout_param() const;
  void clear_tracker_mcout_param();
  static const int kTrackerMcoutParamFieldNumber = 184;
  const ::caffe::TrackerMcOutParameter& tracker_mcout_param() const;
  ::caffe::TrackerMcOutParameter* mutable_tracker_mcout_param();
  ::caffe::TrackerMcOutParameter* release_tracker_mcout_param();
  void set_allocated_tracker_mcout_param(::caffe::TrackerMcOutParameter* tracker_mcout_param);

  // optional .caffe.TrackerMcLossParameter tracker_mcloss_param = 183;
  bool has_tracker_mcloss_param() const;
  void clear_tracker_mcloss_param();
  static const int kTrackerMclossParamFieldNumber = 183;
  const ::caffe::TrackerMcLossParameter& tracker_mcloss_param() const;
  ::caffe::TrackerMcLossParameter* mutable_tracker_mcloss_param();
  ::caffe::TrackerMcLossParameter* release_tracker_mcloss_param();
  void set_allocated_tracker_mcloss_param(::caffe::TrackerMcLossParameter* tracker_mcloss_param);

  // optional .caffe.TrueRoiParameter true_roi_param = 197;
  bool has_true_roi_param() const;
  void clear_true_roi_param();
  static const int kTrueRoiParamFieldNumber = 197;
  const ::caffe::TrueRoiParameter& true_roi_param() const;
  ::caffe::TrueRoiParameter* mutable_true_roi_param();
  ::caffe::TrueRoiParameter* release_true_roi_param();
  void set_allocated_true_roi_param(::caffe::TrueRoiParameter* true_roi_param);

  // optional .caffe.FTrackerDataParameter ftracker_data_param = 172;
  bool has_ftracker_data_param() const;
  void clear_ftracker_data_param();
  static const int kFtrackerDataParamFieldNumber = 172;
  const ::caffe::FTrackerDataParameter& ftracker_data_param() const;
  ::caffe::FTrackerDataParameter* mutable_ftracker_data_param();
  ::caffe::FTrackerDataParameter* release_ftracker_data_param();
  void set_allocated_ftracker_data_param(::caffe::FTrackerDataParameter* ftracker_data_param);

  // optional .caffe.UnifiedDataParameter unified_data_param = 218;
  bool has_unified_data_param() const;
  void clear_unified_data_param();
  static const int kUnifiedDataParamFieldNumber = 218;
  const ::caffe::UnifiedDataParameter& unified_data_param() const;
  ::caffe::UnifiedDataParameter* mutable_unified_data_param();
  ::caffe::UnifiedDataParameter* release_unified_data_param();
  void set_allocated_unified_data_param(::caffe::UnifiedDataParameter* unified_data_param);

  // optional .caffe.VideoDataParameter video_data_param = 207;
  bool has_video_data_param() const;
  void clear_video_data_param();
  static const int kVideoDataParamFieldNumber = 207;
  const ::caffe::VideoDataParameter& video_data_param() const;
  ::caffe::VideoDataParameter* mutable_video_data_param();
  ::caffe::VideoDataParameter* release_video_data_param();
  void set_allocated_video_data_param(::caffe::VideoDataParameter* video_data_param);

  // optional .caffe.VideoframeParameter video_frame_param = 208;
  bool has_video_frame_param() const;
  void clear_video_frame_param();
  static const int kVideoFrameParamFieldNumber = 208;
  const ::caffe::VideoframeParameter& video_frame_param() const;
  ::caffe::VideoframeParameter* mutable_video_frame_param();
  ::caffe::VideoframeParameter* release_video_frame_param();
  void set_allocated_video_frame_param(::caffe::VideoframeParameter* video_frame_param);

  // optional .caffe.VisualizeposeParameter visualize_pose_param = 211;
  bool has_visualize_pose_param() const;
  void clear_visualize_pose_param();
  static const int kVisualizePoseParamFieldNumber = 211;
  const ::caffe::VisualizeposeParameter& visualize_pose_param() const;
  ::caffe::VisualizeposeParameter* mutable_visualize_pose_param();
  ::caffe::VisualizeposeParameter* release_visualize_pose_param();
  void set_allocated_visualize_pose_param(::caffe::VisualizeposeParameter* visualize_pose_param);

  // optional .caffe.VisualizeBoxposeParameter visualize_boxpose_param = 212;
  bool has_visualize_boxpose_param() const;
  void clear_visualize_boxpose_param();
  static const int kVisualizeBoxposeParamFieldNumber = 212;
  const ::caffe::VisualizeBoxposeParameter& visualize_boxpose_param() const;
  ::caffe::VisualizeBoxposeParameter* mutable_visualize_boxpose_param();
  ::caffe::VisualizeBoxposeParameter* release_visualize_boxpose_param();
  void set_allocated_visualize_boxpose_param(::caffe::VisualizeBoxposeParameter* visualize_boxpose_param);

  // optional .caffe.VisualMaskParameter visual_mask_param = 213;
  bool has_visual_mask_param() const;
  void clear_visual_mask_param();
  static const int kVisualMaskParamFieldNumber = 213;
  const ::caffe::VisualMaskParameter& visual_mask_param() const;
  ::caffe::VisualMaskParameter* mutable_visual_mask_param();
  ::caffe::VisualMaskParameter* release_visual_mask_param();
  void set_allocated_visual_mask_param(::caffe::VisualMaskParameter* visual_mask_param);

  // optional .caffe.WindowDataParameter window_data_param = 129;
  bool has_window_data_param() const;
  void clear_window_data_param();
  static const int kWindowDataParamFieldNumber = 129;
  const ::caffe::WindowDataParameter& window_data_param() const;
  ::caffe::WindowDataParameter* mutable_window_data_param();
  ::caffe::WindowDataParameter* release_window_data_param();
  void set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param);

  // optional .caffe.HandPoseDataParameter handpose_data_param = 300;
  bool has_handpose_data_param() const;
  void clear_handpose_data_param();
  static const int kHandposeDataParamFieldNumber = 300;
  const ::caffe::HandPoseDataParameter& handpose_data_param() const;
  ::caffe::HandPoseDataParameter* mutable_handpose_data_param();
  ::caffe::HandPoseDataParameter* release_handpose_data_param();
  void set_allocated_handpose_data_param(::caffe::HandPoseDataParameter* handpose_data_param);

  // optional .caffe.MarginInnerProductParameter margin_inner_product_param = 299;
  bool has_margin_inner_product_param() const;
  void clear_margin_inner_product_param();
  static const int kMarginInnerProductParamFieldNumber = 299;
  const ::caffe::MarginInnerProductParameter& margin_inner_product_param() const;
  ::caffe::MarginInnerProductParameter* mutable_margin_inner_product_param();
  ::caffe::MarginInnerProductParameter* release_margin_inner_product_param();
  void set_allocated_margin_inner_product_param(::caffe::MarginInnerProductParameter* margin_inner_product_param);

  // optional .caffe.TrackerPriorParameter trackerprior_param = 266;
  bool has_trackerprior_param() const;
  void clear_trackerprior_param();
  static const int kTrackerpriorParamFieldNumber = 266;
  const ::caffe::TrackerPriorParameter& trackerprior_param() const;
  ::caffe::TrackerPriorParameter* mutable_trackerprior_param();
  ::caffe::TrackerPriorParameter* release_trackerprior_param();
  void set_allocated_trackerprior_param(::caffe::TrackerPriorParameter* trackerprior_param);

  // optional .caffe.MinihandTransformationParameter minihand_transform_param = 239;
  bool has_minihand_transform_param() const;
  void clear_minihand_transform_param();
  static const int kMinihandTransformParamFieldNumber = 239;
  const ::caffe::MinihandTransformationParameter& minihand_transform_param() const;
  ::caffe::MinihandTransformationParameter* mutable_minihand_transform_param();
  ::caffe::MinihandTransformationParameter* release_minihand_transform_param();
  void set_allocated_minihand_transform_param(::caffe::MinihandTransformationParameter* minihand_transform_param);

  // optional .caffe.MinihandDataParameter minihand_data_param = 240;
  bool has_minihand_data_param() const;
  void clear_minihand_data_param();
  static const int kMinihandDataParamFieldNumber = 240;
  const ::caffe::MinihandDataParameter& minihand_data_param() const;
  ::caffe::MinihandDataParameter* mutable_minihand_data_param();
  ::caffe::MinihandDataParameter* release_minihand_data_param();
  void set_allocated_minihand_data_param(::caffe::MinihandDataParameter* minihand_data_param);

  // optional .caffe.SmoothL1LossParameter smooth_l1_loss_param = 241;
  bool has_smooth_l1_loss_param() const;
  void clear_smooth_l1_loss_param();
  static const int kSmoothL1LossParamFieldNumber = 241;
  const ::caffe::SmoothL1LossParameter& smooth_l1_loss_param() const;
  ::caffe::SmoothL1LossParameter* mutable_smooth_l1_loss_param();
  ::caffe::SmoothL1LossParameter* release_smooth_l1_loss_param();
  void set_allocated_smooth_l1_loss_param(::caffe::SmoothL1LossParameter* smooth_l1_loss_param);

  // optional .caffe.SpatialDropoutParameter spatial_dropout_param = 400;
  bool has_spatial_dropout_param() const;
  void clear_spatial_dropout_param();
  static const int kSpatialDropoutParamFieldNumber = 400;
  const ::caffe::SpatialDropoutParameter& spatial_dropout_param() const;
  ::caffe::SpatialDropoutParameter* mutable_spatial_dropout_param();
  ::caffe::SpatialDropoutParameter* release_spatial_dropout_param();
  void set_allocated_spatial_dropout_param(::caffe::SpatialDropoutParameter* spatial_dropout_param);

  // optional .caffe.ClipSptialmapParameter clip_sptialmap_param = 401;
  bool has_clip_sptialmap_param() const;
  void clear_clip_sptialmap_param();
  static const int kClipSptialmapParamFieldNumber = 401;
  const ::caffe::ClipSptialmapParameter& clip_sptialmap_param() const;
  ::caffe::ClipSptialmapParameter* mutable_clip_sptialmap_param();
  ::caffe::ClipSptialmapParameter* release_clip_sptialmap_param();
  void set_allocated_clip_sptialmap_param(::caffe::ClipSptialmapParameter* clip_sptialmap_param);

  // optional .caffe.InterpParameter interp_param = 402;
  bool has_interp_param() const;
  void clear_interp_param();
  static const int kInterpParamFieldNumber = 402;
  const ::caffe::InterpParameter& interp_param() const;
  ::caffe::InterpParameter* mutable_interp_param();
  ::caffe::InterpParameter* release_interp_param();
  void set_allocated_interp_param(::caffe::InterpParameter* interp_param);

  // optional .caffe.DenseImageDataParameter dense_image_data_param = 403;
  bool has_dense_image_data_param() const;
  void clear_dense_image_data_param();
  static const int kDenseImageDataParamFieldNumber = 403;
  const ::caffe::DenseImageDataParameter& dense_image_data_param() const;
  ::caffe::DenseImageDataParameter* mutable_dense_image_data_param();
  ::caffe::DenseImageDataParameter* release_dense_image_data_param();
  void set_allocated_dense_image_data_param(::caffe::DenseImageDataParameter* dense_image_data_param);

  // optional .caffe.EnforceOneParameter enforce_one_param = 404;
  bool has_enforce_one_param() const;
  void clear_enforce_one_param();
  static const int kEnforceOneParamFieldNumber = 404;
  const ::caffe::EnforceOneParameter& enforce_one_param() const;
  ::caffe::EnforceOneParameter* mutable_enforce_one_param();
  ::caffe::EnforceOneParameter* release_enforce_one_param();
  void set_allocated_enforce_one_param(::caffe::EnforceOneParameter* enforce_one_param);

  // optional .caffe.SegDataTransformationParameter seg_data_transformer_param = 405;
  bool has_seg_data_transformer_param() const;
  void clear_seg_data_transformer_param();
  static const int kSegDataTransformerParamFieldNumber = 405;
  const ::caffe::SegDataTransformationParameter& seg_data_transformer_param() const;
  ::caffe::SegDataTransformationParameter* mutable_seg_data_transformer_param();
  ::caffe::SegDataTransformationParameter* release_seg_data_transformer_param();
  void set_allocated_seg_data_transformer_param(::caffe::SegDataTransformationParameter* seg_data_transformer_param);

  // optional .caffe.SegAccuracyParameter seg_accuracy_param = 406;
  bool has_seg_accuracy_param() const;
  void clear_seg_accuracy_param();
  static const int kSegAccuracyParamFieldNumber = 406;
  const ::caffe::SegAccuracyParameter& seg_accuracy_param() const;
  ::caffe::SegAccuracyParameter* mutable_seg_accuracy_param();
  ::caffe::SegAccuracyParameter* release_seg_accuracy_param();
  void set_allocated_seg_accuracy_param(::caffe::SegAccuracyParameter* seg_accuracy_param);

  // optional .caffe.GhmcLossParameter ghmc_loss_param = 407;
  bool has_ghmc_loss_param() const;
  void clear_ghmc_loss_param();
  static const int kGhmcLossParamFieldNumber = 407;
  const ::caffe::GhmcLossParameter& ghmc_loss_param() const;
  ::caffe::GhmcLossParameter* mutable_ghmc_loss_param();
  ::caffe::GhmcLossParameter* release_ghmc_loss_param();
  void set_allocated_ghmc_loss_param(::caffe::GhmcLossParameter* ghmc_loss_param);

  // optional .caffe.TwoClassBalancedSigmoidCrossEntropyLossParameter two_class_balanced_sigmoid_cross_entropy_loss_param = 408;
  bool has_two_class_balanced_sigmoid_cross_entropy_loss_param() const;
  void clear_two_class_balanced_sigmoid_cross_entropy_loss_param();
  static const int kTwoClassBalancedSigmoidCrossEntropyLossParamFieldNumber = 408;
  const ::caffe::TwoClassBalancedSigmoidCrossEntropyLossParameter& two_class_balanced_sigmoid_cross_entropy_loss_param() const;
  ::caffe::TwoClassBalancedSigmoidCrossEntropyLossParameter* mutable_two_class_balanced_sigmoid_cross_entropy_loss_param();
  ::caffe::TwoClassBalancedSigmoidCrossEntropyLossParameter* release_two_class_balanced_sigmoid_cross_entropy_loss_param();
  void set_allocated_two_class_balanced_sigmoid_cross_entropy_loss_param(::caffe::TwoClassBalancedSigmoidCrossEntropyLossParameter* two_class_balanced_sigmoid_cross_entropy_loss_param);

  // @@protoc_insertion_point(class_scope:caffe.LayerParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_phase();
  inline void clear_has_phase();
  inline void set_has_weight_satvalue();
  inline void clear_has_weight_satvalue();
  inline void set_has_transform_param();
  inline void clear_has_transform_param();
  inline void set_has_pose_data_transform_param();
  inline void clear_has_pose_data_transform_param();
  inline void set_has_reid_transform_param();
  inline void clear_has_reid_transform_param();
  inline void set_has_unified_data_transform_param();
  inline void clear_has_unified_data_transform_param();
  inline void set_has_loss_param();
  inline void clear_has_loss_param();
  inline void set_has_accuracy_param();
  inline void clear_has_accuracy_param();
  inline void set_has_annotated_data_param();
  inline void clear_has_annotated_data_param();
  inline void set_has_argmax_param();
  inline void clear_has_argmax_param();
  inline void set_has_allocate_id_param();
  inline void clear_has_allocate_id_param();
  inline void set_has_batch_norm_param();
  inline void clear_has_batch_norm_param();
  inline void set_has_bias_param();
  inline void clear_has_bias_param();
  inline void set_has_concat_param();
  inline void clear_has_concat_param();
  inline void set_has_contrastive_loss_param();
  inline void clear_has_contrastive_loss_param();
  inline void set_has_convolution_param();
  inline void clear_has_convolution_param();
  inline void set_has_crop_param();
  inline void clear_has_crop_param();
  inline void set_has_connect_limb_param();
  inline void clear_has_connect_limb_param();
  inline void set_has_data_param();
  inline void clear_has_data_param();
  inline void set_has_detection_evaluate_param();
  inline void clear_has_detection_evaluate_param();
  inline void set_has_detection_output_param();
  inline void clear_has_detection_output_param();
  inline void set_has_detection_mc_output_param();
  inline void clear_has_detection_mc_output_param();
  inline void set_has_dropout_param();
  inline void clear_has_dropout_param();
  inline void set_has_dummy_data_param();
  inline void clear_has_dummy_data_param();
  inline void set_has_eltwise_param();
  inline void clear_has_eltwise_param();
  inline void set_has_elu_param();
  inline void clear_has_elu_param();
  inline void set_has_embed_param();
  inline void clear_has_embed_param();
  inline void set_has_easy_match_param();
  inline void clear_has_easy_match_param();
  inline void set_has_match_param();
  inline void clear_has_match_param();
  inline void set_has_exp_param();
  inline void clear_has_exp_param();
  inline void set_has_flatten_param();
  inline void clear_has_flatten_param();
  inline void set_has_grad_clip_param();
  inline void clear_has_grad_clip_param();
  inline void set_has_hdf5_data_param();
  inline void clear_has_hdf5_data_param();
  inline void set_has_hdf5_output_param();
  inline void clear_has_hdf5_output_param();
  inline void set_has_hinge_loss_param();
  inline void clear_has_hinge_loss_param();
  inline void set_has_image_data_param();
  inline void clear_has_image_data_param();
  inline void set_has_infogain_loss_param();
  inline void clear_has_infogain_loss_param();
  inline void set_has_inner_product_param();
  inline void clear_has_inner_product_param();
  inline void set_has_input_param();
  inline void clear_has_input_param();
  inline void set_has_imresize_param();
  inline void clear_has_imresize_param();
  inline void set_has_log_param();
  inline void clear_has_log_param();
  inline void set_has_lrn_param();
  inline void clear_has_lrn_param();
  inline void set_has_labeled_match_param();
  inline void clear_has_labeled_match_param();
  inline void set_has_unlabeled_match_param();
  inline void clear_has_unlabeled_match_param();
  inline void set_has_memory_data_param();
  inline void clear_has_memory_data_param();
  inline void set_has_mask_gen_param();
  inline void clear_has_mask_gen_param();
  inline void set_has_kps_gen_param();
  inline void clear_has_kps_gen_param();
  inline void set_has_kps_eval_param();
  inline void clear_has_kps_eval_param();
  inline void set_has_multibox_loss_param();
  inline void clear_has_multibox_loss_param();
  inline void set_has_bbox_loss_param();
  inline void clear_has_bbox_loss_param();
  inline void set_has_dense_bbox_loss_param();
  inline void clear_has_dense_bbox_loss_param();
  inline void set_has_mcbox_loss_param();
  inline void clear_has_mcbox_loss_param();
  inline void set_has_multimcbox_loss_param();
  inline void clear_has_multimcbox_loss_param();
  inline void set_has_mvn_param();
  inline void clear_has_mvn_param();
  inline void set_has_mask_loss_param();
  inline void clear_has_mask_loss_param();
  inline void set_has_norm_param();
  inline void clear_has_norm_param();
  inline void set_has_nms_param();
  inline void clear_has_nms_param();
  inline void set_has_parameter_param();
  inline void clear_has_parameter_param();
  inline void set_has_permute_param();
  inline void clear_has_permute_param();
  inline void set_has_pooling_param();
  inline void clear_has_pooling_param();
  inline void set_has_power_param();
  inline void clear_has_power_param();
  inline void set_has_pose_data_param();
  inline void clear_has_pose_data_param();
  inline void set_has_pose_eval_param();
  inline void clear_has_pose_eval_param();
  inline void set_has_pose_det_param();
  inline void clear_has_pose_det_param();
  inline void set_has_peaks_find_param();
  inline void clear_has_peaks_find_param();
  inline void set_has_prelu_param();
  inline void clear_has_prelu_param();
  inline void set_has_prior_box_param();
  inline void clear_has_prior_box_param();
  inline void set_has_python_param();
  inline void clear_has_python_param();
  inline void set_has_recurrent_param();
  inline void clear_has_recurrent_param();
  inline void set_has_reduction_param();
  inline void clear_has_reduction_param();
  inline void set_has_relu_param();
  inline void clear_has_relu_param();
  inline void set_has_reid_data_param();
  inline void clear_has_reid_data_param();
  inline void set_has_roi_resize_param();
  inline void clear_has_roi_resize_param();
  inline void set_has_roi_align_param();
  inline void clear_has_roi_align_param();
  inline void set_has_focus_loss_param();
  inline void clear_has_focus_loss_param();
  inline void set_has_roi_data_param();
  inline void clear_has_roi_data_param();
  inline void set_has_resize_layer_param();
  inline void clear_has_resize_layer_param();
  inline void set_has_reorg_param();
  inline void clear_has_reorg_param();
  inline void set_has_reshape_param();
  inline void clear_has_reshape_param();
  inline void set_has_roi_pooling_param();
  inline void clear_has_roi_pooling_param();
  inline void set_has_box_matching_param();
  inline void clear_has_box_matching_param();
  inline void set_has_scale_param();
  inline void clear_has_scale_param();
  inline void set_has_sigmoid_param();
  inline void clear_has_sigmoid_param();
  inline void set_has_softmax_param();
  inline void clear_has_softmax_param();
  inline void set_has_spp_param();
  inline void clear_has_spp_param();
  inline void set_has_slice_param();
  inline void clear_has_slice_param();
  inline void set_has_split_label_param();
  inline void clear_has_split_label_param();
  inline void set_has_tanh_param();
  inline void clear_has_tanh_param();
  inline void set_has_threshold_param();
  inline void clear_has_threshold_param();
  inline void set_has_tile_param();
  inline void clear_has_tile_param();
  inline void set_has_tracker_data_param();
  inline void clear_has_tracker_data_param();
  inline void set_has_tracker_mcout_param();
  inline void clear_has_tracker_mcout_param();
  inline void set_has_tracker_mcloss_param();
  inline void clear_has_tracker_mcloss_param();
  inline void set_has_true_roi_param();
  inline void clear_has_true_roi_param();
  inline void set_has_ftracker_data_param();
  inline void clear_has_ftracker_data_param();
  inline void set_has_unified_data_param();
  inline void clear_has_unified_data_param();
  inline void set_has_video_data_param();
  inline void clear_has_video_data_param();
  inline void set_has_video_frame_param();
  inline void clear_has_video_frame_param();
  inline void set_has_visualize_pose_param();
  inline void clear_has_visualize_pose_param();
  inline void set_has_visualize_boxpose_param();
  inline void clear_has_visualize_boxpose_param();
  inline void set_has_visual_mask_param();
  inline void clear_has_visual_mask_param();
  inline void set_has_window_data_param();
  inline void clear_has_window_data_param();
  inline void set_has_handpose_data_param();
  inline void clear_has_handpose_data_param();
  inline void set_has_margin_inner_product_param();
  inline void clear_has_margin_inner_product_param();
  inline void set_has_trackerprior_param();
  inline void clear_has_trackerprior_param();
  inline void set_has_minihand_transform_param();
  inline void clear_has_minihand_transform_param();
  inline void set_has_minihand_data_param();
  inline void clear_has_minihand_data_param();
  inline void set_has_smooth_l1_loss_param();
  inline void clear_has_smooth_l1_loss_param();
  inline void set_has_spatial_dropout_param();
  inline void clear_has_spatial_dropout_param();
  inline void set_has_clip_sptialmap_param();
  inline void clear_has_clip_sptialmap_param();
  inline void set_has_interp_param();
  inline void clear_has_interp_param();
  inline void set_has_dense_image_data_param();
  inline void clear_has_dense_image_data_param();
  inline void set_has_enforce_one_param();
  inline void clear_has_enforce_one_param();
  inline void set_has_seg_data_transformer_param();
  inline void clear_has_seg_data_transformer_param();
  inline void set_has_seg_accuracy_param();
  inline void clear_has_seg_accuracy_param();
  inline void set_has_ghmc_loss_param();
  inline void clear_has_ghmc_loss_param();
  inline void set_has_two_class_balanced_sigmoid_cross_entropy_loss_param();
  inline void clear_has_two_class_balanced_sigmoid_cross_entropy_loss_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[4];
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::google::protobuf::RepeatedField< float > loss_weight_;
  ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec > param_;
  int phase_;
  float weight_satvalue_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::google::protobuf::RepeatedField< bool > propagate_down_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > include_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > exclude_;
  ::caffe::TransformationParameter* transform_param_;
  ::caffe::PoseDataTransformationParameter* pose_data_transform_param_;
  ::caffe::ReidTransformationParameter* reid_transform_param_;
  ::caffe::UnifiedTransformationParameter* unified_data_transform_param_;
  ::caffe::LossParameter* loss_param_;
  ::caffe::AccuracyParameter* accuracy_param_;
  ::caffe::AnnotatedDataParameter* annotated_data_param_;
  ::caffe::ArgMaxParameter* argmax_param_;
  ::caffe::AllocateIdParameter* allocate_id_param_;
  ::caffe::BatchNormParameter* batch_norm_param_;
  ::caffe::BiasParameter* bias_param_;
  ::caffe::ConcatParameter* concat_param_;
  ::caffe::ContrastiveLossParameter* contrastive_loss_param_;
  ::caffe::ConvolutionParameter* convolution_param_;
  ::caffe::CropParameter* crop_param_;
  ::caffe::ConnectLimbParameter* connect_limb_param_;
  ::caffe::DataParameter* data_param_;
  ::caffe::DetectionEvaluateParameter* detection_evaluate_param_;
  ::caffe::DetectionOutputParameter* detection_output_param_;
  ::caffe::DetectionMcOutputParameter* detection_mc_output_param_;
  ::caffe::DropoutParameter* dropout_param_;
  ::caffe::DummyDataParameter* dummy_data_param_;
  ::caffe::EltwiseParameter* eltwise_param_;
  ::caffe::ELUParameter* elu_param_;
  ::caffe::EmbedParameter* embed_param_;
  ::caffe::EasymatchParameter* easy_match_param_;
  ::caffe::MatchParameter* match_param_;
  ::caffe::ExpParameter* exp_param_;
  ::caffe::FlattenParameter* flatten_param_;
  ::caffe::GradClipParameter* grad_clip_param_;
  ::caffe::HDF5DataParameter* hdf5_data_param_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::caffe::HingeLossParameter* hinge_loss_param_;
  ::caffe::ImageDataParameter* image_data_param_;
  ::caffe::InfogainLossParameter* infogain_loss_param_;
  ::caffe::InnerProductParameter* inner_product_param_;
  ::caffe::InputParameter* input_param_;
  ::caffe::ImResizeParameter* imresize_param_;
  ::caffe::LogParameter* log_param_;
  ::caffe::LRNParameter* lrn_param_;
  ::caffe::LabeledMatchParameter* labeled_match_param_;
  ::caffe::UnlabeledMatchParameter* unlabeled_match_param_;
  ::caffe::MemoryDataParameter* memory_data_param_;
  ::caffe::MaskGenParameter* mask_gen_param_;
  ::caffe::KpsGenParameter* kps_gen_param_;
  ::caffe::KpsEvalParameter* kps_eval_param_;
  ::caffe::MultiBoxLossParameter* multibox_loss_param_;
  ::caffe::BBoxLossParameter* bbox_loss_param_;
  ::caffe::DenseBBoxLossParameter* dense_bbox_loss_param_;
  ::caffe::McBoxLossParameter* mcbox_loss_param_;
  ::caffe::MultiMcBoxLossParameter* multimcbox_loss_param_;
  ::caffe::MVNParameter* mvn_param_;
  ::caffe::MaskLossParameter* mask_loss_param_;
  ::caffe::NormalizeParameter* norm_param_;
  ::caffe::NmsParameter* nms_param_;
  ::caffe::ParameterParameter* parameter_param_;
  ::caffe::PermuteParameter* permute_param_;
  ::caffe::PoolingParameter* pooling_param_;
  ::caffe::PowerParameter* power_param_;
  ::caffe::PoseDataParameter* pose_data_param_;
  ::caffe::PoseEvalParameter* pose_eval_param_;
  ::caffe::PoseDetParameter* pose_det_param_;
  ::caffe::PeaksFindParameter* peaks_find_param_;
  ::caffe::PReLUParameter* prelu_param_;
  ::caffe::PriorBoxParameter* prior_box_param_;
  ::caffe::PythonParameter* python_param_;
  ::caffe::RecurrentParameter* recurrent_param_;
  ::caffe::ReductionParameter* reduction_param_;
  ::caffe::ReLUParameter* relu_param_;
  ::caffe::ReidDataParameter* reid_data_param_;
  ::caffe::RoiResizeParameter* roi_resize_param_;
  ::caffe::RoiAlignParameter* roi_align_param_;
  ::caffe::FocusLossParameter* focus_loss_param_;
  ::caffe::RoiDataParameter* roi_data_param_;
  ::caffe::ResizeBlobParameter* resize_layer_param_;
  ::caffe::ReorgParameter* reorg_param_;
  ::caffe::ReshapeParameter* reshape_param_;
  ::caffe::ROIPoolingParameter* roi_pooling_param_;
  ::caffe::BoxMatchingParameter* box_matching_param_;
  ::caffe::ScaleParameter* scale_param_;
  ::caffe::SigmoidParameter* sigmoid_param_;
  ::caffe::SoftmaxParameter* softmax_param_;
  ::caffe::SPPParameter* spp_param_;
  ::caffe::SliceParameter* slice_param_;
  ::caffe::SplitLabelParameter* split_label_param_;
  ::caffe::TanHParameter* tanh_param_;
  ::caffe::ThresholdParameter* threshold_param_;
  ::caffe::TileParameter* tile_param_;
  ::caffe::TrackerDataParameter* tracker_data_param_;
  ::caffe::TrackerMcOutParameter* tracker_mcout_param_;
  ::caffe::TrackerMcLossParameter* tracker_mcloss_param_;
  ::caffe::TrueRoiParameter* true_roi_param_;
  ::caffe::FTrackerDataParameter* ftracker_data_param_;
  ::caffe::UnifiedDataParameter* unified_data_param_;
  ::caffe::VideoDataParameter* video_data_param_;
  ::caffe::VideoframeParameter* video_frame_param_;
  ::caffe::VisualizeposeParameter* visualize_pose_param_;
  ::caffe::VisualizeBoxposeParameter* visualize_boxpose_param_;
  ::caffe::VisualMaskParameter* visual_mask_param_;
  ::caffe::WindowDataParameter* window_data_param_;
  ::caffe::HandPoseDataParameter* handpose_data_param_;
  ::caffe::MarginInnerProductParameter* margin_inner_product_param_;
  ::caffe::TrackerPriorParameter* trackerprior_param_;
  ::caffe::MinihandTransformationParameter* minihand_transform_param_;
  ::caffe::MinihandDataParameter* minihand_data_param_;
  ::caffe::SmoothL1LossParameter* smooth_l1_loss_param_;
  ::caffe::SpatialDropoutParameter* spatial_dropout_param_;
  ::caffe::ClipSptialmapParameter* clip_sptialmap_param_;
  ::caffe::InterpParameter* interp_param_;
  ::caffe::DenseImageDataParameter* dense_image_data_param_;
  ::caffe::EnforceOneParameter* enforce_one_param_;
  ::caffe::SegDataTransformationParameter* seg_data_transformer_param_;
  ::caffe::SegAccuracyParameter* seg_accuracy_param_;
  ::caffe::GhmcLossParameter* ghmc_loss_param_;
  ::caffe::TwoClassBalancedSigmoidCrossEntropyLossParameter* two_class_balanced_sigmoid_cross_entropy_loss_param_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static LayerParameter* default_instance_;
};
// -------------------------------------------------------------------

class TwoClassBalancedSigmoidCrossEntropyLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TwoClassBalancedSigmoidCrossEntropyLossParameter) */ {
 public:
  TwoClassBalancedSigmoidCrossEntropyLossParameter();
  virtual ~TwoClassBalancedSigmoidCrossEntropyLossParameter();

  TwoClassBalancedSigmoidCrossEntropyLossParameter(const TwoClassBalancedSigmoidCrossEntropyLossParameter& from);

  inline TwoClassBalancedSigmoidCrossEntropyLossParameter& operator=(const TwoClassBalancedSigmoidCrossEntropyLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TwoClassBalancedSigmoidCrossEntropyLossParameter& default_instance();

  void Swap(TwoClassBalancedSigmoidCrossEntropyLossParameter* other);

  // implements Message ----------------------------------------------

  inline TwoClassBalancedSigmoidCrossEntropyLossParameter* New() const { return New(NULL); }

  TwoClassBalancedSigmoidCrossEntropyLossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TwoClassBalancedSigmoidCrossEntropyLossParameter& from);
  void MergeFrom(const TwoClassBalancedSigmoidCrossEntropyLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TwoClassBalancedSigmoidCrossEntropyLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float alpha = 1 [default = 0.5];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 1;
  float alpha() const;
  void set_alpha(float value);

  // optional bool only_pos = 2 [default = false];
  bool has_only_pos() const;
  void clear_only_pos();
  static const int kOnlyPosFieldNumber = 2;
  bool only_pos() const;
  void set_only_pos(bool value);

  // @@protoc_insertion_point(class_scope:caffe.TwoClassBalancedSigmoidCrossEntropyLossParameter)
 private:
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_only_pos();
  inline void clear_has_only_pos();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float alpha_;
  bool only_pos_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static TwoClassBalancedSigmoidCrossEntropyLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class GhmcLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.GhmcLossParameter) */ {
 public:
  GhmcLossParameter();
  virtual ~GhmcLossParameter();

  GhmcLossParameter(const GhmcLossParameter& from);

  inline GhmcLossParameter& operator=(const GhmcLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GhmcLossParameter& default_instance();

  void Swap(GhmcLossParameter* other);

  // implements Message ----------------------------------------------

  inline GhmcLossParameter* New() const { return New(NULL); }

  GhmcLossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GhmcLossParameter& from);
  void MergeFrom(const GhmcLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GhmcLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 m = 1 [default = 30];
  bool has_m() const;
  void clear_m();
  static const int kMFieldNumber = 1;
  ::google::protobuf::uint32 m() const;
  void set_m(::google::protobuf::uint32 value);

  // optional float alpha = 2 [default = 0];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 2;
  float alpha() const;
  void set_alpha(float value);

  // optional float weight = 3 [default = 1];
  bool has_weight() const;
  void clear_weight();
  static const int kWeightFieldNumber = 3;
  float weight() const;
  void set_weight(float value);

  // optional string weight_type = 4 [default = "index"];
  bool has_weight_type() const;
  void clear_weight_type();
  static const int kWeightTypeFieldNumber = 4;
  const ::std::string& weight_type() const;
  void set_weight_type(const ::std::string& value);
  void set_weight_type(const char* value);
  void set_weight_type(const char* value, size_t size);
  ::std::string* mutable_weight_type();
  ::std::string* release_weight_type();
  void set_allocated_weight_type(::std::string* weight_type);

  // optional bool use_group = 5 [default = false];
  bool has_use_group() const;
  void clear_use_group();
  static const int kUseGroupFieldNumber = 5;
  bool use_group() const;
  void set_use_group(bool value);

  // optional float k1 = 6 [default = 1];
  bool has_k1() const;
  void clear_k1();
  static const int kK1FieldNumber = 6;
  float k1() const;
  void set_k1(float value);

  // optional float k2 = 7 [default = 1];
  bool has_k2() const;
  void clear_k2();
  static const int kK2FieldNumber = 7;
  float k2() const;
  void set_k2(float value);

  // optional float b1 = 8 [default = 0];
  bool has_b1() const;
  void clear_b1();
  static const int kB1FieldNumber = 8;
  float b1() const;
  void set_b1(float value);

  // optional float b2 = 9 [default = 0];
  bool has_b2() const;
  void clear_b2();
  static const int kB2FieldNumber = 9;
  float b2() const;
  void set_b2(float value);

  // optional float diff_thred = 10 [default = 0.05];
  bool has_diff_thred() const;
  void clear_diff_thred();
  static const int kDiffThredFieldNumber = 10;
  float diff_thred() const;
  void set_diff_thred(float value);

  // optional float power = 11 [default = 1];
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 11;
  float power() const;
  void set_power(float value);

  // @@protoc_insertion_point(class_scope:caffe.GhmcLossParameter)
 private:
  inline void set_has_m();
  inline void clear_has_m();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_weight_type();
  inline void clear_has_weight_type();
  inline void set_has_use_group();
  inline void clear_has_use_group();
  inline void set_has_k1();
  inline void clear_has_k1();
  inline void set_has_k2();
  inline void clear_has_k2();
  inline void set_has_b1();
  inline void clear_has_b1();
  inline void set_has_b2();
  inline void clear_has_b2();
  inline void set_has_diff_thred();
  inline void clear_has_diff_thred();
  inline void set_has_power();
  inline void clear_has_power();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 m_;
  float alpha_;
  static ::std::string* _default_weight_type_;
  ::google::protobuf::internal::ArenaStringPtr weight_type_;
  float weight_;
  bool use_group_;
  float k1_;
  float k2_;
  float b1_;
  float b2_;
  float diff_thred_;
  float power_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static GhmcLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class SegAccuracyParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SegAccuracyParameter) */ {
 public:
  SegAccuracyParameter();
  virtual ~SegAccuracyParameter();

  SegAccuracyParameter(const SegAccuracyParameter& from);

  inline SegAccuracyParameter& operator=(const SegAccuracyParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SegAccuracyParameter& default_instance();

  void Swap(SegAccuracyParameter* other);

  // implements Message ----------------------------------------------

  inline SegAccuracyParameter* New() const { return New(NULL); }

  SegAccuracyParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SegAccuracyParameter& from);
  void MergeFrom(const SegAccuracyParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SegAccuracyParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SegAccuracyParameter_AccuracyMetric AccuracyMetric;
  static const AccuracyMetric PixelAccuracy =
    SegAccuracyParameter_AccuracyMetric_PixelAccuracy;
  static const AccuracyMetric ClassAccuracy =
    SegAccuracyParameter_AccuracyMetric_ClassAccuracy;
  static const AccuracyMetric PixelIOU =
    SegAccuracyParameter_AccuracyMetric_PixelIOU;
  static inline bool AccuracyMetric_IsValid(int value) {
    return SegAccuracyParameter_AccuracyMetric_IsValid(value);
  }
  static const AccuracyMetric AccuracyMetric_MIN =
    SegAccuracyParameter_AccuracyMetric_AccuracyMetric_MIN;
  static const AccuracyMetric AccuracyMetric_MAX =
    SegAccuracyParameter_AccuracyMetric_AccuracyMetric_MAX;
  static const int AccuracyMetric_ARRAYSIZE =
    SegAccuracyParameter_AccuracyMetric_AccuracyMetric_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AccuracyMetric_descriptor() {
    return SegAccuracyParameter_AccuracyMetric_descriptor();
  }
  static inline const ::std::string& AccuracyMetric_Name(AccuracyMetric value) {
    return SegAccuracyParameter_AccuracyMetric_Name(value);
  }
  static inline bool AccuracyMetric_Parse(const ::std::string& name,
      AccuracyMetric* value) {
    return SegAccuracyParameter_AccuracyMetric_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.SegAccuracyParameter.AccuracyMetric metric = 1 [default = PixelAccuracy];
  bool has_metric() const;
  void clear_metric();
  static const int kMetricFieldNumber = 1;
  ::caffe::SegAccuracyParameter_AccuracyMetric metric() const;
  void set_metric(::caffe::SegAccuracyParameter_AccuracyMetric value);

  // repeated int32 ignore_label = 2;
  int ignore_label_size() const;
  void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 2;
  ::google::protobuf::int32 ignore_label(int index) const;
  void set_ignore_label(int index, ::google::protobuf::int32 value);
  void add_ignore_label(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ignore_label() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ignore_label();

  // optional bool reset = 3 [default = true];
  bool has_reset() const;
  void clear_reset();
  static const int kResetFieldNumber = 3;
  bool reset() const;
  void set_reset(bool value);

  // @@protoc_insertion_point(class_scope:caffe.SegAccuracyParameter)
 private:
  inline void set_has_metric();
  inline void clear_has_metric();
  inline void set_has_reset();
  inline void clear_has_reset();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ignore_label_;
  int metric_;
  bool reset_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SegAccuracyParameter* default_instance_;
};
// -------------------------------------------------------------------

class SegDataTransformationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SegDataTransformationParameter) */ {
 public:
  SegDataTransformationParameter();
  virtual ~SegDataTransformationParameter();

  SegDataTransformationParameter(const SegDataTransformationParameter& from);

  inline SegDataTransformationParameter& operator=(const SegDataTransformationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SegDataTransformationParameter& default_instance();

  void Swap(SegDataTransformationParameter* other);

  // implements Message ----------------------------------------------

  inline SegDataTransformationParameter* New() const { return New(NULL); }

  SegDataTransformationParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SegDataTransformationParameter& from);
  void MergeFrom(const SegDataTransformationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SegDataTransformationParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float scale = 1 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 1;
  float scale() const;
  void set_scale(float value);

  // optional bool mirror = 2 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 2;
  bool mirror() const;
  void set_mirror(bool value);

  // optional string mean_file = 3;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // repeated float mean_value = 4;
  int mean_value_size() const;
  void clear_mean_value();
  static const int kMeanValueFieldNumber = 4;
  float mean_value(int index) const;
  void set_mean_value(int index, float value);
  void add_mean_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      mean_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_mean_value();

  // optional .caffe.DistortionParameter dis_param = 5;
  bool has_dis_param() const;
  void clear_dis_param();
  static const int kDisParamFieldNumber = 5;
  const ::caffe::DistortionParameter& dis_param() const;
  ::caffe::DistortionParameter* mutable_dis_param();
  ::caffe::DistortionParameter* release_dis_param();
  void set_allocated_dis_param(::caffe::DistortionParameter* dis_param);

  // optional float dark_prop = 6 [default = 0];
  bool has_dark_prop() const;
  void clear_dark_prop();
  static const int kDarkPropFieldNumber = 6;
  float dark_prop() const;
  void set_dark_prop(float value);

  // optional float dark_gamma_min = 7 [default = 0.5];
  bool has_dark_gamma_min() const;
  void clear_dark_gamma_min();
  static const int kDarkGammaMinFieldNumber = 7;
  float dark_gamma_min() const;
  void set_dark_gamma_min(float value);

  // optional float dark_gamma_max = 8 [default = 1];
  bool has_dark_gamma_max() const;
  void clear_dark_gamma_max();
  static const int kDarkGammaMaxFieldNumber = 8;
  float dark_gamma_max() const;
  void set_dark_gamma_max(float value);

  // optional bool augmention = 9 [default = false];
  bool has_augmention() const;
  void clear_augmention();
  static const int kAugmentionFieldNumber = 9;
  bool augmention() const;
  void set_augmention(bool value);

  // optional uint32 quality = 10 [default = 100];
  bool has_quality() const;
  void clear_quality();
  static const int kQualityFieldNumber = 10;
  ::google::protobuf::uint32 quality() const;
  void set_quality(::google::protobuf::uint32 value);

  // optional uint32 noise_num = 11 [default = 1000];
  bool has_noise_num() const;
  void clear_noise_num();
  static const int kNoiseNumFieldNumber = 11;
  ::google::protobuf::uint32 noise_num() const;
  void set_noise_num(::google::protobuf::uint32 value);

  // optional uint32 crop_size = 12 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 12;
  ::google::protobuf::uint32 crop_size() const;
  void set_crop_size(::google::protobuf::uint32 value);

  // optional uint32 crop_h = 13 [default = 0];
  bool has_crop_h() const;
  void clear_crop_h();
  static const int kCropHFieldNumber = 13;
  ::google::protobuf::uint32 crop_h() const;
  void set_crop_h(::google::protobuf::uint32 value);

  // optional uint32 crop_w = 14 [default = 0];
  bool has_crop_w() const;
  void clear_crop_w();
  static const int kCropWFieldNumber = 14;
  ::google::protobuf::uint32 crop_w() const;
  void set_crop_w(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.SegDataTransformationParameter)
 private:
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_dis_param();
  inline void clear_has_dis_param();
  inline void set_has_dark_prop();
  inline void clear_has_dark_prop();
  inline void set_has_dark_gamma_min();
  inline void clear_has_dark_gamma_min();
  inline void set_has_dark_gamma_max();
  inline void clear_has_dark_gamma_max();
  inline void set_has_augmention();
  inline void clear_has_augmention();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_noise_num();
  inline void clear_has_noise_num();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_crop_h();
  inline void clear_has_crop_h();
  inline void set_has_crop_w();
  inline void clear_has_crop_w();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  ::google::protobuf::RepeatedField< float > mean_value_;
  float scale_;
  bool mirror_;
  bool augmention_;
  ::caffe::DistortionParameter* dis_param_;
  float dark_prop_;
  float dark_gamma_min_;
  float dark_gamma_max_;
  ::google::protobuf::uint32 quality_;
  ::google::protobuf::uint32 noise_num_;
  ::google::protobuf::uint32 crop_size_;
  ::google::protobuf::uint32 crop_h_;
  ::google::protobuf::uint32 crop_w_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SegDataTransformationParameter* default_instance_;
};
// -------------------------------------------------------------------

class EnforceOneParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.EnforceOneParameter) */ {
 public:
  EnforceOneParameter();
  virtual ~EnforceOneParameter();

  EnforceOneParameter(const EnforceOneParameter& from);

  inline EnforceOneParameter& operator=(const EnforceOneParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnforceOneParameter& default_instance();

  void Swap(EnforceOneParameter* other);

  // implements Message ----------------------------------------------

  inline EnforceOneParameter* New() const { return New(NULL); }

  EnforceOneParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnforceOneParameter& from);
  void MergeFrom(const EnforceOneParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnforceOneParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float threshold = 1 [default = 0];
  bool has_threshold() const;
  void clear_threshold();
  static const int kThresholdFieldNumber = 1;
  float threshold() const;
  void set_threshold(float value);

  // @@protoc_insertion_point(class_scope:caffe.EnforceOneParameter)
 private:
  inline void set_has_threshold();
  inline void clear_has_threshold();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float threshold_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static EnforceOneParameter* default_instance_;
};
// -------------------------------------------------------------------

class DenseImageDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DenseImageDataParameter) */ {
 public:
  DenseImageDataParameter();
  virtual ~DenseImageDataParameter();

  DenseImageDataParameter(const DenseImageDataParameter& from);

  inline DenseImageDataParameter& operator=(const DenseImageDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DenseImageDataParameter& default_instance();

  void Swap(DenseImageDataParameter* other);

  // implements Message ----------------------------------------------

  inline DenseImageDataParameter* New() const { return New(NULL); }

  DenseImageDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DenseImageDataParameter& from);
  void MergeFrom(const DenseImageDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DenseImageDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 2;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 2;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 3 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 3;
  ::google::protobuf::uint32 rand_skip() const;
  void set_rand_skip(::google::protobuf::uint32 value);

  // optional bool shuffle = 4 [default = false];
  bool has_shuffle() const;
  void clear_shuffle();
  static const int kShuffleFieldNumber = 4;
  bool shuffle() const;
  void set_shuffle(bool value);

  // optional uint32 new_height = 5 [default = 0];
  bool has_new_height() const;
  void clear_new_height();
  static const int kNewHeightFieldNumber = 5;
  ::google::protobuf::uint32 new_height() const;
  void set_new_height(::google::protobuf::uint32 value);

  // optional uint32 new_width = 6 [default = 0];
  bool has_new_width() const;
  void clear_new_width();
  static const int kNewWidthFieldNumber = 6;
  ::google::protobuf::uint32 new_width() const;
  void set_new_width(::google::protobuf::uint32 value);

  // optional bool is_color = 7 [default = true];
  bool has_is_color() const;
  void clear_is_color();
  static const int kIsColorFieldNumber = 7;
  bool is_color() const;
  void set_is_color(bool value);

  // optional string mean_file = 8;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 8;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // optional string root_folder = 9 [default = ""];
  bool has_root_folder() const;
  void clear_root_folder();
  static const int kRootFolderFieldNumber = 9;
  const ::std::string& root_folder() const;
  void set_root_folder(const ::std::string& value);
  void set_root_folder(const char* value);
  void set_root_folder(const char* value, size_t size);
  ::std::string* mutable_root_folder();
  ::std::string* release_root_folder();
  void set_allocated_root_folder(::std::string* root_folder);

  // optional bool mirror = 10 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 10;
  bool mirror() const;
  void set_mirror(bool value);

  // optional uint32 crop_width = 11 [default = 0];
  bool has_crop_width() const;
  void clear_crop_width();
  static const int kCropWidthFieldNumber = 11;
  ::google::protobuf::uint32 crop_width() const;
  void set_crop_width(::google::protobuf::uint32 value);

  // optional uint32 crop_height = 12 [default = 0];
  bool has_crop_height() const;
  void clear_crop_height();
  static const int kCropHeightFieldNumber = 12;
  ::google::protobuf::uint32 crop_height() const;
  void set_crop_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.DenseImageDataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();
  inline void set_has_new_height();
  inline void clear_has_new_height();
  inline void set_has_new_width();
  inline void clear_has_new_width();
  inline void set_has_is_color();
  inline void clear_has_is_color();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_root_folder();
  inline void clear_has_root_folder();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_crop_width();
  inline void clear_has_crop_width();
  inline void set_has_crop_height();
  inline void clear_has_crop_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 rand_skip_;
  ::google::protobuf::uint32 new_height_;
  ::google::protobuf::uint32 new_width_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  bool shuffle_;
  bool is_color_;
  bool mirror_;
  ::google::protobuf::uint32 crop_width_;
  ::google::protobuf::internal::ArenaStringPtr root_folder_;
  ::google::protobuf::uint32 crop_height_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static DenseImageDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class InterpParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.InterpParameter) */ {
 public:
  InterpParameter();
  virtual ~InterpParameter();

  InterpParameter(const InterpParameter& from);

  inline InterpParameter& operator=(const InterpParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InterpParameter& default_instance();

  void Swap(InterpParameter* other);

  // implements Message ----------------------------------------------

  inline InterpParameter* New() const { return New(NULL); }

  InterpParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InterpParameter& from);
  void MergeFrom(const InterpParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InterpParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 height = 1 [default = 0];
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 1;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 width = 2 [default = 0];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 zoom_factor = 3 [default = 1];
  bool has_zoom_factor() const;
  void clear_zoom_factor();
  static const int kZoomFactorFieldNumber = 3;
  ::google::protobuf::int32 zoom_factor() const;
  void set_zoom_factor(::google::protobuf::int32 value);

  // optional int32 shrink_factor = 4 [default = 1];
  bool has_shrink_factor() const;
  void clear_shrink_factor();
  static const int kShrinkFactorFieldNumber = 4;
  ::google::protobuf::int32 shrink_factor() const;
  void set_shrink_factor(::google::protobuf::int32 value);

  // optional int32 pad_beg = 5 [default = 0];
  bool has_pad_beg() const;
  void clear_pad_beg();
  static const int kPadBegFieldNumber = 5;
  ::google::protobuf::int32 pad_beg() const;
  void set_pad_beg(::google::protobuf::int32 value);

  // optional int32 pad_end = 6 [default = 0];
  bool has_pad_end() const;
  void clear_pad_end();
  static const int kPadEndFieldNumber = 6;
  ::google::protobuf::int32 pad_end() const;
  void set_pad_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.InterpParameter)
 private:
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_zoom_factor();
  inline void clear_has_zoom_factor();
  inline void set_has_shrink_factor();
  inline void clear_has_shrink_factor();
  inline void set_has_pad_beg();
  inline void clear_has_pad_beg();
  inline void set_has_pad_end();
  inline void clear_has_pad_end();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 zoom_factor_;
  ::google::protobuf::int32 shrink_factor_;
  ::google::protobuf::int32 pad_beg_;
  ::google::protobuf::int32 pad_end_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static InterpParameter* default_instance_;
};
// -------------------------------------------------------------------

class ClipSptialmapParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ClipSptialmapParameter) */ {
 public:
  ClipSptialmapParameter();
  virtual ~ClipSptialmapParameter();

  ClipSptialmapParameter(const ClipSptialmapParameter& from);

  inline ClipSptialmapParameter& operator=(const ClipSptialmapParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClipSptialmapParameter& default_instance();

  void Swap(ClipSptialmapParameter* other);

  // implements Message ----------------------------------------------

  inline ClipSptialmapParameter* New() const { return New(NULL); }

  ClipSptialmapParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClipSptialmapParameter& from);
  void MergeFrom(const ClipSptialmapParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClipSptialmapParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 map_scale = 1 [default = 1];
  bool has_map_scale() const;
  void clear_map_scale();
  static const int kMapScaleFieldNumber = 1;
  ::google::protobuf::int32 map_scale() const;
  void set_map_scale(::google::protobuf::int32 value);

  // repeated int32 axis = 2;
  int axis_size() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis(int index) const;
  void set_axis(int index, ::google::protobuf::int32 value);
  void add_axis(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      axis() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_axis();

  // @@protoc_insertion_point(class_scope:caffe.ClipSptialmapParameter)
 private:
  inline void set_has_map_scale();
  inline void clear_has_map_scale();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > axis_;
  ::google::protobuf::int32 map_scale_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ClipSptialmapParameter* default_instance_;
};
// -------------------------------------------------------------------

class SpatialDropoutParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SpatialDropoutParameter) */ {
 public:
  SpatialDropoutParameter();
  virtual ~SpatialDropoutParameter();

  SpatialDropoutParameter(const SpatialDropoutParameter& from);

  inline SpatialDropoutParameter& operator=(const SpatialDropoutParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpatialDropoutParameter& default_instance();

  void Swap(SpatialDropoutParameter* other);

  // implements Message ----------------------------------------------

  inline SpatialDropoutParameter* New() const { return New(NULL); }

  SpatialDropoutParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpatialDropoutParameter& from);
  void MergeFrom(const SpatialDropoutParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpatialDropoutParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float dropout_ratio = 1 [default = 0.5];
  bool has_dropout_ratio() const;
  void clear_dropout_ratio();
  static const int kDropoutRatioFieldNumber = 1;
  float dropout_ratio() const;
  void set_dropout_ratio(float value);

  // @@protoc_insertion_point(class_scope:caffe.SpatialDropoutParameter)
 private:
  inline void set_has_dropout_ratio();
  inline void clear_has_dropout_ratio();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float dropout_ratio_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SpatialDropoutParameter* default_instance_;
};
// -------------------------------------------------------------------

class SmoothL1LossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SmoothL1LossParameter) */ {
 public:
  SmoothL1LossParameter();
  virtual ~SmoothL1LossParameter();

  SmoothL1LossParameter(const SmoothL1LossParameter& from);

  inline SmoothL1LossParameter& operator=(const SmoothL1LossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmoothL1LossParameter& default_instance();

  void Swap(SmoothL1LossParameter* other);

  // implements Message ----------------------------------------------

  inline SmoothL1LossParameter* New() const { return New(NULL); }

  SmoothL1LossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SmoothL1LossParameter& from);
  void MergeFrom(const SmoothL1LossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SmoothL1LossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float sigma = 1 [default = 1];
  bool has_sigma() const;
  void clear_sigma();
  static const int kSigmaFieldNumber = 1;
  float sigma() const;
  void set_sigma(float value);

  // @@protoc_insertion_point(class_scope:caffe.SmoothL1LossParameter)
 private:
  inline void set_has_sigma();
  inline void clear_has_sigma();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float sigma_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SmoothL1LossParameter* default_instance_;
};
// -------------------------------------------------------------------

class MinihandTransformationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MinihandTransformationParameter) */ {
 public:
  MinihandTransformationParameter();
  virtual ~MinihandTransformationParameter();

  MinihandTransformationParameter(const MinihandTransformationParameter& from);

  inline MinihandTransformationParameter& operator=(const MinihandTransformationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MinihandTransformationParameter& default_instance();

  void Swap(MinihandTransformationParameter* other);

  // implements Message ----------------------------------------------

  inline MinihandTransformationParameter* New() const { return New(NULL); }

  MinihandTransformationParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MinihandTransformationParameter& from);
  void MergeFrom(const MinihandTransformationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MinihandTransformationParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool do_flip = 1 [default = true];
  bool has_do_flip() const;
  void clear_do_flip();
  static const int kDoFlipFieldNumber = 1;
  bool do_flip() const;
  void set_do_flip(bool value);

  // optional float flip_prob = 2 [default = 0.5];
  bool has_flip_prob() const;
  void clear_flip_prob();
  static const int kFlipProbFieldNumber = 2;
  float flip_prob() const;
  void set_flip_prob(float value);

  // optional int32 resized_width = 3 [default = 512];
  bool has_resized_width() const;
  void clear_resized_width();
  static const int kResizedWidthFieldNumber = 3;
  ::google::protobuf::int32 resized_width() const;
  void set_resized_width(::google::protobuf::int32 value);

  // optional int32 resized_height = 4 [default = 288];
  bool has_resized_height() const;
  void clear_resized_height();
  static const int kResizedHeightFieldNumber = 4;
  ::google::protobuf::int32 resized_height() const;
  void set_resized_height(::google::protobuf::int32 value);

  // optional bool save = 5 [default = false];
  bool has_save() const;
  void clear_save();
  static const int kSaveFieldNumber = 5;
  bool save() const;
  void set_save(bool value);

  // optional string save_path = 6 [default = ""];
  bool has_save_path() const;
  void clear_save_path();
  static const int kSavePathFieldNumber = 6;
  const ::std::string& save_path() const;
  void set_save_path(const ::std::string& value);
  void set_save_path(const char* value);
  void set_save_path(const char* value, size_t size);
  ::std::string* mutable_save_path();
  ::std::string* release_save_path();
  void set_allocated_save_path(::std::string* save_path);

  // repeated float cov_limits = 7;
  int cov_limits_size() const;
  void clear_cov_limits();
  static const int kCovLimitsFieldNumber = 7;
  float cov_limits(int index) const;
  void set_cov_limits(int index, float value);
  void add_cov_limits(float value);
  const ::google::protobuf::RepeatedField< float >&
      cov_limits() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_cov_limits();

  // optional .caffe.DistortionParameter dis_param = 8;
  bool has_dis_param() const;
  void clear_dis_param();
  static const int kDisParamFieldNumber = 8;
  const ::caffe::DistortionParameter& dis_param() const;
  ::caffe::DistortionParameter* mutable_dis_param();
  ::caffe::DistortionParameter* release_dis_param();
  void set_allocated_dis_param(::caffe::DistortionParameter* dis_param);

  // optional bool flag_eqhist = 9 [default = false];
  bool has_flag_eqhist() const;
  void clear_flag_eqhist();
  static const int kFlagEqhistFieldNumber = 9;
  bool flag_eqhist() const;
  void set_flag_eqhist(bool value);

  // optional bool sample_sixteennine = 10 [default = true];
  bool has_sample_sixteennine() const;
  void clear_sample_sixteennine();
  static const int kSampleSixteennineFieldNumber = 10;
  bool sample_sixteennine() const;
  void set_sample_sixteennine(bool value);

  // optional bool sample_ninesixteen = 11 [default = false];
  bool has_sample_ninesixteen() const;
  void clear_sample_ninesixteen();
  static const int kSampleNinesixteenFieldNumber = 11;
  bool sample_ninesixteen() const;
  void set_sample_ninesixteen(bool value);

  // optional bool crop_around_gt = 20 [default = false];
  bool has_crop_around_gt() const;
  void clear_crop_around_gt();
  static const int kCropAroundGtFieldNumber = 20;
  bool crop_around_gt() const;
  void set_crop_around_gt(bool value);

  // optional float crop_max_area_scale = 21;
  bool has_crop_max_area_scale() const;
  void clear_crop_max_area_scale();
  static const int kCropMaxAreaScaleFieldNumber = 21;
  float crop_max_area_scale() const;
  void set_crop_max_area_scale(float value);

  // optional float crop_min_area_scale = 24;
  bool has_crop_min_area_scale() const;
  void clear_crop_min_area_scale();
  static const int kCropMinAreaScaleFieldNumber = 24;
  float crop_min_area_scale() const;
  void set_crop_min_area_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.MinihandTransformationParameter)
 private:
  inline void set_has_do_flip();
  inline void clear_has_do_flip();
  inline void set_has_flip_prob();
  inline void clear_has_flip_prob();
  inline void set_has_resized_width();
  inline void clear_has_resized_width();
  inline void set_has_resized_height();
  inline void clear_has_resized_height();
  inline void set_has_save();
  inline void clear_has_save();
  inline void set_has_save_path();
  inline void clear_has_save_path();
  inline void set_has_dis_param();
  inline void clear_has_dis_param();
  inline void set_has_flag_eqhist();
  inline void clear_has_flag_eqhist();
  inline void set_has_sample_sixteennine();
  inline void clear_has_sample_sixteennine();
  inline void set_has_sample_ninesixteen();
  inline void clear_has_sample_ninesixteen();
  inline void set_has_crop_around_gt();
  inline void clear_has_crop_around_gt();
  inline void set_has_crop_max_area_scale();
  inline void clear_has_crop_max_area_scale();
  inline void set_has_crop_min_area_scale();
  inline void clear_has_crop_min_area_scale();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float flip_prob_;
  ::google::protobuf::int32 resized_width_;
  ::google::protobuf::int32 resized_height_;
  bool do_flip_;
  bool save_;
  bool flag_eqhist_;
  bool sample_sixteennine_;
  ::google::protobuf::internal::ArenaStringPtr save_path_;
  ::google::protobuf::RepeatedField< float > cov_limits_;
  ::caffe::DistortionParameter* dis_param_;
  bool sample_ninesixteen_;
  bool crop_around_gt_;
  float crop_max_area_scale_;
  float crop_min_area_scale_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static MinihandTransformationParameter* default_instance_;
};
// -------------------------------------------------------------------

class MinihandDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MinihandDataParameter) */ {
 public:
  MinihandDataParameter();
  virtual ~MinihandDataParameter();

  MinihandDataParameter(const MinihandDataParameter& from);

  inline MinihandDataParameter& operator=(const MinihandDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MinihandDataParameter& default_instance();

  void Swap(MinihandDataParameter* other);

  // implements Message ----------------------------------------------

  inline MinihandDataParameter* New() const { return New(NULL); }

  MinihandDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MinihandDataParameter& from);
  void MergeFrom(const MinihandDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MinihandDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string xml_list = 1;
  bool has_xml_list() const;
  void clear_xml_list();
  static const int kXmlListFieldNumber = 1;
  const ::std::string& xml_list() const;
  void set_xml_list(const ::std::string& value);
  void set_xml_list(const char* value);
  void set_xml_list(const char* value, size_t size);
  ::std::string* mutable_xml_list();
  ::std::string* release_xml_list();
  void set_allocated_xml_list(::std::string* xml_list);

  // optional string xml_root = 2;
  bool has_xml_root() const;
  void clear_xml_root();
  static const int kXmlRootFieldNumber = 2;
  const ::std::string& xml_root() const;
  void set_xml_root(const ::std::string& value);
  void set_xml_root(const char* value);
  void set_xml_root(const char* value, size_t size);
  ::std::string* mutable_xml_root();
  ::std::string* release_xml_root();
  void set_allocated_xml_root(::std::string* xml_root);

  // optional string image_root = 3;
  bool has_image_root() const;
  void clear_image_root();
  static const int kImageRootFieldNumber = 3;
  const ::std::string& image_root() const;
  void set_image_root(const ::std::string& value);
  void set_image_root(const char* value);
  void set_image_root(const char* value, size_t size);
  ::std::string* mutable_image_root();
  ::std::string* release_image_root();
  void set_allocated_image_root(::std::string* image_root);

  // optional bool shuffle = 4 [default = true];
  bool has_shuffle() const;
  void clear_shuffle();
  static const int kShuffleFieldNumber = 4;
  bool shuffle() const;
  void set_shuffle(bool value);

  // optional int32 rand_skip = 5 [default = 100];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 5;
  ::google::protobuf::int32 rand_skip() const;
  void set_rand_skip(::google::protobuf::int32 value);

  // optional int32 batch_size = 6 [default = 24];
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 6;
  ::google::protobuf::int32 batch_size() const;
  void set_batch_size(::google::protobuf::int32 value);

  // repeated float mean_value = 7;
  int mean_value_size() const;
  void clear_mean_value();
  static const int kMeanValueFieldNumber = 7;
  float mean_value(int index) const;
  void set_mean_value(int index, float value);
  void add_mean_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      mean_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_mean_value();

  // repeated string xml_list_multiple = 8;
  int xml_list_multiple_size() const;
  void clear_xml_list_multiple();
  static const int kXmlListMultipleFieldNumber = 8;
  const ::std::string& xml_list_multiple(int index) const;
  ::std::string* mutable_xml_list_multiple(int index);
  void set_xml_list_multiple(int index, const ::std::string& value);
  void set_xml_list_multiple(int index, const char* value);
  void set_xml_list_multiple(int index, const char* value, size_t size);
  ::std::string* add_xml_list_multiple();
  void add_xml_list_multiple(const ::std::string& value);
  void add_xml_list_multiple(const char* value);
  void add_xml_list_multiple(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& xml_list_multiple() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_xml_list_multiple();

  // repeated string xml_root_multiple = 9;
  int xml_root_multiple_size() const;
  void clear_xml_root_multiple();
  static const int kXmlRootMultipleFieldNumber = 9;
  const ::std::string& xml_root_multiple(int index) const;
  ::std::string* mutable_xml_root_multiple(int index);
  void set_xml_root_multiple(int index, const ::std::string& value);
  void set_xml_root_multiple(int index, const char* value);
  void set_xml_root_multiple(int index, const char* value, size_t size);
  ::std::string* add_xml_root_multiple();
  void add_xml_root_multiple(const ::std::string& value);
  void add_xml_root_multiple(const char* value);
  void add_xml_root_multiple(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& xml_root_multiple() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_xml_root_multiple();

  // optional int32 base_bindex = 10 [default = 0];
  bool has_base_bindex() const;
  void clear_base_bindex();
  static const int kBaseBindexFieldNumber = 10;
  ::google::protobuf::int32 base_bindex() const;
  void set_base_bindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.MinihandDataParameter)
 private:
  inline void set_has_xml_list();
  inline void clear_has_xml_list();
  inline void set_has_xml_root();
  inline void clear_has_xml_root();
  inline void set_has_image_root();
  inline void clear_has_image_root();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_base_bindex();
  inline void clear_has_base_bindex();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr xml_list_;
  ::google::protobuf::internal::ArenaStringPtr xml_root_;
  ::google::protobuf::internal::ArenaStringPtr image_root_;
  bool shuffle_;
  ::google::protobuf::int32 rand_skip_;
  ::google::protobuf::RepeatedField< float > mean_value_;
  ::google::protobuf::RepeatedPtrField< ::std::string> xml_list_multiple_;
  ::google::protobuf::int32 batch_size_;
  ::google::protobuf::int32 base_bindex_;
  ::google::protobuf::RepeatedPtrField< ::std::string> xml_root_multiple_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static MinihandDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class TrackerPriorParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TrackerPriorParameter) */ {
 public:
  TrackerPriorParameter();
  virtual ~TrackerPriorParameter();

  TrackerPriorParameter(const TrackerPriorParameter& from);

  inline TrackerPriorParameter& operator=(const TrackerPriorParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerPriorParameter& default_instance();

  void Swap(TrackerPriorParameter* other);

  // implements Message ----------------------------------------------

  inline TrackerPriorParameter* New() const { return New(NULL); }

  TrackerPriorParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackerPriorParameter& from);
  void MergeFrom(const TrackerPriorParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackerPriorParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float step = 1 [default = 1];
  bool has_step() const;
  void clear_step();
  static const int kStepFieldNumber = 1;
  float step() const;
  void set_step(float value);

  // optional float extent_scale = 2 [default = 0];
  bool has_extent_scale() const;
  void clear_extent_scale();
  static const int kExtentScaleFieldNumber = 2;
  float extent_scale() const;
  void set_extent_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.TrackerPriorParameter)
 private:
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_extent_scale();
  inline void clear_has_extent_scale();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float step_;
  float extent_scale_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static TrackerPriorParameter* default_instance_;
};
// -------------------------------------------------------------------

class MarginInnerProductParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MarginInnerProductParameter) */ {
 public:
  MarginInnerProductParameter();
  virtual ~MarginInnerProductParameter();

  MarginInnerProductParameter(const MarginInnerProductParameter& from);

  inline MarginInnerProductParameter& operator=(const MarginInnerProductParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarginInnerProductParameter& default_instance();

  void Swap(MarginInnerProductParameter* other);

  // implements Message ----------------------------------------------

  inline MarginInnerProductParameter* New() const { return New(NULL); }

  MarginInnerProductParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarginInnerProductParameter& from);
  void MergeFrom(const MarginInnerProductParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MarginInnerProductParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MarginInnerProductParameter_MarginType MarginType;
  static const MarginType SINGLE =
    MarginInnerProductParameter_MarginType_SINGLE;
  static const MarginType DOUBLE =
    MarginInnerProductParameter_MarginType_DOUBLE;
  static const MarginType TRIPLE =
    MarginInnerProductParameter_MarginType_TRIPLE;
  static const MarginType QUADRUPLE =
    MarginInnerProductParameter_MarginType_QUADRUPLE;
  static inline bool MarginType_IsValid(int value) {
    return MarginInnerProductParameter_MarginType_IsValid(value);
  }
  static const MarginType MarginType_MIN =
    MarginInnerProductParameter_MarginType_MarginType_MIN;
  static const MarginType MarginType_MAX =
    MarginInnerProductParameter_MarginType_MarginType_MAX;
  static const int MarginType_ARRAYSIZE =
    MarginInnerProductParameter_MarginType_MarginType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MarginType_descriptor() {
    return MarginInnerProductParameter_MarginType_descriptor();
  }
  static inline const ::std::string& MarginType_Name(MarginType value) {
    return MarginInnerProductParameter_MarginType_Name(value);
  }
  static inline bool MarginType_Parse(const ::std::string& name,
      MarginType* value) {
    return MarginInnerProductParameter_MarginType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional .caffe.MarginInnerProductParameter.MarginType margin_type = 2 [default = QUADRUPLE];
  bool has_margin_type() const;
  void clear_margin_type();
  static const int kMarginTypeFieldNumber = 2;
  ::caffe::MarginInnerProductParameter_MarginType margin_type() const;
  void set_margin_type(::caffe::MarginInnerProductParameter_MarginType value);

  // optional .caffe.FillerParameter weight_filler = 3;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 3;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* mutable_weight_filler();
  ::caffe::FillerParameter* release_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional int32 axis = 4 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 4;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional float base = 5 [default = 1];
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 5;
  float base() const;
  void set_base(float value);

  // optional float gamma = 6 [default = 0];
  bool has_gamma() const;
  void clear_gamma();
  static const int kGammaFieldNumber = 6;
  float gamma() const;
  void set_gamma(float value);

  // optional float power = 7 [default = 1];
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 7;
  float power() const;
  void set_power(float value);

  // optional int32 iteration = 8 [default = 0];
  bool has_iteration() const;
  void clear_iteration();
  static const int kIterationFieldNumber = 8;
  ::google::protobuf::int32 iteration() const;
  void set_iteration(::google::protobuf::int32 value);

  // optional float lambda_min = 9 [default = 0];
  bool has_lambda_min() const;
  void clear_lambda_min();
  static const int kLambdaMinFieldNumber = 9;
  float lambda_min() const;
  void set_lambda_min(float value);

  // @@protoc_insertion_point(class_scope:caffe.MarginInnerProductParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_margin_type();
  inline void clear_has_margin_type();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_gamma();
  inline void clear_has_gamma();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_iteration();
  inline void clear_has_iteration();
  inline void set_has_lambda_min();
  inline void clear_has_lambda_min();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_output_;
  int margin_type_;
  ::caffe::FillerParameter* weight_filler_;
  ::google::protobuf::int32 axis_;
  float base_;
  float gamma_;
  float power_;
  ::google::protobuf::int32 iteration_;
  float lambda_min_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static MarginInnerProductParameter* default_instance_;
};
// -------------------------------------------------------------------

class HandPoseDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.HandPoseDataParameter) */ {
 public:
  HandPoseDataParameter();
  virtual ~HandPoseDataParameter();

  HandPoseDataParameter(const HandPoseDataParameter& from);

  inline HandPoseDataParameter& operator=(const HandPoseDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HandPoseDataParameter& default_instance();

  void Swap(HandPoseDataParameter* other);

  // implements Message ----------------------------------------------

  inline HandPoseDataParameter* New() const { return New(NULL); }

  HandPoseDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HandPoseDataParameter& from);
  void MergeFrom(const HandPoseDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HandPoseDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 2 [default = 1];
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 2;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 3 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 3;
  ::google::protobuf::uint32 rand_skip() const;
  void set_rand_skip(::google::protobuf::uint32 value);

  // optional bool shuffle = 4 [default = false];
  bool has_shuffle() const;
  void clear_shuffle();
  static const int kShuffleFieldNumber = 4;
  bool shuffle() const;
  void set_shuffle(bool value);

  // optional uint32 resize_h = 5 [default = 0];
  bool has_resize_h() const;
  void clear_resize_h();
  static const int kResizeHFieldNumber = 5;
  ::google::protobuf::uint32 resize_h() const;
  void set_resize_h(::google::protobuf::uint32 value);

  // optional uint32 resize_w = 6 [default = 0];
  bool has_resize_w() const;
  void clear_resize_w();
  static const int kResizeWFieldNumber = 6;
  ::google::protobuf::uint32 resize_w() const;
  void set_resize_w(::google::protobuf::uint32 value);

  // optional string root_folder = 7 [default = ""];
  bool has_root_folder() const;
  void clear_root_folder();
  static const int kRootFolderFieldNumber = 7;
  const ::std::string& root_folder() const;
  void set_root_folder(const ::std::string& value);
  void set_root_folder(const char* value);
  void set_root_folder(const char* value, size_t size);
  ::std::string* mutable_root_folder();
  ::std::string* release_root_folder();
  void set_allocated_root_folder(::std::string* root_folder);

  // optional float flip_prob = 8 [default = 0];
  bool has_flip_prob() const;
  void clear_flip_prob();
  static const int kFlipProbFieldNumber = 8;
  float flip_prob() const;
  void set_flip_prob(float value);

  // optional bool flip = 9 [default = true];
  bool has_flip() const;
  void clear_flip();
  static const int kFlipFieldNumber = 9;
  bool flip() const;
  void set_flip(bool value);

  // optional bool save = 10 [default = false];
  bool has_save() const;
  void clear_save();
  static const int kSaveFieldNumber = 10;
  bool save() const;
  void set_save(bool value);

  // optional string save_path = 11;
  bool has_save_path() const;
  void clear_save_path();
  static const int kSavePathFieldNumber = 11;
  const ::std::string& save_path() const;
  void set_save_path(const ::std::string& value);
  void set_save_path(const char* value);
  void set_save_path(const char* value, size_t size);
  ::std::string* mutable_save_path();
  ::std::string* release_save_path();
  void set_allocated_save_path(::std::string* save_path);

  // optional float bbox_extend_min = 12 [default = 1.5];
  bool has_bbox_extend_min() const;
  void clear_bbox_extend_min();
  static const int kBboxExtendMinFieldNumber = 12;
  float bbox_extend_min() const;
  void set_bbox_extend_min(float value);

  // optional float bbox_extend_max = 13 [default = 2];
  bool has_bbox_extend_max() const;
  void clear_bbox_extend_max();
  static const int kBboxExtendMaxFieldNumber = 13;
  float bbox_extend_max() const;
  void set_bbox_extend_max(float value);

  // optional float rotate_angle = 14 [default = 20];
  bool has_rotate_angle() const;
  void clear_rotate_angle();
  static const int kRotateAngleFieldNumber = 14;
  float rotate_angle() const;
  void set_rotate_angle(float value);

  // optional bool clip = 15;
  bool has_clip() const;
  void clear_clip();
  static const int kClipFieldNumber = 15;
  bool clip() const;
  void set_clip(bool value);

  // optional bool flag_augintrain = 16;
  bool has_flag_augintrain() const;
  void clear_flag_augintrain();
  static const int kFlagAugintrainFieldNumber = 16;
  bool flag_augintrain() const;
  void set_flag_augintrain(bool value);

  // @@protoc_insertion_point(class_scope:caffe.HandPoseDataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();
  inline void set_has_resize_h();
  inline void clear_has_resize_h();
  inline void set_has_resize_w();
  inline void clear_has_resize_w();
  inline void set_has_root_folder();
  inline void clear_has_root_folder();
  inline void set_has_flip_prob();
  inline void clear_has_flip_prob();
  inline void set_has_flip();
  inline void clear_has_flip();
  inline void set_has_save();
  inline void clear_has_save();
  inline void set_has_save_path();
  inline void clear_has_save_path();
  inline void set_has_bbox_extend_min();
  inline void clear_has_bbox_extend_min();
  inline void set_has_bbox_extend_max();
  inline void clear_has_bbox_extend_max();
  inline void set_has_rotate_angle();
  inline void clear_has_rotate_angle();
  inline void set_has_clip();
  inline void clear_has_clip();
  inline void set_has_flag_augintrain();
  inline void clear_has_flag_augintrain();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 rand_skip_;
  ::google::protobuf::uint32 resize_h_;
  ::google::protobuf::uint32 resize_w_;
  ::google::protobuf::internal::ArenaStringPtr root_folder_;
  float flip_prob_;
  bool shuffle_;
  bool flip_;
  bool save_;
  bool clip_;
  ::google::protobuf::internal::ArenaStringPtr save_path_;
  float bbox_extend_min_;
  float bbox_extend_max_;
  float rotate_angle_;
  bool flag_augintrain_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static HandPoseDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class TransformationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TransformationParameter) */ {
 public:
  TransformationParameter();
  virtual ~TransformationParameter();

  TransformationParameter(const TransformationParameter& from);

  inline TransformationParameter& operator=(const TransformationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformationParameter& default_instance();

  void Swap(TransformationParameter* other);

  // implements Message ----------------------------------------------

  inline TransformationParameter* New() const { return New(NULL); }

  TransformationParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransformationParameter& from);
  void MergeFrom(const TransformationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransformationParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float scale = 1 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 1;
  float scale() const;
  void set_scale(float value);

  // optional bool mirror = 2 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 2;
  bool mirror() const;
  void set_mirror(bool value);

  // optional uint32 crop_size = 3 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 3;
  ::google::protobuf::uint32 crop_size() const;
  void set_crop_size(::google::protobuf::uint32 value);

  // optional uint32 crop_h = 11 [default = 0];
  bool has_crop_h() const;
  void clear_crop_h();
  static const int kCropHFieldNumber = 11;
  ::google::protobuf::uint32 crop_h() const;
  void set_crop_h(::google::protobuf::uint32 value);

  // optional uint32 crop_w = 12 [default = 0];
  bool has_crop_w() const;
  void clear_crop_w();
  static const int kCropWFieldNumber = 12;
  ::google::protobuf::uint32 crop_w() const;
  void set_crop_w(::google::protobuf::uint32 value);

  // optional string mean_file = 4;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 4;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // repeated float mean_value = 5;
  int mean_value_size() const;
  void clear_mean_value();
  static const int kMeanValueFieldNumber = 5;
  float mean_value(int index) const;
  void set_mean_value(int index, float value);
  void add_mean_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      mean_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_mean_value();

  // optional bool force_color = 6 [default = false];
  bool has_force_color() const;
  void clear_force_color();
  static const int kForceColorFieldNumber = 6;
  bool force_color() const;
  void set_force_color(bool value);

  // optional bool force_gray = 7 [default = false];
  bool has_force_gray() const;
  void clear_force_gray();
  static const int kForceGrayFieldNumber = 7;
  bool force_gray() const;
  void set_force_gray(bool value);

  // optional .caffe.ResizeParameter resize_param = 8;
  bool has_resize_param() const;
  void clear_resize_param();
  static const int kResizeParamFieldNumber = 8;
  const ::caffe::ResizeParameter& resize_param() const;
  ::caffe::ResizeParameter* mutable_resize_param();
  ::caffe::ResizeParameter* release_resize_param();
  void set_allocated_resize_param(::caffe::ResizeParameter* resize_param);

  // optional .caffe.NoiseParameter noise_param = 9;
  bool has_noise_param() const;
  void clear_noise_param();
  static const int kNoiseParamFieldNumber = 9;
  const ::caffe::NoiseParameter& noise_param() const;
  ::caffe::NoiseParameter* mutable_noise_param();
  ::caffe::NoiseParameter* release_noise_param();
  void set_allocated_noise_param(::caffe::NoiseParameter* noise_param);

  // optional .caffe.EmitConstraint emit_constraint = 10;
  bool has_emit_constraint() const;
  void clear_emit_constraint();
  static const int kEmitConstraintFieldNumber = 10;
  const ::caffe::EmitConstraint& emit_constraint() const;
  ::caffe::EmitConstraint* mutable_emit_constraint();
  ::caffe::EmitConstraint* release_emit_constraint();
  void set_allocated_emit_constraint(::caffe::EmitConstraint* emit_constraint);

  // optional .caffe.DistoredParameter distored_param = 13;
  bool has_distored_param() const;
  void clear_distored_param();
  static const int kDistoredParamFieldNumber = 13;
  const ::caffe::DistoredParameter& distored_param() const;
  ::caffe::DistoredParameter* mutable_distored_param();
  ::caffe::DistoredParameter* release_distored_param();
  void set_allocated_distored_param(::caffe::DistoredParameter* distored_param);

  // optional .caffe.RandomCropParameter crop_param = 14;
  bool has_crop_param() const;
  void clear_crop_param();
  static const int kCropParamFieldNumber = 14;
  const ::caffe::RandomCropParameter& crop_param() const;
  ::caffe::RandomCropParameter* mutable_crop_param();
  ::caffe::RandomCropParameter* release_crop_param();
  void set_allocated_crop_param(::caffe::RandomCropParameter* crop_param);

  // optional float boxsize_threshold = 18 [default = 0];
  bool has_boxsize_threshold() const;
  void clear_boxsize_threshold();
  static const int kBoxsizeThresholdFieldNumber = 18;
  float boxsize_threshold() const;
  void set_boxsize_threshold(float value);

  // optional .caffe.DistortionParameter distort_param = 15;
  bool has_distort_param() const;
  void clear_distort_param();
  static const int kDistortParamFieldNumber = 15;
  const ::caffe::DistortionParameter& distort_param() const;
  ::caffe::DistortionParameter* mutable_distort_param();
  ::caffe::DistortionParameter* release_distort_param();
  void set_allocated_distort_param(::caffe::DistortionParameter* distort_param);

  // optional .caffe.ExpansionParameter expand_param = 16;
  bool has_expand_param() const;
  void clear_expand_param();
  static const int kExpandParamFieldNumber = 16;
  const ::caffe::ExpansionParameter& expand_param() const;
  ::caffe::ExpansionParameter* mutable_expand_param();
  ::caffe::ExpansionParameter* release_expand_param();
  void set_allocated_expand_param(::caffe::ExpansionParameter* expand_param);

  // repeated .caffe.BatchSampler batch_sampler = 17;
  int batch_sampler_size() const;
  void clear_batch_sampler();
  static const int kBatchSamplerFieldNumber = 17;
  const ::caffe::BatchSampler& batch_sampler(int index) const;
  ::caffe::BatchSampler* mutable_batch_sampler(int index);
  ::caffe::BatchSampler* add_batch_sampler();
  ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler >*
      mutable_batch_sampler();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler >&
      batch_sampler() const;

  // @@protoc_insertion_point(class_scope:caffe.TransformationParameter)
 private:
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_crop_h();
  inline void clear_has_crop_h();
  inline void set_has_crop_w();
  inline void clear_has_crop_w();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_force_color();
  inline void clear_has_force_color();
  inline void set_has_force_gray();
  inline void clear_has_force_gray();
  inline void set_has_resize_param();
  inline void clear_has_resize_param();
  inline void set_has_noise_param();
  inline void clear_has_noise_param();
  inline void set_has_emit_constraint();
  inline void clear_has_emit_constraint();
  inline void set_has_distored_param();
  inline void clear_has_distored_param();
  inline void set_has_crop_param();
  inline void clear_has_crop_param();
  inline void set_has_boxsize_threshold();
  inline void clear_has_boxsize_threshold();
  inline void set_has_distort_param();
  inline void clear_has_distort_param();
  inline void set_has_expand_param();
  inline void clear_has_expand_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float scale_;
  ::google::protobuf::uint32 crop_size_;
  ::google::protobuf::uint32 crop_h_;
  ::google::protobuf::uint32 crop_w_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  ::google::protobuf::RepeatedField< float > mean_value_;
  bool mirror_;
  bool force_color_;
  bool force_gray_;
  float boxsize_threshold_;
  ::caffe::ResizeParameter* resize_param_;
  ::caffe::NoiseParameter* noise_param_;
  ::caffe::EmitConstraint* emit_constraint_;
  ::caffe::DistoredParameter* distored_param_;
  ::caffe::RandomCropParameter* crop_param_;
  ::caffe::DistortionParameter* distort_param_;
  ::caffe::ExpansionParameter* expand_param_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler > batch_sampler_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static TransformationParameter* default_instance_;
};
// -------------------------------------------------------------------

class DistortionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DistortionParameter) */ {
 public:
  DistortionParameter();
  virtual ~DistortionParameter();

  DistortionParameter(const DistortionParameter& from);

  inline DistortionParameter& operator=(const DistortionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DistortionParameter& default_instance();

  void Swap(DistortionParameter* other);

  // implements Message ----------------------------------------------

  inline DistortionParameter* New() const { return New(NULL); }

  DistortionParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DistortionParameter& from);
  void MergeFrom(const DistortionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DistortionParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float brightness_prob = 1 [default = 0];
  bool has_brightness_prob() const;
  void clear_brightness_prob();
  static const int kBrightnessProbFieldNumber = 1;
  float brightness_prob() const;
  void set_brightness_prob(float value);

  // optional float brightness_delta = 2 [default = 0];
  bool has_brightness_delta() const;
  void clear_brightness_delta();
  static const int kBrightnessDeltaFieldNumber = 2;
  float brightness_delta() const;
  void set_brightness_delta(float value);

  // optional float contrast_prob = 3 [default = 0];
  bool has_contrast_prob() const;
  void clear_contrast_prob();
  static const int kContrastProbFieldNumber = 3;
  float contrast_prob() const;
  void set_contrast_prob(float value);

  // optional float contrast_lower = 4 [default = 0];
  bool has_contrast_lower() const;
  void clear_contrast_lower();
  static const int kContrastLowerFieldNumber = 4;
  float contrast_lower() const;
  void set_contrast_lower(float value);

  // optional float contrast_upper = 5 [default = 0];
  bool has_contrast_upper() const;
  void clear_contrast_upper();
  static const int kContrastUpperFieldNumber = 5;
  float contrast_upper() const;
  void set_contrast_upper(float value);

  // optional float hue_prob = 6 [default = 0];
  bool has_hue_prob() const;
  void clear_hue_prob();
  static const int kHueProbFieldNumber = 6;
  float hue_prob() const;
  void set_hue_prob(float value);

  // optional float hue_delta = 7 [default = 0];
  bool has_hue_delta() const;
  void clear_hue_delta();
  static const int kHueDeltaFieldNumber = 7;
  float hue_delta() const;
  void set_hue_delta(float value);

  // optional float saturation_prob = 8 [default = 0];
  bool has_saturation_prob() const;
  void clear_saturation_prob();
  static const int kSaturationProbFieldNumber = 8;
  float saturation_prob() const;
  void set_saturation_prob(float value);

  // optional float saturation_lower = 9 [default = 0];
  bool has_saturation_lower() const;
  void clear_saturation_lower();
  static const int kSaturationLowerFieldNumber = 9;
  float saturation_lower() const;
  void set_saturation_lower(float value);

  // optional float saturation_upper = 10 [default = 0];
  bool has_saturation_upper() const;
  void clear_saturation_upper();
  static const int kSaturationUpperFieldNumber = 10;
  float saturation_upper() const;
  void set_saturation_upper(float value);

  // optional float random_order_prob = 11 [default = 0];
  bool has_random_order_prob() const;
  void clear_random_order_prob();
  static const int kRandomOrderProbFieldNumber = 11;
  float random_order_prob() const;
  void set_random_order_prob(float value);

  // @@protoc_insertion_point(class_scope:caffe.DistortionParameter)
 private:
  inline void set_has_brightness_prob();
  inline void clear_has_brightness_prob();
  inline void set_has_brightness_delta();
  inline void clear_has_brightness_delta();
  inline void set_has_contrast_prob();
  inline void clear_has_contrast_prob();
  inline void set_has_contrast_lower();
  inline void clear_has_contrast_lower();
  inline void set_has_contrast_upper();
  inline void clear_has_contrast_upper();
  inline void set_has_hue_prob();
  inline void clear_has_hue_prob();
  inline void set_has_hue_delta();
  inline void clear_has_hue_delta();
  inline void set_has_saturation_prob();
  inline void clear_has_saturation_prob();
  inline void set_has_saturation_lower();
  inline void clear_has_saturation_lower();
  inline void set_has_saturation_upper();
  inline void clear_has_saturation_upper();
  inline void set_has_random_order_prob();
  inline void clear_has_random_order_prob();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float brightness_prob_;
  float brightness_delta_;
  float contrast_prob_;
  float contrast_lower_;
  float contrast_upper_;
  float hue_prob_;
  float hue_delta_;
  float saturation_prob_;
  float saturation_lower_;
  float saturation_upper_;
  float random_order_prob_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static DistortionParameter* default_instance_;
};
// -------------------------------------------------------------------

class ExpansionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ExpansionParameter) */ {
 public:
  ExpansionParameter();
  virtual ~ExpansionParameter();

  ExpansionParameter(const ExpansionParameter& from);

  inline ExpansionParameter& operator=(const ExpansionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExpansionParameter& default_instance();

  void Swap(ExpansionParameter* other);

  // implements Message ----------------------------------------------

  inline ExpansionParameter* New() const { return New(NULL); }

  ExpansionParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExpansionParameter& from);
  void MergeFrom(const ExpansionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExpansionParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float prob = 1 [default = 1];
  bool has_prob() const;
  void clear_prob();
  static const int kProbFieldNumber = 1;
  float prob() const;
  void set_prob(float value);

  // optional float max_expand_ratio = 2 [default = 1];
  bool has_max_expand_ratio() const;
  void clear_max_expand_ratio();
  static const int kMaxExpandRatioFieldNumber = 2;
  float max_expand_ratio() const;
  void set_max_expand_ratio(float value);

  // @@protoc_insertion_point(class_scope:caffe.ExpansionParameter)
 private:
  inline void set_has_prob();
  inline void clear_has_prob();
  inline void set_has_max_expand_ratio();
  inline void clear_has_max_expand_ratio();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float prob_;
  float max_expand_ratio_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ExpansionParameter* default_instance_;
};
// -------------------------------------------------------------------

class RandomCropParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.RandomCropParameter) */ {
 public:
  RandomCropParameter();
  virtual ~RandomCropParameter();

  RandomCropParameter(const RandomCropParameter& from);

  inline RandomCropParameter& operator=(const RandomCropParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RandomCropParameter& default_instance();

  void Swap(RandomCropParameter* other);

  // implements Message ----------------------------------------------

  inline RandomCropParameter* New() const { return New(NULL); }

  RandomCropParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RandomCropParameter& from);
  void MergeFrom(const RandomCropParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RandomCropParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float min_scale = 1 [default = 1];
  bool has_min_scale() const;
  void clear_min_scale();
  static const int kMinScaleFieldNumber = 1;
  float min_scale() const;
  void set_min_scale(float value);

  // optional float max_scale = 2 [default = 1];
  bool has_max_scale() const;
  void clear_max_scale();
  static const int kMaxScaleFieldNumber = 2;
  float max_scale() const;
  void set_max_scale(float value);

  // optional float min_aspect = 3 [default = 1];
  bool has_min_aspect() const;
  void clear_min_aspect();
  static const int kMinAspectFieldNumber = 3;
  float min_aspect() const;
  void set_min_aspect(float value);

  // optional float max_aspect = 4 [default = 1];
  bool has_max_aspect() const;
  void clear_max_aspect();
  static const int kMaxAspectFieldNumber = 4;
  float max_aspect() const;
  void set_max_aspect(float value);

  // optional int32 max_sample_size = 5 [default = 1];
  bool has_max_sample_size() const;
  void clear_max_sample_size();
  static const int kMaxSampleSizeFieldNumber = 5;
  ::google::protobuf::int32 max_sample_size() const;
  void set_max_sample_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.RandomCropParameter)
 private:
  inline void set_has_min_scale();
  inline void clear_has_min_scale();
  inline void set_has_max_scale();
  inline void clear_has_max_scale();
  inline void set_has_min_aspect();
  inline void clear_has_min_aspect();
  inline void set_has_max_aspect();
  inline void clear_has_max_aspect();
  inline void set_has_max_sample_size();
  inline void clear_has_max_sample_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float min_scale_;
  float max_scale_;
  float min_aspect_;
  float max_aspect_;
  ::google::protobuf::int32 max_sample_size_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static RandomCropParameter* default_instance_;
};
// -------------------------------------------------------------------

class ConnectLimbParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ConnectLimbParameter) */ {
 public:
  ConnectLimbParameter();
  virtual ~ConnectLimbParameter();

  ConnectLimbParameter(const ConnectLimbParameter& from);

  inline ConnectLimbParameter& operator=(const ConnectLimbParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectLimbParameter& default_instance();

  void Swap(ConnectLimbParameter* other);

  // implements Message ----------------------------------------------

  inline ConnectLimbParameter* New() const { return New(NULL); }

  ConnectLimbParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectLimbParameter& from);
  void MergeFrom(const ConnectLimbParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConnectLimbParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_type_coco = 1 [default = true];
  bool has_is_type_coco() const;
  void clear_is_type_coco();
  static const int kIsTypeCocoFieldNumber = 1;
  bool is_type_coco() const;
  void set_is_type_coco(bool value);

  // optional int32 max_person = 2 [default = 20];
  bool has_max_person() const;
  void clear_max_person();
  static const int kMaxPersonFieldNumber = 2;
  ::google::protobuf::int32 max_person() const;
  void set_max_person(::google::protobuf::int32 value);

  // optional int32 iters_pa_cal = 3 [default = 10];
  bool has_iters_pa_cal() const;
  void clear_iters_pa_cal();
  static const int kItersPaCalFieldNumber = 3;
  ::google::protobuf::int32 iters_pa_cal() const;
  void set_iters_pa_cal(::google::protobuf::int32 value);

  // optional float connect_inter_threshold = 4 [default = 0.05];
  bool has_connect_inter_threshold() const;
  void clear_connect_inter_threshold();
  static const int kConnectInterThresholdFieldNumber = 4;
  float connect_inter_threshold() const;
  void set_connect_inter_threshold(float value);

  // optional int32 connect_inter_min_nums = 5 [default = 8];
  bool has_connect_inter_min_nums() const;
  void clear_connect_inter_min_nums();
  static const int kConnectInterMinNumsFieldNumber = 5;
  ::google::protobuf::int32 connect_inter_min_nums() const;
  void set_connect_inter_min_nums(::google::protobuf::int32 value);

  // optional int32 connect_min_subset_cnt = 6 [default = 3];
  bool has_connect_min_subset_cnt() const;
  void clear_connect_min_subset_cnt();
  static const int kConnectMinSubsetCntFieldNumber = 6;
  ::google::protobuf::int32 connect_min_subset_cnt() const;
  void set_connect_min_subset_cnt(::google::protobuf::int32 value);

  // optional float connect_min_subset_score = 7 [default = 0.3];
  bool has_connect_min_subset_score() const;
  void clear_connect_min_subset_score();
  static const int kConnectMinSubsetScoreFieldNumber = 7;
  float connect_min_subset_score() const;
  void set_connect_min_subset_score(float value);

  // optional int32 max_peaks_use = 8 [default = 32];
  bool has_max_peaks_use() const;
  void clear_max_peaks_use();
  static const int kMaxPeaksUseFieldNumber = 8;
  ::google::protobuf::int32 max_peaks_use() const;
  void set_max_peaks_use(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.ConnectLimbParameter)
 private:
  inline void set_has_is_type_coco();
  inline void clear_has_is_type_coco();
  inline void set_has_max_person();
  inline void clear_has_max_person();
  inline void set_has_iters_pa_cal();
  inline void clear_has_iters_pa_cal();
  inline void set_has_connect_inter_threshold();
  inline void clear_has_connect_inter_threshold();
  inline void set_has_connect_inter_min_nums();
  inline void clear_has_connect_inter_min_nums();
  inline void set_has_connect_min_subset_cnt();
  inline void clear_has_connect_min_subset_cnt();
  inline void set_has_connect_min_subset_score();
  inline void clear_has_connect_min_subset_score();
  inline void set_has_max_peaks_use();
  inline void clear_has_max_peaks_use();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool is_type_coco_;
  ::google::protobuf::int32 max_person_;
  ::google::protobuf::int32 iters_pa_cal_;
  float connect_inter_threshold_;
  ::google::protobuf::int32 connect_inter_min_nums_;
  ::google::protobuf::int32 connect_min_subset_cnt_;
  float connect_min_subset_score_;
  ::google::protobuf::int32 max_peaks_use_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ConnectLimbParameter* default_instance_;
};
// -------------------------------------------------------------------

class DistoredParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DistoredParameter) */ {
 public:
  DistoredParameter();
  virtual ~DistoredParameter();

  DistoredParameter(const DistoredParameter& from);

  inline DistoredParameter& operator=(const DistoredParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DistoredParameter& default_instance();

  void Swap(DistoredParameter* other);

  // implements Message ----------------------------------------------

  inline DistoredParameter* New() const { return New(NULL); }

  DistoredParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DistoredParameter& from);
  void MergeFrom(const DistoredParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DistoredParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float hue = 1 [default = 0];
  bool has_hue() const;
  void clear_hue();
  static const int kHueFieldNumber = 1;
  float hue() const;
  void set_hue(float value);

  // optional float sat = 2 [default = 1];
  bool has_sat() const;
  void clear_sat();
  static const int kSatFieldNumber = 2;
  float sat() const;
  void set_sat(float value);

  // optional float val = 3 [default = 1];
  bool has_val() const;
  void clear_val();
  static const int kValFieldNumber = 3;
  float val() const;
  void set_val(float value);

  // @@protoc_insertion_point(class_scope:caffe.DistoredParameter)
 private:
  inline void set_has_hue();
  inline void clear_has_hue();
  inline void set_has_sat();
  inline void clear_has_sat();
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float hue_;
  float sat_;
  float val_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static DistoredParameter* default_instance_;
};
// -------------------------------------------------------------------

class LabeledMatchParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LabeledMatchParameter) */ {
 public:
  LabeledMatchParameter();
  virtual ~LabeledMatchParameter();

  LabeledMatchParameter(const LabeledMatchParameter& from);

  inline LabeledMatchParameter& operator=(const LabeledMatchParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LabeledMatchParameter& default_instance();

  void Swap(LabeledMatchParameter* other);

  // implements Message ----------------------------------------------

  inline LabeledMatchParameter* New() const { return New(NULL); }

  LabeledMatchParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LabeledMatchParameter& from);
  void MergeFrom(const LabeledMatchParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LabeledMatchParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num_classes = 1 [default = 100];
  bool has_num_classes() const;
  void clear_num_classes();
  static const int kNumClassesFieldNumber = 1;
  ::google::protobuf::int32 num_classes() const;
  void set_num_classes(::google::protobuf::int32 value);

  // optional float momentum = 2 [default = 0.5];
  bool has_momentum() const;
  void clear_momentum();
  static const int kMomentumFieldNumber = 2;
  float momentum() const;
  void set_momentum(float value);

  // optional bool copy_status = 3 [default = false];
  bool has_copy_status() const;
  void clear_copy_status();
  static const int kCopyStatusFieldNumber = 3;
  bool copy_status() const;
  void set_copy_status(bool value);

  // @@protoc_insertion_point(class_scope:caffe.LabeledMatchParameter)
 private:
  inline void set_has_num_classes();
  inline void clear_has_num_classes();
  inline void set_has_momentum();
  inline void clear_has_momentum();
  inline void set_has_copy_status();
  inline void clear_has_copy_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 num_classes_;
  float momentum_;
  bool copy_status_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static LabeledMatchParameter* default_instance_;
};
// -------------------------------------------------------------------

class UnlabeledMatchParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.UnlabeledMatchParameter) */ {
 public:
  UnlabeledMatchParameter();
  virtual ~UnlabeledMatchParameter();

  UnlabeledMatchParameter(const UnlabeledMatchParameter& from);

  inline UnlabeledMatchParameter& operator=(const UnlabeledMatchParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlabeledMatchParameter& default_instance();

  void Swap(UnlabeledMatchParameter* other);

  // implements Message ----------------------------------------------

  inline UnlabeledMatchParameter* New() const { return New(NULL); }

  UnlabeledMatchParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnlabeledMatchParameter& from);
  void MergeFrom(const UnlabeledMatchParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnlabeledMatchParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 queue_size = 1 [default = 100];
  bool has_queue_size() const;
  void clear_queue_size();
  static const int kQueueSizeFieldNumber = 1;
  ::google::protobuf::int32 queue_size() const;
  void set_queue_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.UnlabeledMatchParameter)
 private:
  inline void set_has_queue_size();
  inline void clear_has_queue_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 queue_size_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static UnlabeledMatchParameter* default_instance_;
};
// -------------------------------------------------------------------

class ResizeParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ResizeParameter) */ {
 public:
  ResizeParameter();
  virtual ~ResizeParameter();

  ResizeParameter(const ResizeParameter& from);

  inline ResizeParameter& operator=(const ResizeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResizeParameter& default_instance();

  void Swap(ResizeParameter* other);

  // implements Message ----------------------------------------------

  inline ResizeParameter* New() const { return New(NULL); }

  ResizeParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResizeParameter& from);
  void MergeFrom(const ResizeParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResizeParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ResizeParameter_Resize_mode Resize_mode;
  static const Resize_mode WARP =
    ResizeParameter_Resize_mode_WARP;
  static const Resize_mode FIT_SMALL_SIZE =
    ResizeParameter_Resize_mode_FIT_SMALL_SIZE;
  static const Resize_mode FIT_LARGE_SIZE_AND_PAD =
    ResizeParameter_Resize_mode_FIT_LARGE_SIZE_AND_PAD;
  static inline bool Resize_mode_IsValid(int value) {
    return ResizeParameter_Resize_mode_IsValid(value);
  }
  static const Resize_mode Resize_mode_MIN =
    ResizeParameter_Resize_mode_Resize_mode_MIN;
  static const Resize_mode Resize_mode_MAX =
    ResizeParameter_Resize_mode_Resize_mode_MAX;
  static const int Resize_mode_ARRAYSIZE =
    ResizeParameter_Resize_mode_Resize_mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Resize_mode_descriptor() {
    return ResizeParameter_Resize_mode_descriptor();
  }
  static inline const ::std::string& Resize_mode_Name(Resize_mode value) {
    return ResizeParameter_Resize_mode_Name(value);
  }
  static inline bool Resize_mode_Parse(const ::std::string& name,
      Resize_mode* value) {
    return ResizeParameter_Resize_mode_Parse(name, value);
  }

  typedef ResizeParameter_Pad_mode Pad_mode;
  static const Pad_mode CONSTANT =
    ResizeParameter_Pad_mode_CONSTANT;
  static const Pad_mode MIRRORED =
    ResizeParameter_Pad_mode_MIRRORED;
  static const Pad_mode REPEAT_NEAREST =
    ResizeParameter_Pad_mode_REPEAT_NEAREST;
  static inline bool Pad_mode_IsValid(int value) {
    return ResizeParameter_Pad_mode_IsValid(value);
  }
  static const Pad_mode Pad_mode_MIN =
    ResizeParameter_Pad_mode_Pad_mode_MIN;
  static const Pad_mode Pad_mode_MAX =
    ResizeParameter_Pad_mode_Pad_mode_MAX;
  static const int Pad_mode_ARRAYSIZE =
    ResizeParameter_Pad_mode_Pad_mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pad_mode_descriptor() {
    return ResizeParameter_Pad_mode_descriptor();
  }
  static inline const ::std::string& Pad_mode_Name(Pad_mode value) {
    return ResizeParameter_Pad_mode_Name(value);
  }
  static inline bool Pad_mode_Parse(const ::std::string& name,
      Pad_mode* value) {
    return ResizeParameter_Pad_mode_Parse(name, value);
  }

  typedef ResizeParameter_Interp_mode Interp_mode;
  static const Interp_mode LINEAR =
    ResizeParameter_Interp_mode_LINEAR;
  static const Interp_mode AREA =
    ResizeParameter_Interp_mode_AREA;
  static const Interp_mode NEAREST =
    ResizeParameter_Interp_mode_NEAREST;
  static const Interp_mode CUBIC =
    ResizeParameter_Interp_mode_CUBIC;
  static const Interp_mode LANCZOS4 =
    ResizeParameter_Interp_mode_LANCZOS4;
  static inline bool Interp_mode_IsValid(int value) {
    return ResizeParameter_Interp_mode_IsValid(value);
  }
  static const Interp_mode Interp_mode_MIN =
    ResizeParameter_Interp_mode_Interp_mode_MIN;
  static const Interp_mode Interp_mode_MAX =
    ResizeParameter_Interp_mode_Interp_mode_MAX;
  static const int Interp_mode_ARRAYSIZE =
    ResizeParameter_Interp_mode_Interp_mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Interp_mode_descriptor() {
    return ResizeParameter_Interp_mode_descriptor();
  }
  static inline const ::std::string& Interp_mode_Name(Interp_mode value) {
    return ResizeParameter_Interp_mode_Name(value);
  }
  static inline bool Interp_mode_Parse(const ::std::string& name,
      Interp_mode* value) {
    return ResizeParameter_Interp_mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional float prob = 1 [default = 1];
  bool has_prob() const;
  void clear_prob();
  static const int kProbFieldNumber = 1;
  float prob() const;
  void set_prob(float value);

  // optional .caffe.ResizeParameter.Resize_mode resize_mode = 2 [default = WARP];
  bool has_resize_mode() const;
  void clear_resize_mode();
  static const int kResizeModeFieldNumber = 2;
  ::caffe::ResizeParameter_Resize_mode resize_mode() const;
  void set_resize_mode(::caffe::ResizeParameter_Resize_mode value);

  // optional uint32 height = 3 [default = 0];
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional uint32 width = 4 [default = 0];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional .caffe.ResizeParameter.Pad_mode pad_mode = 5 [default = CONSTANT];
  bool has_pad_mode() const;
  void clear_pad_mode();
  static const int kPadModeFieldNumber = 5;
  ::caffe::ResizeParameter_Pad_mode pad_mode() const;
  void set_pad_mode(::caffe::ResizeParameter_Pad_mode value);

  // repeated float pad_value = 6;
  int pad_value_size() const;
  void clear_pad_value();
  static const int kPadValueFieldNumber = 6;
  float pad_value(int index) const;
  void set_pad_value(int index, float value);
  void add_pad_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      pad_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_pad_value();

  // repeated .caffe.ResizeParameter.Interp_mode interp_mode = 7;
  int interp_mode_size() const;
  void clear_interp_mode();
  static const int kInterpModeFieldNumber = 7;
  ::caffe::ResizeParameter_Interp_mode interp_mode(int index) const;
  void set_interp_mode(int index, ::caffe::ResizeParameter_Interp_mode value);
  void add_interp_mode(::caffe::ResizeParameter_Interp_mode value);
  const ::google::protobuf::RepeatedField<int>& interp_mode() const;
  ::google::protobuf::RepeatedField<int>* mutable_interp_mode();

  // @@protoc_insertion_point(class_scope:caffe.ResizeParameter)
 private:
  inline void set_has_prob();
  inline void clear_has_prob();
  inline void set_has_resize_mode();
  inline void clear_has_resize_mode();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_pad_mode();
  inline void clear_has_pad_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float prob_;
  int resize_mode_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::RepeatedField< float > pad_value_;
  ::google::protobuf::RepeatedField<int> interp_mode_;
  int pad_mode_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ResizeParameter* default_instance_;
};
// -------------------------------------------------------------------

class SaltPepperParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SaltPepperParameter) */ {
 public:
  SaltPepperParameter();
  virtual ~SaltPepperParameter();

  SaltPepperParameter(const SaltPepperParameter& from);

  inline SaltPepperParameter& operator=(const SaltPepperParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaltPepperParameter& default_instance();

  void Swap(SaltPepperParameter* other);

  // implements Message ----------------------------------------------

  inline SaltPepperParameter* New() const { return New(NULL); }

  SaltPepperParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaltPepperParameter& from);
  void MergeFrom(const SaltPepperParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SaltPepperParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float fraction = 1 [default = 0];
  bool has_fraction() const;
  void clear_fraction();
  static const int kFractionFieldNumber = 1;
  float fraction() const;
  void set_fraction(float value);

  // repeated float value = 2;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:caffe.SaltPepperParameter)
 private:
  inline void set_has_fraction();
  inline void clear_has_fraction();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > value_;
  float fraction_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SaltPepperParameter* default_instance_;
};
// -------------------------------------------------------------------

class NoiseParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NoiseParameter) */ {
 public:
  NoiseParameter();
  virtual ~NoiseParameter();

  NoiseParameter(const NoiseParameter& from);

  inline NoiseParameter& operator=(const NoiseParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoiseParameter& default_instance();

  void Swap(NoiseParameter* other);

  // implements Message ----------------------------------------------

  inline NoiseParameter* New() const { return New(NULL); }

  NoiseParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NoiseParameter& from);
  void MergeFrom(const NoiseParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NoiseParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float prob = 1 [default = 0];
  bool has_prob() const;
  void clear_prob();
  static const int kProbFieldNumber = 1;
  float prob() const;
  void set_prob(float value);

  // optional bool hist_eq = 2 [default = false];
  bool has_hist_eq() const;
  void clear_hist_eq();
  static const int kHistEqFieldNumber = 2;
  bool hist_eq() const;
  void set_hist_eq(bool value);

  // optional bool inverse = 3 [default = false];
  bool has_inverse() const;
  void clear_inverse();
  static const int kInverseFieldNumber = 3;
  bool inverse() const;
  void set_inverse(bool value);

  // optional bool decolorize = 4 [default = false];
  bool has_decolorize() const;
  void clear_decolorize();
  static const int kDecolorizeFieldNumber = 4;
  bool decolorize() const;
  void set_decolorize(bool value);

  // optional bool gauss_blur = 5 [default = false];
  bool has_gauss_blur() const;
  void clear_gauss_blur();
  static const int kGaussBlurFieldNumber = 5;
  bool gauss_blur() const;
  void set_gauss_blur(bool value);

  // optional float jpeg = 6 [default = -1];
  bool has_jpeg() const;
  void clear_jpeg();
  static const int kJpegFieldNumber = 6;
  float jpeg() const;
  void set_jpeg(float value);

  // optional bool posterize = 7 [default = false];
  bool has_posterize() const;
  void clear_posterize();
  static const int kPosterizeFieldNumber = 7;
  bool posterize() const;
  void set_posterize(bool value);

  // optional bool erode = 8 [default = false];
  bool has_erode() const;
  void clear_erode();
  static const int kErodeFieldNumber = 8;
  bool erode() const;
  void set_erode(bool value);

  // optional bool saltpepper = 9 [default = false];
  bool has_saltpepper() const;
  void clear_saltpepper();
  static const int kSaltpepperFieldNumber = 9;
  bool saltpepper() const;
  void set_saltpepper(bool value);

  // optional .caffe.SaltPepperParameter saltpepper_param = 10;
  bool has_saltpepper_param() const;
  void clear_saltpepper_param();
  static const int kSaltpepperParamFieldNumber = 10;
  const ::caffe::SaltPepperParameter& saltpepper_param() const;
  ::caffe::SaltPepperParameter* mutable_saltpepper_param();
  ::caffe::SaltPepperParameter* release_saltpepper_param();
  void set_allocated_saltpepper_param(::caffe::SaltPepperParameter* saltpepper_param);

  // optional bool clahe = 11 [default = false];
  bool has_clahe() const;
  void clear_clahe();
  static const int kClaheFieldNumber = 11;
  bool clahe() const;
  void set_clahe(bool value);

  // optional bool convert_to_hsv = 12 [default = false];
  bool has_convert_to_hsv() const;
  void clear_convert_to_hsv();
  static const int kConvertToHsvFieldNumber = 12;
  bool convert_to_hsv() const;
  void set_convert_to_hsv(bool value);

  // optional bool convert_to_lab = 13 [default = false];
  bool has_convert_to_lab() const;
  void clear_convert_to_lab();
  static const int kConvertToLabFieldNumber = 13;
  bool convert_to_lab() const;
  void set_convert_to_lab(bool value);

  // @@protoc_insertion_point(class_scope:caffe.NoiseParameter)
 private:
  inline void set_has_prob();
  inline void clear_has_prob();
  inline void set_has_hist_eq();
  inline void clear_has_hist_eq();
  inline void set_has_inverse();
  inline void clear_has_inverse();
  inline void set_has_decolorize();
  inline void clear_has_decolorize();
  inline void set_has_gauss_blur();
  inline void clear_has_gauss_blur();
  inline void set_has_jpeg();
  inline void clear_has_jpeg();
  inline void set_has_posterize();
  inline void clear_has_posterize();
  inline void set_has_erode();
  inline void clear_has_erode();
  inline void set_has_saltpepper();
  inline void clear_has_saltpepper();
  inline void set_has_saltpepper_param();
  inline void clear_has_saltpepper_param();
  inline void set_has_clahe();
  inline void clear_has_clahe();
  inline void set_has_convert_to_hsv();
  inline void clear_has_convert_to_hsv();
  inline void set_has_convert_to_lab();
  inline void clear_has_convert_to_lab();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float prob_;
  bool hist_eq_;
  bool inverse_;
  bool decolorize_;
  bool gauss_blur_;
  float jpeg_;
  bool posterize_;
  bool erode_;
  bool saltpepper_;
  bool clahe_;
  ::caffe::SaltPepperParameter* saltpepper_param_;
  bool convert_to_hsv_;
  bool convert_to_lab_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static NoiseParameter* default_instance_;
};
// -------------------------------------------------------------------

class PoseDataTransformationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PoseDataTransformationParameter) */ {
 public:
  PoseDataTransformationParameter();
  virtual ~PoseDataTransformationParameter();

  PoseDataTransformationParameter(const PoseDataTransformationParameter& from);

  inline PoseDataTransformationParameter& operator=(const PoseDataTransformationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoseDataTransformationParameter& default_instance();

  void Swap(PoseDataTransformationParameter* other);

  // implements Message ----------------------------------------------

  inline PoseDataTransformationParameter* New() const { return New(NULL); }

  PoseDataTransformationParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoseDataTransformationParameter& from);
  void MergeFrom(const PoseDataTransformationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PoseDataTransformationParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float scale = 1 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 1;
  float scale() const;
  void set_scale(float value);

  // optional bool mirror = 2 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 2;
  bool mirror() const;
  void set_mirror(bool value);

  // optional int32 crop_size = 3 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 3;
  ::google::protobuf::int32 crop_size() const;
  void set_crop_size(::google::protobuf::int32 value);

  // optional string mean_file = 4;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 4;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // repeated float mean_value = 5;
  int mean_value_size() const;
  void clear_mean_value();
  static const int kMeanValueFieldNumber = 5;
  float mean_value(int index) const;
  void set_mean_value(int index, float value);
  void add_mean_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      mean_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_mean_value();

  // optional int32 stride = 6 [default = 8];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 6;
  ::google::protobuf::int32 stride() const;
  void set_stride(::google::protobuf::int32 value);

  // optional float flip_prob = 7 [default = 0.5];
  bool has_flip_prob() const;
  void clear_flip_prob();
  static const int kFlipProbFieldNumber = 7;
  float flip_prob() const;
  void set_flip_prob(float value);

  // optional float max_rotate_degree = 8 [default = 20];
  bool has_max_rotate_degree() const;
  void clear_max_rotate_degree();
  static const int kMaxRotateDegreeFieldNumber = 8;
  float max_rotate_degree() const;
  void set_max_rotate_degree(float value);

  // optional bool visualize = 9 [default = false];
  bool has_visualize() const;
  void clear_visualize();
  static const int kVisualizeFieldNumber = 9;
  bool visualize() const;
  void set_visualize(bool value);

  // optional int32 crop_size_x = 10 [default = 368];
  bool has_crop_size_x() const;
  void clear_crop_size_x();
  static const int kCropSizeXFieldNumber = 10;
  ::google::protobuf::int32 crop_size_x() const;
  void set_crop_size_x(::google::protobuf::int32 value);

  // optional int32 crop_size_y = 11 [default = 368];
  bool has_crop_size_y() const;
  void clear_crop_size_y();
  static const int kCropSizeYFieldNumber = 11;
  ::google::protobuf::int32 crop_size_y() const;
  void set_crop_size_y(::google::protobuf::int32 value);

  // optional int32 train_resized_width = 40 [default = 368];
  bool has_train_resized_width() const;
  void clear_train_resized_width();
  static const int kTrainResizedWidthFieldNumber = 40;
  ::google::protobuf::int32 train_resized_width() const;
  void set_train_resized_width(::google::protobuf::int32 value);

  // optional int32 train_resized_height = 41 [default = 368];
  bool has_train_resized_height() const;
  void clear_train_resized_height();
  static const int kTrainResizedHeightFieldNumber = 41;
  ::google::protobuf::int32 train_resized_height() const;
  void set_train_resized_height(::google::protobuf::int32 value);

  // optional bool crop_using_resize = 39 [default = false];
  bool has_crop_using_resize() const;
  void clear_crop_using_resize();
  static const int kCropUsingResizeFieldNumber = 39;
  bool crop_using_resize() const;
  void set_crop_using_resize(bool value);

  // optional float crop_as_max = 42 [default = 2];
  bool has_crop_as_max() const;
  void clear_crop_as_max();
  static const int kCropAsMaxFieldNumber = 42;
  float crop_as_max() const;
  void set_crop_as_max(float value);

  // optional float crop_as_min = 43 [default = 0.5];
  bool has_crop_as_min() const;
  void clear_crop_as_min();
  static const int kCropAsMinFieldNumber = 43;
  float crop_as_min() const;
  void set_crop_as_min(float value);

  // optional float scale_prob = 12 [default = 0.5];
  bool has_scale_prob() const;
  void clear_scale_prob();
  static const int kScaleProbFieldNumber = 12;
  float scale_prob() const;
  void set_scale_prob(float value);

  // optional float scale_min = 13 [default = 0.9];
  bool has_scale_min() const;
  void clear_scale_min();
  static const int kScaleMinFieldNumber = 13;
  float scale_min() const;
  void set_scale_min(float value);

  // optional float scale_max = 14 [default = 1.1];
  bool has_scale_max() const;
  void clear_scale_max();
  static const int kScaleMaxFieldNumber = 14;
  float scale_max() const;
  void set_scale_max(float value);

  // optional float bbox_norm_factor = 15 [default = 300];
  bool has_bbox_norm_factor() const;
  void clear_bbox_norm_factor();
  static const int kBboxNormFactorFieldNumber = 15;
  float bbox_norm_factor() const;
  void set_bbox_norm_factor(float value);

  // optional float target_dist = 16 [default = 1];
  bool has_target_dist() const;
  void clear_target_dist();
  static const int kTargetDistFieldNumber = 16;
  float target_dist() const;
  void set_target_dist(float value);

  // optional float center_perterb_max = 17 [default = 10];
  bool has_center_perterb_max() const;
  void clear_center_perterb_max();
  static const int kCenterPerterbMaxFieldNumber = 17;
  float center_perterb_max() const;
  void set_center_perterb_max(float value);

  // optional float sigma = 18 [default = 7];
  bool has_sigma() const;
  void clear_sigma();
  static const int kSigmaFieldNumber = 18;
  float sigma() const;
  void set_sigma(float value);

  // optional float sigma_center = 19 [default = 21];
  bool has_sigma_center() const;
  void clear_sigma_center();
  static const int kSigmaCenterFieldNumber = 19;
  float sigma_center() const;
  void set_sigma_center(float value);

  // optional bool transform_body_joint = 22 [default = true];
  bool has_transform_body_joint() const;
  void clear_transform_body_joint();
  static const int kTransformBodyJointFieldNumber = 22;
  bool transform_body_joint() const;
  void set_transform_body_joint(bool value);

  // optional int32 mode = 23 [default = 5];
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 23;
  ::google::protobuf::int32 mode() const;
  void set_mode(::google::protobuf::int32 value);

  // optional string save_dir = 24 [default = ""];
  bool has_save_dir() const;
  void clear_save_dir();
  static const int kSaveDirFieldNumber = 24;
  const ::std::string& save_dir() const;
  void set_save_dir(const ::std::string& value);
  void set_save_dir(const char* value);
  void set_save_dir(const char* value, size_t size);
  ::std::string* mutable_save_dir();
  ::std::string* release_save_dir();
  void set_allocated_save_dir(::std::string* save_dir);

  // optional string root_dir = 25 [default = ""];
  bool has_root_dir() const;
  void clear_root_dir();
  static const int kRootDirFieldNumber = 25;
  const ::std::string& root_dir() const;
  void set_root_dir(const ::std::string& value);
  void set_root_dir(const char* value);
  void set_root_dir(const char* value, size_t size);
  ::std::string* mutable_root_dir();
  ::std::string* release_root_dir();
  void set_allocated_root_dir(::std::string* root_dir);

  // optional int32 resized_width = 26 [default = 416];
  bool has_resized_width() const;
  void clear_resized_width();
  static const int kResizedWidthFieldNumber = 26;
  ::google::protobuf::int32 resized_width() const;
  void set_resized_width(::google::protobuf::int32 value);

  // optional int32 resized_height = 27 [default = 416];
  bool has_resized_height() const;
  void clear_resized_height();
  static const int kResizedHeightFieldNumber = 27;
  ::google::protobuf::int32 resized_height() const;
  void set_resized_height(::google::protobuf::int32 value);

  // optional bool normalize = 28 [default = true];
  bool has_normalize() const;
  void clear_normalize();
  static const int kNormalizeFieldNumber = 28;
  bool normalize() const;
  void set_normalize(bool value);

  // optional .caffe.DistortionParameter dis_param = 30;
  bool has_dis_param() const;
  void clear_dis_param();
  static const int kDisParamFieldNumber = 30;
  const ::caffe::DistortionParameter& dis_param() const;
  ::caffe::DistortionParameter* mutable_dis_param();
  ::caffe::DistortionParameter* release_dis_param();
  void set_allocated_dis_param(::caffe::DistortionParameter* dis_param);

  // optional string hisi_data_maps = 31;
  bool has_hisi_data_maps() const;
  void clear_hisi_data_maps();
  static const int kHisiDataMapsFieldNumber = 31;
  const ::std::string& hisi_data_maps() const;
  void set_hisi_data_maps(const ::std::string& value);
  void set_hisi_data_maps(const char* value);
  void set_hisi_data_maps(const char* value, size_t size);
  ::std::string* mutable_hisi_data_maps();
  ::std::string* release_hisi_data_maps();
  void set_allocated_hisi_data_maps(::std::string* hisi_data_maps);

  // optional int32 mode_data = 32 [default = 0];
  bool has_mode_data() const;
  void clear_mode_data();
  static const int kModeDataFieldNumber = 32;
  ::google::protobuf::int32 mode_data() const;
  void set_mode_data(::google::protobuf::int32 value);

  // optional .caffe.BGCropParameter bg_crop_param = 50;
  bool has_bg_crop_param() const;
  void clear_bg_crop_param();
  static const int kBgCropParamFieldNumber = 50;
  const ::caffe::BGCropParameter& bg_crop_param() const;
  ::caffe::BGCropParameter* mutable_bg_crop_param();
  ::caffe::BGCropParameter* release_bg_crop_param();
  void set_allocated_bg_crop_param(::caffe::BGCropParameter* bg_crop_param);

  // @@protoc_insertion_point(class_scope:caffe.PoseDataTransformationParameter)
 private:
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_flip_prob();
  inline void clear_has_flip_prob();
  inline void set_has_max_rotate_degree();
  inline void clear_has_max_rotate_degree();
  inline void set_has_visualize();
  inline void clear_has_visualize();
  inline void set_has_crop_size_x();
  inline void clear_has_crop_size_x();
  inline void set_has_crop_size_y();
  inline void clear_has_crop_size_y();
  inline void set_has_train_resized_width();
  inline void clear_has_train_resized_width();
  inline void set_has_train_resized_height();
  inline void clear_has_train_resized_height();
  inline void set_has_crop_using_resize();
  inline void clear_has_crop_using_resize();
  inline void set_has_crop_as_max();
  inline void clear_has_crop_as_max();
  inline void set_has_crop_as_min();
  inline void clear_has_crop_as_min();
  inline void set_has_scale_prob();
  inline void clear_has_scale_prob();
  inline void set_has_scale_min();
  inline void clear_has_scale_min();
  inline void set_has_scale_max();
  inline void clear_has_scale_max();
  inline void set_has_bbox_norm_factor();
  inline void clear_has_bbox_norm_factor();
  inline void set_has_target_dist();
  inline void clear_has_target_dist();
  inline void set_has_center_perterb_max();
  inline void clear_has_center_perterb_max();
  inline void set_has_sigma();
  inline void clear_has_sigma();
  inline void set_has_sigma_center();
  inline void clear_has_sigma_center();
  inline void set_has_transform_body_joint();
  inline void clear_has_transform_body_joint();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_save_dir();
  inline void clear_has_save_dir();
  inline void set_has_root_dir();
  inline void clear_has_root_dir();
  inline void set_has_resized_width();
  inline void clear_has_resized_width();
  inline void set_has_resized_height();
  inline void clear_has_resized_height();
  inline void set_has_normalize();
  inline void clear_has_normalize();
  inline void set_has_dis_param();
  inline void clear_has_dis_param();
  inline void set_has_hisi_data_maps();
  inline void clear_has_hisi_data_maps();
  inline void set_has_mode_data();
  inline void clear_has_mode_data();
  inline void set_has_bg_crop_param();
  inline void clear_has_bg_crop_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[2];
  float scale_;
  ::google::protobuf::int32 crop_size_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  ::google::protobuf::RepeatedField< float > mean_value_;
  ::google::protobuf::int32 stride_;
  float flip_prob_;
  float max_rotate_degree_;
  ::google::protobuf::int32 crop_size_x_;
  ::google::protobuf::int32 crop_size_y_;
  ::google::protobuf::int32 train_resized_width_;
  bool mirror_;
  bool visualize_;
  bool crop_using_resize_;
  bool transform_body_joint_;
  ::google::protobuf::int32 train_resized_height_;
  float crop_as_max_;
  float crop_as_min_;
  float scale_prob_;
  float scale_min_;
  float scale_max_;
  float bbox_norm_factor_;
  float target_dist_;
  float center_perterb_max_;
  float sigma_;
  float sigma_center_;
  ::google::protobuf::internal::ArenaStringPtr save_dir_;
  ::google::protobuf::int32 mode_;
  ::google::protobuf::int32 resized_width_;
  ::google::protobuf::internal::ArenaStringPtr root_dir_;
  ::google::protobuf::int32 resized_height_;
  bool normalize_;
  ::caffe::DistortionParameter* dis_param_;
  ::google::protobuf::internal::ArenaStringPtr hisi_data_maps_;
  ::caffe::BGCropParameter* bg_crop_param_;
  ::google::protobuf::int32 mode_data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static PoseDataTransformationParameter* default_instance_;
};
// -------------------------------------------------------------------

class BGCropParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BGCropParameter) */ {
 public:
  BGCropParameter();
  virtual ~BGCropParameter();

  BGCropParameter(const BGCropParameter& from);

  inline BGCropParameter& operator=(const BGCropParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BGCropParameter& default_instance();

  void Swap(BGCropParameter* other);

  // implements Message ----------------------------------------------

  inline BGCropParameter* New() const { return New(NULL); }

  BGCropParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BGCropParameter& from);
  void MergeFrom(const BGCropParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BGCropParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float prob = 1 [default = 0];
  bool has_prob() const;
  void clear_prob();
  static const int kProbFieldNumber = 1;
  float prob() const;
  void set_prob(float value);

  // optional float h_min = 2 [default = 0.2];
  bool has_h_min() const;
  void clear_h_min();
  static const int kHMinFieldNumber = 2;
  float h_min() const;
  void set_h_min(float value);

  // optional float h_max = 3 [default = 1];
  bool has_h_max() const;
  void clear_h_max();
  static const int kHMaxFieldNumber = 3;
  float h_max() const;
  void set_h_max(float value);

  // optional float w_min = 4 [default = 0.2];
  bool has_w_min() const;
  void clear_w_min();
  static const int kWMinFieldNumber = 4;
  float w_min() const;
  void set_w_min(float value);

  // optional float w_max = 5 [default = 1];
  bool has_w_max() const;
  void clear_w_max();
  static const int kWMaxFieldNumber = 5;
  float w_max() const;
  void set_w_max(float value);

  // @@protoc_insertion_point(class_scope:caffe.BGCropParameter)
 private:
  inline void set_has_prob();
  inline void clear_has_prob();
  inline void set_has_h_min();
  inline void clear_has_h_min();
  inline void set_has_h_max();
  inline void clear_has_h_max();
  inline void set_has_w_min();
  inline void clear_has_w_min();
  inline void set_has_w_max();
  inline void clear_has_w_max();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float prob_;
  float h_min_;
  float h_max_;
  float w_min_;
  float w_max_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static BGCropParameter* default_instance_;
};
// -------------------------------------------------------------------

class ReidTransformationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ReidTransformationParameter) */ {
 public:
  ReidTransformationParameter();
  virtual ~ReidTransformationParameter();

  ReidTransformationParameter(const ReidTransformationParameter& from);

  inline ReidTransformationParameter& operator=(const ReidTransformationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReidTransformationParameter& default_instance();

  void Swap(ReidTransformationParameter* other);

  // implements Message ----------------------------------------------

  inline ReidTransformationParameter* New() const { return New(NULL); }

  ReidTransformationParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReidTransformationParameter& from);
  void MergeFrom(const ReidTransformationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReidTransformationParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool mirror = 1 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 1;
  bool mirror() const;
  void set_mirror(bool value);

  // repeated float mean_value = 2;
  int mean_value_size() const;
  void clear_mean_value();
  static const int kMeanValueFieldNumber = 2;
  float mean_value(int index) const;
  void set_mean_value(int index, float value);
  void add_mean_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      mean_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_mean_value();

  // optional string root_dir = 3 [default = ""];
  bool has_root_dir() const;
  void clear_root_dir();
  static const int kRootDirFieldNumber = 3;
  const ::std::string& root_dir() const;
  void set_root_dir(const ::std::string& value);
  void set_root_dir(const char* value);
  void set_root_dir(const char* value, size_t size);
  ::std::string* mutable_root_dir();
  ::std::string* release_root_dir();
  void set_allocated_root_dir(::std::string* root_dir);

  // optional int32 resized_width = 4 [default = 416];
  bool has_resized_width() const;
  void clear_resized_width();
  static const int kResizedWidthFieldNumber = 4;
  ::google::protobuf::int32 resized_width() const;
  void set_resized_width(::google::protobuf::int32 value);

  // optional int32 resized_height = 5 [default = 416];
  bool has_resized_height() const;
  void clear_resized_height();
  static const int kResizedHeightFieldNumber = 5;
  ::google::protobuf::int32 resized_height() const;
  void set_resized_height(::google::protobuf::int32 value);

  // optional bool normalize = 6 [default = true];
  bool has_normalize() const;
  void clear_normalize();
  static const int kNormalizeFieldNumber = 6;
  bool normalize() const;
  void set_normalize(bool value);

  // optional bool visual = 7 [default = false];
  bool has_visual() const;
  void clear_visual();
  static const int kVisualFieldNumber = 7;
  bool visual() const;
  void set_visual(bool value);

  // optional string save_dir = 8;
  bool has_save_dir() const;
  void clear_save_dir();
  static const int kSaveDirFieldNumber = 8;
  const ::std::string& save_dir() const;
  void set_save_dir(const ::std::string& value);
  void set_save_dir(const char* value);
  void set_save_dir(const char* value, size_t size);
  ::std::string* mutable_save_dir();
  ::std::string* release_save_dir();
  void set_allocated_save_dir(::std::string* save_dir);

  // @@protoc_insertion_point(class_scope:caffe.ReidTransformationParameter)
 private:
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_root_dir();
  inline void clear_has_root_dir();
  inline void set_has_resized_width();
  inline void clear_has_resized_width();
  inline void set_has_resized_height();
  inline void clear_has_resized_height();
  inline void set_has_normalize();
  inline void clear_has_normalize();
  inline void set_has_visual();
  inline void clear_has_visual();
  inline void set_has_save_dir();
  inline void clear_has_save_dir();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > mean_value_;
  ::google::protobuf::internal::ArenaStringPtr root_dir_;
  ::google::protobuf::int32 resized_width_;
  bool mirror_;
  bool normalize_;
  bool visual_;
  ::google::protobuf::internal::ArenaStringPtr save_dir_;
  ::google::protobuf::int32 resized_height_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ReidTransformationParameter* default_instance_;
};
// -------------------------------------------------------------------

class UnifiedTransformationParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.UnifiedTransformationParameter) */ {
 public:
  UnifiedTransformationParameter();
  virtual ~UnifiedTransformationParameter();

  UnifiedTransformationParameter(const UnifiedTransformationParameter& from);

  inline UnifiedTransformationParameter& operator=(const UnifiedTransformationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnifiedTransformationParameter& default_instance();

  void Swap(UnifiedTransformationParameter* other);

  // implements Message ----------------------------------------------

  inline UnifiedTransformationParameter* New() const { return New(NULL); }

  UnifiedTransformationParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnifiedTransformationParameter& from);
  void MergeFrom(const UnifiedTransformationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnifiedTransformationParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef UnifiedTransformationParameter_PutToBlob_mode PutToBlob_mode;
  static const PutToBlob_mode RAND =
    UnifiedTransformationParameter_PutToBlob_mode_RAND;
  static const PutToBlob_mode CENTER =
    UnifiedTransformationParameter_PutToBlob_mode_CENTER;
  static const PutToBlob_mode TOP =
    UnifiedTransformationParameter_PutToBlob_mode_TOP;
  static inline bool PutToBlob_mode_IsValid(int value) {
    return UnifiedTransformationParameter_PutToBlob_mode_IsValid(value);
  }
  static const PutToBlob_mode PutToBlob_mode_MIN =
    UnifiedTransformationParameter_PutToBlob_mode_PutToBlob_mode_MIN;
  static const PutToBlob_mode PutToBlob_mode_MAX =
    UnifiedTransformationParameter_PutToBlob_mode_PutToBlob_mode_MAX;
  static const int PutToBlob_mode_ARRAYSIZE =
    UnifiedTransformationParameter_PutToBlob_mode_PutToBlob_mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PutToBlob_mode_descriptor() {
    return UnifiedTransformationParameter_PutToBlob_mode_descriptor();
  }
  static inline const ::std::string& PutToBlob_mode_Name(PutToBlob_mode value) {
    return UnifiedTransformationParameter_PutToBlob_mode_Name(value);
  }
  static inline bool PutToBlob_mode_Parse(const ::std::string& name,
      PutToBlob_mode* value) {
    return UnifiedTransformationParameter_PutToBlob_mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool sample_sixteennine = 14 [default = true];
  bool has_sample_sixteennine() const;
  void clear_sample_sixteennine();
  static const int kSampleSixteennineFieldNumber = 14;
  bool sample_sixteennine() const;
  void set_sample_sixteennine(bool value);

  // optional bool sample_ninesixteen = 31 [default = false];
  bool has_sample_ninesixteen() const;
  void clear_sample_ninesixteen();
  static const int kSampleNinesixteenFieldNumber = 31;
  bool sample_ninesixteen() const;
  void set_sample_ninesixteen(bool value);

  // optional bool sample_sixteennine_one = 15 [default = false];
  bool has_sample_sixteennine_one() const;
  void clear_sample_sixteennine_one();
  static const int kSampleSixteennineOneFieldNumber = 15;
  bool sample_sixteennine_one() const;
  void set_sample_sixteennine_one(bool value);

  // optional bool rand_sixteennineone = 8 [default = false];
  bool has_rand_sixteennineone() const;
  void clear_rand_sixteennineone();
  static const int kRandSixteennineoneFieldNumber = 8;
  bool rand_sixteennineone() const;
  void set_rand_sixteennineone(bool value);

  // repeated float wh_ratio_sixteennineone = 26;
  int wh_ratio_sixteennineone_size() const;
  void clear_wh_ratio_sixteennineone();
  static const int kWhRatioSixteennineoneFieldNumber = 26;
  float wh_ratio_sixteennineone(int index) const;
  void set_wh_ratio_sixteennineone(int index, float value);
  void add_wh_ratio_sixteennineone(float value);
  const ::google::protobuf::RepeatedField< float >&
      wh_ratio_sixteennineone() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_wh_ratio_sixteennineone();

  // repeated float prob_rand_sixteennineone = 27;
  int prob_rand_sixteennineone_size() const;
  void clear_prob_rand_sixteennineone();
  static const int kProbRandSixteennineoneFieldNumber = 27;
  float prob_rand_sixteennineone(int index) const;
  void set_prob_rand_sixteennineone(int index, float value);
  void add_prob_rand_sixteennineone(float value);
  const ::google::protobuf::RepeatedField< float >&
      prob_rand_sixteennineone() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_prob_rand_sixteennineone();

  // optional float emit_coverage_thre = 1 [default = 0.25];
  bool has_emit_coverage_thre() const;
  void clear_emit_coverage_thre();
  static const int kEmitCoverageThreFieldNumber = 1;
  float emit_coverage_thre() const;
  void set_emit_coverage_thre(float value);

  // repeated float emit_coverage_thre_multiple = 13;
  int emit_coverage_thre_multiple_size() const;
  void clear_emit_coverage_thre_multiple();
  static const int kEmitCoverageThreMultipleFieldNumber = 13;
  float emit_coverage_thre_multiple(int index) const;
  void set_emit_coverage_thre_multiple(int index, float value);
  void add_emit_coverage_thre_multiple(float value);
  const ::google::protobuf::RepeatedField< float >&
      emit_coverage_thre_multiple() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_emit_coverage_thre_multiple();

  // repeated float emit_area_check = 12;
  int emit_area_check_size() const;
  void clear_emit_area_check();
  static const int kEmitAreaCheckFieldNumber = 12;
  float emit_area_check(int index) const;
  void set_emit_area_check(int index, float value);
  void add_emit_area_check(float value);
  const ::google::protobuf::RepeatedField< float >&
      emit_area_check() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_emit_area_check();

  // optional int32 kps_min_visible = 2 [default = 4];
  bool has_kps_min_visible() const;
  void clear_kps_min_visible();
  static const int kKpsMinVisibleFieldNumber = 2;
  ::google::protobuf::int32 kps_min_visible() const;
  void set_kps_min_visible(::google::protobuf::int32 value);

  // optional float flip_prob = 3 [default = 0.5];
  bool has_flip_prob() const;
  void clear_flip_prob();
  static const int kFlipProbFieldNumber = 3;
  float flip_prob() const;
  void set_flip_prob(float value);

  // optional int32 resized_width = 4 [default = 512];
  bool has_resized_width() const;
  void clear_resized_width();
  static const int kResizedWidthFieldNumber = 4;
  ::google::protobuf::int32 resized_width() const;
  void set_resized_width(::google::protobuf::int32 value);

  // optional int32 resized_height = 5 [default = 288];
  bool has_resized_height() const;
  void clear_resized_height();
  static const int kResizedHeightFieldNumber = 5;
  ::google::protobuf::int32 resized_height() const;
  void set_resized_height(::google::protobuf::int32 value);

  // optional bool visualize = 6 [default = false];
  bool has_visualize() const;
  void clear_visualize();
  static const int kVisualizeFieldNumber = 6;
  bool visualize() const;
  void set_visualize(bool value);

  // optional string save_dir = 7 [default = ""];
  bool has_save_dir() const;
  void clear_save_dir();
  static const int kSaveDirFieldNumber = 7;
  const ::std::string& save_dir() const;
  void set_save_dir(const ::std::string& value);
  void set_save_dir(const char* value);
  void set_save_dir(const char* value, size_t size);
  ::std::string* mutable_save_dir();
  ::std::string* release_save_dir();
  void set_allocated_save_dir(::std::string* save_dir);

  // optional .caffe.DistortionParameter dis_param = 10;
  bool has_dis_param() const;
  void clear_dis_param();
  static const int kDisParamFieldNumber = 10;
  const ::caffe::DistortionParameter& dis_param() const;
  ::caffe::DistortionParameter* mutable_dis_param();
  ::caffe::DistortionParameter* release_dis_param();
  void set_allocated_dis_param(::caffe::DistortionParameter* dis_param);

  // repeated .caffe.BatchSampler batch_sampler = 11;
  int batch_sampler_size() const;
  void clear_batch_sampler();
  static const int kBatchSamplerFieldNumber = 11;
  const ::caffe::BatchSampler& batch_sampler(int index) const;
  ::caffe::BatchSampler* mutable_batch_sampler(int index);
  ::caffe::BatchSampler* add_batch_sampler();
  ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler >*
      mutable_batch_sampler();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler >&
      batch_sampler() const;

  // optional .caffe.ExpansionParameter expand_param = 16;
  bool has_expand_param() const;
  void clear_expand_param();
  static const int kExpandParamFieldNumber = 16;
  const ::caffe::ExpansionParameter& expand_param() const;
  ::caffe::ExpansionParameter* mutable_expand_param();
  ::caffe::ExpansionParameter* release_expand_param();
  void set_allocated_expand_param(::caffe::ExpansionParameter* expand_param);

  // optional int32 bboxsample_classid = 17 [default = 0];
  bool has_bboxsample_classid() const;
  void clear_bboxsample_classid();
  static const int kBboxsampleClassidFieldNumber = 17;
  ::google::protobuf::int32 bboxsample_classid() const;
  void set_bboxsample_classid(::google::protobuf::int32 value);

  // optional bool for_body = 18 [default = true];
  bool has_for_body() const;
  void clear_for_body();
  static const int kForBodyFieldNumber = 18;
  bool for_body() const;
  void set_for_body(bool value);

  // optional bool sample_random = 19 [default = false];
  bool has_sample_random() const;
  void clear_sample_random();
  static const int kSampleRandomFieldNumber = 19;
  bool sample_random() const;
  void set_sample_random(bool value);

  // optional int32 stride = 20 [default = 8];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 20;
  ::google::protobuf::int32 stride() const;
  void set_stride(::google::protobuf::int32 value);

  // optional float sigma = 21 [default = 7];
  bool has_sigma() const;
  void clear_sigma();
  static const int kSigmaFieldNumber = 21;
  float sigma() const;
  void set_sigma(float value);

  // optional float min_scale = 22 [default = 1.6];
  bool has_min_scale() const;
  void clear_min_scale();
  static const int kMinScaleFieldNumber = 22;
  float min_scale() const;
  void set_min_scale(float value);

  // optional float max_scale = 23 [default = 1.6];
  bool has_max_scale() const;
  void clear_max_scale();
  static const int kMaxScaleFieldNumber = 23;
  float max_scale() const;
  void set_max_scale(float value);

  // optional float drift_scalar = 24 [default = 0.1];
  bool has_drift_scalar() const;
  void clear_drift_scalar();
  static const int kDriftScalarFieldNumber = 24;
  float drift_scalar() const;
  void set_drift_scalar(float value);

  // optional float max_rotate_degree = 25 [default = 10];
  bool has_max_rotate_degree() const;
  void clear_max_rotate_degree();
  static const int kMaxRotateDegreeFieldNumber = 25;
  float max_rotate_degree() const;
  void set_max_rotate_degree(float value);

  // optional .caffe.UnifiedTransformationParameter.PutToBlob_mode put_mode = 28 [default = CENTER];
  bool has_put_mode() const;
  void clear_put_mode();
  static const int kPutModeFieldNumber = 28;
  ::caffe::UnifiedTransformationParameter_PutToBlob_mode put_mode() const;
  void set_put_mode(::caffe::UnifiedTransformationParameter_PutToBlob_mode value);

  // repeated int32 resized_width_repeat = 29;
  int resized_width_repeat_size() const;
  void clear_resized_width_repeat();
  static const int kResizedWidthRepeatFieldNumber = 29;
  ::google::protobuf::int32 resized_width_repeat(int index) const;
  void set_resized_width_repeat(int index, ::google::protobuf::int32 value);
  void add_resized_width_repeat(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      resized_width_repeat() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_resized_width_repeat();

  // repeated int32 resized_height_repeat = 30;
  int resized_height_repeat_size() const;
  void clear_resized_height_repeat();
  static const int kResizedHeightRepeatFieldNumber = 30;
  ::google::protobuf::int32 resized_height_repeat(int index) const;
  void set_resized_height_repeat(int index, ::google::protobuf::int32 value);
  void add_resized_height_repeat(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      resized_height_repeat() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_resized_height_repeat();

  // optional int32 single_person_size = 32 [default = 0];
  bool has_single_person_size() const;
  void clear_single_person_size();
  static const int kSinglePersonSizeFieldNumber = 32;
  ::google::protobuf::int32 single_person_size() const;
  void set_single_person_size(::google::protobuf::int32 value);

  // optional float merge_single_person_prob = 33 [default = 0];
  bool has_merge_single_person_prob() const;
  void clear_merge_single_person_prob();
  static const int kMergeSinglePersonProbFieldNumber = 33;
  float merge_single_person_prob() const;
  void set_merge_single_person_prob(float value);

  // optional float x_closer = 34 [default = 1];
  bool has_x_closer() const;
  void clear_x_closer();
  static const int kXCloserFieldNumber = 34;
  float x_closer() const;
  void set_x_closer(float value);

  // optional float y_closer = 35 [default = 0.2];
  bool has_y_closer() const;
  void clear_y_closer();
  static const int kYCloserFieldNumber = 35;
  float y_closer() const;
  void set_y_closer(float value);

  // optional float size_scale = 36 [default = 0.1];
  bool has_size_scale() const;
  void clear_size_scale();
  static const int kSizeScaleFieldNumber = 36;
  float size_scale() const;
  void set_size_scale(float value);

  // optional int32 loop = 37 [default = 50];
  bool has_loop() const;
  void clear_loop();
  static const int kLoopFieldNumber = 37;
  ::google::protobuf::int32 loop() const;
  void set_loop(::google::protobuf::int32 value);

  // optional float add_left = 38 [default = 0.3];
  bool has_add_left() const;
  void clear_add_left();
  static const int kAddLeftFieldNumber = 38;
  float add_left() const;
  void set_add_left(float value);

  // optional float add_right = 39 [default = 0.7];
  bool has_add_right() const;
  void clear_add_right();
  static const int kAddRightFieldNumber = 39;
  float add_right() const;
  void set_add_right(float value);

  // optional float dark_prop = 40 [default = 0];
  bool has_dark_prop() const;
  void clear_dark_prop();
  static const int kDarkPropFieldNumber = 40;
  float dark_prop() const;
  void set_dark_prop(float value);

  // optional float dark_gamma_min = 41 [default = 0.5];
  bool has_dark_gamma_min() const;
  void clear_dark_gamma_min();
  static const int kDarkGammaMinFieldNumber = 41;
  float dark_gamma_min() const;
  void set_dark_gamma_min(float value);

  // optional float dark_gamma_max = 42 [default = 0.8];
  bool has_dark_gamma_max() const;
  void clear_dark_gamma_max();
  static const int kDarkGammaMaxFieldNumber = 42;
  float dark_gamma_max() const;
  void set_dark_gamma_max(float value);

  // optional bool crop_around_gt = 43 [default = false];
  bool has_crop_around_gt() const;
  void clear_crop_around_gt();
  static const int kCropAroundGtFieldNumber = 43;
  bool crop_around_gt() const;
  void set_crop_around_gt(bool value);

  // optional float backlight_prob = 44;
  bool has_backlight_prob() const;
  void clear_backlight_prob();
  static const int kBacklightProbFieldNumber = 44;
  float backlight_prob() const;
  void set_backlight_prob(float value);

  // optional float part_prob = 45 [default = 0];
  bool has_part_prob() const;
  void clear_part_prob();
  static const int kPartProbFieldNumber = 45;
  float part_prob() const;
  void set_part_prob(float value);

  // optional bool ytop = 46 [default = false];
  bool has_ytop() const;
  void clear_ytop();
  static const int kYtopFieldNumber = 46;
  bool ytop() const;
  void set_ytop(bool value);

  // optional bool picninesixteentooneone = 47 [default = false];
  bool has_picninesixteentooneone() const;
  void clear_picninesixteentooneone();
  static const int kPicninesixteentooneoneFieldNumber = 47;
  bool picninesixteentooneone() const;
  void set_picninesixteentooneone(bool value);

  // optional bool havehead = 48 [default = false];
  bool has_havehead() const;
  void clear_havehead();
  static const int kHaveheadFieldNumber = 48;
  bool havehead() const;
  void set_havehead(bool value);

  // optional float xflip_prob = 49 [default = 0];
  bool has_xflip_prob() const;
  void clear_xflip_prob();
  static const int kXflipProbFieldNumber = 49;
  float xflip_prob() const;
  void set_xflip_prob(float value);

  // optional float transpose_prob = 50 [default = 0];
  bool has_transpose_prob() const;
  void clear_transpose_prob();
  static const int kTransposeProbFieldNumber = 50;
  float transpose_prob() const;
  void set_transpose_prob(float value);

  // optional float back_makeborder_prob = 51 [default = 0];
  bool has_back_makeborder_prob() const;
  void clear_back_makeborder_prob();
  static const int kBackMakeborderProbFieldNumber = 51;
  float back_makeborder_prob() const;
  void set_back_makeborder_prob(float value);

  // optional float blur_back_prob = 52 [default = 0];
  bool has_blur_back_prob() const;
  void clear_blur_back_prob();
  static const int kBlurBackProbFieldNumber = 52;
  float blur_back_prob() const;
  void set_blur_back_prob(float value);

  // optional float back_dark_prop = 53 [default = 0];
  bool has_back_dark_prop() const;
  void clear_back_dark_prop();
  static const int kBackDarkPropFieldNumber = 53;
  float back_dark_prop() const;
  void set_back_dark_prop(float value);

  // optional float torsowithhead_coverage = 54 [default = 0];
  bool has_torsowithhead_coverage() const;
  void clear_torsowithhead_coverage();
  static const int kTorsowithheadCoverageFieldNumber = 54;
  float torsowithhead_coverage() const;
  void set_torsowithhead_coverage(float value);

  // optional float delete_from_scale = 55 [default = 1];
  bool has_delete_from_scale() const;
  void clear_delete_from_scale();
  static const int kDeleteFromScaleFieldNumber = 55;
  float delete_from_scale() const;
  void set_delete_from_scale(float value);

  // optional float blur_front_prob = 56 [default = 0];
  bool has_blur_front_prob() const;
  void clear_blur_front_prob();
  static const int kBlurFrontProbFieldNumber = 56;
  float blur_front_prob() const;
  void set_blur_front_prob(float value);

  // optional float blur_front_part_prob = 57 [default = 0];
  bool has_blur_front_part_prob() const;
  void clear_blur_front_part_prob();
  static const int kBlurFrontPartProbFieldNumber = 57;
  float blur_front_part_prob() const;
  void set_blur_front_part_prob(float value);

  // optional float blur_size_threshold = 58 [default = 1];
  bool has_blur_size_threshold() const;
  void clear_blur_size_threshold();
  static const int kBlurSizeThresholdFieldNumber = 58;
  float blur_size_threshold() const;
  void set_blur_size_threshold(float value);

  // optional float perspective_prop = 59 [default = 0];
  bool has_perspective_prop() const;
  void clear_perspective_prop();
  static const int kPerspectivePropFieldNumber = 59;
  float perspective_prop() const;
  void set_perspective_prop(float value);

  // optional bool make_copy_border = 60 [default = false];
  bool has_make_copy_border() const;
  void clear_make_copy_border();
  static const int kMakeCopyBorderFieldNumber = 60;
  bool make_copy_border() const;
  void set_make_copy_border(bool value);

  // optional float make_copy_border_prob = 61 [default = 1];
  bool has_make_copy_border_prob() const;
  void clear_make_copy_border_prob();
  static const int kMakeCopyBorderProbFieldNumber = 61;
  float make_copy_border_prob() const;
  void set_make_copy_border_prob(float value);

  // optional float make_copy_border_thred = 62 [default = 1.45];
  bool has_make_copy_border_thred() const;
  void clear_make_copy_border_thred();
  static const int kMakeCopyBorderThredFieldNumber = 62;
  float make_copy_border_thred() const;
  void set_make_copy_border_thred(float value);

  // optional bool make_randomblock = 63 [default = false];
  bool has_make_randomblock() const;
  void clear_make_randomblock();
  static const int kMakeRandomblockFieldNumber = 63;
  bool make_randomblock() const;
  void set_make_randomblock(bool value);

  // optional float randomblock_prob = 64 [default = 0.5];
  bool has_randomblock_prob() const;
  void clear_randomblock_prob();
  static const int kRandomblockProbFieldNumber = 64;
  float randomblock_prob() const;
  void set_randomblock_prob(float value);

  // optional bool speed_up = 65 [default = false];
  bool has_speed_up() const;
  void clear_speed_up();
  static const int kSpeedUpFieldNumber = 65;
  bool speed_up() const;
  void set_speed_up(bool value);

  // optional float make_addadditionhair_prob = 66 [default = 0];
  bool has_make_addadditionhair_prob() const;
  void clear_make_addadditionhair_prob();
  static const int kMakeAddadditionhairProbFieldNumber = 66;
  float make_addadditionhair_prob() const;
  void set_make_addadditionhair_prob(float value);

  // optional int32 single_hair_size = 67 [default = 11];
  bool has_single_hair_size() const;
  void clear_single_hair_size();
  static const int kSingleHairSizeFieldNumber = 67;
  ::google::protobuf::int32 single_hair_size() const;
  void set_single_hair_size(::google::protobuf::int32 value);

  // optional float hw_ratio = 68;
  bool has_hw_ratio() const;
  void clear_hw_ratio();
  static const int kHwRatioFieldNumber = 68;
  float hw_ratio() const;
  void set_hw_ratio(float value);

  // optional float area_ratio = 69;
  bool has_area_ratio() const;
  void clear_area_ratio();
  static const int kAreaRatioFieldNumber = 69;
  float area_ratio() const;
  void set_area_ratio(float value);

  // optional bool do_ignore_gt = 70 [default = false];
  bool has_do_ignore_gt() const;
  void clear_do_ignore_gt();
  static const int kDoIgnoreGtFieldNumber = 70;
  bool do_ignore_gt() const;
  void set_do_ignore_gt(bool value);

  // optional int32 block_color = 71 [default = 0];
  bool has_block_color() const;
  void clear_block_color();
  static const int kBlockColorFieldNumber = 71;
  ::google::protobuf::int32 block_color() const;
  void set_block_color(::google::protobuf::int32 value);

  // optional .caffe.DistortionParameter dis_param_neg = 72;
  bool has_dis_param_neg() const;
  void clear_dis_param_neg();
  static const int kDisParamNegFieldNumber = 72;
  const ::caffe::DistortionParameter& dis_param_neg() const;
  ::caffe::DistortionParameter* mutable_dis_param_neg();
  ::caffe::DistortionParameter* release_dis_param_neg();
  void set_allocated_dis_param_neg(::caffe::DistortionParameter* dis_param_neg);

  // optional float dark_prop_neg = 73 [default = 0];
  bool has_dark_prop_neg() const;
  void clear_dark_prop_neg();
  static const int kDarkPropNegFieldNumber = 73;
  float dark_prop_neg() const;
  void set_dark_prop_neg(float value);

  // optional float dark_gamma_min_neg = 74 [default = 0.5];
  bool has_dark_gamma_min_neg() const;
  void clear_dark_gamma_min_neg();
  static const int kDarkGammaMinNegFieldNumber = 74;
  float dark_gamma_min_neg() const;
  void set_dark_gamma_min_neg(float value);

  // optional float dark_gamma_max_neg = 75 [default = 0.8];
  bool has_dark_gamma_max_neg() const;
  void clear_dark_gamma_max_neg();
  static const int kDarkGammaMaxNegFieldNumber = 75;
  float dark_gamma_max_neg() const;
  void set_dark_gamma_max_neg(float value);

  // optional bool neg_more_aug = 76 [default = false];
  bool has_neg_more_aug() const;
  void clear_neg_more_aug();
  static const int kNegMoreAugFieldNumber = 76;
  bool neg_more_aug() const;
  void set_neg_more_aug(bool value);

  // @@protoc_insertion_point(class_scope:caffe.UnifiedTransformationParameter)
 private:
  inline void set_has_sample_sixteennine();
  inline void clear_has_sample_sixteennine();
  inline void set_has_sample_ninesixteen();
  inline void clear_has_sample_ninesixteen();
  inline void set_has_sample_sixteennine_one();
  inline void clear_has_sample_sixteennine_one();
  inline void set_has_rand_sixteennineone();
  inline void clear_has_rand_sixteennineone();
  inline void set_has_emit_coverage_thre();
  inline void clear_has_emit_coverage_thre();
  inline void set_has_kps_min_visible();
  inline void clear_has_kps_min_visible();
  inline void set_has_flip_prob();
  inline void clear_has_flip_prob();
  inline void set_has_resized_width();
  inline void clear_has_resized_width();
  inline void set_has_resized_height();
  inline void clear_has_resized_height();
  inline void set_has_visualize();
  inline void clear_has_visualize();
  inline void set_has_save_dir();
  inline void clear_has_save_dir();
  inline void set_has_dis_param();
  inline void clear_has_dis_param();
  inline void set_has_expand_param();
  inline void clear_has_expand_param();
  inline void set_has_bboxsample_classid();
  inline void clear_has_bboxsample_classid();
  inline void set_has_for_body();
  inline void clear_has_for_body();
  inline void set_has_sample_random();
  inline void clear_has_sample_random();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_sigma();
  inline void clear_has_sigma();
  inline void set_has_min_scale();
  inline void clear_has_min_scale();
  inline void set_has_max_scale();
  inline void clear_has_max_scale();
  inline void set_has_drift_scalar();
  inline void clear_has_drift_scalar();
  inline void set_has_max_rotate_degree();
  inline void clear_has_max_rotate_degree();
  inline void set_has_put_mode();
  inline void clear_has_put_mode();
  inline void set_has_single_person_size();
  inline void clear_has_single_person_size();
  inline void set_has_merge_single_person_prob();
  inline void clear_has_merge_single_person_prob();
  inline void set_has_x_closer();
  inline void clear_has_x_closer();
  inline void set_has_y_closer();
  inline void clear_has_y_closer();
  inline void set_has_size_scale();
  inline void clear_has_size_scale();
  inline void set_has_loop();
  inline void clear_has_loop();
  inline void set_has_add_left();
  inline void clear_has_add_left();
  inline void set_has_add_right();
  inline void clear_has_add_right();
  inline void set_has_dark_prop();
  inline void clear_has_dark_prop();
  inline void set_has_dark_gamma_min();
  inline void clear_has_dark_gamma_min();
  inline void set_has_dark_gamma_max();
  inline void clear_has_dark_gamma_max();
  inline void set_has_crop_around_gt();
  inline void clear_has_crop_around_gt();
  inline void set_has_backlight_prob();
  inline void clear_has_backlight_prob();
  inline void set_has_part_prob();
  inline void clear_has_part_prob();
  inline void set_has_ytop();
  inline void clear_has_ytop();
  inline void set_has_picninesixteentooneone();
  inline void clear_has_picninesixteentooneone();
  inline void set_has_havehead();
  inline void clear_has_havehead();
  inline void set_has_xflip_prob();
  inline void clear_has_xflip_prob();
  inline void set_has_transpose_prob();
  inline void clear_has_transpose_prob();
  inline void set_has_back_makeborder_prob();
  inline void clear_has_back_makeborder_prob();
  inline void set_has_blur_back_prob();
  inline void clear_has_blur_back_prob();
  inline void set_has_back_dark_prop();
  inline void clear_has_back_dark_prop();
  inline void set_has_torsowithhead_coverage();
  inline void clear_has_torsowithhead_coverage();
  inline void set_has_delete_from_scale();
  inline void clear_has_delete_from_scale();
  inline void set_has_blur_front_prob();
  inline void clear_has_blur_front_prob();
  inline void set_has_blur_front_part_prob();
  inline void clear_has_blur_front_part_prob();
  inline void set_has_blur_size_threshold();
  inline void clear_has_blur_size_threshold();
  inline void set_has_perspective_prop();
  inline void clear_has_perspective_prop();
  inline void set_has_make_copy_border();
  inline void clear_has_make_copy_border();
  inline void set_has_make_copy_border_prob();
  inline void clear_has_make_copy_border_prob();
  inline void set_has_make_copy_border_thred();
  inline void clear_has_make_copy_border_thred();
  inline void set_has_make_randomblock();
  inline void clear_has_make_randomblock();
  inline void set_has_randomblock_prob();
  inline void clear_has_randomblock_prob();
  inline void set_has_speed_up();
  inline void clear_has_speed_up();
  inline void set_has_make_addadditionhair_prob();
  inline void clear_has_make_addadditionhair_prob();
  inline void set_has_single_hair_size();
  inline void clear_has_single_hair_size();
  inline void set_has_hw_ratio();
  inline void clear_has_hw_ratio();
  inline void set_has_area_ratio();
  inline void clear_has_area_ratio();
  inline void set_has_do_ignore_gt();
  inline void clear_has_do_ignore_gt();
  inline void set_has_block_color();
  inline void clear_has_block_color();
  inline void set_has_dis_param_neg();
  inline void clear_has_dis_param_neg();
  inline void set_has_dark_prop_neg();
  inline void clear_has_dark_prop_neg();
  inline void set_has_dark_gamma_min_neg();
  inline void clear_has_dark_gamma_min_neg();
  inline void set_has_dark_gamma_max_neg();
  inline void clear_has_dark_gamma_max_neg();
  inline void set_has_neg_more_aug();
  inline void clear_has_neg_more_aug();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[3];
  mutable int _cached_size_;
  bool sample_sixteennine_;
  bool sample_ninesixteen_;
  bool sample_sixteennine_one_;
  bool rand_sixteennineone_;
  float emit_coverage_thre_;
  ::google::protobuf::RepeatedField< float > wh_ratio_sixteennineone_;
  ::google::protobuf::RepeatedField< float > prob_rand_sixteennineone_;
  ::google::protobuf::RepeatedField< float > emit_coverage_thre_multiple_;
  ::google::protobuf::RepeatedField< float > emit_area_check_;
  ::google::protobuf::int32 kps_min_visible_;
  float flip_prob_;
  ::google::protobuf::int32 resized_width_;
  ::google::protobuf::int32 resized_height_;
  ::google::protobuf::internal::ArenaStringPtr save_dir_;
  ::caffe::DistortionParameter* dis_param_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler > batch_sampler_;
  ::caffe::ExpansionParameter* expand_param_;
  ::google::protobuf::int32 bboxsample_classid_;
  ::google::protobuf::int32 stride_;
  float sigma_;
  float min_scale_;
  bool visualize_;
  bool for_body_;
  bool sample_random_;
  bool crop_around_gt_;
  float max_scale_;
  float drift_scalar_;
  float max_rotate_degree_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > resized_width_repeat_;
  int put_mode_;
  ::google::protobuf::int32 single_person_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > resized_height_repeat_;
  float merge_single_person_prob_;
  float x_closer_;
  float y_closer_;
  float size_scale_;
  ::google::protobuf::int32 loop_;
  float add_left_;
  float add_right_;
  float dark_prop_;
  float dark_gamma_min_;
  float dark_gamma_max_;
  float backlight_prob_;
  float part_prob_;
  float xflip_prob_;
  float transpose_prob_;
  bool ytop_;
  bool picninesixteentooneone_;
  bool havehead_;
  bool make_copy_border_;
  float back_makeborder_prob_;
  float blur_back_prob_;
  float back_dark_prop_;
  float torsowithhead_coverage_;
  float delete_from_scale_;
  float blur_front_prob_;
  float blur_front_part_prob_;
  float blur_size_threshold_;
  float perspective_prop_;
  float make_copy_border_prob_;
  float make_copy_border_thred_;
  float randomblock_prob_;
  float make_addadditionhair_prob_;
  ::google::protobuf::int32 single_hair_size_;
  float hw_ratio_;
  bool make_randomblock_;
  bool speed_up_;
  bool do_ignore_gt_;
  bool neg_more_aug_;
  float area_ratio_;
  ::caffe::DistortionParameter* dis_param_neg_;
  ::google::protobuf::int32 block_color_;
  float dark_prop_neg_;
  float dark_gamma_min_neg_;
  float dark_gamma_max_neg_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static UnifiedTransformationParameter* default_instance_;
};
// -------------------------------------------------------------------

class TrackerDataLoaderParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TrackerDataLoaderParameter) */ {
 public:
  TrackerDataLoaderParameter();
  virtual ~TrackerDataLoaderParameter();

  TrackerDataLoaderParameter(const TrackerDataLoaderParameter& from);

  inline TrackerDataLoaderParameter& operator=(const TrackerDataLoaderParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerDataLoaderParameter& default_instance();

  void Swap(TrackerDataLoaderParameter* other);

  // implements Message ----------------------------------------------

  inline TrackerDataLoaderParameter* New() const { return New(NULL); }

  TrackerDataLoaderParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackerDataLoaderParameter& from);
  void MergeFrom(const TrackerDataLoaderParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackerDataLoaderParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string image_list = 1;
  int image_list_size() const;
  void clear_image_list();
  static const int kImageListFieldNumber = 1;
  const ::std::string& image_list(int index) const;
  ::std::string* mutable_image_list(int index);
  void set_image_list(int index, const ::std::string& value);
  void set_image_list(int index, const char* value);
  void set_image_list(int index, const char* value, size_t size);
  ::std::string* add_image_list();
  void add_image_list(const ::std::string& value);
  void add_image_list(const char* value);
  void add_image_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& image_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_image_list();

  // repeated string image_folder = 2;
  int image_folder_size() const;
  void clear_image_folder();
  static const int kImageFolderFieldNumber = 2;
  const ::std::string& image_folder(int index) const;
  ::std::string* mutable_image_folder(int index);
  void set_image_folder(int index, const ::std::string& value);
  void set_image_folder(int index, const char* value);
  void set_image_folder(int index, const char* value, size_t size);
  ::std::string* add_image_folder();
  void add_image_folder(const ::std::string& value);
  void add_image_folder(const char* value);
  void add_image_folder(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& image_folder() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_image_folder();

  // repeated string vot_type_folder = 3;
  int vot_type_folder_size() const;
  void clear_vot_type_folder();
  static const int kVotTypeFolderFieldNumber = 3;
  const ::std::string& vot_type_folder(int index) const;
  ::std::string* mutable_vot_type_folder(int index);
  void set_vot_type_folder(int index, const ::std::string& value);
  void set_vot_type_folder(int index, const char* value);
  void set_vot_type_folder(int index, const char* value, size_t size);
  ::std::string* add_vot_type_folder();
  void add_vot_type_folder(const ::std::string& value);
  void add_vot_type_folder(const char* value);
  void add_vot_type_folder(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& vot_type_folder() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_vot_type_folder();

  // repeated string alov_type_image_folder = 4;
  int alov_type_image_folder_size() const;
  void clear_alov_type_image_folder();
  static const int kAlovTypeImageFolderFieldNumber = 4;
  const ::std::string& alov_type_image_folder(int index) const;
  ::std::string* mutable_alov_type_image_folder(int index);
  void set_alov_type_image_folder(int index, const ::std::string& value);
  void set_alov_type_image_folder(int index, const char* value);
  void set_alov_type_image_folder(int index, const char* value, size_t size);
  ::std::string* add_alov_type_image_folder();
  void add_alov_type_image_folder(const ::std::string& value);
  void add_alov_type_image_folder(const char* value);
  void add_alov_type_image_folder(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& alov_type_image_folder() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_alov_type_image_folder();

  // repeated string alov_type_anno_folder = 5;
  int alov_type_anno_folder_size() const;
  void clear_alov_type_anno_folder();
  static const int kAlovTypeAnnoFolderFieldNumber = 5;
  const ::std::string& alov_type_anno_folder(int index) const;
  ::std::string* mutable_alov_type_anno_folder(int index);
  void set_alov_type_anno_folder(int index, const ::std::string& value);
  void set_alov_type_anno_folder(int index, const char* value);
  void set_alov_type_anno_folder(int index, const char* value, size_t size);
  ::std::string* add_alov_type_anno_folder();
  void add_alov_type_anno_folder(const ::std::string& value);
  void add_alov_type_anno_folder(const char* value);
  void add_alov_type_anno_folder(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& alov_type_anno_folder() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_alov_type_anno_folder();

  // optional float lambda_shift = 6 [default = 5];
  bool has_lambda_shift() const;
  void clear_lambda_shift();
  static const int kLambdaShiftFieldNumber = 6;
  float lambda_shift() const;
  void set_lambda_shift(float value);

  // optional float lambda_scale = 7 [default = 5];
  bool has_lambda_scale() const;
  void clear_lambda_scale();
  static const int kLambdaScaleFieldNumber = 7;
  float lambda_scale() const;
  void set_lambda_scale(float value);

  // optional float lambda_min_scale = 8 [default = -0.4];
  bool has_lambda_min_scale() const;
  void clear_lambda_min_scale();
  static const int kLambdaMinScaleFieldNumber = 8;
  float lambda_min_scale() const;
  void set_lambda_min_scale(float value);

  // optional float lambda_max_scale = 9 [default = 0.4];
  bool has_lambda_max_scale() const;
  void clear_lambda_max_scale();
  static const int kLambdaMaxScaleFieldNumber = 9;
  float lambda_max_scale() const;
  void set_lambda_max_scale(float value);

  // optional int32 fetch_iters = 10 [default = 3];
  bool has_fetch_iters() const;
  void clear_fetch_iters();
  static const int kFetchItersFieldNumber = 10;
  ::google::protobuf::int32 fetch_iters() const;
  void set_fetch_iters(::google::protobuf::int32 value);

  // optional int32 generated_examples_per_image = 11 [default = 10];
  bool has_generated_examples_per_image() const;
  void clear_generated_examples_per_image();
  static const int kGeneratedExamplesPerImageFieldNumber = 11;
  ::google::protobuf::int32 generated_examples_per_image() const;
  void set_generated_examples_per_image(::google::protobuf::int32 value);

  // optional int32 generated_examples_per_frame = 12 [default = 10];
  bool has_generated_examples_per_frame() const;
  void clear_generated_examples_per_frame();
  static const int kGeneratedExamplesPerFrameFieldNumber = 12;
  ::google::protobuf::int32 generated_examples_per_frame() const;
  void set_generated_examples_per_frame(::google::protobuf::int32 value);

  // optional int32 batch_size = 13 [default = 60];
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 13;
  ::google::protobuf::int32 batch_size() const;
  void set_batch_size(::google::protobuf::int32 value);

  // optional int32 resized_width = 14 [default = 227];
  bool has_resized_width() const;
  void clear_resized_width();
  static const int kResizedWidthFieldNumber = 14;
  ::google::protobuf::int32 resized_width() const;
  void set_resized_width(::google::protobuf::int32 value);

  // optional int32 resized_height = 15 [default = 227];
  bool has_resized_height() const;
  void clear_resized_height();
  static const int kResizedHeightFieldNumber = 15;
  ::google::protobuf::int32 resized_height() const;
  void set_resized_height(::google::protobuf::int32 value);

  // optional bool normalize = 16 [default = false];
  bool has_normalize() const;
  void clear_normalize();
  static const int kNormalizeFieldNumber = 16;
  bool normalize() const;
  void set_normalize(bool value);

  // repeated float mean_value = 17;
  int mean_value_size() const;
  void clear_mean_value();
  static const int kMeanValueFieldNumber = 17;
  float mean_value(int index) const;
  void set_mean_value(int index, float value);
  void add_mean_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      mean_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_mean_value();

  // @@protoc_insertion_point(class_scope:caffe.TrackerDataLoaderParameter)
 private:
  inline void set_has_lambda_shift();
  inline void clear_has_lambda_shift();
  inline void set_has_lambda_scale();
  inline void clear_has_lambda_scale();
  inline void set_has_lambda_min_scale();
  inline void clear_has_lambda_min_scale();
  inline void set_has_lambda_max_scale();
  inline void clear_has_lambda_max_scale();
  inline void set_has_fetch_iters();
  inline void clear_has_fetch_iters();
  inline void set_has_generated_examples_per_image();
  inline void clear_has_generated_examples_per_image();
  inline void set_has_generated_examples_per_frame();
  inline void clear_has_generated_examples_per_frame();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_resized_width();
  inline void clear_has_resized_width();
  inline void set_has_resized_height();
  inline void clear_has_resized_height();
  inline void set_has_normalize();
  inline void clear_has_normalize();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> image_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> image_folder_;
  ::google::protobuf::RepeatedPtrField< ::std::string> vot_type_folder_;
  ::google::protobuf::RepeatedPtrField< ::std::string> alov_type_image_folder_;
  ::google::protobuf::RepeatedPtrField< ::std::string> alov_type_anno_folder_;
  float lambda_shift_;
  float lambda_scale_;
  float lambda_min_scale_;
  float lambda_max_scale_;
  ::google::protobuf::int32 fetch_iters_;
  ::google::protobuf::int32 generated_examples_per_image_;
  ::google::protobuf::int32 generated_examples_per_frame_;
  ::google::protobuf::int32 batch_size_;
  ::google::protobuf::int32 resized_width_;
  ::google::protobuf::int32 resized_height_;
  ::google::protobuf::RepeatedField< float > mean_value_;
  bool normalize_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static TrackerDataLoaderParameter* default_instance_;
};
// -------------------------------------------------------------------

class FTrackerDataLoaderParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.FTrackerDataLoaderParameter) */ {
 public:
  FTrackerDataLoaderParameter();
  virtual ~FTrackerDataLoaderParameter();

  FTrackerDataLoaderParameter(const FTrackerDataLoaderParameter& from);

  inline FTrackerDataLoaderParameter& operator=(const FTrackerDataLoaderParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FTrackerDataLoaderParameter& default_instance();

  void Swap(FTrackerDataLoaderParameter* other);

  // implements Message ----------------------------------------------

  inline FTrackerDataLoaderParameter* New() const { return New(NULL); }

  FTrackerDataLoaderParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FTrackerDataLoaderParameter& from);
  void MergeFrom(const FTrackerDataLoaderParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FTrackerDataLoaderParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string image_list = 1;
  int image_list_size() const;
  void clear_image_list();
  static const int kImageListFieldNumber = 1;
  const ::std::string& image_list(int index) const;
  ::std::string* mutable_image_list(int index);
  void set_image_list(int index, const ::std::string& value);
  void set_image_list(int index, const char* value);
  void set_image_list(int index, const char* value, size_t size);
  ::std::string* add_image_list();
  void add_image_list(const ::std::string& value);
  void add_image_list(const char* value);
  void add_image_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& image_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_image_list();

  // repeated string image_folder = 2;
  int image_folder_size() const;
  void clear_image_folder();
  static const int kImageFolderFieldNumber = 2;
  const ::std::string& image_folder(int index) const;
  ::std::string* mutable_image_folder(int index);
  void set_image_folder(int index, const ::std::string& value);
  void set_image_folder(int index, const char* value);
  void set_image_folder(int index, const char* value, size_t size);
  ::std::string* add_image_folder();
  void add_image_folder(const ::std::string& value);
  void add_image_folder(const char* value);
  void add_image_folder(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& image_folder() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_image_folder();

  // repeated string vot_type_folder = 3;
  int vot_type_folder_size() const;
  void clear_vot_type_folder();
  static const int kVotTypeFolderFieldNumber = 3;
  const ::std::string& vot_type_folder(int index) const;
  ::std::string* mutable_vot_type_folder(int index);
  void set_vot_type_folder(int index, const ::std::string& value);
  void set_vot_type_folder(int index, const char* value);
  void set_vot_type_folder(int index, const char* value, size_t size);
  ::std::string* add_vot_type_folder();
  void add_vot_type_folder(const ::std::string& value);
  void add_vot_type_folder(const char* value);
  void add_vot_type_folder(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& vot_type_folder() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_vot_type_folder();

  // repeated string alov_type_image_folder = 4;
  int alov_type_image_folder_size() const;
  void clear_alov_type_image_folder();
  static const int kAlovTypeImageFolderFieldNumber = 4;
  const ::std::string& alov_type_image_folder(int index) const;
  ::std::string* mutable_alov_type_image_folder(int index);
  void set_alov_type_image_folder(int index, const ::std::string& value);
  void set_alov_type_image_folder(int index, const char* value);
  void set_alov_type_image_folder(int index, const char* value, size_t size);
  ::std::string* add_alov_type_image_folder();
  void add_alov_type_image_folder(const ::std::string& value);
  void add_alov_type_image_folder(const char* value);
  void add_alov_type_image_folder(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& alov_type_image_folder() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_alov_type_image_folder();

  // repeated string alov_type_anno_folder = 5;
  int alov_type_anno_folder_size() const;
  void clear_alov_type_anno_folder();
  static const int kAlovTypeAnnoFolderFieldNumber = 5;
  const ::std::string& alov_type_anno_folder(int index) const;
  ::std::string* mutable_alov_type_anno_folder(int index);
  void set_alov_type_anno_folder(int index, const ::std::string& value);
  void set_alov_type_anno_folder(int index, const char* value);
  void set_alov_type_anno_folder(int index, const char* value, size_t size);
  ::std::string* add_alov_type_anno_folder();
  void add_alov_type_anno_folder(const ::std::string& value);
  void add_alov_type_anno_folder(const char* value);
  void add_alov_type_anno_folder(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& alov_type_anno_folder() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_alov_type_anno_folder();

  // optional float lambda_shift = 6 [default = 5];
  bool has_lambda_shift() const;
  void clear_lambda_shift();
  static const int kLambdaShiftFieldNumber = 6;
  float lambda_shift() const;
  void set_lambda_shift(float value);

  // optional float lambda_scale = 7 [default = 5];
  bool has_lambda_scale() const;
  void clear_lambda_scale();
  static const int kLambdaScaleFieldNumber = 7;
  float lambda_scale() const;
  void set_lambda_scale(float value);

  // optional float lambda_min_scale = 8 [default = -0.4];
  bool has_lambda_min_scale() const;
  void clear_lambda_min_scale();
  static const int kLambdaMinScaleFieldNumber = 8;
  float lambda_min_scale() const;
  void set_lambda_min_scale(float value);

  // optional float lambda_max_scale = 9 [default = 0.4];
  bool has_lambda_max_scale() const;
  void clear_lambda_max_scale();
  static const int kLambdaMaxScaleFieldNumber = 9;
  float lambda_max_scale() const;
  void set_lambda_max_scale(float value);

  // optional int32 fetch_iters = 10 [default = 3];
  bool has_fetch_iters() const;
  void clear_fetch_iters();
  static const int kFetchItersFieldNumber = 10;
  ::google::protobuf::int32 fetch_iters() const;
  void set_fetch_iters(::google::protobuf::int32 value);

  // optional int32 generated_examples_per_image = 11 [default = 10];
  bool has_generated_examples_per_image() const;
  void clear_generated_examples_per_image();
  static const int kGeneratedExamplesPerImageFieldNumber = 11;
  ::google::protobuf::int32 generated_examples_per_image() const;
  void set_generated_examples_per_image(::google::protobuf::int32 value);

  // optional int32 generated_examples_per_frame = 12 [default = 10];
  bool has_generated_examples_per_frame() const;
  void clear_generated_examples_per_frame();
  static const int kGeneratedExamplesPerFrameFieldNumber = 12;
  ::google::protobuf::int32 generated_examples_per_frame() const;
  void set_generated_examples_per_frame(::google::protobuf::int32 value);

  // optional int32 batch_size = 13 [default = 60];
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 13;
  ::google::protobuf::int32 batch_size() const;
  void set_batch_size(::google::protobuf::int32 value);

  // optional int32 resized_width = 14 [default = 227];
  bool has_resized_width() const;
  void clear_resized_width();
  static const int kResizedWidthFieldNumber = 14;
  ::google::protobuf::int32 resized_width() const;
  void set_resized_width(::google::protobuf::int32 value);

  // optional int32 resized_height = 15 [default = 227];
  bool has_resized_height() const;
  void clear_resized_height();
  static const int kResizedHeightFieldNumber = 15;
  ::google::protobuf::int32 resized_height() const;
  void set_resized_height(::google::protobuf::int32 value);

  // optional string net_prototxt = 16;
  bool has_net_prototxt() const;
  void clear_net_prototxt();
  static const int kNetPrototxtFieldNumber = 16;
  const ::std::string& net_prototxt() const;
  void set_net_prototxt(const ::std::string& value);
  void set_net_prototxt(const char* value);
  void set_net_prototxt(const char* value, size_t size);
  ::std::string* mutable_net_prototxt();
  ::std::string* release_net_prototxt();
  void set_allocated_net_prototxt(::std::string* net_prototxt);

  // optional string net_model = 17;
  bool has_net_model() const;
  void clear_net_model();
  static const int kNetModelFieldNumber = 17;
  const ::std::string& net_model() const;
  void set_net_model(const ::std::string& value);
  void set_net_model(const char* value);
  void set_net_model(const char* value, size_t size);
  ::std::string* mutable_net_model();
  ::std::string* release_net_model();
  void set_allocated_net_model(::std::string* net_model);

  // optional int32 gpu_id = 18 [default = 0];
  bool has_gpu_id() const;
  void clear_gpu_id();
  static const int kGpuIdFieldNumber = 18;
  ::google::protobuf::int32 gpu_id() const;
  void set_gpu_id(::google::protobuf::int32 value);

  // optional string feature_name = 19;
  bool has_feature_name() const;
  void clear_feature_name();
  static const int kFeatureNameFieldNumber = 19;
  const ::std::string& feature_name() const;
  void set_feature_name(const ::std::string& value);
  void set_feature_name(const char* value);
  void set_feature_name(const char* value, size_t size);
  ::std::string* mutable_feature_name();
  ::std::string* release_feature_name();
  void set_allocated_feature_name(::std::string* feature_name);

  // optional int32 fchannels = 20 [default = 256];
  bool has_fchannels() const;
  void clear_fchannels();
  static const int kFchannelsFieldNumber = 20;
  ::google::protobuf::int32 fchannels() const;
  void set_fchannels(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.FTrackerDataLoaderParameter)
 private:
  inline void set_has_lambda_shift();
  inline void clear_has_lambda_shift();
  inline void set_has_lambda_scale();
  inline void clear_has_lambda_scale();
  inline void set_has_lambda_min_scale();
  inline void clear_has_lambda_min_scale();
  inline void set_has_lambda_max_scale();
  inline void clear_has_lambda_max_scale();
  inline void set_has_fetch_iters();
  inline void clear_has_fetch_iters();
  inline void set_has_generated_examples_per_image();
  inline void clear_has_generated_examples_per_image();
  inline void set_has_generated_examples_per_frame();
  inline void clear_has_generated_examples_per_frame();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_resized_width();
  inline void clear_has_resized_width();
  inline void set_has_resized_height();
  inline void clear_has_resized_height();
  inline void set_has_net_prototxt();
  inline void clear_has_net_prototxt();
  inline void set_has_net_model();
  inline void clear_has_net_model();
  inline void set_has_gpu_id();
  inline void clear_has_gpu_id();
  inline void set_has_feature_name();
  inline void clear_has_feature_name();
  inline void set_has_fchannels();
  inline void clear_has_fchannels();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> image_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> image_folder_;
  ::google::protobuf::RepeatedPtrField< ::std::string> vot_type_folder_;
  ::google::protobuf::RepeatedPtrField< ::std::string> alov_type_image_folder_;
  ::google::protobuf::RepeatedPtrField< ::std::string> alov_type_anno_folder_;
  float lambda_shift_;
  float lambda_scale_;
  float lambda_min_scale_;
  float lambda_max_scale_;
  ::google::protobuf::int32 fetch_iters_;
  ::google::protobuf::int32 generated_examples_per_image_;
  ::google::protobuf::int32 generated_examples_per_frame_;
  ::google::protobuf::int32 batch_size_;
  ::google::protobuf::int32 resized_width_;
  ::google::protobuf::int32 resized_height_;
  ::google::protobuf::internal::ArenaStringPtr net_prototxt_;
  ::google::protobuf::internal::ArenaStringPtr net_model_;
  ::google::protobuf::internal::ArenaStringPtr feature_name_;
  ::google::protobuf::int32 gpu_id_;
  ::google::protobuf::int32 fchannels_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static FTrackerDataLoaderParameter* default_instance_;
};
// -------------------------------------------------------------------

class FTrackerDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.FTrackerDataParameter) */ {
 public:
  FTrackerDataParameter();
  virtual ~FTrackerDataParameter();

  FTrackerDataParameter(const FTrackerDataParameter& from);

  inline FTrackerDataParameter& operator=(const FTrackerDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FTrackerDataParameter& default_instance();

  void Swap(FTrackerDataParameter* other);

  // implements Message ----------------------------------------------

  inline FTrackerDataParameter* New() const { return New(NULL); }

  FTrackerDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FTrackerDataParameter& from);
  void MergeFrom(const FTrackerDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FTrackerDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FTrackerDataLoaderParameter load_param = 1;
  bool has_load_param() const;
  void clear_load_param();
  static const int kLoadParamFieldNumber = 1;
  const ::caffe::FTrackerDataLoaderParameter& load_param() const;
  ::caffe::FTrackerDataLoaderParameter* mutable_load_param();
  ::caffe::FTrackerDataLoaderParameter* release_load_param();
  void set_allocated_load_param(::caffe::FTrackerDataLoaderParameter* load_param);

  // @@protoc_insertion_point(class_scope:caffe.FTrackerDataParameter)
 private:
  inline void set_has_load_param();
  inline void clear_has_load_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::FTrackerDataLoaderParameter* load_param_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static FTrackerDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class TrackerDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TrackerDataParameter) */ {
 public:
  TrackerDataParameter();
  virtual ~TrackerDataParameter();

  TrackerDataParameter(const TrackerDataParameter& from);

  inline TrackerDataParameter& operator=(const TrackerDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerDataParameter& default_instance();

  void Swap(TrackerDataParameter* other);

  // implements Message ----------------------------------------------

  inline TrackerDataParameter* New() const { return New(NULL); }

  TrackerDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackerDataParameter& from);
  void MergeFrom(const TrackerDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackerDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.TrackerDataLoaderParameter load_param = 1;
  bool has_load_param() const;
  void clear_load_param();
  static const int kLoadParamFieldNumber = 1;
  const ::caffe::TrackerDataLoaderParameter& load_param() const;
  ::caffe::TrackerDataLoaderParameter* mutable_load_param();
  ::caffe::TrackerDataLoaderParameter* release_load_param();
  void set_allocated_load_param(::caffe::TrackerDataLoaderParameter* load_param);

  // @@protoc_insertion_point(class_scope:caffe.TrackerDataParameter)
 private:
  inline void set_has_load_param();
  inline void clear_has_load_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::TrackerDataLoaderParameter* load_param_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static TrackerDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class TrackerMcLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TrackerMcLossParameter) */ {
 public:
  TrackerMcLossParameter();
  virtual ~TrackerMcLossParameter();

  TrackerMcLossParameter(const TrackerMcLossParameter& from);

  inline TrackerMcLossParameter& operator=(const TrackerMcLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerMcLossParameter& default_instance();

  void Swap(TrackerMcLossParameter* other);

  // implements Message ----------------------------------------------

  inline TrackerMcLossParameter* New() const { return New(NULL); }

  TrackerMcLossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackerMcLossParameter& from);
  void MergeFrom(const TrackerMcLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackerMcLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float score_scale = 1 [default = 5];
  bool has_score_scale() const;
  void clear_score_scale();
  static const int kScoreScaleFieldNumber = 1;
  float score_scale() const;
  void set_score_scale(float value);

  // optional float loc_scale = 2 [default = 1];
  bool has_loc_scale() const;
  void clear_loc_scale();
  static const int kLocScaleFieldNumber = 2;
  float loc_scale() const;
  void set_loc_scale(float value);

  // optional float prior_width = 3 [default = 0.5];
  bool has_prior_width() const;
  void clear_prior_width();
  static const int kPriorWidthFieldNumber = 3;
  float prior_width() const;
  void set_prior_width(float value);

  // optional float prior_height = 4 [default = 0.5];
  bool has_prior_height() const;
  void clear_prior_height();
  static const int kPriorHeightFieldNumber = 4;
  float prior_height() const;
  void set_prior_height(float value);

  // optional float overlap_threshold = 5 [default = 0.5];
  bool has_overlap_threshold() const;
  void clear_overlap_threshold();
  static const int kOverlapThresholdFieldNumber = 5;
  float overlap_threshold() const;
  void set_overlap_threshold(float value);

  // @@protoc_insertion_point(class_scope:caffe.TrackerMcLossParameter)
 private:
  inline void set_has_score_scale();
  inline void clear_has_score_scale();
  inline void set_has_loc_scale();
  inline void clear_has_loc_scale();
  inline void set_has_prior_width();
  inline void clear_has_prior_width();
  inline void set_has_prior_height();
  inline void clear_has_prior_height();
  inline void set_has_overlap_threshold();
  inline void clear_has_overlap_threshold();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float score_scale_;
  float loc_scale_;
  float prior_width_;
  float prior_height_;
  float overlap_threshold_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static TrackerMcLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class TrackerMcOutParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TrackerMcOutParameter) */ {
 public:
  TrackerMcOutParameter();
  virtual ~TrackerMcOutParameter();

  TrackerMcOutParameter(const TrackerMcOutParameter& from);

  inline TrackerMcOutParameter& operator=(const TrackerMcOutParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerMcOutParameter& default_instance();

  void Swap(TrackerMcOutParameter* other);

  // implements Message ----------------------------------------------

  inline TrackerMcOutParameter* New() const { return New(NULL); }

  TrackerMcOutParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackerMcOutParameter& from);
  void MergeFrom(const TrackerMcOutParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackerMcOutParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float prior_width = 1 [default = 0.5];
  bool has_prior_width() const;
  void clear_prior_width();
  static const int kPriorWidthFieldNumber = 1;
  float prior_width() const;
  void set_prior_width(float value);

  // optional float prior_height = 2 [default = 0.5];
  bool has_prior_height() const;
  void clear_prior_height();
  static const int kPriorHeightFieldNumber = 2;
  float prior_height() const;
  void set_prior_height(float value);

  // @@protoc_insertion_point(class_scope:caffe.TrackerMcOutParameter)
 private:
  inline void set_has_prior_width();
  inline void clear_has_prior_width();
  inline void set_has_prior_height();
  inline void clear_has_prior_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float prior_width_;
  float prior_height_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static TrackerMcOutParameter* default_instance_;
};
// -------------------------------------------------------------------

class TrueRoiParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TrueRoiParameter) */ {
 public:
  TrueRoiParameter();
  virtual ~TrueRoiParameter();

  TrueRoiParameter(const TrueRoiParameter& from);

  inline TrueRoiParameter& operator=(const TrueRoiParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrueRoiParameter& default_instance();

  void Swap(TrueRoiParameter* other);

  // implements Message ----------------------------------------------

  inline TrueRoiParameter* New() const { return New(NULL); }

  TrueRoiParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrueRoiParameter& from);
  void MergeFrom(const TrueRoiParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrueRoiParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1 [default = "mask"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:caffe.TrueRoiParameter)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_type_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static TrueRoiParameter* default_instance_;
};
// -------------------------------------------------------------------

class LossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LossParameter) */ {
 public:
  LossParameter();
  virtual ~LossParameter();

  LossParameter(const LossParameter& from);

  inline LossParameter& operator=(const LossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LossParameter& default_instance();

  void Swap(LossParameter* other);

  // implements Message ----------------------------------------------

  inline LossParameter* New() const { return New(NULL); }

  LossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LossParameter& from);
  void MergeFrom(const LossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LossParameter_NormalizationMode NormalizationMode;
  static const NormalizationMode FULL =
    LossParameter_NormalizationMode_FULL;
  static const NormalizationMode VALID =
    LossParameter_NormalizationMode_VALID;
  static const NormalizationMode BATCH_SIZE =
    LossParameter_NormalizationMode_BATCH_SIZE;
  static const NormalizationMode NONE =
    LossParameter_NormalizationMode_NONE;
  static inline bool NormalizationMode_IsValid(int value) {
    return LossParameter_NormalizationMode_IsValid(value);
  }
  static const NormalizationMode NormalizationMode_MIN =
    LossParameter_NormalizationMode_NormalizationMode_MIN;
  static const NormalizationMode NormalizationMode_MAX =
    LossParameter_NormalizationMode_NormalizationMode_MAX;
  static const int NormalizationMode_ARRAYSIZE =
    LossParameter_NormalizationMode_NormalizationMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormalizationMode_descriptor() {
    return LossParameter_NormalizationMode_descriptor();
  }
  static inline const ::std::string& NormalizationMode_Name(NormalizationMode value) {
    return LossParameter_NormalizationMode_Name(value);
  }
  static inline bool NormalizationMode_Parse(const ::std::string& name,
      NormalizationMode* value) {
    return LossParameter_NormalizationMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 ignore_label = 1;
  bool has_ignore_label() const;
  void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 1;
  ::google::protobuf::int32 ignore_label() const;
  void set_ignore_label(::google::protobuf::int32 value);

  // optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
  bool has_normalization() const;
  void clear_normalization();
  static const int kNormalizationFieldNumber = 3;
  ::caffe::LossParameter_NormalizationMode normalization() const;
  void set_normalization(::caffe::LossParameter_NormalizationMode value);

  // optional bool normalize = 2;
  bool has_normalize() const;
  void clear_normalize();
  static const int kNormalizeFieldNumber = 2;
  bool normalize() const;
  void set_normalize(bool value);

  // @@protoc_insertion_point(class_scope:caffe.LossParameter)
 private:
  inline void set_has_ignore_label();
  inline void clear_has_ignore_label();
  inline void set_has_normalization();
  inline void clear_has_normalization();
  inline void set_has_normalize();
  inline void clear_has_normalize();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ignore_label_;
  int normalization_;
  bool normalize_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static LossParameter* default_instance_;
};
// -------------------------------------------------------------------

class AccuracyParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.AccuracyParameter) */ {
 public:
  AccuracyParameter();
  virtual ~AccuracyParameter();

  AccuracyParameter(const AccuracyParameter& from);

  inline AccuracyParameter& operator=(const AccuracyParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccuracyParameter& default_instance();

  void Swap(AccuracyParameter* other);

  // implements Message ----------------------------------------------

  inline AccuracyParameter* New() const { return New(NULL); }

  AccuracyParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccuracyParameter& from);
  void MergeFrom(const AccuracyParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AccuracyParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 top_k = 1 [default = 1];
  bool has_top_k() const;
  void clear_top_k();
  static const int kTopKFieldNumber = 1;
  ::google::protobuf::uint32 top_k() const;
  void set_top_k(::google::protobuf::uint32 value);

  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional int32 ignore_label = 3;
  bool has_ignore_label() const;
  void clear_ignore_label();
  static const int kIgnoreLabelFieldNumber = 3;
  ::google::protobuf::int32 ignore_label() const;
  void set_ignore_label(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.AccuracyParameter)
 private:
  inline void set_has_top_k();
  inline void clear_has_top_k();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_ignore_label();
  inline void clear_has_ignore_label();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 top_k_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 ignore_label_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static AccuracyParameter* default_instance_;
};
// -------------------------------------------------------------------

class AnnotatedDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.AnnotatedDataParameter) */ {
 public:
  AnnotatedDataParameter();
  virtual ~AnnotatedDataParameter();

  AnnotatedDataParameter(const AnnotatedDataParameter& from);

  inline AnnotatedDataParameter& operator=(const AnnotatedDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnnotatedDataParameter& default_instance();

  void Swap(AnnotatedDataParameter* other);

  // implements Message ----------------------------------------------

  inline AnnotatedDataParameter* New() const { return New(NULL); }

  AnnotatedDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnnotatedDataParameter& from);
  void MergeFrom(const AnnotatedDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnnotatedDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.BatchSampler batch_sampler = 1;
  int batch_sampler_size() const;
  void clear_batch_sampler();
  static const int kBatchSamplerFieldNumber = 1;
  const ::caffe::BatchSampler& batch_sampler(int index) const;
  ::caffe::BatchSampler* mutable_batch_sampler(int index);
  ::caffe::BatchSampler* add_batch_sampler();
  ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler >*
      mutable_batch_sampler();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler >&
      batch_sampler() const;

  // optional string label_map_file = 2;
  bool has_label_map_file() const;
  void clear_label_map_file();
  static const int kLabelMapFileFieldNumber = 2;
  const ::std::string& label_map_file() const;
  void set_label_map_file(const ::std::string& value);
  void set_label_map_file(const char* value);
  void set_label_map_file(const char* value, size_t size);
  ::std::string* mutable_label_map_file();
  ::std::string* release_label_map_file();
  void set_allocated_label_map_file(::std::string* label_map_file);

  // @@protoc_insertion_point(class_scope:caffe.AnnotatedDataParameter)
 private:
  inline void set_has_label_map_file();
  inline void clear_has_label_map_file();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler > batch_sampler_;
  ::google::protobuf::internal::ArenaStringPtr label_map_file_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static AnnotatedDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class ArgMaxParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ArgMaxParameter) */ {
 public:
  ArgMaxParameter();
  virtual ~ArgMaxParameter();

  ArgMaxParameter(const ArgMaxParameter& from);

  inline ArgMaxParameter& operator=(const ArgMaxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArgMaxParameter& default_instance();

  void Swap(ArgMaxParameter* other);

  // implements Message ----------------------------------------------

  inline ArgMaxParameter* New() const { return New(NULL); }

  ArgMaxParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArgMaxParameter& from);
  void MergeFrom(const ArgMaxParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ArgMaxParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool out_max_val = 1 [default = false];
  bool has_out_max_val() const;
  void clear_out_max_val();
  static const int kOutMaxValFieldNumber = 1;
  bool out_max_val() const;
  void set_out_max_val(bool value);

  // optional uint32 top_k = 2 [default = 1];
  bool has_top_k() const;
  void clear_top_k();
  static const int kTopKFieldNumber = 2;
  ::google::protobuf::uint32 top_k() const;
  void set_top_k(::google::protobuf::uint32 value);

  // optional int32 axis = 3;
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 3;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.ArgMaxParameter)
 private:
  inline void set_has_out_max_val();
  inline void clear_has_out_max_val();
  inline void set_has_top_k();
  inline void clear_has_top_k();
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool out_max_val_;
  ::google::protobuf::uint32 top_k_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ArgMaxParameter* default_instance_;
};
// -------------------------------------------------------------------

class ConcatParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ConcatParameter) */ {
 public:
  ConcatParameter();
  virtual ~ConcatParameter();

  ConcatParameter(const ConcatParameter& from);

  inline ConcatParameter& operator=(const ConcatParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConcatParameter& default_instance();

  void Swap(ConcatParameter* other);

  // implements Message ----------------------------------------------

  inline ConcatParameter* New() const { return New(NULL); }

  ConcatParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConcatParameter& from);
  void MergeFrom(const ConcatParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConcatParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional uint32 concat_dim = 1 [default = 1];
  bool has_concat_dim() const;
  void clear_concat_dim();
  static const int kConcatDimFieldNumber = 1;
  ::google::protobuf::uint32 concat_dim() const;
  void set_concat_dim(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.ConcatParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_concat_dim();
  inline void clear_has_concat_dim();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::uint32 concat_dim_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ConcatParameter* default_instance_;
};
// -------------------------------------------------------------------

class BatchNormParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BatchNormParameter) */ {
 public:
  BatchNormParameter();
  virtual ~BatchNormParameter();

  BatchNormParameter(const BatchNormParameter& from);

  inline BatchNormParameter& operator=(const BatchNormParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchNormParameter& default_instance();

  void Swap(BatchNormParameter* other);

  // implements Message ----------------------------------------------

  inline BatchNormParameter* New() const { return New(NULL); }

  BatchNormParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchNormParameter& from);
  void MergeFrom(const BatchNormParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BatchNormParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool use_global_stats = 1;
  bool has_use_global_stats() const;
  void clear_use_global_stats();
  static const int kUseGlobalStatsFieldNumber = 1;
  bool use_global_stats() const;
  void set_use_global_stats(bool value);

  // optional float moving_average_fraction = 2 [default = 0.999];
  bool has_moving_average_fraction() const;
  void clear_moving_average_fraction();
  static const int kMovingAverageFractionFieldNumber = 2;
  float moving_average_fraction() const;
  void set_moving_average_fraction(float value);

  // optional float eps = 3 [default = 1e-05];
  bool has_eps() const;
  void clear_eps();
  static const int kEpsFieldNumber = 3;
  float eps() const;
  void set_eps(float value);

  // @@protoc_insertion_point(class_scope:caffe.BatchNormParameter)
 private:
  inline void set_has_use_global_stats();
  inline void clear_has_use_global_stats();
  inline void set_has_moving_average_fraction();
  inline void clear_has_moving_average_fraction();
  inline void set_has_eps();
  inline void clear_has_eps();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool use_global_stats_;
  float moving_average_fraction_;
  float eps_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static BatchNormParameter* default_instance_;
};
// -------------------------------------------------------------------

class BiasParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BiasParameter) */ {
 public:
  BiasParameter();
  virtual ~BiasParameter();

  BiasParameter(const BiasParameter& from);

  inline BiasParameter& operator=(const BiasParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BiasParameter& default_instance();

  void Swap(BiasParameter* other);

  // implements Message ----------------------------------------------

  inline BiasParameter* New() const { return New(NULL); }

  BiasParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BiasParameter& from);
  void MergeFrom(const BiasParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BiasParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 1;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 2 [default = 1];
  bool has_num_axes() const;
  void clear_num_axes();
  static const int kNumAxesFieldNumber = 2;
  ::google::protobuf::int32 num_axes() const;
  void set_num_axes(::google::protobuf::int32 value);

  // optional .caffe.FillerParameter filler = 3;
  bool has_filler() const;
  void clear_filler();
  static const int kFillerFieldNumber = 3;
  const ::caffe::FillerParameter& filler() const;
  ::caffe::FillerParameter* mutable_filler();
  ::caffe::FillerParameter* release_filler();
  void set_allocated_filler(::caffe::FillerParameter* filler);

  // @@protoc_insertion_point(class_scope:caffe.BiasParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_num_axes();
  inline void clear_has_num_axes();
  inline void set_has_filler();
  inline void clear_has_filler();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 num_axes_;
  ::caffe::FillerParameter* filler_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static BiasParameter* default_instance_;
};
// -------------------------------------------------------------------

class ContrastiveLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ContrastiveLossParameter) */ {
 public:
  ContrastiveLossParameter();
  virtual ~ContrastiveLossParameter();

  ContrastiveLossParameter(const ContrastiveLossParameter& from);

  inline ContrastiveLossParameter& operator=(const ContrastiveLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContrastiveLossParameter& default_instance();

  void Swap(ContrastiveLossParameter* other);

  // implements Message ----------------------------------------------

  inline ContrastiveLossParameter* New() const { return New(NULL); }

  ContrastiveLossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContrastiveLossParameter& from);
  void MergeFrom(const ContrastiveLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContrastiveLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float margin = 1 [default = 1];
  bool has_margin() const;
  void clear_margin();
  static const int kMarginFieldNumber = 1;
  float margin() const;
  void set_margin(float value);

  // optional bool legacy_version = 2 [default = false];
  bool has_legacy_version() const;
  void clear_legacy_version();
  static const int kLegacyVersionFieldNumber = 2;
  bool legacy_version() const;
  void set_legacy_version(bool value);

  // @@protoc_insertion_point(class_scope:caffe.ContrastiveLossParameter)
 private:
  inline void set_has_margin();
  inline void clear_has_margin();
  inline void set_has_legacy_version();
  inline void clear_has_legacy_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float margin_;
  bool legacy_version_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ContrastiveLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class ConvolutionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ConvolutionParameter) */ {
 public:
  ConvolutionParameter();
  virtual ~ConvolutionParameter();

  ConvolutionParameter(const ConvolutionParameter& from);

  inline ConvolutionParameter& operator=(const ConvolutionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvolutionParameter& default_instance();

  void Swap(ConvolutionParameter* other);

  // implements Message ----------------------------------------------

  inline ConvolutionParameter* New() const { return New(NULL); }

  ConvolutionParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConvolutionParameter& from);
  void MergeFrom(const ConvolutionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConvolutionParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ConvolutionParameter_Engine Engine;
  static const Engine DEFAULT =
    ConvolutionParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    ConvolutionParameter_Engine_CAFFE;
  static const Engine CUDNN =
    ConvolutionParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ConvolutionParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ConvolutionParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ConvolutionParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ConvolutionParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ConvolutionParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ConvolutionParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ConvolutionParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  bool bias_term() const;
  void set_bias_term(bool value);

  // repeated uint32 pad = 3;
  int pad_size() const;
  void clear_pad();
  static const int kPadFieldNumber = 3;
  ::google::protobuf::uint32 pad(int index) const;
  void set_pad(int index, ::google::protobuf::uint32 value);
  void add_pad(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pad() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pad();

  // repeated uint32 kernel_size = 4;
  int kernel_size_size() const;
  void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 4;
  ::google::protobuf::uint32 kernel_size(int index) const;
  void set_kernel_size(int index, ::google::protobuf::uint32 value);
  void add_kernel_size(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kernel_size() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kernel_size();

  // repeated uint32 stride = 6;
  int stride_size() const;
  void clear_stride();
  static const int kStrideFieldNumber = 6;
  ::google::protobuf::uint32 stride(int index) const;
  void set_stride(int index, ::google::protobuf::uint32 value);
  void add_stride(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      stride() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_stride();

  // repeated uint32 dilation = 18;
  int dilation_size() const;
  void clear_dilation();
  static const int kDilationFieldNumber = 18;
  ::google::protobuf::uint32 dilation(int index) const;
  void set_dilation(int index, ::google::protobuf::uint32 value);
  void add_dilation(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dilation() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dilation();

  // optional uint32 pad_h = 9 [default = 0];
  bool has_pad_h() const;
  void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  ::google::protobuf::uint32 pad_h() const;
  void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  bool has_pad_w() const;
  void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  ::google::protobuf::uint32 pad_w() const;
  void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 11;
  bool has_kernel_h() const;
  void clear_kernel_h();
  static const int kKernelHFieldNumber = 11;
  ::google::protobuf::uint32 kernel_h() const;
  void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 12;
  bool has_kernel_w() const;
  void clear_kernel_w();
  static const int kKernelWFieldNumber = 12;
  ::google::protobuf::uint32 kernel_w() const;
  void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 13;
  bool has_stride_h() const;
  void clear_stride_h();
  static const int kStrideHFieldNumber = 13;
  ::google::protobuf::uint32 stride_h() const;
  void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 14;
  bool has_stride_w() const;
  void clear_stride_w();
  static const int kStrideWFieldNumber = 14;
  ::google::protobuf::uint32 stride_w() const;
  void set_stride_w(::google::protobuf::uint32 value);

  // optional uint32 group = 5 [default = 1];
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 5;
  ::google::protobuf::uint32 group() const;
  void set_group(::google::protobuf::uint32 value);

  // optional .caffe.FillerParameter weight_filler = 7;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 7;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* mutable_weight_filler();
  ::caffe::FillerParameter* release_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 8;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 8;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* mutable_bias_filler();
  ::caffe::FillerParameter* release_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 15;
  ::caffe::ConvolutionParameter_Engine engine() const;
  void set_engine(::caffe::ConvolutionParameter_Engine value);

  // optional int32 axis = 16 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 16;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional bool force_nd_im2col = 17 [default = false];
  bool has_force_nd_im2col() const;
  void clear_force_nd_im2col();
  static const int kForceNdIm2ColFieldNumber = 17;
  bool force_nd_im2col() const;
  void set_force_nd_im2col(bool value);

  // @@protoc_insertion_point(class_scope:caffe.ConvolutionParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_pad_h();
  inline void clear_has_pad_h();
  inline void set_has_pad_w();
  inline void clear_has_pad_w();
  inline void set_has_kernel_h();
  inline void clear_has_kernel_h();
  inline void set_has_kernel_w();
  inline void clear_has_kernel_w();
  inline void set_has_stride_h();
  inline void clear_has_stride_h();
  inline void set_has_stride_w();
  inline void clear_has_stride_w();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_engine();
  inline void clear_has_engine();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_force_nd_im2col();
  inline void clear_has_force_nd_im2col();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pad_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kernel_size_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > stride_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dilation_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  bool bias_term_;
  bool force_nd_im2col_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  ::caffe::FillerParameter* weight_filler_;
  ::google::protobuf::uint32 group_;
  int engine_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ConvolutionParameter* default_instance_;
};
// -------------------------------------------------------------------

class CropParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.CropParameter) */ {
 public:
  CropParameter();
  virtual ~CropParameter();

  CropParameter(const CropParameter& from);

  inline CropParameter& operator=(const CropParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CropParameter& default_instance();

  void Swap(CropParameter* other);

  // implements Message ----------------------------------------------

  inline CropParameter* New() const { return New(NULL); }

  CropParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CropParameter& from);
  void MergeFrom(const CropParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CropParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 2];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 1;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // repeated uint32 offset = 2;
  int offset_size() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  ::google::protobuf::uint32 offset(int index) const;
  void set_offset(int index, ::google::protobuf::uint32 value);
  void add_offset(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      offset() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_offset();

  // @@protoc_insertion_point(class_scope:caffe.CropParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > offset_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static CropParameter* default_instance_;
};
// -------------------------------------------------------------------

class DataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DataParameter) */ {
 public:
  DataParameter();
  virtual ~DataParameter();

  DataParameter(const DataParameter& from);

  inline DataParameter& operator=(const DataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataParameter& default_instance();

  void Swap(DataParameter* other);

  // implements Message ----------------------------------------------

  inline DataParameter* New() const { return New(NULL); }

  DataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataParameter& from);
  void MergeFrom(const DataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DataParameter_DB DB;
  static const DB LEVELDB =
    DataParameter_DB_LEVELDB;
  static const DB LMDB =
    DataParameter_DB_LMDB;
  static inline bool DB_IsValid(int value) {
    return DataParameter_DB_IsValid(value);
  }
  static const DB DB_MIN =
    DataParameter_DB_DB_MIN;
  static const DB DB_MAX =
    DataParameter_DB_DB_MAX;
  static const int DB_ARRAYSIZE =
    DataParameter_DB_DB_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DB_descriptor() {
    return DataParameter_DB_descriptor();
  }
  static inline const ::std::string& DB_Name(DB value) {
    return DataParameter_DB_Name(value);
  }
  static inline bool DB_Parse(const ::std::string& name,
      DB* value) {
    return DataParameter_DB_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 4;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 7 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  ::google::protobuf::uint32 rand_skip() const;
  void set_rand_skip(::google::protobuf::uint32 value);

  // optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
  bool has_backend() const;
  void clear_backend();
  static const int kBackendFieldNumber = 8;
  ::caffe::DataParameter_DB backend() const;
  void set_backend(::caffe::DataParameter_DB value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // optional string mean_file = 3;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  ::google::protobuf::uint32 crop_size() const;
  void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  bool mirror() const;
  void set_mirror(bool value);

  // optional bool force_encoded_color = 9 [default = false];
  bool has_force_encoded_color() const;
  void clear_force_encoded_color();
  static const int kForceEncodedColorFieldNumber = 9;
  bool force_encoded_color() const;
  void set_force_encoded_color(bool value);

  // optional uint32 prefetch = 10 [default = 4];
  bool has_prefetch() const;
  void clear_prefetch();
  static const int kPrefetchFieldNumber = 10;
  ::google::protobuf::uint32 prefetch() const;
  void set_prefetch(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.DataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_backend();
  inline void clear_has_backend();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_force_encoded_color();
  inline void clear_has_force_encoded_color();
  inline void set_has_prefetch();
  inline void clear_has_prefetch();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 rand_skip_;
  int backend_;
  float scale_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  ::google::protobuf::uint32 crop_size_;
  bool mirror_;
  bool force_encoded_color_;
  ::google::protobuf::uint32 prefetch_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static DataParameter* default_instance_;
};
// -------------------------------------------------------------------

class DetectionEvaluateParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DetectionEvaluateParameter) */ {
 public:
  DetectionEvaluateParameter();
  virtual ~DetectionEvaluateParameter();

  DetectionEvaluateParameter(const DetectionEvaluateParameter& from);

  inline DetectionEvaluateParameter& operator=(const DetectionEvaluateParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectionEvaluateParameter& default_instance();

  void Swap(DetectionEvaluateParameter* other);

  // implements Message ----------------------------------------------

  inline DetectionEvaluateParameter* New() const { return New(NULL); }

  DetectionEvaluateParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectionEvaluateParameter& from);
  void MergeFrom(const DetectionEvaluateParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DetectionEvaluateParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_classes = 1;
  bool has_num_classes() const;
  void clear_num_classes();
  static const int kNumClassesFieldNumber = 1;
  ::google::protobuf::uint32 num_classes() const;
  void set_num_classes(::google::protobuf::uint32 value);

  // optional uint32 background_label_id = 2 [default = 0];
  bool has_background_label_id() const;
  void clear_background_label_id();
  static const int kBackgroundLabelIdFieldNumber = 2;
  ::google::protobuf::uint32 background_label_id() const;
  void set_background_label_id(::google::protobuf::uint32 value);

  // optional float overlap_threshold = 3 [default = 0.5];
  bool has_overlap_threshold() const;
  void clear_overlap_threshold();
  static const int kOverlapThresholdFieldNumber = 3;
  float overlap_threshold() const;
  void set_overlap_threshold(float value);

  // optional bool evaluate_difficult_gt = 4 [default = true];
  bool has_evaluate_difficult_gt() const;
  void clear_evaluate_difficult_gt();
  static const int kEvaluateDifficultGtFieldNumber = 4;
  bool evaluate_difficult_gt() const;
  void set_evaluate_difficult_gt(bool value);

  // optional string name_size_file = 5;
  bool has_name_size_file() const;
  void clear_name_size_file();
  static const int kNameSizeFileFieldNumber = 5;
  const ::std::string& name_size_file() const;
  void set_name_size_file(const ::std::string& value);
  void set_name_size_file(const char* value);
  void set_name_size_file(const char* value, size_t size);
  ::std::string* mutable_name_size_file();
  ::std::string* release_name_size_file();
  void set_allocated_name_size_file(::std::string* name_size_file);

  // optional bool pose_stat_enable = 6 [default = true];
  bool has_pose_stat_enable() const;
  void clear_pose_stat_enable();
  static const int kPoseStatEnableFieldNumber = 6;
  bool pose_stat_enable() const;
  void set_pose_stat_enable(bool value);

  // optional bool head_dir_stat_enable = 7 [default = true];
  bool has_head_dir_stat_enable() const;
  void clear_head_dir_stat_enable();
  static const int kHeadDirStatEnableFieldNumber = 7;
  bool head_dir_stat_enable() const;
  void set_head_dir_stat_enable(bool value);

  // optional bool torso_dir_stat_enable = 8 [default = true];
  bool has_torso_dir_stat_enable() const;
  void clear_torso_dir_stat_enable();
  static const int kTorsoDirStatEnableFieldNumber = 8;
  bool torso_dir_stat_enable() const;
  void set_torso_dir_stat_enable(bool value);

  // optional string name_to_label_file = 9;
  bool has_name_to_label_file() const;
  void clear_name_to_label_file();
  static const int kNameToLabelFileFieldNumber = 9;
  const ::std::string& name_to_label_file() const;
  void set_name_to_label_file(const ::std::string& value);
  void set_name_to_label_file(const char* value);
  void set_name_to_label_file(const char* value, size_t size);
  ::std::string* mutable_name_to_label_file();
  ::std::string* release_name_to_label_file();
  void set_allocated_name_to_label_file(::std::string* name_to_label_file);

  // repeated float boxsize_threshold = 10;
  int boxsize_threshold_size() const;
  void clear_boxsize_threshold();
  static const int kBoxsizeThresholdFieldNumber = 10;
  float boxsize_threshold(int index) const;
  void set_boxsize_threshold(int index, float value);
  void add_boxsize_threshold(float value);
  const ::google::protobuf::RepeatedField< float >&
      boxsize_threshold() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_boxsize_threshold();

  // repeated float iou_threshold = 11;
  int iou_threshold_size() const;
  void clear_iou_threshold();
  static const int kIouThresholdFieldNumber = 11;
  float iou_threshold(int index) const;
  void set_iou_threshold(int index, float value);
  void add_iou_threshold(float value);
  const ::google::protobuf::RepeatedField< float >&
      iou_threshold() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_iou_threshold();

  // repeated int32 gt_labels = 12;
  int gt_labels_size() const;
  void clear_gt_labels();
  static const int kGtLabelsFieldNumber = 12;
  ::google::protobuf::int32 gt_labels(int index) const;
  void set_gt_labels(int index, ::google::protobuf::int32 value);
  void add_gt_labels(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      gt_labels() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_gt_labels();

  // @@protoc_insertion_point(class_scope:caffe.DetectionEvaluateParameter)
 private:
  inline void set_has_num_classes();
  inline void clear_has_num_classes();
  inline void set_has_background_label_id();
  inline void clear_has_background_label_id();
  inline void set_has_overlap_threshold();
  inline void clear_has_overlap_threshold();
  inline void set_has_evaluate_difficult_gt();
  inline void clear_has_evaluate_difficult_gt();
  inline void set_has_name_size_file();
  inline void clear_has_name_size_file();
  inline void set_has_pose_stat_enable();
  inline void clear_has_pose_stat_enable();
  inline void set_has_head_dir_stat_enable();
  inline void clear_has_head_dir_stat_enable();
  inline void set_has_torso_dir_stat_enable();
  inline void clear_has_torso_dir_stat_enable();
  inline void set_has_name_to_label_file();
  inline void clear_has_name_to_label_file();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_classes_;
  ::google::protobuf::uint32 background_label_id_;
  ::google::protobuf::internal::ArenaStringPtr name_size_file_;
  float overlap_threshold_;
  bool evaluate_difficult_gt_;
  bool pose_stat_enable_;
  bool head_dir_stat_enable_;
  bool torso_dir_stat_enable_;
  ::google::protobuf::internal::ArenaStringPtr name_to_label_file_;
  ::google::protobuf::RepeatedField< float > boxsize_threshold_;
  ::google::protobuf::RepeatedField< float > iou_threshold_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > gt_labels_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static DetectionEvaluateParameter* default_instance_;
};
// -------------------------------------------------------------------

class McBoxLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.McBoxLossParameter) */ {
 public:
  McBoxLossParameter();
  virtual ~McBoxLossParameter();

  McBoxLossParameter(const McBoxLossParameter& from);

  inline McBoxLossParameter& operator=(const McBoxLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const McBoxLossParameter& default_instance();

  void Swap(McBoxLossParameter* other);

  // implements Message ----------------------------------------------

  inline McBoxLossParameter* New() const { return New(NULL); }

  McBoxLossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const McBoxLossParameter& from);
  void MergeFrom(const McBoxLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(McBoxLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef McBoxLossParameter_CodeLocType CodeLocType;
  static const CodeLocType YOLO =
    McBoxLossParameter_CodeLocType_YOLO;
  static const CodeLocType SSD =
    McBoxLossParameter_CodeLocType_SSD;
  static inline bool CodeLocType_IsValid(int value) {
    return McBoxLossParameter_CodeLocType_IsValid(value);
  }
  static const CodeLocType CodeLocType_MIN =
    McBoxLossParameter_CodeLocType_CodeLocType_MIN;
  static const CodeLocType CodeLocType_MAX =
    McBoxLossParameter_CodeLocType_CodeLocType_MAX;
  static const int CodeLocType_ARRAYSIZE =
    McBoxLossParameter_CodeLocType_CodeLocType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CodeLocType_descriptor() {
    return McBoxLossParameter_CodeLocType_descriptor();
  }
  static inline const ::std::string& CodeLocType_Name(CodeLocType value) {
    return McBoxLossParameter_CodeLocType_Name(value);
  }
  static inline bool CodeLocType_Parse(const ::std::string& name,
      CodeLocType* value) {
    return McBoxLossParameter_CodeLocType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 num_classes = 1 [default = 1];
  bool has_num_classes() const;
  void clear_num_classes();
  static const int kNumClassesFieldNumber = 1;
  ::google::protobuf::int32 num_classes() const;
  void set_num_classes(::google::protobuf::int32 value);

  // optional float overlap_threshold = 2 [default = 0.5];
  bool has_overlap_threshold() const;
  void clear_overlap_threshold();
  static const int kOverlapThresholdFieldNumber = 2;
  float overlap_threshold() const;
  void set_overlap_threshold(float value);

  // optional bool use_prior_for_matching = 3 [default = true];
  bool has_use_prior_for_matching() const;
  void clear_use_prior_for_matching();
  static const int kUsePriorForMatchingFieldNumber = 3;
  bool use_prior_for_matching() const;
  void set_use_prior_for_matching(bool value);

  // optional bool use_prior_for_init = 19 [default = false];
  bool has_use_prior_for_init() const;
  void clear_use_prior_for_init();
  static const int kUsePriorForInitFieldNumber = 19;
  bool use_prior_for_init() const;
  void set_use_prior_for_init(bool value);

  // optional bool use_difficult_gt = 4 [default = true];
  bool has_use_difficult_gt() const;
  void clear_use_difficult_gt();
  static const int kUseDifficultGtFieldNumber = 4;
  bool use_difficult_gt() const;
  void set_use_difficult_gt(bool value);

  // optional bool rescore = 5 [default = true];
  bool has_rescore() const;
  void clear_rescore();
  static const int kRescoreFieldNumber = 5;
  bool rescore() const;
  void set_rescore(bool value);

  // optional .caffe.McBoxLossParameter.CodeLocType code_loc_type = 20 [default = SSD];
  bool has_code_loc_type() const;
  void clear_code_loc_type();
  static const int kCodeLocTypeFieldNumber = 20;
  ::caffe::McBoxLossParameter_CodeLocType code_loc_type() const;
  void set_code_loc_type(::caffe::McBoxLossParameter_CodeLocType value);

  // optional int32 iters = 6 [default = 0];
  bool has_iters() const;
  void clear_iters();
  static const int kItersFieldNumber = 6;
  ::google::protobuf::int32 iters() const;
  void set_iters(::google::protobuf::int32 value);

  // optional int32 iter_using_bgboxes = 7 [default = 10000];
  bool has_iter_using_bgboxes() const;
  void clear_iter_using_bgboxes();
  static const int kIterUsingBgboxesFieldNumber = 7;
  ::google::protobuf::int32 iter_using_bgboxes() const;
  void set_iter_using_bgboxes(::google::protobuf::int32 value);

  // optional float background_box_loc_scale = 8 [default = 0.01];
  bool has_background_box_loc_scale() const;
  void clear_background_box_loc_scale();
  static const int kBackgroundBoxLocScaleFieldNumber = 8;
  float background_box_loc_scale() const;
  void set_background_box_loc_scale(float value);

  // optional float object_scale = 9 [default = 1];
  bool has_object_scale() const;
  void clear_object_scale();
  static const int kObjectScaleFieldNumber = 9;
  float object_scale() const;
  void set_object_scale(float value);

  // optional float noobject_scale = 10 [default = 1];
  bool has_noobject_scale() const;
  void clear_noobject_scale();
  static const int kNoobjectScaleFieldNumber = 10;
  float noobject_scale() const;
  void set_noobject_scale(float value);

  // optional float class_scale = 11 [default = 1];
  bool has_class_scale() const;
  void clear_class_scale();
  static const int kClassScaleFieldNumber = 11;
  float class_scale() const;
  void set_class_scale(float value);

  // optional float loc_scale = 12 [default = 1];
  bool has_loc_scale() const;
  void clear_loc_scale();
  static const int kLocScaleFieldNumber = 12;
  float loc_scale() const;
  void set_loc_scale(float value);

  // repeated float boxsize = 13;
  int boxsize_size() const;
  void clear_boxsize();
  static const int kBoxsizeFieldNumber = 13;
  float boxsize(int index) const;
  void set_boxsize(int index, float value);
  void add_boxsize(float value);
  const ::google::protobuf::RepeatedField< float >&
      boxsize() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_boxsize();

  // repeated float aspect_ratio = 14;
  int aspect_ratio_size() const;
  void clear_aspect_ratio();
  static const int kAspectRatioFieldNumber = 14;
  float aspect_ratio(int index) const;
  void set_aspect_ratio(int index, float value);
  void add_aspect_ratio(float value);
  const ::google::protobuf::RepeatedField< float >&
      aspect_ratio() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_aspect_ratio();

  // repeated float pwidth = 15;
  int pwidth_size() const;
  void clear_pwidth();
  static const int kPwidthFieldNumber = 15;
  float pwidth(int index) const;
  void set_pwidth(int index, float value);
  void add_pwidth(float value);
  const ::google::protobuf::RepeatedField< float >&
      pwidth() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_pwidth();

  // repeated float pheight = 16;
  int pheight_size() const;
  void clear_pheight();
  static const int kPheightFieldNumber = 16;
  float pheight(int index) const;
  void set_pheight(int index, float value);
  void add_pheight(float value);
  const ::google::protobuf::RepeatedField< float >&
      pheight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_pheight();

  // optional bool clip = 18 [default = true];
  bool has_clip() const;
  void clear_clip();
  static const int kClipFieldNumber = 18;
  bool clip() const;
  void set_clip(bool value);

  // optional int32 background_label_id = 17 [default = 0];
  bool has_background_label_id() const;
  void clear_background_label_id();
  static const int kBackgroundLabelIdFieldNumber = 17;
  ::google::protobuf::int32 background_label_id() const;
  void set_background_label_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.McBoxLossParameter)
 private:
  inline void set_has_num_classes();
  inline void clear_has_num_classes();
  inline void set_has_overlap_threshold();
  inline void clear_has_overlap_threshold();
  inline void set_has_use_prior_for_matching();
  inline void clear_has_use_prior_for_matching();
  inline void set_has_use_prior_for_init();
  inline void clear_has_use_prior_for_init();
  inline void set_has_use_difficult_gt();
  inline void clear_has_use_difficult_gt();
  inline void set_has_rescore();
  inline void clear_has_rescore();
  inline void set_has_code_loc_type();
  inline void clear_has_code_loc_type();
  inline void set_has_iters();
  inline void clear_has_iters();
  inline void set_has_iter_using_bgboxes();
  inline void clear_has_iter_using_bgboxes();
  inline void set_has_background_box_loc_scale();
  inline void clear_has_background_box_loc_scale();
  inline void set_has_object_scale();
  inline void clear_has_object_scale();
  inline void set_has_noobject_scale();
  inline void clear_has_noobject_scale();
  inline void set_has_class_scale();
  inline void clear_has_class_scale();
  inline void set_has_loc_scale();
  inline void clear_has_loc_scale();
  inline void set_has_clip();
  inline void clear_has_clip();
  inline void set_has_background_label_id();
  inline void clear_has_background_label_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 num_classes_;
  float overlap_threshold_;
  bool use_prior_for_matching_;
  bool use_prior_for_init_;
  bool use_difficult_gt_;
  bool rescore_;
  int code_loc_type_;
  ::google::protobuf::int32 iters_;
  ::google::protobuf::int32 iter_using_bgboxes_;
  float background_box_loc_scale_;
  float object_scale_;
  float noobject_scale_;
  float class_scale_;
  ::google::protobuf::RepeatedField< float > boxsize_;
  ::google::protobuf::RepeatedField< float > aspect_ratio_;
  float loc_scale_;
  bool clip_;
  ::google::protobuf::RepeatedField< float > pwidth_;
  ::google::protobuf::RepeatedField< float > pheight_;
  ::google::protobuf::int32 background_label_id_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static McBoxLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class NonMaximumSuppressionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NonMaximumSuppressionParameter) */ {
 public:
  NonMaximumSuppressionParameter();
  virtual ~NonMaximumSuppressionParameter();

  NonMaximumSuppressionParameter(const NonMaximumSuppressionParameter& from);

  inline NonMaximumSuppressionParameter& operator=(const NonMaximumSuppressionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NonMaximumSuppressionParameter& default_instance();

  void Swap(NonMaximumSuppressionParameter* other);

  // implements Message ----------------------------------------------

  inline NonMaximumSuppressionParameter* New() const { return New(NULL); }

  NonMaximumSuppressionParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NonMaximumSuppressionParameter& from);
  void MergeFrom(const NonMaximumSuppressionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NonMaximumSuppressionParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float nms_threshold = 1 [default = 0.3];
  bool has_nms_threshold() const;
  void clear_nms_threshold();
  static const int kNmsThresholdFieldNumber = 1;
  float nms_threshold() const;
  void set_nms_threshold(float value);

  // optional int32 top_k = 2;
  bool has_top_k() const;
  void clear_top_k();
  static const int kTopKFieldNumber = 2;
  ::google::protobuf::int32 top_k() const;
  void set_top_k(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.NonMaximumSuppressionParameter)
 private:
  inline void set_has_nms_threshold();
  inline void clear_has_nms_threshold();
  inline void set_has_top_k();
  inline void clear_has_top_k();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float nms_threshold_;
  ::google::protobuf::int32 top_k_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static NonMaximumSuppressionParameter* default_instance_;
};
// -------------------------------------------------------------------

class SaveOutputParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SaveOutputParameter) */ {
 public:
  SaveOutputParameter();
  virtual ~SaveOutputParameter();

  SaveOutputParameter(const SaveOutputParameter& from);

  inline SaveOutputParameter& operator=(const SaveOutputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveOutputParameter& default_instance();

  void Swap(SaveOutputParameter* other);

  // implements Message ----------------------------------------------

  inline SaveOutputParameter* New() const { return New(NULL); }

  SaveOutputParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveOutputParameter& from);
  void MergeFrom(const SaveOutputParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SaveOutputParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string output_directory = 1;
  bool has_output_directory() const;
  void clear_output_directory();
  static const int kOutputDirectoryFieldNumber = 1;
  const ::std::string& output_directory() const;
  void set_output_directory(const ::std::string& value);
  void set_output_directory(const char* value);
  void set_output_directory(const char* value, size_t size);
  ::std::string* mutable_output_directory();
  ::std::string* release_output_directory();
  void set_allocated_output_directory(::std::string* output_directory);

  // optional string output_name_prefix = 2;
  bool has_output_name_prefix() const;
  void clear_output_name_prefix();
  static const int kOutputNamePrefixFieldNumber = 2;
  const ::std::string& output_name_prefix() const;
  void set_output_name_prefix(const ::std::string& value);
  void set_output_name_prefix(const char* value);
  void set_output_name_prefix(const char* value, size_t size);
  ::std::string* mutable_output_name_prefix();
  ::std::string* release_output_name_prefix();
  void set_allocated_output_name_prefix(::std::string* output_name_prefix);

  // optional string output_format = 3;
  bool has_output_format() const;
  void clear_output_format();
  static const int kOutputFormatFieldNumber = 3;
  const ::std::string& output_format() const;
  void set_output_format(const ::std::string& value);
  void set_output_format(const char* value);
  void set_output_format(const char* value, size_t size);
  ::std::string* mutable_output_format();
  ::std::string* release_output_format();
  void set_allocated_output_format(::std::string* output_format);

  // optional string label_map_file = 4;
  bool has_label_map_file() const;
  void clear_label_map_file();
  static const int kLabelMapFileFieldNumber = 4;
  const ::std::string& label_map_file() const;
  void set_label_map_file(const ::std::string& value);
  void set_label_map_file(const char* value);
  void set_label_map_file(const char* value, size_t size);
  ::std::string* mutable_label_map_file();
  ::std::string* release_label_map_file();
  void set_allocated_label_map_file(::std::string* label_map_file);

  // optional string name_size_file = 5;
  bool has_name_size_file() const;
  void clear_name_size_file();
  static const int kNameSizeFileFieldNumber = 5;
  const ::std::string& name_size_file() const;
  void set_name_size_file(const ::std::string& value);
  void set_name_size_file(const char* value);
  void set_name_size_file(const char* value, size_t size);
  ::std::string* mutable_name_size_file();
  ::std::string* release_name_size_file();
  void set_allocated_name_size_file(::std::string* name_size_file);

  // optional uint32 num_test_image = 6;
  bool has_num_test_image() const;
  void clear_num_test_image();
  static const int kNumTestImageFieldNumber = 6;
  ::google::protobuf::uint32 num_test_image() const;
  void set_num_test_image(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.SaveOutputParameter)
 private:
  inline void set_has_output_directory();
  inline void clear_has_output_directory();
  inline void set_has_output_name_prefix();
  inline void clear_has_output_name_prefix();
  inline void set_has_output_format();
  inline void clear_has_output_format();
  inline void set_has_label_map_file();
  inline void clear_has_label_map_file();
  inline void set_has_name_size_file();
  inline void clear_has_name_size_file();
  inline void set_has_num_test_image();
  inline void clear_has_num_test_image();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr output_directory_;
  ::google::protobuf::internal::ArenaStringPtr output_name_prefix_;
  ::google::protobuf::internal::ArenaStringPtr output_format_;
  ::google::protobuf::internal::ArenaStringPtr label_map_file_;
  ::google::protobuf::internal::ArenaStringPtr name_size_file_;
  ::google::protobuf::uint32 num_test_image_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SaveOutputParameter* default_instance_;
};
// -------------------------------------------------------------------

class DetectionOutputParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DetectionOutputParameter) */ {
 public:
  DetectionOutputParameter();
  virtual ~DetectionOutputParameter();

  DetectionOutputParameter(const DetectionOutputParameter& from);

  inline DetectionOutputParameter& operator=(const DetectionOutputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectionOutputParameter& default_instance();

  void Swap(DetectionOutputParameter* other);

  // implements Message ----------------------------------------------

  inline DetectionOutputParameter* New() const { return New(NULL); }

  DetectionOutputParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectionOutputParameter& from);
  void MergeFrom(const DetectionOutputParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DetectionOutputParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DetectionOutputParameter_NmsType NmsType;
  static const NmsType Ori =
    DetectionOutputParameter_NmsType_Ori;
  static const NmsType Fast =
    DetectionOutputParameter_NmsType_Fast;
  static const NmsType FastVote =
    DetectionOutputParameter_NmsType_FastVote;
  static const NmsType OriSoft =
    DetectionOutputParameter_NmsType_OriSoft;
  static inline bool NmsType_IsValid(int value) {
    return DetectionOutputParameter_NmsType_IsValid(value);
  }
  static const NmsType NmsType_MIN =
    DetectionOutputParameter_NmsType_NmsType_MIN;
  static const NmsType NmsType_MAX =
    DetectionOutputParameter_NmsType_NmsType_MAX;
  static const int NmsType_ARRAYSIZE =
    DetectionOutputParameter_NmsType_NmsType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NmsType_descriptor() {
    return DetectionOutputParameter_NmsType_descriptor();
  }
  static inline const ::std::string& NmsType_Name(NmsType value) {
    return DetectionOutputParameter_NmsType_Name(value);
  }
  static inline bool NmsType_Parse(const ::std::string& name,
      NmsType* value) {
    return DetectionOutputParameter_NmsType_Parse(name, value);
  }

  typedef DetectionOutputParameter_SoftType SoftType;
  static const SoftType Power2 =
    DetectionOutputParameter_SoftType_Power2;
  static const SoftType Power3 =
    DetectionOutputParameter_SoftType_Power3;
  static const SoftType weight04 =
    DetectionOutputParameter_SoftType_weight04;
  static const SoftType weight04vote =
    DetectionOutputParameter_SoftType_weight04vote;
  static const SoftType Power2vote =
    DetectionOutputParameter_SoftType_Power2vote;
  static inline bool SoftType_IsValid(int value) {
    return DetectionOutputParameter_SoftType_IsValid(value);
  }
  static const SoftType SoftType_MIN =
    DetectionOutputParameter_SoftType_SoftType_MIN;
  static const SoftType SoftType_MAX =
    DetectionOutputParameter_SoftType_SoftType_MAX;
  static const int SoftType_ARRAYSIZE =
    DetectionOutputParameter_SoftType_SoftType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SoftType_descriptor() {
    return DetectionOutputParameter_SoftType_descriptor();
  }
  static inline const ::std::string& SoftType_Name(SoftType value) {
    return DetectionOutputParameter_SoftType_Name(value);
  }
  static inline bool SoftType_Parse(const ::std::string& name,
      SoftType* value) {
    return DetectionOutputParameter_SoftType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num_classes = 1;
  bool has_num_classes() const;
  void clear_num_classes();
  static const int kNumClassesFieldNumber = 1;
  ::google::protobuf::uint32 num_classes() const;
  void set_num_classes(::google::protobuf::uint32 value);

  // optional bool share_location = 2 [default = true];
  bool has_share_location() const;
  void clear_share_location();
  static const int kShareLocationFieldNumber = 2;
  bool share_location() const;
  void set_share_location(bool value);

  // optional int32 background_label_id = 3 [default = 0];
  bool has_background_label_id() const;
  void clear_background_label_id();
  static const int kBackgroundLabelIdFieldNumber = 3;
  ::google::protobuf::int32 background_label_id() const;
  void set_background_label_id(::google::protobuf::int32 value);

  // optional .caffe.NonMaximumSuppressionParameter nms_param = 4;
  bool has_nms_param() const;
  void clear_nms_param();
  static const int kNmsParamFieldNumber = 4;
  const ::caffe::NonMaximumSuppressionParameter& nms_param() const;
  ::caffe::NonMaximumSuppressionParameter* mutable_nms_param();
  ::caffe::NonMaximumSuppressionParameter* release_nms_param();
  void set_allocated_nms_param(::caffe::NonMaximumSuppressionParameter* nms_param);

  // optional .caffe.SaveOutputParameter save_output_param = 5;
  bool has_save_output_param() const;
  void clear_save_output_param();
  static const int kSaveOutputParamFieldNumber = 5;
  const ::caffe::SaveOutputParameter& save_output_param() const;
  ::caffe::SaveOutputParameter* mutable_save_output_param();
  ::caffe::SaveOutputParameter* release_save_output_param();
  void set_allocated_save_output_param(::caffe::SaveOutputParameter* save_output_param);

  // optional .caffe.PriorBoxParameter.CodeType code_type = 6 [default = CORNER];
  bool has_code_type() const;
  void clear_code_type();
  static const int kCodeTypeFieldNumber = 6;
  ::caffe::PriorBoxParameter_CodeType code_type() const;
  void set_code_type(::caffe::PriorBoxParameter_CodeType value);

  // optional bool variance_encoded_in_target = 8 [default = false];
  bool has_variance_encoded_in_target() const;
  void clear_variance_encoded_in_target();
  static const int kVarianceEncodedInTargetFieldNumber = 8;
  bool variance_encoded_in_target() const;
  void set_variance_encoded_in_target(bool value);

  // optional int32 keep_top_k = 7 [default = -1];
  bool has_keep_top_k() const;
  void clear_keep_top_k();
  static const int kKeepTopKFieldNumber = 7;
  ::google::protobuf::int32 keep_top_k() const;
  void set_keep_top_k(::google::protobuf::int32 value);

  // optional float confidence_threshold = 9;
  bool has_confidence_threshold() const;
  void clear_confidence_threshold();
  static const int kConfidenceThresholdFieldNumber = 9;
  float confidence_threshold() const;
  void set_confidence_threshold(float value);

  // optional bool visualize = 10 [default = false];
  bool has_visualize() const;
  void clear_visualize();
  static const int kVisualizeFieldNumber = 10;
  bool visualize() const;
  void set_visualize(bool value);

  // optional float visualize_threshold = 11;
  bool has_visualize_threshold() const;
  void clear_visualize_threshold();
  static const int kVisualizeThresholdFieldNumber = 11;
  float visualize_threshold() const;
  void set_visualize_threshold(float value);

  // optional .caffe.VisualizeParameter visual_param = 12;
  bool has_visual_param() const;
  void clear_visual_param();
  static const int kVisualParamFieldNumber = 12;
  const ::caffe::VisualizeParameter& visual_param() const;
  ::caffe::VisualizeParameter* mutable_visual_param();
  ::caffe::VisualizeParameter* release_visual_param();
  void set_allocated_visual_param(::caffe::VisualizeParameter* visual_param);

  // optional float conf_threshold = 13;
  bool has_conf_threshold() const;
  void clear_conf_threshold();
  static const int kConfThresholdFieldNumber = 13;
  float conf_threshold() const;
  void set_conf_threshold(float value);

  // optional float nms_threshold = 14;
  bool has_nms_threshold() const;
  void clear_nms_threshold();
  static const int kNmsThresholdFieldNumber = 14;
  float nms_threshold() const;
  void set_nms_threshold(float value);

  // optional float size_threshold = 15;
  bool has_size_threshold() const;
  void clear_size_threshold();
  static const int kSizeThresholdFieldNumber = 15;
  float size_threshold() const;
  void set_size_threshold(float value);

  // optional int32 top_k = 16 [default = 200];
  bool has_top_k() const;
  void clear_top_k();
  static const int kTopKFieldNumber = 16;
  ::google::protobuf::int32 top_k() const;
  void set_top_k(::google::protobuf::int32 value);

  // optional int32 alias_id = 17 [default = 0];
  bool has_alias_id() const;
  void clear_alias_id();
  static const int kAliasIdFieldNumber = 17;
  ::google::protobuf::int32 alias_id() const;
  void set_alias_id(::google::protobuf::int32 value);

  // optional string name_to_label_file = 18;
  bool has_name_to_label_file() const;
  void clear_name_to_label_file();
  static const int kNameToLabelFileFieldNumber = 18;
  const ::std::string& name_to_label_file() const;
  void set_name_to_label_file(const ::std::string& value);
  void set_name_to_label_file(const char* value);
  void set_name_to_label_file(const char* value, size_t size);
  ::std::string* mutable_name_to_label_file();
  ::std::string* release_name_to_label_file();
  void set_allocated_name_to_label_file(::std::string* name_to_label_file);

  // repeated int32 target_labels = 19;
  int target_labels_size() const;
  void clear_target_labels();
  static const int kTargetLabelsFieldNumber = 19;
  ::google::protobuf::int32 target_labels(int index) const;
  void set_target_labels(int index, ::google::protobuf::int32 value);
  void add_target_labels(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      target_labels() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_target_labels();

  // optional .caffe.MultiBoxLossParameter.ConfLossType conf_loss_type = 300;
  bool has_conf_loss_type() const;
  void clear_conf_loss_type();
  static const int kConfLossTypeFieldNumber = 300;
  ::caffe::MultiBoxLossParameter_ConfLossType conf_loss_type() const;
  void set_conf_loss_type(::caffe::MultiBoxLossParameter_ConfLossType value);

  // optional .caffe.MultiBoxLossParameter.MatchType match_type = 301;
  bool has_match_type() const;
  void clear_match_type();
  static const int kMatchTypeFieldNumber = 301;
  ::caffe::MultiBoxLossParameter_MatchType match_type() const;
  void set_match_type(::caffe::MultiBoxLossParameter_MatchType value);

  // optional bool flag_noperson = 302 [default = false];
  bool has_flag_noperson() const;
  void clear_flag_noperson();
  static const int kFlagNopersonFieldNumber = 302;
  bool flag_noperson() const;
  void set_flag_noperson(bool value);

  // repeated int32 gt_labels = 303;
  int gt_labels_size() const;
  void clear_gt_labels();
  static const int kGtLabelsFieldNumber = 303;
  ::google::protobuf::int32 gt_labels(int index) const;
  void set_gt_labels(int index, ::google::protobuf::int32 value);
  void add_gt_labels(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      gt_labels() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_gt_labels();

  // optional float overlap_threshold = 304 [default = 0.5];
  bool has_overlap_threshold() const;
  void clear_overlap_threshold();
  static const int kOverlapThresholdFieldNumber = 304;
  float overlap_threshold() const;
  void set_overlap_threshold(float value);

  // optional float neg_pos_ratio = 305 [default = 3];
  bool has_neg_pos_ratio() const;
  void clear_neg_pos_ratio();
  static const int kNegPosRatioFieldNumber = 305;
  float neg_pos_ratio() const;
  void set_neg_pos_ratio(float value);

  // optional float neg_overlap = 306 [default = 0.5];
  bool has_neg_overlap() const;
  void clear_neg_overlap();
  static const int kNegOverlapFieldNumber = 306;
  float neg_overlap() const;
  void set_neg_overlap(float value);

  // optional int32 img_w = 307;
  bool has_img_w() const;
  void clear_img_w();
  static const int kImgWFieldNumber = 307;
  ::google::protobuf::int32 img_w() const;
  void set_img_w(::google::protobuf::int32 value);

  // optional int32 img_h = 308;
  bool has_img_h() const;
  void clear_img_h();
  static const int kImgHFieldNumber = 308;
  ::google::protobuf::int32 img_h() const;
  void set_img_h(::google::protobuf::int32 value);

  // optional bool use_difficult_gt = 309 [default = false];
  bool has_use_difficult_gt() const;
  void clear_use_difficult_gt();
  static const int kUseDifficultGtFieldNumber = 309;
  bool use_difficult_gt() const;
  void set_use_difficult_gt(bool value);

  // optional .caffe.MultiBoxLossParameter.ConfLossType out_label_type = 310;
  bool has_out_label_type() const;
  void clear_out_label_type();
  static const int kOutLabelTypeFieldNumber = 310;
  ::caffe::MultiBoxLossParameter_ConfLossType out_label_type() const;
  void set_out_label_type(::caffe::MultiBoxLossParameter_ConfLossType value);

  // optional int32 num_positive_max = 311 [default = 128];
  bool has_num_positive_max() const;
  void clear_num_positive_max();
  static const int kNumPositiveMaxFieldNumber = 311;
  ::google::protobuf::int32 num_positive_max() const;
  void set_num_positive_max(::google::protobuf::int32 value);

  // optional int32 ndim_detout = 312 [default = 7];
  bool has_ndim_detout() const;
  void clear_ndim_detout();
  static const int kNdimDetoutFieldNumber = 312;
  ::google::protobuf::int32 ndim_detout() const;
  void set_ndim_detout(::google::protobuf::int32 value);

  // optional .caffe.DetectionOutputParameter.NmsType vote_or_not = 313 [default = FastVote];
  bool has_vote_or_not() const;
  void clear_vote_or_not();
  static const int kVoteOrNotFieldNumber = 313;
  ::caffe::DetectionOutputParameter_NmsType vote_or_not() const;
  void set_vote_or_not(::caffe::DetectionOutputParameter_NmsType value);

  // optional .caffe.DetectionOutputParameter.SoftType soft_type = 314;
  bool has_soft_type() const;
  void clear_soft_type();
  static const int kSoftTypeFieldNumber = 314;
  ::caffe::DetectionOutputParameter_SoftType soft_type() const;
  void set_soft_type(::caffe::DetectionOutputParameter_SoftType value);

  // optional float objectness_score = 315 [default = 0.99];
  bool has_objectness_score() const;
  void clear_objectness_score();
  static const int kObjectnessScoreFieldNumber = 315;
  float objectness_score() const;
  void set_objectness_score(float value);

  // @@protoc_insertion_point(class_scope:caffe.DetectionOutputParameter)
 private:
  inline void set_has_num_classes();
  inline void clear_has_num_classes();
  inline void set_has_share_location();
  inline void clear_has_share_location();
  inline void set_has_background_label_id();
  inline void clear_has_background_label_id();
  inline void set_has_nms_param();
  inline void clear_has_nms_param();
  inline void set_has_save_output_param();
  inline void clear_has_save_output_param();
  inline void set_has_code_type();
  inline void clear_has_code_type();
  inline void set_has_variance_encoded_in_target();
  inline void clear_has_variance_encoded_in_target();
  inline void set_has_keep_top_k();
  inline void clear_has_keep_top_k();
  inline void set_has_confidence_threshold();
  inline void clear_has_confidence_threshold();
  inline void set_has_visualize();
  inline void clear_has_visualize();
  inline void set_has_visualize_threshold();
  inline void clear_has_visualize_threshold();
  inline void set_has_visual_param();
  inline void clear_has_visual_param();
  inline void set_has_conf_threshold();
  inline void clear_has_conf_threshold();
  inline void set_has_nms_threshold();
  inline void clear_has_nms_threshold();
  inline void set_has_size_threshold();
  inline void clear_has_size_threshold();
  inline void set_has_top_k();
  inline void clear_has_top_k();
  inline void set_has_alias_id();
  inline void clear_has_alias_id();
  inline void set_has_name_to_label_file();
  inline void clear_has_name_to_label_file();
  inline void set_has_conf_loss_type();
  inline void clear_has_conf_loss_type();
  inline void set_has_match_type();
  inline void clear_has_match_type();
  inline void set_has_flag_noperson();
  inline void clear_has_flag_noperson();
  inline void set_has_overlap_threshold();
  inline void clear_has_overlap_threshold();
  inline void set_has_neg_pos_ratio();
  inline void clear_has_neg_pos_ratio();
  inline void set_has_neg_overlap();
  inline void clear_has_neg_overlap();
  inline void set_has_img_w();
  inline void clear_has_img_w();
  inline void set_has_img_h();
  inline void clear_has_img_h();
  inline void set_has_use_difficult_gt();
  inline void clear_has_use_difficult_gt();
  inline void set_has_out_label_type();
  inline void clear_has_out_label_type();
  inline void set_has_num_positive_max();
  inline void clear_has_num_positive_max();
  inline void set_has_ndim_detout();
  inline void clear_has_ndim_detout();
  inline void set_has_vote_or_not();
  inline void clear_has_vote_or_not();
  inline void set_has_soft_type();
  inline void clear_has_soft_type();
  inline void set_has_objectness_score();
  inline void clear_has_objectness_score();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::uint32 num_classes_;
  ::google::protobuf::int32 background_label_id_;
  ::caffe::NonMaximumSuppressionParameter* nms_param_;
  ::caffe::SaveOutputParameter* save_output_param_;
  int code_type_;
  ::google::protobuf::int32 keep_top_k_;
  float confidence_threshold_;
  bool share_location_;
  bool variance_encoded_in_target_;
  bool visualize_;
  bool flag_noperson_;
  ::caffe::VisualizeParameter* visual_param_;
  float visualize_threshold_;
  float conf_threshold_;
  float nms_threshold_;
  float size_threshold_;
  ::google::protobuf::int32 top_k_;
  ::google::protobuf::int32 alias_id_;
  ::google::protobuf::internal::ArenaStringPtr name_to_label_file_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > target_labels_;
  int conf_loss_type_;
  int match_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > gt_labels_;
  float overlap_threshold_;
  float neg_pos_ratio_;
  float neg_overlap_;
  ::google::protobuf::int32 img_w_;
  ::google::protobuf::int32 img_h_;
  bool use_difficult_gt_;
  int out_label_type_;
  ::google::protobuf::int32 num_positive_max_;
  ::google::protobuf::int32 ndim_detout_;
  int vote_or_not_;
  int soft_type_;
  float objectness_score_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static DetectionOutputParameter* default_instance_;
};
// -------------------------------------------------------------------

class DetectionMultiMcOutputParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DetectionMultiMcOutputParameter) */ {
 public:
  DetectionMultiMcOutputParameter();
  virtual ~DetectionMultiMcOutputParameter();

  DetectionMultiMcOutputParameter(const DetectionMultiMcOutputParameter& from);

  inline DetectionMultiMcOutputParameter& operator=(const DetectionMultiMcOutputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectionMultiMcOutputParameter& default_instance();

  void Swap(DetectionMultiMcOutputParameter* other);

  // implements Message ----------------------------------------------

  inline DetectionMultiMcOutputParameter* New() const { return New(NULL); }

  DetectionMultiMcOutputParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectionMultiMcOutputParameter& from);
  void MergeFrom(const DetectionMultiMcOutputParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DetectionMultiMcOutputParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_classes = 1;
  bool has_num_classes() const;
  void clear_num_classes();
  static const int kNumClassesFieldNumber = 1;
  ::google::protobuf::uint32 num_classes() const;
  void set_num_classes(::google::protobuf::uint32 value);

  // optional bool share_location = 2 [default = true];
  bool has_share_location() const;
  void clear_share_location();
  static const int kShareLocationFieldNumber = 2;
  bool share_location() const;
  void set_share_location(bool value);

  // optional int32 background_label_id = 3 [default = 0];
  bool has_background_label_id() const;
  void clear_background_label_id();
  static const int kBackgroundLabelIdFieldNumber = 3;
  ::google::protobuf::int32 background_label_id() const;
  void set_background_label_id(::google::protobuf::int32 value);

  // optional .caffe.NonMaximumSuppressionParameter nms_param = 4;
  bool has_nms_param() const;
  void clear_nms_param();
  static const int kNmsParamFieldNumber = 4;
  const ::caffe::NonMaximumSuppressionParameter& nms_param() const;
  ::caffe::NonMaximumSuppressionParameter* mutable_nms_param();
  ::caffe::NonMaximumSuppressionParameter* release_nms_param();
  void set_allocated_nms_param(::caffe::NonMaximumSuppressionParameter* nms_param);

  // optional .caffe.SaveOutputParameter save_output_param = 5;
  bool has_save_output_param() const;
  void clear_save_output_param();
  static const int kSaveOutputParamFieldNumber = 5;
  const ::caffe::SaveOutputParameter& save_output_param() const;
  ::caffe::SaveOutputParameter* mutable_save_output_param();
  ::caffe::SaveOutputParameter* release_save_output_param();
  void set_allocated_save_output_param(::caffe::SaveOutputParameter* save_output_param);

  // optional .caffe.PriorBoxParameter.CodeType code_type = 6 [default = CORNER];
  bool has_code_type() const;
  void clear_code_type();
  static const int kCodeTypeFieldNumber = 6;
  ::caffe::PriorBoxParameter_CodeType code_type() const;
  void set_code_type(::caffe::PriorBoxParameter_CodeType value);

  // optional bool variance_encoded_in_target = 8 [default = false];
  bool has_variance_encoded_in_target() const;
  void clear_variance_encoded_in_target();
  static const int kVarianceEncodedInTargetFieldNumber = 8;
  bool variance_encoded_in_target() const;
  void set_variance_encoded_in_target(bool value);

  // optional int32 keep_top_k = 7 [default = -1];
  bool has_keep_top_k() const;
  void clear_keep_top_k();
  static const int kKeepTopKFieldNumber = 7;
  ::google::protobuf::int32 keep_top_k() const;
  void set_keep_top_k(::google::protobuf::int32 value);

  // optional float confidence_threshold = 9;
  bool has_confidence_threshold() const;
  void clear_confidence_threshold();
  static const int kConfidenceThresholdFieldNumber = 9;
  float confidence_threshold() const;
  void set_confidence_threshold(float value);

  // optional bool visualize = 10 [default = false];
  bool has_visualize() const;
  void clear_visualize();
  static const int kVisualizeFieldNumber = 10;
  bool visualize() const;
  void set_visualize(bool value);

  // optional float visualize_threshold = 11;
  bool has_visualize_threshold() const;
  void clear_visualize_threshold();
  static const int kVisualizeThresholdFieldNumber = 11;
  float visualize_threshold() const;
  void set_visualize_threshold(float value);

  // optional .caffe.VisualizeParameter visual_param = 12;
  bool has_visual_param() const;
  void clear_visual_param();
  static const int kVisualParamFieldNumber = 12;
  const ::caffe::VisualizeParameter& visual_param() const;
  ::caffe::VisualizeParameter* mutable_visual_param();
  ::caffe::VisualizeParameter* release_visual_param();
  void set_allocated_visual_param(::caffe::VisualizeParameter* visual_param);

  // optional float conf_threshold = 22;
  bool has_conf_threshold() const;
  void clear_conf_threshold();
  static const int kConfThresholdFieldNumber = 22;
  float conf_threshold() const;
  void set_conf_threshold(float value);

  // optional float nms_threshold = 23;
  bool has_nms_threshold() const;
  void clear_nms_threshold();
  static const int kNmsThresholdFieldNumber = 23;
  float nms_threshold() const;
  void set_nms_threshold(float value);

  // optional float size_threshold = 24;
  bool has_size_threshold() const;
  void clear_size_threshold();
  static const int kSizeThresholdFieldNumber = 24;
  float size_threshold() const;
  void set_size_threshold(float value);

  // optional int32 top_k = 43 [default = 25];
  bool has_top_k() const;
  void clear_top_k();
  static const int kTopKFieldNumber = 43;
  ::google::protobuf::int32 top_k() const;
  void set_top_k(::google::protobuf::int32 value);

  // optional string name_to_label_file = 26;
  bool has_name_to_label_file() const;
  void clear_name_to_label_file();
  static const int kNameToLabelFileFieldNumber = 26;
  const ::std::string& name_to_label_file() const;
  void set_name_to_label_file(const ::std::string& value);
  void set_name_to_label_file(const char* value);
  void set_name_to_label_file(const char* value, size_t size);
  ::std::string* mutable_name_to_label_file();
  ::std::string* release_name_to_label_file();
  void set_allocated_name_to_label_file(::std::string* name_to_label_file);

  // @@protoc_insertion_point(class_scope:caffe.DetectionMultiMcOutputParameter)
 private:
  inline void set_has_num_classes();
  inline void clear_has_num_classes();
  inline void set_has_share_location();
  inline void clear_has_share_location();
  inline void set_has_background_label_id();
  inline void clear_has_background_label_id();
  inline void set_has_nms_param();
  inline void clear_has_nms_param();
  inline void set_has_save_output_param();
  inline void clear_has_save_output_param();
  inline void set_has_code_type();
  inline void clear_has_code_type();
  inline void set_has_variance_encoded_in_target();
  inline void clear_has_variance_encoded_in_target();
  inline void set_has_keep_top_k();
  inline void clear_has_keep_top_k();
  inline void set_has_confidence_threshold();
  inline void clear_has_confidence_threshold();
  inline void set_has_visualize();
  inline void clear_has_visualize();
  inline void set_has_visualize_threshold();
  inline void clear_has_visualize_threshold();
  inline void set_has_visual_param();
  inline void clear_has_visual_param();
  inline void set_has_conf_threshold();
  inline void clear_has_conf_threshold();
  inline void set_has_nms_threshold();
  inline void clear_has_nms_threshold();
  inline void set_has_size_threshold();
  inline void clear_has_size_threshold();
  inline void set_has_top_k();
  inline void clear_has_top_k();
  inline void set_has_name_to_label_file();
  inline void clear_has_name_to_label_file();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_classes_;
  ::google::protobuf::int32 background_label_id_;
  ::caffe::NonMaximumSuppressionParameter* nms_param_;
  ::caffe::SaveOutputParameter* save_output_param_;
  int code_type_;
  bool share_location_;
  bool variance_encoded_in_target_;
  bool visualize_;
  ::google::protobuf::int32 keep_top_k_;
  float confidence_threshold_;
  ::caffe::VisualizeParameter* visual_param_;
  float visualize_threshold_;
  float conf_threshold_;
  float nms_threshold_;
  float size_threshold_;
  ::google::protobuf::internal::ArenaStringPtr name_to_label_file_;
  ::google::protobuf::int32 top_k_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static DetectionMultiMcOutputParameter* default_instance_;
};
// -------------------------------------------------------------------

class DetectionMcOutputParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DetectionMcOutputParameter) */ {
 public:
  DetectionMcOutputParameter();
  virtual ~DetectionMcOutputParameter();

  DetectionMcOutputParameter(const DetectionMcOutputParameter& from);

  inline DetectionMcOutputParameter& operator=(const DetectionMcOutputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectionMcOutputParameter& default_instance();

  void Swap(DetectionMcOutputParameter* other);

  // implements Message ----------------------------------------------

  inline DetectionMcOutputParameter* New() const { return New(NULL); }

  DetectionMcOutputParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectionMcOutputParameter& from);
  void MergeFrom(const DetectionMcOutputParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DetectionMcOutputParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 num_classes = 1 [default = 1];
  bool has_num_classes() const;
  void clear_num_classes();
  static const int kNumClassesFieldNumber = 1;
  ::google::protobuf::int32 num_classes() const;
  void set_num_classes(::google::protobuf::int32 value);

  // optional float conf_threshold = 2 [default = 0.5];
  bool has_conf_threshold() const;
  void clear_conf_threshold();
  static const int kConfThresholdFieldNumber = 2;
  float conf_threshold() const;
  void set_conf_threshold(float value);

  // optional float nms_threshold = 3 [default = 0.4];
  bool has_nms_threshold() const;
  void clear_nms_threshold();
  static const int kNmsThresholdFieldNumber = 3;
  float nms_threshold() const;
  void set_nms_threshold(float value);

  // optional float boxsize_threshold = 4 [default = 0];
  bool has_boxsize_threshold() const;
  void clear_boxsize_threshold();
  static const int kBoxsizeThresholdFieldNumber = 4;
  float boxsize_threshold() const;
  void set_boxsize_threshold(float value);

  // optional int32 top_k = 5 [default = 100];
  bool has_top_k() const;
  void clear_top_k();
  static const int kTopKFieldNumber = 5;
  ::google::protobuf::int32 top_k() const;
  void set_top_k(::google::protobuf::int32 value);

  // repeated float boxsize = 6;
  int boxsize_size() const;
  void clear_boxsize();
  static const int kBoxsizeFieldNumber = 6;
  float boxsize(int index) const;
  void set_boxsize(int index, float value);
  void add_boxsize(float value);
  const ::google::protobuf::RepeatedField< float >&
      boxsize() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_boxsize();

  // repeated float aspect_ratio = 7;
  int aspect_ratio_size() const;
  void clear_aspect_ratio();
  static const int kAspectRatioFieldNumber = 7;
  float aspect_ratio(int index) const;
  void set_aspect_ratio(int index, float value);
  void add_aspect_ratio(float value);
  const ::google::protobuf::RepeatedField< float >&
      aspect_ratio() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_aspect_ratio();

  // repeated float pwidth = 8;
  int pwidth_size() const;
  void clear_pwidth();
  static const int kPwidthFieldNumber = 8;
  float pwidth(int index) const;
  void set_pwidth(int index, float value);
  void add_pwidth(float value);
  const ::google::protobuf::RepeatedField< float >&
      pwidth() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_pwidth();

  // repeated float pheight = 9;
  int pheight_size() const;
  void clear_pheight();
  static const int kPheightFieldNumber = 9;
  float pheight(int index) const;
  void set_pheight(int index, float value);
  void add_pheight(float value);
  const ::google::protobuf::RepeatedField< float >&
      pheight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_pheight();

  // optional .caffe.McBoxLossParameter.CodeLocType code_loc_type = 13 [default = SSD];
  bool has_code_loc_type() const;
  void clear_code_loc_type();
  static const int kCodeLocTypeFieldNumber = 13;
  ::caffe::McBoxLossParameter_CodeLocType code_loc_type() const;
  void set_code_loc_type(::caffe::McBoxLossParameter_CodeLocType value);

  // optional bool clip = 12 [default = true];
  bool has_clip() const;
  void clear_clip();
  static const int kClipFieldNumber = 12;
  bool clip() const;
  void set_clip(bool value);

  // optional .caffe.VisualizeParameter visual_param = 10;
  bool has_visual_param() const;
  void clear_visual_param();
  static const int kVisualParamFieldNumber = 10;
  const ::caffe::VisualizeParameter& visual_param() const;
  ::caffe::VisualizeParameter* mutable_visual_param();
  ::caffe::VisualizeParameter* release_visual_param();
  void set_allocated_visual_param(::caffe::VisualizeParameter* visual_param);

  // @@protoc_insertion_point(class_scope:caffe.DetectionMcOutputParameter)
 private:
  inline void set_has_num_classes();
  inline void clear_has_num_classes();
  inline void set_has_conf_threshold();
  inline void clear_has_conf_threshold();
  inline void set_has_nms_threshold();
  inline void clear_has_nms_threshold();
  inline void set_has_boxsize_threshold();
  inline void clear_has_boxsize_threshold();
  inline void set_has_top_k();
  inline void clear_has_top_k();
  inline void set_has_code_loc_type();
  inline void clear_has_code_loc_type();
  inline void set_has_clip();
  inline void clear_has_clip();
  inline void set_has_visual_param();
  inline void clear_has_visual_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 num_classes_;
  float conf_threshold_;
  float nms_threshold_;
  float boxsize_threshold_;
  ::google::protobuf::RepeatedField< float > boxsize_;
  ::google::protobuf::RepeatedField< float > aspect_ratio_;
  ::google::protobuf::int32 top_k_;
  int code_loc_type_;
  ::google::protobuf::RepeatedField< float > pwidth_;
  ::google::protobuf::RepeatedField< float > pheight_;
  ::caffe::VisualizeParameter* visual_param_;
  bool clip_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static DetectionMcOutputParameter* default_instance_;
};
// -------------------------------------------------------------------

class DropoutParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DropoutParameter) */ {
 public:
  DropoutParameter();
  virtual ~DropoutParameter();

  DropoutParameter(const DropoutParameter& from);

  inline DropoutParameter& operator=(const DropoutParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropoutParameter& default_instance();

  void Swap(DropoutParameter* other);

  // implements Message ----------------------------------------------

  inline DropoutParameter* New() const { return New(NULL); }

  DropoutParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DropoutParameter& from);
  void MergeFrom(const DropoutParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DropoutParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float dropout_ratio = 1 [default = 0.5];
  bool has_dropout_ratio() const;
  void clear_dropout_ratio();
  static const int kDropoutRatioFieldNumber = 1;
  float dropout_ratio() const;
  void set_dropout_ratio(float value);

  // @@protoc_insertion_point(class_scope:caffe.DropoutParameter)
 private:
  inline void set_has_dropout_ratio();
  inline void clear_has_dropout_ratio();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float dropout_ratio_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static DropoutParameter* default_instance_;
};
// -------------------------------------------------------------------

class DummyDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DummyDataParameter) */ {
 public:
  DummyDataParameter();
  virtual ~DummyDataParameter();

  DummyDataParameter(const DummyDataParameter& from);

  inline DummyDataParameter& operator=(const DummyDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DummyDataParameter& default_instance();

  void Swap(DummyDataParameter* other);

  // implements Message ----------------------------------------------

  inline DummyDataParameter* New() const { return New(NULL); }

  DummyDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DummyDataParameter& from);
  void MergeFrom(const DummyDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DummyDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.FillerParameter data_filler = 1;
  int data_filler_size() const;
  void clear_data_filler();
  static const int kDataFillerFieldNumber = 1;
  const ::caffe::FillerParameter& data_filler(int index) const;
  ::caffe::FillerParameter* mutable_data_filler(int index);
  ::caffe::FillerParameter* add_data_filler();
  ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >*
      mutable_data_filler();
  const ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >&
      data_filler() const;

  // repeated .caffe.BlobShape shape = 6;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 6;
  const ::caffe::BlobShape& shape(int index) const;
  ::caffe::BlobShape* mutable_shape(int index);
  ::caffe::BlobShape* add_shape();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
      mutable_shape();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
      shape() const;

  // repeated uint32 num = 2;
  int num_size() const;
  void clear_num();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::uint32 num(int index) const;
  void set_num(int index, ::google::protobuf::uint32 value);
  void add_num(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      num() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_num();

  // repeated uint32 channels = 3;
  int channels_size() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 3;
  ::google::protobuf::uint32 channels(int index) const;
  void set_channels(int index, ::google::protobuf::uint32 value);
  void add_channels(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      channels() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_channels();

  // repeated uint32 height = 4;
  int height_size() const;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::uint32 height(int index) const;
  void set_height(int index, ::google::protobuf::uint32 value);
  void add_height(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      height() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_height();

  // repeated uint32 width = 5;
  int width_size() const;
  void clear_width();
  static const int kWidthFieldNumber = 5;
  ::google::protobuf::uint32 width(int index) const;
  void set_width(int index, ::google::protobuf::uint32 value);
  void add_width(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      width() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_width();

  // @@protoc_insertion_point(class_scope:caffe.DummyDataParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter > data_filler_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape > shape_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > channels_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > height_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > width_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static DummyDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class EltwiseParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.EltwiseParameter) */ {
 public:
  EltwiseParameter();
  virtual ~EltwiseParameter();

  EltwiseParameter(const EltwiseParameter& from);

  inline EltwiseParameter& operator=(const EltwiseParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EltwiseParameter& default_instance();

  void Swap(EltwiseParameter* other);

  // implements Message ----------------------------------------------

  inline EltwiseParameter* New() const { return New(NULL); }

  EltwiseParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EltwiseParameter& from);
  void MergeFrom(const EltwiseParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EltwiseParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EltwiseParameter_EltwiseOp EltwiseOp;
  static const EltwiseOp PROD =
    EltwiseParameter_EltwiseOp_PROD;
  static const EltwiseOp SUM =
    EltwiseParameter_EltwiseOp_SUM;
  static const EltwiseOp MAX =
    EltwiseParameter_EltwiseOp_MAX;
  static inline bool EltwiseOp_IsValid(int value) {
    return EltwiseParameter_EltwiseOp_IsValid(value);
  }
  static const EltwiseOp EltwiseOp_MIN =
    EltwiseParameter_EltwiseOp_EltwiseOp_MIN;
  static const EltwiseOp EltwiseOp_MAX =
    EltwiseParameter_EltwiseOp_EltwiseOp_MAX;
  static const int EltwiseOp_ARRAYSIZE =
    EltwiseParameter_EltwiseOp_EltwiseOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EltwiseOp_descriptor() {
    return EltwiseParameter_EltwiseOp_descriptor();
  }
  static inline const ::std::string& EltwiseOp_Name(EltwiseOp value) {
    return EltwiseParameter_EltwiseOp_Name(value);
  }
  static inline bool EltwiseOp_Parse(const ::std::string& name,
      EltwiseOp* value) {
    return EltwiseParameter_EltwiseOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::caffe::EltwiseParameter_EltwiseOp operation() const;
  void set_operation(::caffe::EltwiseParameter_EltwiseOp value);

  // repeated float coeff = 2;
  int coeff_size() const;
  void clear_coeff();
  static const int kCoeffFieldNumber = 2;
  float coeff(int index) const;
  void set_coeff(int index, float value);
  void add_coeff(float value);
  const ::google::protobuf::RepeatedField< float >&
      coeff() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_coeff();

  // optional bool stable_prod_grad = 3 [default = true];
  bool has_stable_prod_grad() const;
  void clear_stable_prod_grad();
  static const int kStableProdGradFieldNumber = 3;
  bool stable_prod_grad() const;
  void set_stable_prod_grad(bool value);

  // @@protoc_insertion_point(class_scope:caffe.EltwiseParameter)
 private:
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_stable_prod_grad();
  inline void clear_has_stable_prod_grad();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > coeff_;
  int operation_;
  bool stable_prod_grad_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static EltwiseParameter* default_instance_;
};
// -------------------------------------------------------------------

class ELUParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ELUParameter) */ {
 public:
  ELUParameter();
  virtual ~ELUParameter();

  ELUParameter(const ELUParameter& from);

  inline ELUParameter& operator=(const ELUParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ELUParameter& default_instance();

  void Swap(ELUParameter* other);

  // implements Message ----------------------------------------------

  inline ELUParameter* New() const { return New(NULL); }

  ELUParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ELUParameter& from);
  void MergeFrom(const ELUParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ELUParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float alpha = 1 [default = 1];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 1;
  float alpha() const;
  void set_alpha(float value);

  // @@protoc_insertion_point(class_scope:caffe.ELUParameter)
 private:
  inline void set_has_alpha();
  inline void clear_has_alpha();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float alpha_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ELUParameter* default_instance_;
};
// -------------------------------------------------------------------

class EmbedParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.EmbedParameter) */ {
 public:
  EmbedParameter();
  virtual ~EmbedParameter();

  EmbedParameter(const EmbedParameter& from);

  inline EmbedParameter& operator=(const EmbedParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmbedParameter& default_instance();

  void Swap(EmbedParameter* other);

  // implements Message ----------------------------------------------

  inline EmbedParameter* New() const { return New(NULL); }

  EmbedParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmbedParameter& from);
  void MergeFrom(const EmbedParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EmbedParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional uint32 input_dim = 2;
  bool has_input_dim() const;
  void clear_input_dim();
  static const int kInputDimFieldNumber = 2;
  ::google::protobuf::uint32 input_dim() const;
  void set_input_dim(::google::protobuf::uint32 value);

  // optional bool bias_term = 3 [default = true];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 3;
  bool bias_term() const;
  void set_bias_term(bool value);

  // optional .caffe.FillerParameter weight_filler = 4;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 4;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* mutable_weight_filler();
  ::caffe::FillerParameter* release_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 5;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 5;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* mutable_bias_filler();
  ::caffe::FillerParameter* release_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // @@protoc_insertion_point(class_scope:caffe.EmbedParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_input_dim();
  inline void clear_has_input_dim();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 input_dim_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  bool bias_term_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static EmbedParameter* default_instance_;
};
// -------------------------------------------------------------------

class ExpParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ExpParameter) */ {
 public:
  ExpParameter();
  virtual ~ExpParameter();

  ExpParameter(const ExpParameter& from);

  inline ExpParameter& operator=(const ExpParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExpParameter& default_instance();

  void Swap(ExpParameter* other);

  // implements Message ----------------------------------------------

  inline ExpParameter* New() const { return New(NULL); }

  ExpParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExpParameter& from);
  void MergeFrom(const ExpParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExpParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float base = 1 [default = -1];
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  float base() const;
  void set_base(float value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  void clear_shift();
  static const int kShiftFieldNumber = 3;
  float shift() const;
  void set_shift(float value);

  // @@protoc_insertion_point(class_scope:caffe.ExpParameter)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_shift();
  inline void clear_has_shift();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float base_;
  float scale_;
  float shift_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ExpParameter* default_instance_;
};
// -------------------------------------------------------------------

class EasymatchParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.EasymatchParameter) */ {
 public:
  EasymatchParameter();
  virtual ~EasymatchParameter();

  EasymatchParameter(const EasymatchParameter& from);

  inline EasymatchParameter& operator=(const EasymatchParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EasymatchParameter& default_instance();

  void Swap(EasymatchParameter* other);

  // implements Message ----------------------------------------------

  inline EasymatchParameter* New() const { return New(NULL); }

  EasymatchParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EasymatchParameter& from);
  void MergeFrom(const EasymatchParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EasymatchParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float match_iou_thre = 1 [default = 0.5];
  bool has_match_iou_thre() const;
  void clear_match_iou_thre();
  static const int kMatchIouThreFieldNumber = 1;
  float match_iou_thre() const;
  void set_match_iou_thre(float value);

  // optional float edge_gap = 2 [default = 0.01];
  bool has_edge_gap() const;
  void clear_edge_gap();
  static const int kEdgeGapFieldNumber = 2;
  float edge_gap() const;
  void set_edge_gap(float value);

  // @@protoc_insertion_point(class_scope:caffe.EasymatchParameter)
 private:
  inline void set_has_match_iou_thre();
  inline void clear_has_match_iou_thre();
  inline void set_has_edge_gap();
  inline void clear_has_edge_gap();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float match_iou_thre_;
  float edge_gap_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static EasymatchParameter* default_instance_;
};
// -------------------------------------------------------------------

class MatchParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MatchParameter) */ {
 public:
  MatchParameter();
  virtual ~MatchParameter();

  MatchParameter(const MatchParameter& from);

  inline MatchParameter& operator=(const MatchParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchParameter& default_instance();

  void Swap(MatchParameter* other);

  // implements Message ----------------------------------------------

  inline MatchParameter* New() const { return New(NULL); }

  MatchParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchParameter& from);
  void MergeFrom(const MatchParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatchParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float momentum = 1 [default = 0.5];
  bool has_momentum() const;
  void clear_momentum();
  static const int kMomentumFieldNumber = 1;
  float momentum() const;
  void set_momentum(float value);

  // @@protoc_insertion_point(class_scope:caffe.MatchParameter)
 private:
  inline void set_has_momentum();
  inline void clear_has_momentum();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float momentum_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static MatchParameter* default_instance_;
};
// -------------------------------------------------------------------

class FlattenParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.FlattenParameter) */ {
 public:
  FlattenParameter();
  virtual ~FlattenParameter();

  FlattenParameter(const FlattenParameter& from);

  inline FlattenParameter& operator=(const FlattenParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlattenParameter& default_instance();

  void Swap(FlattenParameter* other);

  // implements Message ----------------------------------------------

  inline FlattenParameter* New() const { return New(NULL); }

  FlattenParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlattenParameter& from);
  void MergeFrom(const FlattenParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FlattenParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 1;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional int32 end_axis = 2 [default = -1];
  bool has_end_axis() const;
  void clear_end_axis();
  static const int kEndAxisFieldNumber = 2;
  ::google::protobuf::int32 end_axis() const;
  void set_end_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.FlattenParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_end_axis();
  inline void clear_has_end_axis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 end_axis_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static FlattenParameter* default_instance_;
};
// -------------------------------------------------------------------

class GradClipParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.GradClipParameter) */ {
 public:
  GradClipParameter();
  virtual ~GradClipParameter();

  GradClipParameter(const GradClipParameter& from);

  inline GradClipParameter& operator=(const GradClipParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GradClipParameter& default_instance();

  void Swap(GradClipParameter* other);

  // implements Message ----------------------------------------------

  inline GradClipParameter* New() const { return New(NULL); }

  GradClipParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GradClipParameter& from);
  void MergeFrom(const GradClipParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GradClipParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float scale = 1 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 1;
  float scale() const;
  void set_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.GradClipParameter)
 private:
  inline void set_has_scale();
  inline void clear_has_scale();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float scale_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static GradClipParameter* default_instance_;
};
// -------------------------------------------------------------------

class HDF5DataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.HDF5DataParameter) */ {
 public:
  HDF5DataParameter();
  virtual ~HDF5DataParameter();

  HDF5DataParameter(const HDF5DataParameter& from);

  inline HDF5DataParameter& operator=(const HDF5DataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HDF5DataParameter& default_instance();

  void Swap(HDF5DataParameter* other);

  // implements Message ----------------------------------------------

  inline HDF5DataParameter* New() const { return New(NULL); }

  HDF5DataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HDF5DataParameter& from);
  void MergeFrom(const HDF5DataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HDF5DataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 2;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 2;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional bool shuffle = 3 [default = false];
  bool has_shuffle() const;
  void clear_shuffle();
  static const int kShuffleFieldNumber = 3;
  bool shuffle() const;
  void set_shuffle(bool value);

  // @@protoc_insertion_point(class_scope:caffe.HDF5DataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::uint32 batch_size_;
  bool shuffle_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static HDF5DataParameter* default_instance_;
};
// -------------------------------------------------------------------

class HDF5OutputParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.HDF5OutputParameter) */ {
 public:
  HDF5OutputParameter();
  virtual ~HDF5OutputParameter();

  HDF5OutputParameter(const HDF5OutputParameter& from);

  inline HDF5OutputParameter& operator=(const HDF5OutputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HDF5OutputParameter& default_instance();

  void Swap(HDF5OutputParameter* other);

  // implements Message ----------------------------------------------

  inline HDF5OutputParameter* New() const { return New(NULL); }

  HDF5OutputParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HDF5OutputParameter& from);
  void MergeFrom(const HDF5OutputParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HDF5OutputParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 1;
  bool has_file_name() const;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // @@protoc_insertion_point(class_scope:caffe.HDF5OutputParameter)
 private:
  inline void set_has_file_name();
  inline void clear_has_file_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static HDF5OutputParameter* default_instance_;
};
// -------------------------------------------------------------------

class HingeLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.HingeLossParameter) */ {
 public:
  HingeLossParameter();
  virtual ~HingeLossParameter();

  HingeLossParameter(const HingeLossParameter& from);

  inline HingeLossParameter& operator=(const HingeLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HingeLossParameter& default_instance();

  void Swap(HingeLossParameter* other);

  // implements Message ----------------------------------------------

  inline HingeLossParameter* New() const { return New(NULL); }

  HingeLossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HingeLossParameter& from);
  void MergeFrom(const HingeLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HingeLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef HingeLossParameter_Norm Norm;
  static const Norm L1 =
    HingeLossParameter_Norm_L1;
  static const Norm L2 =
    HingeLossParameter_Norm_L2;
  static inline bool Norm_IsValid(int value) {
    return HingeLossParameter_Norm_IsValid(value);
  }
  static const Norm Norm_MIN =
    HingeLossParameter_Norm_Norm_MIN;
  static const Norm Norm_MAX =
    HingeLossParameter_Norm_Norm_MAX;
  static const int Norm_ARRAYSIZE =
    HingeLossParameter_Norm_Norm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Norm_descriptor() {
    return HingeLossParameter_Norm_descriptor();
  }
  static inline const ::std::string& Norm_Name(Norm value) {
    return HingeLossParameter_Norm_Name(value);
  }
  static inline bool Norm_Parse(const ::std::string& name,
      Norm* value) {
    return HingeLossParameter_Norm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
  bool has_norm() const;
  void clear_norm();
  static const int kNormFieldNumber = 1;
  ::caffe::HingeLossParameter_Norm norm() const;
  void set_norm(::caffe::HingeLossParameter_Norm value);

  // @@protoc_insertion_point(class_scope:caffe.HingeLossParameter)
 private:
  inline void set_has_norm();
  inline void clear_has_norm();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int norm_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static HingeLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class FocusLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.FocusLossParameter) */ {
 public:
  FocusLossParameter();
  virtual ~FocusLossParameter();

  FocusLossParameter(const FocusLossParameter& from);

  inline FocusLossParameter& operator=(const FocusLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FocusLossParameter& default_instance();

  void Swap(FocusLossParameter* other);

  // implements Message ----------------------------------------------

  inline FocusLossParameter* New() const { return New(NULL); }

  FocusLossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FocusLossParameter& from);
  void MergeFrom(const FocusLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FocusLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float gama = 1 [default = 0];
  bool has_gama() const;
  void clear_gama();
  static const int kGamaFieldNumber = 1;
  float gama() const;
  void set_gama(float value);

  // optional float alpha = 2 [default = 0.5];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 2;
  float alpha() const;
  void set_alpha(float value);

  // @@protoc_insertion_point(class_scope:caffe.FocusLossParameter)
 private:
  inline void set_has_gama();
  inline void clear_has_gama();
  inline void set_has_alpha();
  inline void clear_has_alpha();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float gama_;
  float alpha_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static FocusLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class ImageDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ImageDataParameter) */ {
 public:
  ImageDataParameter();
  virtual ~ImageDataParameter();

  ImageDataParameter(const ImageDataParameter& from);

  inline ImageDataParameter& operator=(const ImageDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageDataParameter& default_instance();

  void Swap(ImageDataParameter* other);

  // implements Message ----------------------------------------------

  inline ImageDataParameter* New() const { return New(NULL); }

  ImageDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageDataParameter& from);
  void MergeFrom(const ImageDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImageDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional uint32 batch_size = 4 [default = 1];
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 rand_skip = 7 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 7;
  ::google::protobuf::uint32 rand_skip() const;
  void set_rand_skip(::google::protobuf::uint32 value);

  // optional bool shuffle = 8 [default = false];
  bool has_shuffle() const;
  void clear_shuffle();
  static const int kShuffleFieldNumber = 8;
  bool shuffle() const;
  void set_shuffle(bool value);

  // optional uint32 new_height = 9 [default = 0];
  bool has_new_height() const;
  void clear_new_height();
  static const int kNewHeightFieldNumber = 9;
  ::google::protobuf::uint32 new_height() const;
  void set_new_height(::google::protobuf::uint32 value);

  // optional uint32 new_width = 10 [default = 0];
  bool has_new_width() const;
  void clear_new_width();
  static const int kNewWidthFieldNumber = 10;
  ::google::protobuf::uint32 new_width() const;
  void set_new_width(::google::protobuf::uint32 value);

  // optional bool is_color = 11 [default = true];
  bool has_is_color() const;
  void clear_is_color();
  static const int kIsColorFieldNumber = 11;
  bool is_color() const;
  void set_is_color(bool value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // optional string mean_file = 3;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  ::google::protobuf::uint32 crop_size() const;
  void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  bool mirror() const;
  void set_mirror(bool value);

  // optional string root_folder = 12 [default = ""];
  bool has_root_folder() const;
  void clear_root_folder();
  static const int kRootFolderFieldNumber = 12;
  const ::std::string& root_folder() const;
  void set_root_folder(const ::std::string& value);
  void set_root_folder(const char* value);
  void set_root_folder(const char* value, size_t size);
  ::std::string* mutable_root_folder();
  ::std::string* release_root_folder();
  void set_allocated_root_folder(::std::string* root_folder);

  // optional string label_map_file = 13 [default = ""];
  bool has_label_map_file() const;
  void clear_label_map_file();
  static const int kLabelMapFileFieldNumber = 13;
  const ::std::string& label_map_file() const;
  void set_label_map_file(const ::std::string& value);
  void set_label_map_file(const char* value);
  void set_label_map_file(const char* value, size_t size);
  ::std::string* mutable_label_map_file();
  ::std::string* release_label_map_file();
  void set_allocated_label_map_file(::std::string* label_map_file);

  // repeated .caffe.BatchSampler batch_sampler = 14;
  int batch_sampler_size() const;
  void clear_batch_sampler();
  static const int kBatchSamplerFieldNumber = 14;
  const ::caffe::BatchSampler& batch_sampler(int index) const;
  ::caffe::BatchSampler* mutable_batch_sampler(int index);
  ::caffe::BatchSampler* add_batch_sampler();
  ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler >*
      mutable_batch_sampler();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler >&
      batch_sampler() const;

  // optional string part_name_label_file = 15 [default = ""];
  bool has_part_name_label_file() const;
  void clear_part_name_label_file();
  static const int kPartNameLabelFileFieldNumber = 15;
  const ::std::string& part_name_label_file() const;
  void set_part_name_label_file(const ::std::string& value);
  void set_part_name_label_file(const char* value);
  void set_part_name_label_file(const char* value, size_t size);
  ::std::string* mutable_part_name_label_file();
  ::std::string* release_part_name_label_file();
  void set_allocated_part_name_label_file(::std::string* part_name_label_file);

  // optional string pose_name_label_file = 16 [default = ""];
  bool has_pose_name_label_file() const;
  void clear_pose_name_label_file();
  static const int kPoseNameLabelFileFieldNumber = 16;
  const ::std::string& pose_name_label_file() const;
  void set_pose_name_label_file(const ::std::string& value);
  void set_pose_name_label_file(const char* value);
  void set_pose_name_label_file(const char* value, size_t size);
  ::std::string* mutable_pose_name_label_file();
  ::std::string* release_pose_name_label_file();
  void set_allocated_pose_name_label_file(::std::string* pose_name_label_file);

  // optional string dir_name_label_file = 17 [default = ""];
  bool has_dir_name_label_file() const;
  void clear_dir_name_label_file();
  static const int kDirNameLabelFileFieldNumber = 17;
  const ::std::string& dir_name_label_file() const;
  void set_dir_name_label_file(const ::std::string& value);
  void set_dir_name_label_file(const char* value);
  void set_dir_name_label_file(const char* value, size_t size);
  ::std::string* mutable_dir_name_label_file();
  ::std::string* release_dir_name_label_file();
  void set_allocated_dir_name_label_file(::std::string* dir_name_label_file);

  // optional float body_boxsize_threshold = 18 [default = 0];
  bool has_body_boxsize_threshold() const;
  void clear_body_boxsize_threshold();
  static const int kBodyBoxsizeThresholdFieldNumber = 18;
  float body_boxsize_threshold() const;
  void set_body_boxsize_threshold(float value);

  // @@protoc_insertion_point(class_scope:caffe.ImageDataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();
  inline void set_has_new_height();
  inline void clear_has_new_height();
  inline void set_has_new_width();
  inline void clear_has_new_width();
  inline void set_has_is_color();
  inline void clear_has_is_color();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_root_folder();
  inline void clear_has_root_folder();
  inline void set_has_label_map_file();
  inline void clear_has_label_map_file();
  inline void set_has_part_name_label_file();
  inline void clear_has_part_name_label_file();
  inline void set_has_pose_name_label_file();
  inline void clear_has_pose_name_label_file();
  inline void set_has_dir_name_label_file();
  inline void clear_has_dir_name_label_file();
  inline void set_has_body_boxsize_threshold();
  inline void clear_has_body_boxsize_threshold();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 rand_skip_;
  ::google::protobuf::uint32 new_height_;
  ::google::protobuf::uint32 new_width_;
  bool shuffle_;
  bool is_color_;
  bool mirror_;
  float scale_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  ::google::protobuf::internal::ArenaStringPtr root_folder_;
  ::google::protobuf::internal::ArenaStringPtr label_map_file_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler > batch_sampler_;
  ::google::protobuf::uint32 crop_size_;
  float body_boxsize_threshold_;
  ::google::protobuf::internal::ArenaStringPtr part_name_label_file_;
  ::google::protobuf::internal::ArenaStringPtr pose_name_label_file_;
  ::google::protobuf::internal::ArenaStringPtr dir_name_label_file_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ImageDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class ImResizeParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ImResizeParameter) */ {
 public:
  ImResizeParameter();
  virtual ~ImResizeParameter();

  ImResizeParameter(const ImResizeParameter& from);

  inline ImResizeParameter& operator=(const ImResizeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImResizeParameter& default_instance();

  void Swap(ImResizeParameter* other);

  // implements Message ----------------------------------------------

  inline ImResizeParameter* New() const { return New(NULL); }

  ImResizeParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImResizeParameter& from);
  void MergeFrom(const ImResizeParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImResizeParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 target_spatial_width = 1 [default = 300];
  bool has_target_spatial_width() const;
  void clear_target_spatial_width();
  static const int kTargetSpatialWidthFieldNumber = 1;
  ::google::protobuf::int32 target_spatial_width() const;
  void set_target_spatial_width(::google::protobuf::int32 value);

  // optional int32 target_spatial_height = 2 [default = 300];
  bool has_target_spatial_height() const;
  void clear_target_spatial_height();
  static const int kTargetSpatialHeightFieldNumber = 2;
  ::google::protobuf::int32 target_spatial_height() const;
  void set_target_spatial_height(::google::protobuf::int32 value);

  // optional float start_scale = 3 [default = 1];
  bool has_start_scale() const;
  void clear_start_scale();
  static const int kStartScaleFieldNumber = 3;
  float start_scale() const;
  void set_start_scale(float value);

  // optional float scale_gap = 4 [default = 0.3];
  bool has_scale_gap() const;
  void clear_scale_gap();
  static const int kScaleGapFieldNumber = 4;
  float scale_gap() const;
  void set_scale_gap(float value);

  // optional float factor = 5 [default = 4];
  bool has_factor() const;
  void clear_factor();
  static const int kFactorFieldNumber = 5;
  float factor() const;
  void set_factor(float value);

  // @@protoc_insertion_point(class_scope:caffe.ImResizeParameter)
 private:
  inline void set_has_target_spatial_width();
  inline void clear_has_target_spatial_width();
  inline void set_has_target_spatial_height();
  inline void clear_has_target_spatial_height();
  inline void set_has_start_scale();
  inline void clear_has_start_scale();
  inline void set_has_scale_gap();
  inline void clear_has_scale_gap();
  inline void set_has_factor();
  inline void clear_has_factor();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 target_spatial_width_;
  ::google::protobuf::int32 target_spatial_height_;
  float start_scale_;
  float scale_gap_;
  float factor_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ImResizeParameter* default_instance_;
};
// -------------------------------------------------------------------

class InfogainLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.InfogainLossParameter) */ {
 public:
  InfogainLossParameter();
  virtual ~InfogainLossParameter();

  InfogainLossParameter(const InfogainLossParameter& from);

  inline InfogainLossParameter& operator=(const InfogainLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InfogainLossParameter& default_instance();

  void Swap(InfogainLossParameter* other);

  // implements Message ----------------------------------------------

  inline InfogainLossParameter* New() const { return New(NULL); }

  InfogainLossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfogainLossParameter& from);
  void MergeFrom(const InfogainLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InfogainLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // @@protoc_insertion_point(class_scope:caffe.InfogainLossParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static InfogainLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class InnerProductParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.InnerProductParameter) */ {
 public:
  InnerProductParameter();
  virtual ~InnerProductParameter();

  InnerProductParameter(const InnerProductParameter& from);

  inline InnerProductParameter& operator=(const InnerProductParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InnerProductParameter& default_instance();

  void Swap(InnerProductParameter* other);

  // implements Message ----------------------------------------------

  inline InnerProductParameter* New() const { return New(NULL); }

  InnerProductParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InnerProductParameter& from);
  void MergeFrom(const InnerProductParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InnerProductParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional bool bias_term = 2 [default = true];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 2;
  bool bias_term() const;
  void set_bias_term(bool value);

  // optional .caffe.FillerParameter weight_filler = 3;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 3;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* mutable_weight_filler();
  ::caffe::FillerParameter* release_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 4;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 4;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* mutable_bias_filler();
  ::caffe::FillerParameter* release_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional int32 axis = 5 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 5;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional bool transpose = 6 [default = false];
  bool has_transpose() const;
  void clear_transpose();
  static const int kTransposeFieldNumber = 6;
  bool transpose() const;
  void set_transpose(bool value);

  // @@protoc_insertion_point(class_scope:caffe.InnerProductParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_transpose();
  inline void clear_has_transpose();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::FillerParameter* weight_filler_;
  ::google::protobuf::uint32 num_output_;
  bool bias_term_;
  bool transpose_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static InnerProductParameter* default_instance_;
};
// -------------------------------------------------------------------

class InputParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.InputParameter) */ {
 public:
  InputParameter();
  virtual ~InputParameter();

  InputParameter(const InputParameter& from);

  inline InputParameter& operator=(const InputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InputParameter& default_instance();

  void Swap(InputParameter* other);

  // implements Message ----------------------------------------------

  inline InputParameter* New() const { return New(NULL); }

  InputParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InputParameter& from);
  void MergeFrom(const InputParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InputParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe.BlobShape shape = 1;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  const ::caffe::BlobShape& shape(int index) const;
  ::caffe::BlobShape* mutable_shape(int index);
  ::caffe::BlobShape* add_shape();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
      mutable_shape();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
      shape() const;

  // @@protoc_insertion_point(class_scope:caffe.InputParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape > shape_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static InputParameter* default_instance_;
};
// -------------------------------------------------------------------

class LogParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LogParameter) */ {
 public:
  LogParameter();
  virtual ~LogParameter();

  LogParameter(const LogParameter& from);

  inline LogParameter& operator=(const LogParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogParameter& default_instance();

  void Swap(LogParameter* other);

  // implements Message ----------------------------------------------

  inline LogParameter* New() const { return New(NULL); }

  LogParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogParameter& from);
  void MergeFrom(const LogParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float base = 1 [default = -1];
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  float base() const;
  void set_base(float value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  void clear_shift();
  static const int kShiftFieldNumber = 3;
  float shift() const;
  void set_shift(float value);

  // @@protoc_insertion_point(class_scope:caffe.LogParameter)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_shift();
  inline void clear_has_shift();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float base_;
  float scale_;
  float shift_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static LogParameter* default_instance_;
};
// -------------------------------------------------------------------

class ReorgParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ReorgParameter) */ {
 public:
  ReorgParameter();
  virtual ~ReorgParameter();

  ReorgParameter(const ReorgParameter& from);

  inline ReorgParameter& operator=(const ReorgParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReorgParameter& default_instance();

  void Swap(ReorgParameter* other);

  // implements Message ----------------------------------------------

  inline ReorgParameter* New() const { return New(NULL); }

  ReorgParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReorgParameter& from);
  void MergeFrom(const ReorgParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReorgParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReorgParameter_SampleType SampleType;
  static const SampleType DOWN =
    ReorgParameter_SampleType_DOWN;
  static const SampleType UP =
    ReorgParameter_SampleType_UP;
  static inline bool SampleType_IsValid(int value) {
    return ReorgParameter_SampleType_IsValid(value);
  }
  static const SampleType SampleType_MIN =
    ReorgParameter_SampleType_SampleType_MIN;
  static const SampleType SampleType_MAX =
    ReorgParameter_SampleType_SampleType_MAX;
  static const int SampleType_ARRAYSIZE =
    ReorgParameter_SampleType_SampleType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SampleType_descriptor() {
    return ReorgParameter_SampleType_descriptor();
  }
  static inline const ::std::string& SampleType_Name(SampleType value) {
    return ReorgParameter_SampleType_Name(value);
  }
  static inline bool SampleType_Parse(const ::std::string& name,
      SampleType* value) {
    return ReorgParameter_SampleType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.ReorgParameter.SampleType up_down = 1 [default = DOWN];
  bool has_up_down() const;
  void clear_up_down();
  static const int kUpDownFieldNumber = 1;
  ::caffe::ReorgParameter_SampleType up_down() const;
  void set_up_down(::caffe::ReorgParameter_SampleType value);

  // optional int32 stride = 2 [default = 2];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 2;
  ::google::protobuf::int32 stride() const;
  void set_stride(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.ReorgParameter)
 private:
  inline void set_has_up_down();
  inline void clear_has_up_down();
  inline void set_has_stride();
  inline void clear_has_stride();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int up_down_;
  ::google::protobuf::int32 stride_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ReorgParameter* default_instance_;
};
// -------------------------------------------------------------------

class LRNParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.LRNParameter) */ {
 public:
  LRNParameter();
  virtual ~LRNParameter();

  LRNParameter(const LRNParameter& from);

  inline LRNParameter& operator=(const LRNParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LRNParameter& default_instance();

  void Swap(LRNParameter* other);

  // implements Message ----------------------------------------------

  inline LRNParameter* New() const { return New(NULL); }

  LRNParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LRNParameter& from);
  void MergeFrom(const LRNParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LRNParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LRNParameter_NormRegion NormRegion;
  static const NormRegion ACROSS_CHANNELS =
    LRNParameter_NormRegion_ACROSS_CHANNELS;
  static const NormRegion WITHIN_CHANNEL =
    LRNParameter_NormRegion_WITHIN_CHANNEL;
  static inline bool NormRegion_IsValid(int value) {
    return LRNParameter_NormRegion_IsValid(value);
  }
  static const NormRegion NormRegion_MIN =
    LRNParameter_NormRegion_NormRegion_MIN;
  static const NormRegion NormRegion_MAX =
    LRNParameter_NormRegion_NormRegion_MAX;
  static const int NormRegion_ARRAYSIZE =
    LRNParameter_NormRegion_NormRegion_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormRegion_descriptor() {
    return LRNParameter_NormRegion_descriptor();
  }
  static inline const ::std::string& NormRegion_Name(NormRegion value) {
    return LRNParameter_NormRegion_Name(value);
  }
  static inline bool NormRegion_Parse(const ::std::string& name,
      NormRegion* value) {
    return LRNParameter_NormRegion_Parse(name, value);
  }

  typedef LRNParameter_Engine Engine;
  static const Engine DEFAULT =
    LRNParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    LRNParameter_Engine_CAFFE;
  static const Engine CUDNN =
    LRNParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return LRNParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    LRNParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    LRNParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    LRNParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return LRNParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return LRNParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return LRNParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 local_size = 1 [default = 5];
  bool has_local_size() const;
  void clear_local_size();
  static const int kLocalSizeFieldNumber = 1;
  ::google::protobuf::uint32 local_size() const;
  void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 2 [default = 1];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 2;
  float alpha() const;
  void set_alpha(float value);

  // optional float beta = 3 [default = 0.75];
  bool has_beta() const;
  void clear_beta();
  static const int kBetaFieldNumber = 3;
  float beta() const;
  void set_beta(float value);

  // optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
  bool has_norm_region() const;
  void clear_norm_region();
  static const int kNormRegionFieldNumber = 4;
  ::caffe::LRNParameter_NormRegion norm_region() const;
  void set_norm_region(::caffe::LRNParameter_NormRegion value);

  // optional float k = 5 [default = 1];
  bool has_k() const;
  void clear_k();
  static const int kKFieldNumber = 5;
  float k() const;
  void set_k(float value);

  // optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 6;
  ::caffe::LRNParameter_Engine engine() const;
  void set_engine(::caffe::LRNParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.LRNParameter)
 private:
  inline void set_has_local_size();
  inline void clear_has_local_size();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_beta();
  inline void clear_has_beta();
  inline void set_has_norm_region();
  inline void clear_has_norm_region();
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  int norm_region_;
  float k_;
  int engine_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static LRNParameter* default_instance_;
};
// -------------------------------------------------------------------

class MemoryDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MemoryDataParameter) */ {
 public:
  MemoryDataParameter();
  virtual ~MemoryDataParameter();

  MemoryDataParameter(const MemoryDataParameter& from);

  inline MemoryDataParameter& operator=(const MemoryDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryDataParameter& default_instance();

  void Swap(MemoryDataParameter* other);

  // implements Message ----------------------------------------------

  inline MemoryDataParameter* New() const { return New(NULL); }

  MemoryDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemoryDataParameter& from);
  void MergeFrom(const MemoryDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MemoryDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 batch_size = 1;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 1;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 channels = 2;
  bool has_channels() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 2;
  ::google::protobuf::uint32 channels() const;
  void set_channels(::google::protobuf::uint32 value);

  // optional uint32 height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional uint32 width = 4;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.MemoryDataParameter)
 private:
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_channels();
  inline void clear_has_channels();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 channels_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static MemoryDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class MaskGenParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MaskGenParameter) */ {
 public:
  MaskGenParameter();
  virtual ~MaskGenParameter();

  MaskGenParameter(const MaskGenParameter& from);

  inline MaskGenParameter& operator=(const MaskGenParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaskGenParameter& default_instance();

  void Swap(MaskGenParameter* other);

  // implements Message ----------------------------------------------

  inline MaskGenParameter* New() const { return New(NULL); }

  MaskGenParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MaskGenParameter& from);
  void MergeFrom(const MaskGenParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MaskGenParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 height = 1;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 1;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 width = 2;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 resized_height = 3;
  bool has_resized_height() const;
  void clear_resized_height();
  static const int kResizedHeightFieldNumber = 3;
  ::google::protobuf::int32 resized_height() const;
  void set_resized_height(::google::protobuf::int32 value);

  // optional int32 resized_width = 4;
  bool has_resized_width() const;
  void clear_resized_width();
  static const int kResizedWidthFieldNumber = 4;
  ::google::protobuf::int32 resized_width() const;
  void set_resized_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.MaskGenParameter)
 private:
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_resized_height();
  inline void clear_has_resized_height();
  inline void set_has_resized_width();
  inline void clear_has_resized_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 resized_height_;
  ::google::protobuf::int32 resized_width_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static MaskGenParameter* default_instance_;
};
// -------------------------------------------------------------------

class KpsGenParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.KpsGenParameter) */ {
 public:
  KpsGenParameter();
  virtual ~KpsGenParameter();

  KpsGenParameter(const KpsGenParameter& from);

  inline KpsGenParameter& operator=(const KpsGenParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KpsGenParameter& default_instance();

  void Swap(KpsGenParameter* other);

  // implements Message ----------------------------------------------

  inline KpsGenParameter* New() const { return New(NULL); }

  KpsGenParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KpsGenParameter& from);
  void MergeFrom(const KpsGenParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KpsGenParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 resized_height = 1;
  bool has_resized_height() const;
  void clear_resized_height();
  static const int kResizedHeightFieldNumber = 1;
  ::google::protobuf::int32 resized_height() const;
  void set_resized_height(::google::protobuf::int32 value);

  // optional int32 resized_width = 2;
  bool has_resized_width() const;
  void clear_resized_width();
  static const int kResizedWidthFieldNumber = 2;
  ::google::protobuf::int32 resized_width() const;
  void set_resized_width(::google::protobuf::int32 value);

  // optional bool use_softmax = 3 [default = false];
  bool has_use_softmax() const;
  void clear_use_softmax();
  static const int kUseSoftmaxFieldNumber = 3;
  bool use_softmax() const;
  void set_use_softmax(bool value);

  // @@protoc_insertion_point(class_scope:caffe.KpsGenParameter)
 private:
  inline void set_has_resized_height();
  inline void clear_has_resized_height();
  inline void set_has_resized_width();
  inline void clear_has_resized_width();
  inline void set_has_use_softmax();
  inline void clear_has_use_softmax();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 resized_height_;
  ::google::protobuf::int32 resized_width_;
  bool use_softmax_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static KpsGenParameter* default_instance_;
};
// -------------------------------------------------------------------

class KpsEvalParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.KpsEvalParameter) */ {
 public:
  KpsEvalParameter();
  virtual ~KpsEvalParameter();

  KpsEvalParameter(const KpsEvalParameter& from);

  inline KpsEvalParameter& operator=(const KpsEvalParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KpsEvalParameter& default_instance();

  void Swap(KpsEvalParameter* other);

  // implements Message ----------------------------------------------

  inline KpsEvalParameter* New() const { return New(NULL); }

  KpsEvalParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KpsEvalParameter& from);
  void MergeFrom(const KpsEvalParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KpsEvalParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float conf_thre = 1 [default = 0.1];
  bool has_conf_thre() const;
  void clear_conf_thre();
  static const int kConfThreFieldNumber = 1;
  float conf_thre() const;
  void set_conf_thre(float value);

  // optional float distance_thre = 2 [default = 0.05];
  bool has_distance_thre() const;
  void clear_distance_thre();
  static const int kDistanceThreFieldNumber = 2;
  float distance_thre() const;
  void set_distance_thre(float value);

  // @@protoc_insertion_point(class_scope:caffe.KpsEvalParameter)
 private:
  inline void set_has_conf_thre();
  inline void clear_has_conf_thre();
  inline void set_has_distance_thre();
  inline void clear_has_distance_thre();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float conf_thre_;
  float distance_thre_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static KpsEvalParameter* default_instance_;
};
// -------------------------------------------------------------------

class MultiBoxLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MultiBoxLossParameter) */ {
 public:
  MultiBoxLossParameter();
  virtual ~MultiBoxLossParameter();

  MultiBoxLossParameter(const MultiBoxLossParameter& from);

  inline MultiBoxLossParameter& operator=(const MultiBoxLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiBoxLossParameter& default_instance();

  void Swap(MultiBoxLossParameter* other);

  // implements Message ----------------------------------------------

  inline MultiBoxLossParameter* New() const { return New(NULL); }

  MultiBoxLossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MultiBoxLossParameter& from);
  void MergeFrom(const MultiBoxLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MultiBoxLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MultiBoxLossParameter_LocLossType LocLossType;
  static const LocLossType L2 =
    MultiBoxLossParameter_LocLossType_L2;
  static const LocLossType SMOOTH_L1 =
    MultiBoxLossParameter_LocLossType_SMOOTH_L1;
  static inline bool LocLossType_IsValid(int value) {
    return MultiBoxLossParameter_LocLossType_IsValid(value);
  }
  static const LocLossType LocLossType_MIN =
    MultiBoxLossParameter_LocLossType_LocLossType_MIN;
  static const LocLossType LocLossType_MAX =
    MultiBoxLossParameter_LocLossType_LocLossType_MAX;
  static const int LocLossType_ARRAYSIZE =
    MultiBoxLossParameter_LocLossType_LocLossType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LocLossType_descriptor() {
    return MultiBoxLossParameter_LocLossType_descriptor();
  }
  static inline const ::std::string& LocLossType_Name(LocLossType value) {
    return MultiBoxLossParameter_LocLossType_Name(value);
  }
  static inline bool LocLossType_Parse(const ::std::string& name,
      LocLossType* value) {
    return MultiBoxLossParameter_LocLossType_Parse(name, value);
  }

  typedef MultiBoxLossParameter_ConfLossType ConfLossType;
  static const ConfLossType SOFTMAX =
    MultiBoxLossParameter_ConfLossType_SOFTMAX;
  static const ConfLossType LOGISTIC =
    MultiBoxLossParameter_ConfLossType_LOGISTIC;
  static inline bool ConfLossType_IsValid(int value) {
    return MultiBoxLossParameter_ConfLossType_IsValid(value);
  }
  static const ConfLossType ConfLossType_MIN =
    MultiBoxLossParameter_ConfLossType_ConfLossType_MIN;
  static const ConfLossType ConfLossType_MAX =
    MultiBoxLossParameter_ConfLossType_ConfLossType_MAX;
  static const int ConfLossType_ARRAYSIZE =
    MultiBoxLossParameter_ConfLossType_ConfLossType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConfLossType_descriptor() {
    return MultiBoxLossParameter_ConfLossType_descriptor();
  }
  static inline const ::std::string& ConfLossType_Name(ConfLossType value) {
    return MultiBoxLossParameter_ConfLossType_Name(value);
  }
  static inline bool ConfLossType_Parse(const ::std::string& name,
      ConfLossType* value) {
    return MultiBoxLossParameter_ConfLossType_Parse(name, value);
  }

  typedef MultiBoxLossParameter_MatchType MatchType;
  static const MatchType BIPARTITE =
    MultiBoxLossParameter_MatchType_BIPARTITE;
  static const MatchType PER_PREDICTION =
    MultiBoxLossParameter_MatchType_PER_PREDICTION;
  static inline bool MatchType_IsValid(int value) {
    return MultiBoxLossParameter_MatchType_IsValid(value);
  }
  static const MatchType MatchType_MIN =
    MultiBoxLossParameter_MatchType_MatchType_MIN;
  static const MatchType MatchType_MAX =
    MultiBoxLossParameter_MatchType_MatchType_MAX;
  static const int MatchType_ARRAYSIZE =
    MultiBoxLossParameter_MatchType_MatchType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MatchType_descriptor() {
    return MultiBoxLossParameter_MatchType_descriptor();
  }
  static inline const ::std::string& MatchType_Name(MatchType value) {
    return MultiBoxLossParameter_MatchType_Name(value);
  }
  static inline bool MatchType_Parse(const ::std::string& name,
      MatchType* value) {
    return MultiBoxLossParameter_MatchType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.MultiBoxLossParameter.LocLossType loc_loss_type = 1 [default = SMOOTH_L1];
  bool has_loc_loss_type() const;
  void clear_loc_loss_type();
  static const int kLocLossTypeFieldNumber = 1;
  ::caffe::MultiBoxLossParameter_LocLossType loc_loss_type() const;
  void set_loc_loss_type(::caffe::MultiBoxLossParameter_LocLossType value);

  // optional .caffe.MultiBoxLossParameter.ConfLossType conf_loss_type = 2 [default = SOFTMAX];
  bool has_conf_loss_type() const;
  void clear_conf_loss_type();
  static const int kConfLossTypeFieldNumber = 2;
  ::caffe::MultiBoxLossParameter_ConfLossType conf_loss_type() const;
  void set_conf_loss_type(::caffe::MultiBoxLossParameter_ConfLossType value);

  // optional float loc_weight = 3 [default = 1];
  bool has_loc_weight() const;
  void clear_loc_weight();
  static const int kLocWeightFieldNumber = 3;
  float loc_weight() const;
  void set_loc_weight(float value);

  // optional uint32 num_classes = 4;
  bool has_num_classes() const;
  void clear_num_classes();
  static const int kNumClassesFieldNumber = 4;
  ::google::protobuf::uint32 num_classes() const;
  void set_num_classes(::google::protobuf::uint32 value);

  // optional bool share_location = 5 [default = true];
  bool has_share_location() const;
  void clear_share_location();
  static const int kShareLocationFieldNumber = 5;
  bool share_location() const;
  void set_share_location(bool value);

  // optional .caffe.MultiBoxLossParameter.MatchType match_type = 6 [default = PER_PREDICTION];
  bool has_match_type() const;
  void clear_match_type();
  static const int kMatchTypeFieldNumber = 6;
  ::caffe::MultiBoxLossParameter_MatchType match_type() const;
  void set_match_type(::caffe::MultiBoxLossParameter_MatchType value);

  // optional float overlap_threshold = 7 [default = 0.5];
  bool has_overlap_threshold() const;
  void clear_overlap_threshold();
  static const int kOverlapThresholdFieldNumber = 7;
  float overlap_threshold() const;
  void set_overlap_threshold(float value);

  // optional bool use_prior_for_matching = 8 [default = true];
  bool has_use_prior_for_matching() const;
  void clear_use_prior_for_matching();
  static const int kUsePriorForMatchingFieldNumber = 8;
  bool use_prior_for_matching() const;
  void set_use_prior_for_matching(bool value);

  // optional uint32 background_label_id = 9 [default = 0];
  bool has_background_label_id() const;
  void clear_background_label_id();
  static const int kBackgroundLabelIdFieldNumber = 9;
  ::google::protobuf::uint32 background_label_id() const;
  void set_background_label_id(::google::protobuf::uint32 value);

  // optional bool use_difficult_gt = 10 [default = true];
  bool has_use_difficult_gt() const;
  void clear_use_difficult_gt();
  static const int kUseDifficultGtFieldNumber = 10;
  bool use_difficult_gt() const;
  void set_use_difficult_gt(bool value);

  // optional bool do_neg_mining = 11 [default = true];
  bool has_do_neg_mining() const;
  void clear_do_neg_mining();
  static const int kDoNegMiningFieldNumber = 11;
  bool do_neg_mining() const;
  void set_do_neg_mining(bool value);

  // optional float neg_pos_ratio = 12 [default = 3];
  bool has_neg_pos_ratio() const;
  void clear_neg_pos_ratio();
  static const int kNegPosRatioFieldNumber = 12;
  float neg_pos_ratio() const;
  void set_neg_pos_ratio(float value);

  // optional float neg_overlap = 13 [default = 0.5];
  bool has_neg_overlap() const;
  void clear_neg_overlap();
  static const int kNegOverlapFieldNumber = 13;
  float neg_overlap() const;
  void set_neg_overlap(float value);

  // optional .caffe.PriorBoxParameter.CodeType code_type = 14 [default = CORNER];
  bool has_code_type() const;
  void clear_code_type();
  static const int kCodeTypeFieldNumber = 14;
  ::caffe::PriorBoxParameter_CodeType code_type() const;
  void set_code_type(::caffe::PriorBoxParameter_CodeType value);

  // optional bool encode_variance_in_target = 16 [default = false];
  bool has_encode_variance_in_target() const;
  void clear_encode_variance_in_target();
  static const int kEncodeVarianceInTargetFieldNumber = 16;
  bool encode_variance_in_target() const;
  void set_encode_variance_in_target(bool value);

  // optional bool map_object_to_agnostic = 17 [default = false];
  bool has_map_object_to_agnostic() const;
  void clear_map_object_to_agnostic();
  static const int kMapObjectToAgnosticFieldNumber = 17;
  bool map_object_to_agnostic() const;
  void set_map_object_to_agnostic(bool value);

  // optional int32 loc_class = 24 [default = 1];
  bool has_loc_class() const;
  void clear_loc_class();
  static const int kLocClassFieldNumber = 24;
  ::google::protobuf::int32 loc_class() const;
  void set_loc_class(::google::protobuf::int32 value);

  // optional float conf_weight = 25 [default = 1];
  bool has_conf_weight() const;
  void clear_conf_weight();
  static const int kConfWeightFieldNumber = 25;
  float conf_weight() const;
  void set_conf_weight(float value);

  // optional string name_to_label_file = 47;
  bool has_name_to_label_file() const;
  void clear_name_to_label_file();
  static const int kNameToLabelFileFieldNumber = 47;
  const ::std::string& name_to_label_file() const;
  void set_name_to_label_file(const ::std::string& value);
  void set_name_to_label_file(const char* value);
  void set_name_to_label_file(const char* value, size_t size);
  ::std::string* mutable_name_to_label_file();
  ::std::string* release_name_to_label_file();
  void set_allocated_name_to_label_file(::std::string* name_to_label_file);

  // @@protoc_insertion_point(class_scope:caffe.MultiBoxLossParameter)
 private:
  inline void set_has_loc_loss_type();
  inline void clear_has_loc_loss_type();
  inline void set_has_conf_loss_type();
  inline void clear_has_conf_loss_type();
  inline void set_has_loc_weight();
  inline void clear_has_loc_weight();
  inline void set_has_num_classes();
  inline void clear_has_num_classes();
  inline void set_has_share_location();
  inline void clear_has_share_location();
  inline void set_has_match_type();
  inline void clear_has_match_type();
  inline void set_has_overlap_threshold();
  inline void clear_has_overlap_threshold();
  inline void set_has_use_prior_for_matching();
  inline void clear_has_use_prior_for_matching();
  inline void set_has_background_label_id();
  inline void clear_has_background_label_id();
  inline void set_has_use_difficult_gt();
  inline void clear_has_use_difficult_gt();
  inline void set_has_do_neg_mining();
  inline void clear_has_do_neg_mining();
  inline void set_has_neg_pos_ratio();
  inline void clear_has_neg_pos_ratio();
  inline void set_has_neg_overlap();
  inline void clear_has_neg_overlap();
  inline void set_has_code_type();
  inline void clear_has_code_type();
  inline void set_has_encode_variance_in_target();
  inline void clear_has_encode_variance_in_target();
  inline void set_has_map_object_to_agnostic();
  inline void clear_has_map_object_to_agnostic();
  inline void set_has_loc_class();
  inline void clear_has_loc_class();
  inline void set_has_conf_weight();
  inline void clear_has_conf_weight();
  inline void set_has_name_to_label_file();
  inline void clear_has_name_to_label_file();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int loc_loss_type_;
  int conf_loss_type_;
  float loc_weight_;
  ::google::protobuf::uint32 num_classes_;
  int match_type_;
  float overlap_threshold_;
  bool share_location_;
  bool use_prior_for_matching_;
  bool use_difficult_gt_;
  bool do_neg_mining_;
  ::google::protobuf::uint32 background_label_id_;
  float neg_pos_ratio_;
  float neg_overlap_;
  int code_type_;
  bool encode_variance_in_target_;
  bool map_object_to_agnostic_;
  ::google::protobuf::int32 loc_class_;
  float conf_weight_;
  ::google::protobuf::internal::ArenaStringPtr name_to_label_file_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static MultiBoxLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class BBoxLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BBoxLossParameter) */ {
 public:
  BBoxLossParameter();
  virtual ~BBoxLossParameter();

  BBoxLossParameter(const BBoxLossParameter& from);

  inline BBoxLossParameter& operator=(const BBoxLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BBoxLossParameter& default_instance();

  void Swap(BBoxLossParameter* other);

  // implements Message ----------------------------------------------

  inline BBoxLossParameter* New() const { return New(NULL); }

  BBoxLossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BBoxLossParameter& from);
  void MergeFrom(const BBoxLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BBoxLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BBoxLossParameter_EffectiveMode EffectiveMode;
  static const EffectiveMode BOTTOMSIZE =
    BBoxLossParameter_EffectiveMode_BOTTOMSIZE;
  static const EffectiveMode IMAGESIZE =
    BBoxLossParameter_EffectiveMode_IMAGESIZE;
  static inline bool EffectiveMode_IsValid(int value) {
    return BBoxLossParameter_EffectiveMode_IsValid(value);
  }
  static const EffectiveMode EffectiveMode_MIN =
    BBoxLossParameter_EffectiveMode_EffectiveMode_MIN;
  static const EffectiveMode EffectiveMode_MAX =
    BBoxLossParameter_EffectiveMode_EffectiveMode_MAX;
  static const int EffectiveMode_ARRAYSIZE =
    BBoxLossParameter_EffectiveMode_EffectiveMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EffectiveMode_descriptor() {
    return BBoxLossParameter_EffectiveMode_descriptor();
  }
  static inline const ::std::string& EffectiveMode_Name(EffectiveMode value) {
    return BBoxLossParameter_EffectiveMode_Name(value);
  }
  static inline bool EffectiveMode_Parse(const ::std::string& name,
      EffectiveMode* value) {
    return BBoxLossParameter_EffectiveMode_Parse(name, value);
  }

  typedef BBoxLossParameter_MatchTypeAnchorGT MatchTypeAnchorGT;
  static const MatchTypeAnchorGT WEIGHTIOU =
    BBoxLossParameter_MatchTypeAnchorGT_WEIGHTIOU;
  static const MatchTypeAnchorGT EXTRACHECKCOVERAGE =
    BBoxLossParameter_MatchTypeAnchorGT_EXTRACHECKCOVERAGE;
  static const MatchTypeAnchorGT REMOVELARGMARGIN =
    BBoxLossParameter_MatchTypeAnchorGT_REMOVELARGMARGIN;
  static inline bool MatchTypeAnchorGT_IsValid(int value) {
    return BBoxLossParameter_MatchTypeAnchorGT_IsValid(value);
  }
  static const MatchTypeAnchorGT MatchTypeAnchorGT_MIN =
    BBoxLossParameter_MatchTypeAnchorGT_MatchTypeAnchorGT_MIN;
  static const MatchTypeAnchorGT MatchTypeAnchorGT_MAX =
    BBoxLossParameter_MatchTypeAnchorGT_MatchTypeAnchorGT_MAX;
  static const int MatchTypeAnchorGT_ARRAYSIZE =
    BBoxLossParameter_MatchTypeAnchorGT_MatchTypeAnchorGT_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MatchTypeAnchorGT_descriptor() {
    return BBoxLossParameter_MatchTypeAnchorGT_descriptor();
  }
  static inline const ::std::string& MatchTypeAnchorGT_Name(MatchTypeAnchorGT value) {
    return BBoxLossParameter_MatchTypeAnchorGT_Name(value);
  }
  static inline bool MatchTypeAnchorGT_Parse(const ::std::string& name,
      MatchTypeAnchorGT* value) {
    return BBoxLossParameter_MatchTypeAnchorGT_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.MultiBoxLossParameter.LocLossType loc_loss_type = 1;
  bool has_loc_loss_type() const;
  void clear_loc_loss_type();
  static const int kLocLossTypeFieldNumber = 1;
  ::caffe::MultiBoxLossParameter_LocLossType loc_loss_type() const;
  void set_loc_loss_type(::caffe::MultiBoxLossParameter_LocLossType value);

  // optional .caffe.MultiBoxLossParameter.ConfLossType conf_loss_type = 2;
  bool has_conf_loss_type() const;
  void clear_conf_loss_type();
  static const int kConfLossTypeFieldNumber = 2;
  ::caffe::MultiBoxLossParameter_ConfLossType conf_loss_type() const;
  void set_conf_loss_type(::caffe::MultiBoxLossParameter_ConfLossType value);

  // optional float loc_weight = 3 [default = 1];
  bool has_loc_weight() const;
  void clear_loc_weight();
  static const int kLocWeightFieldNumber = 3;
  float loc_weight() const;
  void set_loc_weight(float value);

  // optional uint32 num_classes = 4 [default = 2];
  bool has_num_classes() const;
  void clear_num_classes();
  static const int kNumClassesFieldNumber = 4;
  ::google::protobuf::uint32 num_classes() const;
  void set_num_classes(::google::protobuf::uint32 value);

  // optional bool share_location = 5 [default = true];
  bool has_share_location() const;
  void clear_share_location();
  static const int kShareLocationFieldNumber = 5;
  bool share_location() const;
  void set_share_location(bool value);

  // optional .caffe.MultiBoxLossParameter.MatchType match_type = 6;
  bool has_match_type() const;
  void clear_match_type();
  static const int kMatchTypeFieldNumber = 6;
  ::caffe::MultiBoxLossParameter_MatchType match_type() const;
  void set_match_type(::caffe::MultiBoxLossParameter_MatchType value);

  // optional float overlap_threshold = 7 [default = 0.5];
  bool has_overlap_threshold() const;
  void clear_overlap_threshold();
  static const int kOverlapThresholdFieldNumber = 7;
  float overlap_threshold() const;
  void set_overlap_threshold(float value);

  // optional bool use_prior_for_matching = 8 [default = true];
  bool has_use_prior_for_matching() const;
  void clear_use_prior_for_matching();
  static const int kUsePriorForMatchingFieldNumber = 8;
  bool use_prior_for_matching() const;
  void set_use_prior_for_matching(bool value);

  // optional uint32 background_label_id = 9 [default = 0];
  bool has_background_label_id() const;
  void clear_background_label_id();
  static const int kBackgroundLabelIdFieldNumber = 9;
  ::google::protobuf::uint32 background_label_id() const;
  void set_background_label_id(::google::protobuf::uint32 value);

  // optional bool use_difficult_gt = 10 [default = false];
  bool has_use_difficult_gt() const;
  void clear_use_difficult_gt();
  static const int kUseDifficultGtFieldNumber = 10;
  bool use_difficult_gt() const;
  void set_use_difficult_gt(bool value);

  // optional bool do_neg_mining = 11 [default = true];
  bool has_do_neg_mining() const;
  void clear_do_neg_mining();
  static const int kDoNegMiningFieldNumber = 11;
  bool do_neg_mining() const;
  void set_do_neg_mining(bool value);

  // optional float neg_pos_ratio = 12 [default = 3];
  bool has_neg_pos_ratio() const;
  void clear_neg_pos_ratio();
  static const int kNegPosRatioFieldNumber = 12;
  float neg_pos_ratio() const;
  void set_neg_pos_ratio(float value);

  // optional float neg_overlap = 13 [default = 0.5];
  bool has_neg_overlap() const;
  void clear_neg_overlap();
  static const int kNegOverlapFieldNumber = 13;
  float neg_overlap() const;
  void set_neg_overlap(float value);

  // optional .caffe.PriorBoxParameter.CodeType code_type = 14;
  bool has_code_type() const;
  void clear_code_type();
  static const int kCodeTypeFieldNumber = 14;
  ::caffe::PriorBoxParameter_CodeType code_type() const;
  void set_code_type(::caffe::PriorBoxParameter_CodeType value);

  // optional bool encode_variance_in_target = 15 [default = false];
  bool has_encode_variance_in_target() const;
  void clear_encode_variance_in_target();
  static const int kEncodeVarianceInTargetFieldNumber = 15;
  bool encode_variance_in_target() const;
  void set_encode_variance_in_target(bool value);

  // optional bool map_object_to_agnostic = 16 [default = false];
  bool has_map_object_to_agnostic() const;
  void clear_map_object_to_agnostic();
  static const int kMapObjectToAgnosticFieldNumber = 16;
  bool map_object_to_agnostic() const;
  void set_map_object_to_agnostic(bool value);

  // optional int32 loc_class = 17 [default = 1];
  bool has_loc_class() const;
  void clear_loc_class();
  static const int kLocClassFieldNumber = 17;
  ::google::protobuf::int32 loc_class() const;
  void set_loc_class(::google::protobuf::int32 value);

  // optional float conf_weight = 18 [default = 1];
  bool has_conf_weight() const;
  void clear_conf_weight();
  static const int kConfWeightFieldNumber = 18;
  float conf_weight() const;
  void set_conf_weight(float value);

  // optional float size_threshold = 19 [default = 0.001];
  bool has_size_threshold() const;
  void clear_size_threshold();
  static const int kSizeThresholdFieldNumber = 19;
  float size_threshold() const;
  void set_size_threshold(float value);

  // optional int32 alias_id = 20 [default = 0];
  bool has_alias_id() const;
  void clear_alias_id();
  static const int kAliasIdFieldNumber = 20;
  ::google::protobuf::int32 alias_id() const;
  void set_alias_id(::google::protobuf::int32 value);

  // optional bool using_focus_loss = 21 [default = false];
  bool has_using_focus_loss() const;
  void clear_using_focus_loss();
  static const int kUsingFocusLossFieldNumber = 21;
  bool using_focus_loss() const;
  void set_using_focus_loss(bool value);

  // optional float gama = 22 [default = 2];
  bool has_gama() const;
  void clear_gama();
  static const int kGamaFieldNumber = 22;
  float gama() const;
  void set_gama(float value);

  // optional float alpha = 36 [default = 1];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 36;
  float alpha() const;
  void set_alpha(float value);

  // repeated int32 gt_labels = 23;
  int gt_labels_size() const;
  void clear_gt_labels();
  static const int kGtLabelsFieldNumber = 23;
  ::google::protobuf::int32 gt_labels(int index) const;
  void set_gt_labels(int index, ::google::protobuf::int32 value);
  void add_gt_labels(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      gt_labels() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_gt_labels();

  // repeated int32 target_labels = 24;
  int target_labels_size() const;
  void clear_target_labels();
  static const int kTargetLabelsFieldNumber = 24;
  ::google::protobuf::int32 target_labels(int index) const;
  void set_target_labels(int index, ::google::protobuf::int32 value);
  void add_target_labels(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      target_labels() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_target_labels();

  // optional bool flag_noperson = 25 [default = false];
  bool has_flag_noperson() const;
  void clear_flag_noperson();
  static const int kFlagNopersonFieldNumber = 25;
  bool flag_noperson() const;
  void set_flag_noperson(bool value);

  // optional bool flag_checkanchor = 26 [default = false];
  bool has_flag_checkanchor() const;
  void clear_flag_checkanchor();
  static const int kFlagCheckanchorFieldNumber = 26;
  bool flag_checkanchor() const;
  void set_flag_checkanchor(bool value);

  // optional .caffe.BBoxLossParameter.EffectiveMode check_effectmode = 27 [default = BOTTOMSIZE];
  bool has_check_effectmode() const;
  void clear_check_effectmode();
  static const int kCheckEffectmodeFieldNumber = 27;
  ::caffe::BBoxLossParameter_EffectiveMode check_effectmode() const;
  void set_check_effectmode(::caffe::BBoxLossParameter_EffectiveMode value);

  // optional bool flag_mtanchorgt_allneg = 28 [default = false];
  bool has_flag_mtanchorgt_allneg() const;
  void clear_flag_mtanchorgt_allneg();
  static const int kFlagMtanchorgtAllnegFieldNumber = 28;
  bool flag_mtanchorgt_allneg() const;
  void set_flag_mtanchorgt_allneg(bool value);

  // optional .caffe.BBoxLossParameter.MatchTypeAnchorGT matchtype_anchorgt = 29 [default = WEIGHTIOU];
  bool has_matchtype_anchorgt() const;
  void clear_matchtype_anchorgt();
  static const int kMatchtypeAnchorgtFieldNumber = 29;
  ::caffe::BBoxLossParameter_MatchTypeAnchorGT matchtype_anchorgt() const;
  void set_matchtype_anchorgt(::caffe::BBoxLossParameter_MatchTypeAnchorGT value);

  // optional float sigma_angtdist = 30 [default = 0.2];
  bool has_sigma_angtdist() const;
  void clear_sigma_angtdist();
  static const int kSigmaAngtdistFieldNumber = 30;
  float sigma_angtdist() const;
  void set_sigma_angtdist(float value);

  // optional float cover_extracheck = 31 [default = 0.7];
  bool has_cover_extracheck() const;
  void clear_cover_extracheck();
  static const int kCoverExtracheckFieldNumber = 31;
  float cover_extracheck() const;
  void set_cover_extracheck(float value);

  // optional float margin_ratio = 32 [default = 0.25];
  bool has_margin_ratio() const;
  void clear_margin_ratio();
  static const int kMarginRatioFieldNumber = 32;
  float margin_ratio() const;
  void set_margin_ratio(float value);

  // optional int32 ndim_label = 33 [default = 9];
  bool has_ndim_label() const;
  void clear_ndim_label();
  static const int kNdimLabelFieldNumber = 33;
  ::google::protobuf::int32 ndim_label() const;
  void set_ndim_label(::google::protobuf::int32 value);

  // optional float margin_ratio_h = 38 [default = 0.25];
  bool has_margin_ratio_h() const;
  void clear_margin_ratio_h();
  static const int kMarginRatioHFieldNumber = 38;
  float margin_ratio_h() const;
  void set_margin_ratio_h(float value);

  // optional bool only_w = 34 [default = false];
  bool has_only_w() const;
  void clear_only_w();
  static const int kOnlyWFieldNumber = 34;
  bool only_w() const;
  void set_only_w(bool value);

  // optional bool showanchornumvsscale = 35 [default = false];
  bool has_showanchornumvsscale() const;
  void clear_showanchornumvsscale();
  static const int kShowanchornumvsscaleFieldNumber = 35;
  bool showanchornumvsscale() const;
  void set_showanchornumvsscale(bool value);

  // optional bool conf_norm_pos = 37 [default = false];
  bool has_conf_norm_pos() const;
  void clear_conf_norm_pos();
  static const int kConfNormPosFieldNumber = 37;
  bool conf_norm_pos() const;
  void set_conf_norm_pos(bool value);

  // optional bool using_gmhc_loss = 39 [default = false];
  bool has_using_gmhc_loss() const;
  void clear_using_gmhc_loss();
  static const int kUsingGmhcLossFieldNumber = 39;
  bool using_gmhc_loss() const;
  void set_using_gmhc_loss(bool value);

  // optional int32 mbins = 40 [default = 50];
  bool has_mbins() const;
  void clear_mbins();
  static const int kMbinsFieldNumber = 40;
  ::google::protobuf::int32 mbins() const;
  void set_mbins(::google::protobuf::int32 value);

  // optional bool using_twoclassbalance_loss = 41 [default = false];
  bool has_using_twoclassbalance_loss() const;
  void clear_using_twoclassbalance_loss();
  static const int kUsingTwoclassbalanceLossFieldNumber = 41;
  bool using_twoclassbalance_loss() const;
  void set_using_twoclassbalance_loss(bool value);

  // optional bool only_pos = 42 [default = false];
  bool has_only_pos() const;
  void clear_only_pos();
  static const int kOnlyPosFieldNumber = 42;
  bool only_pos() const;
  void set_only_pos(bool value);

  // optional int32 neg_max_value = 43 [default = 0];
  bool has_neg_max_value() const;
  void clear_neg_max_value();
  static const int kNegMaxValueFieldNumber = 43;
  ::google::protobuf::int32 neg_max_value() const;
  void set_neg_max_value(::google::protobuf::int32 value);

  // optional float objectness_score = 44 [default = 0.99];
  bool has_objectness_score() const;
  void clear_objectness_score();
  static const int kObjectnessScoreFieldNumber = 44;
  float objectness_score() const;
  void set_objectness_score(float value);

  // optional float weight = 45 [default = 1];
  bool has_weight() const;
  void clear_weight();
  static const int kWeightFieldNumber = 45;
  float weight() const;
  void set_weight(float value);

  // optional string weight_type = 46 [default = "index"];
  bool has_weight_type() const;
  void clear_weight_type();
  static const int kWeightTypeFieldNumber = 46;
  const ::std::string& weight_type() const;
  void set_weight_type(const ::std::string& value);
  void set_weight_type(const char* value);
  void set_weight_type(const char* value, size_t size);
  ::std::string* mutable_weight_type();
  ::std::string* release_weight_type();
  void set_allocated_weight_type(::std::string* weight_type);

  // optional bool use_group = 47 [default = false];
  bool has_use_group() const;
  void clear_use_group();
  static const int kUseGroupFieldNumber = 47;
  bool use_group() const;
  void set_use_group(bool value);

  // optional float k1 = 48 [default = 1];
  bool has_k1() const;
  void clear_k1();
  static const int kK1FieldNumber = 48;
  float k1() const;
  void set_k1(float value);

  // optional float k2 = 49 [default = 1];
  bool has_k2() const;
  void clear_k2();
  static const int kK2FieldNumber = 49;
  float k2() const;
  void set_k2(float value);

  // optional float b1 = 50 [default = 0];
  bool has_b1() const;
  void clear_b1();
  static const int kB1FieldNumber = 50;
  float b1() const;
  void set_b1(float value);

  // optional float b2 = 51 [default = 0];
  bool has_b2() const;
  void clear_b2();
  static const int kB2FieldNumber = 51;
  float b2() const;
  void set_b2(float value);

  // optional float diff_thred = 52 [default = 0.05];
  bool has_diff_thred() const;
  void clear_diff_thred();
  static const int kDiffThredFieldNumber = 52;
  float diff_thred() const;
  void set_diff_thred(float value);

  // optional float power = 53 [default = 1];
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 53;
  float power() const;
  void set_power(float value);

  // optional float pos_objectness_score = 55 [default = 0.99];
  bool has_pos_objectness_score() const;
  void clear_pos_objectness_score();
  static const int kPosObjectnessScoreFieldNumber = 55;
  float pos_objectness_score() const;
  void set_pos_objectness_score(float value);

  // optional bool do_pos_mining = 54 [default = false];
  bool has_do_pos_mining() const;
  void clear_do_pos_mining();
  static const int kDoPosMiningFieldNumber = 54;
  bool do_pos_mining() const;
  void set_do_pos_mining(bool value);

  // optional int32 weight_mode = 56 [default = 0];
  bool has_weight_mode() const;
  void clear_weight_mode();
  static const int kWeightModeFieldNumber = 56;
  ::google::protobuf::int32 weight_mode() const;
  void set_weight_mode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.BBoxLossParameter)
 private:
  inline void set_has_loc_loss_type();
  inline void clear_has_loc_loss_type();
  inline void set_has_conf_loss_type();
  inline void clear_has_conf_loss_type();
  inline void set_has_loc_weight();
  inline void clear_has_loc_weight();
  inline void set_has_num_classes();
  inline void clear_has_num_classes();
  inline void set_has_share_location();
  inline void clear_has_share_location();
  inline void set_has_match_type();
  inline void clear_has_match_type();
  inline void set_has_overlap_threshold();
  inline void clear_has_overlap_threshold();
  inline void set_has_use_prior_for_matching();
  inline void clear_has_use_prior_for_matching();
  inline void set_has_background_label_id();
  inline void clear_has_background_label_id();
  inline void set_has_use_difficult_gt();
  inline void clear_has_use_difficult_gt();
  inline void set_has_do_neg_mining();
  inline void clear_has_do_neg_mining();
  inline void set_has_neg_pos_ratio();
  inline void clear_has_neg_pos_ratio();
  inline void set_has_neg_overlap();
  inline void clear_has_neg_overlap();
  inline void set_has_code_type();
  inline void clear_has_code_type();
  inline void set_has_encode_variance_in_target();
  inline void clear_has_encode_variance_in_target();
  inline void set_has_map_object_to_agnostic();
  inline void clear_has_map_object_to_agnostic();
  inline void set_has_loc_class();
  inline void clear_has_loc_class();
  inline void set_has_conf_weight();
  inline void clear_has_conf_weight();
  inline void set_has_size_threshold();
  inline void clear_has_size_threshold();
  inline void set_has_alias_id();
  inline void clear_has_alias_id();
  inline void set_has_using_focus_loss();
  inline void clear_has_using_focus_loss();
  inline void set_has_gama();
  inline void clear_has_gama();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_flag_noperson();
  inline void clear_has_flag_noperson();
  inline void set_has_flag_checkanchor();
  inline void clear_has_flag_checkanchor();
  inline void set_has_check_effectmode();
  inline void clear_has_check_effectmode();
  inline void set_has_flag_mtanchorgt_allneg();
  inline void clear_has_flag_mtanchorgt_allneg();
  inline void set_has_matchtype_anchorgt();
  inline void clear_has_matchtype_anchorgt();
  inline void set_has_sigma_angtdist();
  inline void clear_has_sigma_angtdist();
  inline void set_has_cover_extracheck();
  inline void clear_has_cover_extracheck();
  inline void set_has_margin_ratio();
  inline void clear_has_margin_ratio();
  inline void set_has_ndim_label();
  inline void clear_has_ndim_label();
  inline void set_has_margin_ratio_h();
  inline void clear_has_margin_ratio_h();
  inline void set_has_only_w();
  inline void clear_has_only_w();
  inline void set_has_showanchornumvsscale();
  inline void clear_has_showanchornumvsscale();
  inline void set_has_conf_norm_pos();
  inline void clear_has_conf_norm_pos();
  inline void set_has_using_gmhc_loss();
  inline void clear_has_using_gmhc_loss();
  inline void set_has_mbins();
  inline void clear_has_mbins();
  inline void set_has_using_twoclassbalance_loss();
  inline void clear_has_using_twoclassbalance_loss();
  inline void set_has_only_pos();
  inline void clear_has_only_pos();
  inline void set_has_neg_max_value();
  inline void clear_has_neg_max_value();
  inline void set_has_objectness_score();
  inline void clear_has_objectness_score();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_weight_type();
  inline void clear_has_weight_type();
  inline void set_has_use_group();
  inline void clear_has_use_group();
  inline void set_has_k1();
  inline void clear_has_k1();
  inline void set_has_k2();
  inline void clear_has_k2();
  inline void set_has_b1();
  inline void clear_has_b1();
  inline void set_has_b2();
  inline void clear_has_b2();
  inline void set_has_diff_thred();
  inline void clear_has_diff_thred();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_pos_objectness_score();
  inline void clear_has_pos_objectness_score();
  inline void set_has_do_pos_mining();
  inline void clear_has_do_pos_mining();
  inline void set_has_weight_mode();
  inline void clear_has_weight_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[2];
  int loc_loss_type_;
  int conf_loss_type_;
  float loc_weight_;
  ::google::protobuf::uint32 num_classes_;
  int match_type_;
  float overlap_threshold_;
  bool share_location_;
  bool use_prior_for_matching_;
  bool use_difficult_gt_;
  bool do_neg_mining_;
  ::google::protobuf::uint32 background_label_id_;
  float neg_pos_ratio_;
  float neg_overlap_;
  int code_type_;
  ::google::protobuf::int32 loc_class_;
  float conf_weight_;
  float size_threshold_;
  bool encode_variance_in_target_;
  bool map_object_to_agnostic_;
  bool using_focus_loss_;
  bool flag_noperson_;
  ::google::protobuf::int32 alias_id_;
  float gama_;
  float alpha_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > gt_labels_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > target_labels_;
  int check_effectmode_;
  int matchtype_anchorgt_;
  float sigma_angtdist_;
  float cover_extracheck_;
  bool flag_checkanchor_;
  bool flag_mtanchorgt_allneg_;
  bool only_w_;
  bool showanchornumvsscale_;
  float margin_ratio_;
  ::google::protobuf::int32 ndim_label_;
  float margin_ratio_h_;
  ::google::protobuf::int32 mbins_;
  bool conf_norm_pos_;
  bool using_gmhc_loss_;
  bool using_twoclassbalance_loss_;
  bool only_pos_;
  ::google::protobuf::int32 neg_max_value_;
  float objectness_score_;
  static ::std::string* _default_weight_type_;
  ::google::protobuf::internal::ArenaStringPtr weight_type_;
  float weight_;
  float k1_;
  float k2_;
  float b1_;
  float b2_;
  bool use_group_;
  bool do_pos_mining_;
  float diff_thred_;
  float power_;
  float pos_objectness_score_;
  ::google::protobuf::int32 weight_mode_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static BBoxLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class DenseBBoxLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.DenseBBoxLossParameter) */ {
 public:
  DenseBBoxLossParameter();
  virtual ~DenseBBoxLossParameter();

  DenseBBoxLossParameter(const DenseBBoxLossParameter& from);

  inline DenseBBoxLossParameter& operator=(const DenseBBoxLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DenseBBoxLossParameter& default_instance();

  void Swap(DenseBBoxLossParameter* other);

  // implements Message ----------------------------------------------

  inline DenseBBoxLossParameter* New() const { return New(NULL); }

  DenseBBoxLossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DenseBBoxLossParameter& from);
  void MergeFrom(const DenseBBoxLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DenseBBoxLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DenseBBoxLossParameter_EffectiveMode EffectiveMode;
  static const EffectiveMode BOTTOMSIZE =
    DenseBBoxLossParameter_EffectiveMode_BOTTOMSIZE;
  static const EffectiveMode IMAGESIZE =
    DenseBBoxLossParameter_EffectiveMode_IMAGESIZE;
  static inline bool EffectiveMode_IsValid(int value) {
    return DenseBBoxLossParameter_EffectiveMode_IsValid(value);
  }
  static const EffectiveMode EffectiveMode_MIN =
    DenseBBoxLossParameter_EffectiveMode_EffectiveMode_MIN;
  static const EffectiveMode EffectiveMode_MAX =
    DenseBBoxLossParameter_EffectiveMode_EffectiveMode_MAX;
  static const int EffectiveMode_ARRAYSIZE =
    DenseBBoxLossParameter_EffectiveMode_EffectiveMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EffectiveMode_descriptor() {
    return DenseBBoxLossParameter_EffectiveMode_descriptor();
  }
  static inline const ::std::string& EffectiveMode_Name(EffectiveMode value) {
    return DenseBBoxLossParameter_EffectiveMode_Name(value);
  }
  static inline bool EffectiveMode_Parse(const ::std::string& name,
      EffectiveMode* value) {
    return DenseBBoxLossParameter_EffectiveMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.MultiBoxLossParameter.LocLossType loc_loss_type = 1;
  bool has_loc_loss_type() const;
  void clear_loc_loss_type();
  static const int kLocLossTypeFieldNumber = 1;
  ::caffe::MultiBoxLossParameter_LocLossType loc_loss_type() const;
  void set_loc_loss_type(::caffe::MultiBoxLossParameter_LocLossType value);

  // optional .caffe.MultiBoxLossParameter.ConfLossType conf_loss_type = 2;
  bool has_conf_loss_type() const;
  void clear_conf_loss_type();
  static const int kConfLossTypeFieldNumber = 2;
  ::caffe::MultiBoxLossParameter_ConfLossType conf_loss_type() const;
  void set_conf_loss_type(::caffe::MultiBoxLossParameter_ConfLossType value);

  // optional float loc_weight = 3 [default = 1];
  bool has_loc_weight() const;
  void clear_loc_weight();
  static const int kLocWeightFieldNumber = 3;
  float loc_weight() const;
  void set_loc_weight(float value);

  // optional uint32 num_classes = 4 [default = 2];
  bool has_num_classes() const;
  void clear_num_classes();
  static const int kNumClassesFieldNumber = 4;
  ::google::protobuf::uint32 num_classes() const;
  void set_num_classes(::google::protobuf::uint32 value);

  // optional float overlap_threshold = 5 [default = 0.5];
  bool has_overlap_threshold() const;
  void clear_overlap_threshold();
  static const int kOverlapThresholdFieldNumber = 5;
  float overlap_threshold() const;
  void set_overlap_threshold(float value);

  // optional bool use_prior_for_matching = 6 [default = true];
  bool has_use_prior_for_matching() const;
  void clear_use_prior_for_matching();
  static const int kUsePriorForMatchingFieldNumber = 6;
  bool use_prior_for_matching() const;
  void set_use_prior_for_matching(bool value);

  // optional bool use_difficult_gt = 7 [default = false];
  bool has_use_difficult_gt() const;
  void clear_use_difficult_gt();
  static const int kUseDifficultGtFieldNumber = 7;
  bool use_difficult_gt() const;
  void set_use_difficult_gt(bool value);

  // optional bool do_neg_mining = 8 [default = true];
  bool has_do_neg_mining() const;
  void clear_do_neg_mining();
  static const int kDoNegMiningFieldNumber = 8;
  bool do_neg_mining() const;
  void set_do_neg_mining(bool value);

  // optional float neg_pos_ratio = 9 [default = 3];
  bool has_neg_pos_ratio() const;
  void clear_neg_pos_ratio();
  static const int kNegPosRatioFieldNumber = 9;
  float neg_pos_ratio() const;
  void set_neg_pos_ratio(float value);

  // optional float neg_overlap = 10 [default = 0.5];
  bool has_neg_overlap() const;
  void clear_neg_overlap();
  static const int kNegOverlapFieldNumber = 10;
  float neg_overlap() const;
  void set_neg_overlap(float value);

  // optional .caffe.PriorBoxParameter.CodeType code_type = 11;
  bool has_code_type() const;
  void clear_code_type();
  static const int kCodeTypeFieldNumber = 11;
  ::caffe::PriorBoxParameter_CodeType code_type() const;
  void set_code_type(::caffe::PriorBoxParameter_CodeType value);

  // optional bool encode_variance_in_target = 12 [default = false];
  bool has_encode_variance_in_target() const;
  void clear_encode_variance_in_target();
  static const int kEncodeVarianceInTargetFieldNumber = 12;
  bool encode_variance_in_target() const;
  void set_encode_variance_in_target(bool value);

  // optional float conf_weight = 13 [default = 1];
  bool has_conf_weight() const;
  void clear_conf_weight();
  static const int kConfWeightFieldNumber = 13;
  float conf_weight() const;
  void set_conf_weight(float value);

  // optional float size_threshold = 14 [default = 0.001];
  bool has_size_threshold() const;
  void clear_size_threshold();
  static const int kSizeThresholdFieldNumber = 14;
  float size_threshold() const;
  void set_size_threshold(float value);

  // optional int32 alias_id = 15 [default = 0];
  bool has_alias_id() const;
  void clear_alias_id();
  static const int kAliasIdFieldNumber = 15;
  ::google::protobuf::int32 alias_id() const;
  void set_alias_id(::google::protobuf::int32 value);

  // optional bool using_focus_loss = 16 [default = false];
  bool has_using_focus_loss() const;
  void clear_using_focus_loss();
  static const int kUsingFocusLossFieldNumber = 16;
  bool using_focus_loss() const;
  void set_using_focus_loss(bool value);

  // optional float gama = 17 [default = 2];
  bool has_gama() const;
  void clear_gama();
  static const int kGamaFieldNumber = 17;
  float gama() const;
  void set_gama(float value);

  // optional float alpha = 25 [default = 1];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 25;
  float alpha() const;
  void set_alpha(float value);

  // repeated int32 gt_labels = 18;
  int gt_labels_size() const;
  void clear_gt_labels();
  static const int kGtLabelsFieldNumber = 18;
  ::google::protobuf::int32 gt_labels(int index) const;
  void set_gt_labels(int index, ::google::protobuf::int32 value);
  void add_gt_labels(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      gt_labels() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_gt_labels();

  // repeated int32 target_labels = 19;
  int target_labels_size() const;
  void clear_target_labels();
  static const int kTargetLabelsFieldNumber = 19;
  ::google::protobuf::int32 target_labels(int index) const;
  void set_target_labels(int index, ::google::protobuf::int32 value);
  void add_target_labels(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      target_labels() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_target_labels();

  // optional bool flag_noperson = 20 [default = false];
  bool has_flag_noperson() const;
  void clear_flag_noperson();
  static const int kFlagNopersonFieldNumber = 20;
  bool flag_noperson() const;
  void set_flag_noperson(bool value);

  // optional float size_threshold_max = 21 [default = 10];
  bool has_size_threshold_max() const;
  void clear_size_threshold_max();
  static const int kSizeThresholdMaxFieldNumber = 21;
  float size_threshold_max() const;
  void set_size_threshold_max(float value);

  // optional bool flag_showdebug = 22 [default = false];
  bool has_flag_showdebug() const;
  void clear_flag_showdebug();
  static const int kFlagShowdebugFieldNumber = 22;
  bool flag_showdebug() const;
  void set_flag_showdebug(bool value);

  // optional bool flag_forcematchallgt = 23 [default = false];
  bool has_flag_forcematchallgt() const;
  void clear_flag_forcematchallgt();
  static const int kFlagForcematchallgtFieldNumber = 23;
  bool flag_forcematchallgt() const;
  void set_flag_forcematchallgt(bool value);

  // optional bool flag_areamaxcheckinmatch = 24 [default = true];
  bool has_flag_areamaxcheckinmatch() const;
  void clear_flag_areamaxcheckinmatch();
  static const int kFlagAreamaxcheckinmatchFieldNumber = 24;
  bool flag_areamaxcheckinmatch() const;
  void set_flag_areamaxcheckinmatch(bool value);

  // optional bool flag_checkanchor = 26 [default = false];
  bool has_flag_checkanchor() const;
  void clear_flag_checkanchor();
  static const int kFlagCheckanchorFieldNumber = 26;
  bool flag_checkanchor() const;
  void set_flag_checkanchor(bool value);

  // optional .caffe.DenseBBoxLossParameter.EffectiveMode check_effectmode = 27 [default = BOTTOMSIZE];
  bool has_check_effectmode() const;
  void clear_check_effectmode();
  static const int kCheckEffectmodeFieldNumber = 27;
  ::caffe::DenseBBoxLossParameter_EffectiveMode check_effectmode() const;
  void set_check_effectmode(::caffe::DenseBBoxLossParameter_EffectiveMode value);

  // optional int32 ndim_label = 33 [default = 9];
  bool has_ndim_label() const;
  void clear_ndim_label();
  static const int kNdimLabelFieldNumber = 33;
  ::google::protobuf::int32 ndim_label() const;
  void set_ndim_label(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.DenseBBoxLossParameter)
 private:
  inline void set_has_loc_loss_type();
  inline void clear_has_loc_loss_type();
  inline void set_has_conf_loss_type();
  inline void clear_has_conf_loss_type();
  inline void set_has_loc_weight();
  inline void clear_has_loc_weight();
  inline void set_has_num_classes();
  inline void clear_has_num_classes();
  inline void set_has_overlap_threshold();
  inline void clear_has_overlap_threshold();
  inline void set_has_use_prior_for_matching();
  inline void clear_has_use_prior_for_matching();
  inline void set_has_use_difficult_gt();
  inline void clear_has_use_difficult_gt();
  inline void set_has_do_neg_mining();
  inline void clear_has_do_neg_mining();
  inline void set_has_neg_pos_ratio();
  inline void clear_has_neg_pos_ratio();
  inline void set_has_neg_overlap();
  inline void clear_has_neg_overlap();
  inline void set_has_code_type();
  inline void clear_has_code_type();
  inline void set_has_encode_variance_in_target();
  inline void clear_has_encode_variance_in_target();
  inline void set_has_conf_weight();
  inline void clear_has_conf_weight();
  inline void set_has_size_threshold();
  inline void clear_has_size_threshold();
  inline void set_has_alias_id();
  inline void clear_has_alias_id();
  inline void set_has_using_focus_loss();
  inline void clear_has_using_focus_loss();
  inline void set_has_gama();
  inline void clear_has_gama();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_flag_noperson();
  inline void clear_has_flag_noperson();
  inline void set_has_size_threshold_max();
  inline void clear_has_size_threshold_max();
  inline void set_has_flag_showdebug();
  inline void clear_has_flag_showdebug();
  inline void set_has_flag_forcematchallgt();
  inline void clear_has_flag_forcematchallgt();
  inline void set_has_flag_areamaxcheckinmatch();
  inline void clear_has_flag_areamaxcheckinmatch();
  inline void set_has_flag_checkanchor();
  inline void clear_has_flag_checkanchor();
  inline void set_has_check_effectmode();
  inline void clear_has_check_effectmode();
  inline void set_has_ndim_label();
  inline void clear_has_ndim_label();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int loc_loss_type_;
  int conf_loss_type_;
  float loc_weight_;
  ::google::protobuf::uint32 num_classes_;
  float overlap_threshold_;
  bool use_prior_for_matching_;
  bool use_difficult_gt_;
  bool do_neg_mining_;
  bool encode_variance_in_target_;
  float neg_pos_ratio_;
  float neg_overlap_;
  int code_type_;
  float conf_weight_;
  float size_threshold_;
  ::google::protobuf::int32 alias_id_;
  float gama_;
  float alpha_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > gt_labels_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > target_labels_;
  bool using_focus_loss_;
  bool flag_noperson_;
  bool flag_showdebug_;
  bool flag_forcematchallgt_;
  float size_threshold_max_;
  bool flag_areamaxcheckinmatch_;
  bool flag_checkanchor_;
  int check_effectmode_;
  ::google::protobuf::int32 ndim_label_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static DenseBBoxLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class MultiMcBoxLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MultiMcBoxLossParameter) */ {
 public:
  MultiMcBoxLossParameter();
  virtual ~MultiMcBoxLossParameter();

  MultiMcBoxLossParameter(const MultiMcBoxLossParameter& from);

  inline MultiMcBoxLossParameter& operator=(const MultiMcBoxLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiMcBoxLossParameter& default_instance();

  void Swap(MultiMcBoxLossParameter* other);

  // implements Message ----------------------------------------------

  inline MultiMcBoxLossParameter* New() const { return New(NULL); }

  MultiMcBoxLossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MultiMcBoxLossParameter& from);
  void MergeFrom(const MultiMcBoxLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MultiMcBoxLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MultiMcBoxLossParameter_ConfLossType ConfLossType;
  static const ConfLossType SOFTMAX =
    MultiMcBoxLossParameter_ConfLossType_SOFTMAX;
  static const ConfLossType LOGISTIC =
    MultiMcBoxLossParameter_ConfLossType_LOGISTIC;
  static inline bool ConfLossType_IsValid(int value) {
    return MultiMcBoxLossParameter_ConfLossType_IsValid(value);
  }
  static const ConfLossType ConfLossType_MIN =
    MultiMcBoxLossParameter_ConfLossType_ConfLossType_MIN;
  static const ConfLossType ConfLossType_MAX =
    MultiMcBoxLossParameter_ConfLossType_ConfLossType_MAX;
  static const int ConfLossType_ARRAYSIZE =
    MultiMcBoxLossParameter_ConfLossType_ConfLossType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConfLossType_descriptor() {
    return MultiMcBoxLossParameter_ConfLossType_descriptor();
  }
  static inline const ::std::string& ConfLossType_Name(ConfLossType value) {
    return MultiMcBoxLossParameter_ConfLossType_Name(value);
  }
  static inline bool ConfLossType_Parse(const ::std::string& name,
      ConfLossType* value) {
    return MultiMcBoxLossParameter_ConfLossType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.MultiBoxLossParameter.LocLossType loc_loss_type = 1 [default = SMOOTH_L1];
  bool has_loc_loss_type() const;
  void clear_loc_loss_type();
  static const int kLocLossTypeFieldNumber = 1;
  ::caffe::MultiBoxLossParameter_LocLossType loc_loss_type() const;
  void set_loc_loss_type(::caffe::MultiBoxLossParameter_LocLossType value);

  // optional .caffe.MultiMcBoxLossParameter.ConfLossType conf_loss_type = 2 [default = SOFTMAX];
  bool has_conf_loss_type() const;
  void clear_conf_loss_type();
  static const int kConfLossTypeFieldNumber = 2;
  ::caffe::MultiMcBoxLossParameter_ConfLossType conf_loss_type() const;
  void set_conf_loss_type(::caffe::MultiMcBoxLossParameter_ConfLossType value);

  // optional float loc_weight = 3 [default = 1];
  bool has_loc_weight() const;
  void clear_loc_weight();
  static const int kLocWeightFieldNumber = 3;
  float loc_weight() const;
  void set_loc_weight(float value);

  // optional uint32 num_classes = 4;
  bool has_num_classes() const;
  void clear_num_classes();
  static const int kNumClassesFieldNumber = 4;
  ::google::protobuf::uint32 num_classes() const;
  void set_num_classes(::google::protobuf::uint32 value);

  // optional bool share_location = 5 [default = true];
  bool has_share_location() const;
  void clear_share_location();
  static const int kShareLocationFieldNumber = 5;
  bool share_location() const;
  void set_share_location(bool value);

  // optional .caffe.MultiBoxLossParameter.MatchType match_type = 6 [default = PER_PREDICTION];
  bool has_match_type() const;
  void clear_match_type();
  static const int kMatchTypeFieldNumber = 6;
  ::caffe::MultiBoxLossParameter_MatchType match_type() const;
  void set_match_type(::caffe::MultiBoxLossParameter_MatchType value);

  // optional float overlap_threshold = 7 [default = 0.5];
  bool has_overlap_threshold() const;
  void clear_overlap_threshold();
  static const int kOverlapThresholdFieldNumber = 7;
  float overlap_threshold() const;
  void set_overlap_threshold(float value);

  // optional bool use_prior_for_matching = 8 [default = true];
  bool has_use_prior_for_matching() const;
  void clear_use_prior_for_matching();
  static const int kUsePriorForMatchingFieldNumber = 8;
  bool use_prior_for_matching() const;
  void set_use_prior_for_matching(bool value);

  // optional uint32 background_label_id = 9 [default = 0];
  bool has_background_label_id() const;
  void clear_background_label_id();
  static const int kBackgroundLabelIdFieldNumber = 9;
  ::google::protobuf::uint32 background_label_id() const;
  void set_background_label_id(::google::protobuf::uint32 value);

  // optional bool use_difficult_gt = 10 [default = true];
  bool has_use_difficult_gt() const;
  void clear_use_difficult_gt();
  static const int kUseDifficultGtFieldNumber = 10;
  bool use_difficult_gt() const;
  void set_use_difficult_gt(bool value);

  // optional bool do_neg_mining = 11 [default = true];
  bool has_do_neg_mining() const;
  void clear_do_neg_mining();
  static const int kDoNegMiningFieldNumber = 11;
  bool do_neg_mining() const;
  void set_do_neg_mining(bool value);

  // optional float neg_pos_ratio = 12 [default = 3];
  bool has_neg_pos_ratio() const;
  void clear_neg_pos_ratio();
  static const int kNegPosRatioFieldNumber = 12;
  float neg_pos_ratio() const;
  void set_neg_pos_ratio(float value);

  // optional float neg_overlap = 13 [default = 0.5];
  bool has_neg_overlap() const;
  void clear_neg_overlap();
  static const int kNegOverlapFieldNumber = 13;
  float neg_overlap() const;
  void set_neg_overlap(float value);

  // optional .caffe.PriorBoxParameter.CodeType code_type = 14 [default = CORNER];
  bool has_code_type() const;
  void clear_code_type();
  static const int kCodeTypeFieldNumber = 14;
  ::caffe::PriorBoxParameter_CodeType code_type() const;
  void set_code_type(::caffe::PriorBoxParameter_CodeType value);

  // optional bool encode_variance_in_target = 16 [default = false];
  bool has_encode_variance_in_target() const;
  void clear_encode_variance_in_target();
  static const int kEncodeVarianceInTargetFieldNumber = 16;
  bool encode_variance_in_target() const;
  void set_encode_variance_in_target(bool value);

  // optional bool map_object_to_agnostic = 17 [default = false];
  bool has_map_object_to_agnostic() const;
  void clear_map_object_to_agnostic();
  static const int kMapObjectToAgnosticFieldNumber = 17;
  bool map_object_to_agnostic() const;
  void set_map_object_to_agnostic(bool value);

  // optional int32 loc_class = 24 [default = 1];
  bool has_loc_class() const;
  void clear_loc_class();
  static const int kLocClassFieldNumber = 24;
  ::google::protobuf::int32 loc_class() const;
  void set_loc_class(::google::protobuf::int32 value);

  // optional float conf_weight = 25 [default = 1];
  bool has_conf_weight() const;
  void clear_conf_weight();
  static const int kConfWeightFieldNumber = 25;
  float conf_weight() const;
  void set_conf_weight(float value);

  // optional string name_to_label_file = 47;
  bool has_name_to_label_file() const;
  void clear_name_to_label_file();
  static const int kNameToLabelFileFieldNumber = 47;
  const ::std::string& name_to_label_file() const;
  void set_name_to_label_file(const ::std::string& value);
  void set_name_to_label_file(const char* value);
  void set_name_to_label_file(const char* value, size_t size);
  ::std::string* mutable_name_to_label_file();
  ::std::string* release_name_to_label_file();
  void set_allocated_name_to_label_file(::std::string* name_to_label_file);

  // optional bool rescore = 48 [default = true];
  bool has_rescore() const;
  void clear_rescore();
  static const int kRescoreFieldNumber = 48;
  bool rescore() const;
  void set_rescore(bool value);

  // optional float object_scale = 49 [default = 1];
  bool has_object_scale() const;
  void clear_object_scale();
  static const int kObjectScaleFieldNumber = 49;
  float object_scale() const;
  void set_object_scale(float value);

  // optional float noobject_scale = 50 [default = 1];
  bool has_noobject_scale() const;
  void clear_noobject_scale();
  static const int kNoobjectScaleFieldNumber = 50;
  float noobject_scale() const;
  void set_noobject_scale(float value);

  // optional float class_scale = 51 [default = 1];
  bool has_class_scale() const;
  void clear_class_scale();
  static const int kClassScaleFieldNumber = 51;
  float class_scale() const;
  void set_class_scale(float value);

  // optional float loc_scale = 52 [default = 1];
  bool has_loc_scale() const;
  void clear_loc_scale();
  static const int kLocScaleFieldNumber = 52;
  float loc_scale() const;
  void set_loc_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.MultiMcBoxLossParameter)
 private:
  inline void set_has_loc_loss_type();
  inline void clear_has_loc_loss_type();
  inline void set_has_conf_loss_type();
  inline void clear_has_conf_loss_type();
  inline void set_has_loc_weight();
  inline void clear_has_loc_weight();
  inline void set_has_num_classes();
  inline void clear_has_num_classes();
  inline void set_has_share_location();
  inline void clear_has_share_location();
  inline void set_has_match_type();
  inline void clear_has_match_type();
  inline void set_has_overlap_threshold();
  inline void clear_has_overlap_threshold();
  inline void set_has_use_prior_for_matching();
  inline void clear_has_use_prior_for_matching();
  inline void set_has_background_label_id();
  inline void clear_has_background_label_id();
  inline void set_has_use_difficult_gt();
  inline void clear_has_use_difficult_gt();
  inline void set_has_do_neg_mining();
  inline void clear_has_do_neg_mining();
  inline void set_has_neg_pos_ratio();
  inline void clear_has_neg_pos_ratio();
  inline void set_has_neg_overlap();
  inline void clear_has_neg_overlap();
  inline void set_has_code_type();
  inline void clear_has_code_type();
  inline void set_has_encode_variance_in_target();
  inline void clear_has_encode_variance_in_target();
  inline void set_has_map_object_to_agnostic();
  inline void clear_has_map_object_to_agnostic();
  inline void set_has_loc_class();
  inline void clear_has_loc_class();
  inline void set_has_conf_weight();
  inline void clear_has_conf_weight();
  inline void set_has_name_to_label_file();
  inline void clear_has_name_to_label_file();
  inline void set_has_rescore();
  inline void clear_has_rescore();
  inline void set_has_object_scale();
  inline void clear_has_object_scale();
  inline void set_has_noobject_scale();
  inline void clear_has_noobject_scale();
  inline void set_has_class_scale();
  inline void clear_has_class_scale();
  inline void set_has_loc_scale();
  inline void clear_has_loc_scale();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int loc_loss_type_;
  int conf_loss_type_;
  float loc_weight_;
  ::google::protobuf::uint32 num_classes_;
  int match_type_;
  float overlap_threshold_;
  bool share_location_;
  bool use_prior_for_matching_;
  bool use_difficult_gt_;
  bool do_neg_mining_;
  ::google::protobuf::uint32 background_label_id_;
  float neg_pos_ratio_;
  float neg_overlap_;
  int code_type_;
  ::google::protobuf::int32 loc_class_;
  bool encode_variance_in_target_;
  bool map_object_to_agnostic_;
  bool rescore_;
  float conf_weight_;
  ::google::protobuf::internal::ArenaStringPtr name_to_label_file_;
  float object_scale_;
  float noobject_scale_;
  float class_scale_;
  float loc_scale_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static MultiMcBoxLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class MVNParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MVNParameter) */ {
 public:
  MVNParameter();
  virtual ~MVNParameter();

  MVNParameter(const MVNParameter& from);

  inline MVNParameter& operator=(const MVNParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MVNParameter& default_instance();

  void Swap(MVNParameter* other);

  // implements Message ----------------------------------------------

  inline MVNParameter* New() const { return New(NULL); }

  MVNParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MVNParameter& from);
  void MergeFrom(const MVNParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MVNParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool normalize_variance = 1 [default = true];
  bool has_normalize_variance() const;
  void clear_normalize_variance();
  static const int kNormalizeVarianceFieldNumber = 1;
  bool normalize_variance() const;
  void set_normalize_variance(bool value);

  // optional bool across_channels = 2 [default = false];
  bool has_across_channels() const;
  void clear_across_channels();
  static const int kAcrossChannelsFieldNumber = 2;
  bool across_channels() const;
  void set_across_channels(bool value);

  // optional float eps = 3 [default = 1e-09];
  bool has_eps() const;
  void clear_eps();
  static const int kEpsFieldNumber = 3;
  float eps() const;
  void set_eps(float value);

  // @@protoc_insertion_point(class_scope:caffe.MVNParameter)
 private:
  inline void set_has_normalize_variance();
  inline void clear_has_normalize_variance();
  inline void set_has_across_channels();
  inline void clear_has_across_channels();
  inline void set_has_eps();
  inline void clear_has_eps();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool normalize_variance_;
  bool across_channels_;
  float eps_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static MVNParameter* default_instance_;
};
// -------------------------------------------------------------------

class MaskLossParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.MaskLossParameter) */ {
 public:
  MaskLossParameter();
  virtual ~MaskLossParameter();

  MaskLossParameter(const MaskLossParameter& from);

  inline MaskLossParameter& operator=(const MaskLossParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaskLossParameter& default_instance();

  void Swap(MaskLossParameter* other);

  // implements Message ----------------------------------------------

  inline MaskLossParameter* New() const { return New(NULL); }

  MaskLossParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MaskLossParameter& from);
  void MergeFrom(const MaskLossParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MaskLossParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float scale = 1 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 1;
  float scale() const;
  void set_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.MaskLossParameter)
 private:
  inline void set_has_scale();
  inline void clear_has_scale();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float scale_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static MaskLossParameter* default_instance_;
};
// -------------------------------------------------------------------

class NormalizeParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NormalizeParameter) */ {
 public:
  NormalizeParameter();
  virtual ~NormalizeParameter();

  NormalizeParameter(const NormalizeParameter& from);

  inline NormalizeParameter& operator=(const NormalizeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NormalizeParameter& default_instance();

  void Swap(NormalizeParameter* other);

  // implements Message ----------------------------------------------

  inline NormalizeParameter* New() const { return New(NULL); }

  NormalizeParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NormalizeParameter& from);
  void MergeFrom(const NormalizeParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NormalizeParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool across_spatial = 1 [default = true];
  bool has_across_spatial() const;
  void clear_across_spatial();
  static const int kAcrossSpatialFieldNumber = 1;
  bool across_spatial() const;
  void set_across_spatial(bool value);

  // optional .caffe.FillerParameter scale_filler = 2;
  bool has_scale_filler() const;
  void clear_scale_filler();
  static const int kScaleFillerFieldNumber = 2;
  const ::caffe::FillerParameter& scale_filler() const;
  ::caffe::FillerParameter* mutable_scale_filler();
  ::caffe::FillerParameter* release_scale_filler();
  void set_allocated_scale_filler(::caffe::FillerParameter* scale_filler);

  // optional bool channel_shared = 3 [default = true];
  bool has_channel_shared() const;
  void clear_channel_shared();
  static const int kChannelSharedFieldNumber = 3;
  bool channel_shared() const;
  void set_channel_shared(bool value);

  // optional float eps = 4 [default = 1e-10];
  bool has_eps() const;
  void clear_eps();
  static const int kEpsFieldNumber = 4;
  float eps() const;
  void set_eps(float value);

  // @@protoc_insertion_point(class_scope:caffe.NormalizeParameter)
 private:
  inline void set_has_across_spatial();
  inline void clear_has_across_spatial();
  inline void set_has_scale_filler();
  inline void clear_has_scale_filler();
  inline void set_has_channel_shared();
  inline void clear_has_channel_shared();
  inline void set_has_eps();
  inline void clear_has_eps();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::FillerParameter* scale_filler_;
  bool across_spatial_;
  bool channel_shared_;
  float eps_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static NormalizeParameter* default_instance_;
};
// -------------------------------------------------------------------

class NmsParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.NmsParameter) */ {
 public:
  NmsParameter();
  virtual ~NmsParameter();

  NmsParameter(const NmsParameter& from);

  inline NmsParameter& operator=(const NmsParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NmsParameter& default_instance();

  void Swap(NmsParameter* other);

  // implements Message ----------------------------------------------

  inline NmsParameter* New() const { return New(NULL); }

  NmsParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NmsParameter& from);
  void MergeFrom(const NmsParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NmsParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float threshold = 1 [default = 0.05];
  bool has_threshold() const;
  void clear_threshold();
  static const int kThresholdFieldNumber = 1;
  float threshold() const;
  void set_threshold(float value);

  // optional int32 num_parts = 2 [default = 15];
  bool has_num_parts() const;
  void clear_num_parts();
  static const int kNumPartsFieldNumber = 2;
  ::google::protobuf::int32 num_parts() const;
  void set_num_parts(::google::protobuf::int32 value);

  // optional int32 max_peaks = 3 [default = 36];
  bool has_max_peaks() const;
  void clear_max_peaks();
  static const int kMaxPeaksFieldNumber = 3;
  ::google::protobuf::int32 max_peaks() const;
  void set_max_peaks(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.NmsParameter)
 private:
  inline void set_has_threshold();
  inline void clear_has_threshold();
  inline void set_has_num_parts();
  inline void clear_has_num_parts();
  inline void set_has_max_peaks();
  inline void clear_has_max_peaks();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float threshold_;
  ::google::protobuf::int32 num_parts_;
  ::google::protobuf::int32 max_peaks_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static NmsParameter* default_instance_;
};
// -------------------------------------------------------------------

class ParameterParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ParameterParameter) */ {
 public:
  ParameterParameter();
  virtual ~ParameterParameter();

  ParameterParameter(const ParameterParameter& from);

  inline ParameterParameter& operator=(const ParameterParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParameterParameter& default_instance();

  void Swap(ParameterParameter* other);

  // implements Message ----------------------------------------------

  inline ParameterParameter* New() const { return New(NULL); }

  ParameterParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParameterParameter& from);
  void MergeFrom(const ParameterParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ParameterParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.BlobShape shape = 1;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  const ::caffe::BlobShape& shape() const;
  ::caffe::BlobShape* mutable_shape();
  ::caffe::BlobShape* release_shape();
  void set_allocated_shape(::caffe::BlobShape* shape);

  // @@protoc_insertion_point(class_scope:caffe.ParameterParameter)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::BlobShape* shape_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ParameterParameter* default_instance_;
};
// -------------------------------------------------------------------

class PermuteParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PermuteParameter) */ {
 public:
  PermuteParameter();
  virtual ~PermuteParameter();

  PermuteParameter(const PermuteParameter& from);

  inline PermuteParameter& operator=(const PermuteParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PermuteParameter& default_instance();

  void Swap(PermuteParameter* other);

  // implements Message ----------------------------------------------

  inline PermuteParameter* New() const { return New(NULL); }

  PermuteParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PermuteParameter& from);
  void MergeFrom(const PermuteParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PermuteParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 order = 1;
  int order_size() const;
  void clear_order();
  static const int kOrderFieldNumber = 1;
  ::google::protobuf::uint32 order(int index) const;
  void set_order(int index, ::google::protobuf::uint32 value);
  void add_order(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      order() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_order();

  // @@protoc_insertion_point(class_scope:caffe.PermuteParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > order_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static PermuteParameter* default_instance_;
};
// -------------------------------------------------------------------

class PoolingParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PoolingParameter) */ {
 public:
  PoolingParameter();
  virtual ~PoolingParameter();

  PoolingParameter(const PoolingParameter& from);

  inline PoolingParameter& operator=(const PoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoolingParameter& default_instance();

  void Swap(PoolingParameter* other);

  // implements Message ----------------------------------------------

  inline PoolingParameter* New() const { return New(NULL); }

  PoolingParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoolingParameter& from);
  void MergeFrom(const PoolingParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PoolingParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PoolingParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX =
    PoolingParameter_PoolMethod_MAX;
  static const PoolMethod AVE =
    PoolingParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC =
    PoolingParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return PoolingParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    PoolingParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    PoolingParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    PoolingParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return PoolingParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return PoolingParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return PoolingParameter_PoolMethod_Parse(name, value);
  }

  typedef PoolingParameter_Engine Engine;
  static const Engine DEFAULT =
    PoolingParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    PoolingParameter_Engine_CAFFE;
  static const Engine CUDNN =
    PoolingParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return PoolingParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    PoolingParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    PoolingParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    PoolingParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return PoolingParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return PoolingParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return PoolingParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
  bool has_pool() const;
  void clear_pool();
  static const int kPoolFieldNumber = 1;
  ::caffe::PoolingParameter_PoolMethod pool() const;
  void set_pool(::caffe::PoolingParameter_PoolMethod value);

  // optional uint32 pad = 4 [default = 0];
  bool has_pad() const;
  void clear_pad();
  static const int kPadFieldNumber = 4;
  ::google::protobuf::uint32 pad() const;
  void set_pad(::google::protobuf::uint32 value);

  // optional uint32 pad_h = 9 [default = 0];
  bool has_pad_h() const;
  void clear_pad_h();
  static const int kPadHFieldNumber = 9;
  ::google::protobuf::uint32 pad_h() const;
  void set_pad_h(::google::protobuf::uint32 value);

  // optional uint32 pad_w = 10 [default = 0];
  bool has_pad_w() const;
  void clear_pad_w();
  static const int kPadWFieldNumber = 10;
  ::google::protobuf::uint32 pad_w() const;
  void set_pad_w(::google::protobuf::uint32 value);

  // optional uint32 kernel_size = 2;
  bool has_kernel_size() const;
  void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 2;
  ::google::protobuf::uint32 kernel_size() const;
  void set_kernel_size(::google::protobuf::uint32 value);

  // optional uint32 kernel_h = 5;
  bool has_kernel_h() const;
  void clear_kernel_h();
  static const int kKernelHFieldNumber = 5;
  ::google::protobuf::uint32 kernel_h() const;
  void set_kernel_h(::google::protobuf::uint32 value);

  // optional uint32 kernel_w = 6;
  bool has_kernel_w() const;
  void clear_kernel_w();
  static const int kKernelWFieldNumber = 6;
  ::google::protobuf::uint32 kernel_w() const;
  void set_kernel_w(::google::protobuf::uint32 value);

  // optional uint32 stride = 3 [default = 1];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 3;
  ::google::protobuf::uint32 stride() const;
  void set_stride(::google::protobuf::uint32 value);

  // optional uint32 stride_h = 7;
  bool has_stride_h() const;
  void clear_stride_h();
  static const int kStrideHFieldNumber = 7;
  ::google::protobuf::uint32 stride_h() const;
  void set_stride_h(::google::protobuf::uint32 value);

  // optional uint32 stride_w = 8;
  bool has_stride_w() const;
  void clear_stride_w();
  static const int kStrideWFieldNumber = 8;
  ::google::protobuf::uint32 stride_w() const;
  void set_stride_w(::google::protobuf::uint32 value);

  // optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 11;
  ::caffe::PoolingParameter_Engine engine() const;
  void set_engine(::caffe::PoolingParameter_Engine value);

  // optional bool global_pooling = 12 [default = false];
  bool has_global_pooling() const;
  void clear_global_pooling();
  static const int kGlobalPoolingFieldNumber = 12;
  bool global_pooling() const;
  void set_global_pooling(bool value);

  // @@protoc_insertion_point(class_scope:caffe.PoolingParameter)
 private:
  inline void set_has_pool();
  inline void clear_has_pool();
  inline void set_has_pad();
  inline void clear_has_pad();
  inline void set_has_pad_h();
  inline void clear_has_pad_h();
  inline void set_has_pad_w();
  inline void clear_has_pad_w();
  inline void set_has_kernel_size();
  inline void clear_has_kernel_size();
  inline void set_has_kernel_h();
  inline void clear_has_kernel_h();
  inline void set_has_kernel_w();
  inline void clear_has_kernel_w();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_stride_h();
  inline void clear_has_stride_h();
  inline void set_has_stride_w();
  inline void clear_has_stride_w();
  inline void set_has_engine();
  inline void clear_has_engine();
  inline void set_has_global_pooling();
  inline void clear_has_global_pooling();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int pool_;
  ::google::protobuf::uint32 pad_;
  ::google::protobuf::uint32 pad_h_;
  ::google::protobuf::uint32 pad_w_;
  ::google::protobuf::uint32 kernel_size_;
  ::google::protobuf::uint32 kernel_h_;
  ::google::protobuf::uint32 kernel_w_;
  ::google::protobuf::uint32 stride_;
  ::google::protobuf::uint32 stride_h_;
  ::google::protobuf::uint32 stride_w_;
  int engine_;
  bool global_pooling_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static PoolingParameter* default_instance_;
};
// -------------------------------------------------------------------

class PowerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PowerParameter) */ {
 public:
  PowerParameter();
  virtual ~PowerParameter();

  PowerParameter(const PowerParameter& from);

  inline PowerParameter& operator=(const PowerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PowerParameter& default_instance();

  void Swap(PowerParameter* other);

  // implements Message ----------------------------------------------

  inline PowerParameter* New() const { return New(NULL); }

  PowerParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PowerParameter& from);
  void MergeFrom(const PowerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float power = 1 [default = 1];
  bool has_power() const;
  void clear_power();
  static const int kPowerFieldNumber = 1;
  float power() const;
  void set_power(float value);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // optional float shift = 3 [default = 0];
  bool has_shift() const;
  void clear_shift();
  static const int kShiftFieldNumber = 3;
  float shift() const;
  void set_shift(float value);

  // @@protoc_insertion_point(class_scope:caffe.PowerParameter)
 private:
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_shift();
  inline void clear_has_shift();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float power_;
  float scale_;
  float shift_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static PowerParameter* default_instance_;
};
// -------------------------------------------------------------------

class PoseDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PoseDataParameter) */ {
 public:
  PoseDataParameter();
  virtual ~PoseDataParameter();

  PoseDataParameter(const PoseDataParameter& from);

  inline PoseDataParameter& operator=(const PoseDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoseDataParameter& default_instance();

  void Swap(PoseDataParameter* other);

  // implements Message ----------------------------------------------

  inline PoseDataParameter* New() const { return New(NULL); }

  PoseDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoseDataParameter& from);
  void MergeFrom(const PoseDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PoseDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string xml_list = 1 [default = ""];
  bool has_xml_list() const;
  void clear_xml_list();
  static const int kXmlListFieldNumber = 1;
  const ::std::string& xml_list() const;
  void set_xml_list(const ::std::string& value);
  void set_xml_list(const char* value);
  void set_xml_list(const char* value, size_t size);
  ::std::string* mutable_xml_list();
  ::std::string* release_xml_list();
  void set_allocated_xml_list(::std::string* xml_list);

  // optional string xml_root = 2 [default = ""];
  bool has_xml_root() const;
  void clear_xml_root();
  static const int kXmlRootFieldNumber = 2;
  const ::std::string& xml_root() const;
  void set_xml_root(const ::std::string& value);
  void set_xml_root(const char* value);
  void set_xml_root(const char* value, size_t size);
  ::std::string* mutable_xml_root();
  ::std::string* release_xml_root();
  void set_allocated_xml_root(::std::string* xml_root);

  // optional bool shuffle = 3 [default = true];
  bool has_shuffle() const;
  void clear_shuffle();
  static const int kShuffleFieldNumber = 3;
  bool shuffle() const;
  void set_shuffle(bool value);

  // optional int32 rand_skip = 4 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 4;
  ::google::protobuf::int32 rand_skip() const;
  void set_rand_skip(::google::protobuf::int32 value);

  // optional int32 batch_size = 5 [default = 16];
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 5;
  ::google::protobuf::int32 batch_size() const;
  void set_batch_size(::google::protobuf::int32 value);

  // optional bool out_kps = 6 [default = false];
  bool has_out_kps() const;
  void clear_out_kps();
  static const int kOutKpsFieldNumber = 6;
  bool out_kps() const;
  void set_out_kps(bool value);

  // @@protoc_insertion_point(class_scope:caffe.PoseDataParameter)
 private:
  inline void set_has_xml_list();
  inline void clear_has_xml_list();
  inline void set_has_xml_root();
  inline void clear_has_xml_root();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_out_kps();
  inline void clear_has_out_kps();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr xml_list_;
  ::google::protobuf::internal::ArenaStringPtr xml_root_;
  ::google::protobuf::int32 rand_skip_;
  bool shuffle_;
  bool out_kps_;
  ::google::protobuf::int32 batch_size_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static PoseDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class ReidDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ReidDataParameter) */ {
 public:
  ReidDataParameter();
  virtual ~ReidDataParameter();

  ReidDataParameter(const ReidDataParameter& from);

  inline ReidDataParameter& operator=(const ReidDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReidDataParameter& default_instance();

  void Swap(ReidDataParameter* other);

  // implements Message ----------------------------------------------

  inline ReidDataParameter* New() const { return New(NULL); }

  ReidDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReidDataParameter& from);
  void MergeFrom(const ReidDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReidDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string xml_list = 1 [default = ""];
  bool has_xml_list() const;
  void clear_xml_list();
  static const int kXmlListFieldNumber = 1;
  const ::std::string& xml_list() const;
  void set_xml_list(const ::std::string& value);
  void set_xml_list(const char* value);
  void set_xml_list(const char* value, size_t size);
  ::std::string* mutable_xml_list();
  ::std::string* release_xml_list();
  void set_allocated_xml_list(::std::string* xml_list);

  // optional string xml_root = 2 [default = ""];
  bool has_xml_root() const;
  void clear_xml_root();
  static const int kXmlRootFieldNumber = 2;
  const ::std::string& xml_root() const;
  void set_xml_root(const ::std::string& value);
  void set_xml_root(const char* value);
  void set_xml_root(const char* value, size_t size);
  ::std::string* mutable_xml_root();
  ::std::string* release_xml_root();
  void set_allocated_xml_root(::std::string* xml_root);

  // optional bool shuffle = 3 [default = true];
  bool has_shuffle() const;
  void clear_shuffle();
  static const int kShuffleFieldNumber = 3;
  bool shuffle() const;
  void set_shuffle(bool value);

  // optional int32 rand_skip = 4 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 4;
  ::google::protobuf::int32 rand_skip() const;
  void set_rand_skip(::google::protobuf::int32 value);

  // optional int32 batch_size = 5 [default = 16];
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 5;
  ::google::protobuf::int32 batch_size() const;
  void set_batch_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.ReidDataParameter)
 private:
  inline void set_has_xml_list();
  inline void clear_has_xml_list();
  inline void set_has_xml_root();
  inline void clear_has_xml_root();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr xml_list_;
  ::google::protobuf::internal::ArenaStringPtr xml_root_;
  bool shuffle_;
  ::google::protobuf::int32 rand_skip_;
  ::google::protobuf::int32 batch_size_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ReidDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class PoseEvalParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PoseEvalParameter) */ {
 public:
  PoseEvalParameter();
  virtual ~PoseEvalParameter();

  PoseEvalParameter(const PoseEvalParameter& from);

  inline PoseEvalParameter& operator=(const PoseEvalParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoseEvalParameter& default_instance();

  void Swap(PoseEvalParameter* other);

  // implements Message ----------------------------------------------

  inline PoseEvalParameter* New() const { return New(NULL); }

  PoseEvalParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoseEvalParameter& from);
  void MergeFrom(const PoseEvalParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PoseEvalParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 stride = 1 [default = 8];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 1;
  ::google::protobuf::int32 stride() const;
  void set_stride(::google::protobuf::int32 value);

  // optional float area_thre = 2 [default = 1000];
  bool has_area_thre() const;
  void clear_area_thre();
  static const int kAreaThreFieldNumber = 2;
  float area_thre() const;
  void set_area_thre(float value);

  // repeated float oks_thre = 3;
  int oks_thre_size() const;
  void clear_oks_thre();
  static const int kOksThreFieldNumber = 3;
  float oks_thre(int index) const;
  void set_oks_thre(int index, float value);
  void add_oks_thre(float value);
  const ::google::protobuf::RepeatedField< float >&
      oks_thre() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_oks_thre();

  // @@protoc_insertion_point(class_scope:caffe.PoseEvalParameter)
 private:
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_area_thre();
  inline void clear_has_area_thre();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 stride_;
  float area_thre_;
  ::google::protobuf::RepeatedField< float > oks_thre_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static PoseEvalParameter* default_instance_;
};
// -------------------------------------------------------------------

class PoseDetParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PoseDetParameter) */ {
 public:
  PoseDetParameter();
  virtual ~PoseDetParameter();

  PoseDetParameter(const PoseDetParameter& from);

  inline PoseDetParameter& operator=(const PoseDetParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoseDetParameter& default_instance();

  void Swap(PoseDetParameter* other);

  // implements Message ----------------------------------------------

  inline PoseDetParameter* New() const { return New(NULL); }

  PoseDetParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PoseDetParameter& from);
  void MergeFrom(const PoseDetParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PoseDetParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_type_coco = 1 [default = true];
  bool has_is_type_coco() const;
  void clear_is_type_coco();
  static const int kIsTypeCocoFieldNumber = 1;
  bool is_type_coco() const;
  void set_is_type_coco(bool value);

  // optional float coverage_thre = 2 [default = 0.5];
  bool has_coverage_thre() const;
  void clear_coverage_thre();
  static const int kCoverageThreFieldNumber = 2;
  float coverage_thre() const;
  void set_coverage_thre(float value);

  // optional float score_pose_ebox = 3 [default = 0.8];
  bool has_score_pose_ebox() const;
  void clear_score_pose_ebox();
  static const int kScorePoseEboxFieldNumber = 3;
  float score_pose_ebox() const;
  void set_score_pose_ebox(float value);

  // optional float keep_det_box_thre = 4 [default = 0.9];
  bool has_keep_det_box_thre() const;
  void clear_keep_det_box_thre();
  static const int kKeepDetBoxThreFieldNumber = 4;
  float keep_det_box_thre() const;
  void set_keep_det_box_thre(float value);

  // @@protoc_insertion_point(class_scope:caffe.PoseDetParameter)
 private:
  inline void set_has_is_type_coco();
  inline void clear_has_is_type_coco();
  inline void set_has_coverage_thre();
  inline void clear_has_coverage_thre();
  inline void set_has_score_pose_ebox();
  inline void clear_has_score_pose_ebox();
  inline void set_has_keep_det_box_thre();
  inline void clear_has_keep_det_box_thre();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool is_type_coco_;
  float coverage_thre_;
  float score_pose_ebox_;
  float keep_det_box_thre_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static PoseDetParameter* default_instance_;
};
// -------------------------------------------------------------------

class PeaksFindParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PeaksFindParameter) */ {
 public:
  PeaksFindParameter();
  virtual ~PeaksFindParameter();

  PeaksFindParameter(const PeaksFindParameter& from);

  inline PeaksFindParameter& operator=(const PeaksFindParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeaksFindParameter& default_instance();

  void Swap(PeaksFindParameter* other);

  // implements Message ----------------------------------------------

  inline PeaksFindParameter* New() const { return New(NULL); }

  PeaksFindParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeaksFindParameter& from);
  void MergeFrom(const PeaksFindParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeaksFindParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 height = 1;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 1;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 width = 2;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.PeaksFindParameter)
 private:
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static PeaksFindParameter* default_instance_;
};
// -------------------------------------------------------------------

class PriorBoxParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PriorBoxParameter) */ {
 public:
  PriorBoxParameter();
  virtual ~PriorBoxParameter();

  PriorBoxParameter(const PriorBoxParameter& from);

  inline PriorBoxParameter& operator=(const PriorBoxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PriorBoxParameter& default_instance();

  void Swap(PriorBoxParameter* other);

  // implements Message ----------------------------------------------

  inline PriorBoxParameter* New() const { return New(NULL); }

  PriorBoxParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PriorBoxParameter& from);
  void MergeFrom(const PriorBoxParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PriorBoxParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PriorBoxParameter_CodeType CodeType;
  static const CodeType CORNER =
    PriorBoxParameter_CodeType_CORNER;
  static const CodeType CENTER_SIZE =
    PriorBoxParameter_CodeType_CENTER_SIZE;
  static inline bool CodeType_IsValid(int value) {
    return PriorBoxParameter_CodeType_IsValid(value);
  }
  static const CodeType CodeType_MIN =
    PriorBoxParameter_CodeType_CodeType_MIN;
  static const CodeType CodeType_MAX =
    PriorBoxParameter_CodeType_CodeType_MAX;
  static const int CodeType_ARRAYSIZE =
    PriorBoxParameter_CodeType_CodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CodeType_descriptor() {
    return PriorBoxParameter_CodeType_descriptor();
  }
  static inline const ::std::string& CodeType_Name(CodeType value) {
    return PriorBoxParameter_CodeType_Name(value);
  }
  static inline bool CodeType_Parse(const ::std::string& name,
      CodeType* value) {
    return PriorBoxParameter_CodeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated float min_size = 1;
  int min_size_size() const;
  void clear_min_size();
  static const int kMinSizeFieldNumber = 1;
  float min_size(int index) const;
  void set_min_size(int index, float value);
  void add_min_size(float value);
  const ::google::protobuf::RepeatedField< float >&
      min_size() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_min_size();

  // repeated float max_size = 2;
  int max_size_size() const;
  void clear_max_size();
  static const int kMaxSizeFieldNumber = 2;
  float max_size(int index) const;
  void set_max_size(int index, float value);
  void add_max_size(float value);
  const ::google::protobuf::RepeatedField< float >&
      max_size() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_max_size();

  // repeated float aspect_ratio = 3;
  int aspect_ratio_size() const;
  void clear_aspect_ratio();
  static const int kAspectRatioFieldNumber = 3;
  float aspect_ratio(int index) const;
  void set_aspect_ratio(int index, float value);
  void add_aspect_ratio(float value);
  const ::google::protobuf::RepeatedField< float >&
      aspect_ratio() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_aspect_ratio();

  // optional bool flip = 4 [default = true];
  bool has_flip() const;
  void clear_flip();
  static const int kFlipFieldNumber = 4;
  bool flip() const;
  void set_flip(bool value);

  // optional bool clip = 5 [default = false];
  bool has_clip() const;
  void clear_clip();
  static const int kClipFieldNumber = 5;
  bool clip() const;
  void set_clip(bool value);

  // repeated float variance = 6;
  int variance_size() const;
  void clear_variance();
  static const int kVarianceFieldNumber = 6;
  float variance(int index) const;
  void set_variance(int index, float value);
  void add_variance(float value);
  const ::google::protobuf::RepeatedField< float >&
      variance() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_variance();

  // repeated float pro_width = 7;
  int pro_width_size() const;
  void clear_pro_width();
  static const int kProWidthFieldNumber = 7;
  float pro_width(int index) const;
  void set_pro_width(int index, float value);
  void add_pro_width(float value);
  const ::google::protobuf::RepeatedField< float >&
      pro_width() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_pro_width();

  // repeated float pro_height = 8;
  int pro_height_size() const;
  void clear_pro_height();
  static const int kProHeightFieldNumber = 8;
  float pro_height(int index) const;
  void set_pro_height(int index, float value);
  void add_pro_height(float value);
  const ::google::protobuf::RepeatedField< float >&
      pro_height() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_pro_height();

  // optional int32 stride = 9 [default = 1];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 9;
  ::google::protobuf::int32 stride() const;
  void set_stride(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.PriorBoxParameter)
 private:
  inline void set_has_flip();
  inline void clear_has_flip();
  inline void set_has_clip();
  inline void clear_has_clip();
  inline void set_has_stride();
  inline void clear_has_stride();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > min_size_;
  ::google::protobuf::RepeatedField< float > max_size_;
  ::google::protobuf::RepeatedField< float > aspect_ratio_;
  ::google::protobuf::RepeatedField< float > variance_;
  bool flip_;
  bool clip_;
  ::google::protobuf::int32 stride_;
  ::google::protobuf::RepeatedField< float > pro_width_;
  ::google::protobuf::RepeatedField< float > pro_height_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static PriorBoxParameter* default_instance_;
};
// -------------------------------------------------------------------

class PythonParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PythonParameter) */ {
 public:
  PythonParameter();
  virtual ~PythonParameter();

  PythonParameter(const PythonParameter& from);

  inline PythonParameter& operator=(const PythonParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PythonParameter& default_instance();

  void Swap(PythonParameter* other);

  // implements Message ----------------------------------------------

  inline PythonParameter* New() const { return New(NULL); }

  PythonParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PythonParameter& from);
  void MergeFrom(const PythonParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PythonParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string module = 1;
  bool has_module() const;
  void clear_module();
  static const int kModuleFieldNumber = 1;
  const ::std::string& module() const;
  void set_module(const ::std::string& value);
  void set_module(const char* value);
  void set_module(const char* value, size_t size);
  ::std::string* mutable_module();
  ::std::string* release_module();
  void set_allocated_module(::std::string* module);

  // optional string layer = 2;
  bool has_layer() const;
  void clear_layer();
  static const int kLayerFieldNumber = 2;
  const ::std::string& layer() const;
  void set_layer(const ::std::string& value);
  void set_layer(const char* value);
  void set_layer(const char* value, size_t size);
  ::std::string* mutable_layer();
  ::std::string* release_layer();
  void set_allocated_layer(::std::string* layer);

  // optional string param_str = 3 [default = ""];
  bool has_param_str() const;
  void clear_param_str();
  static const int kParamStrFieldNumber = 3;
  const ::std::string& param_str() const;
  void set_param_str(const ::std::string& value);
  void set_param_str(const char* value);
  void set_param_str(const char* value, size_t size);
  ::std::string* mutable_param_str();
  ::std::string* release_param_str();
  void set_allocated_param_str(::std::string* param_str);

  // optional bool share_in_parallel = 4 [default = false];
  bool has_share_in_parallel() const;
  void clear_share_in_parallel();
  static const int kShareInParallelFieldNumber = 4;
  bool share_in_parallel() const;
  void set_share_in_parallel(bool value);

  // @@protoc_insertion_point(class_scope:caffe.PythonParameter)
 private:
  inline void set_has_module();
  inline void clear_has_module();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_param_str();
  inline void clear_has_param_str();
  inline void set_has_share_in_parallel();
  inline void clear_has_share_in_parallel();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr module_;
  ::google::protobuf::internal::ArenaStringPtr layer_;
  ::google::protobuf::internal::ArenaStringPtr param_str_;
  bool share_in_parallel_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static PythonParameter* default_instance_;
};
// -------------------------------------------------------------------

class RecurrentParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.RecurrentParameter) */ {
 public:
  RecurrentParameter();
  virtual ~RecurrentParameter();

  RecurrentParameter(const RecurrentParameter& from);

  inline RecurrentParameter& operator=(const RecurrentParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecurrentParameter& default_instance();

  void Swap(RecurrentParameter* other);

  // implements Message ----------------------------------------------

  inline RecurrentParameter* New() const { return New(NULL); }

  RecurrentParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecurrentParameter& from);
  void MergeFrom(const RecurrentParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecurrentParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num_output = 1 [default = 0];
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 1;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional .caffe.FillerParameter weight_filler = 2;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 2;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* mutable_weight_filler();
  ::caffe::FillerParameter* release_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 3;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 3;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* mutable_bias_filler();
  ::caffe::FillerParameter* release_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional bool debug_info = 4 [default = false];
  bool has_debug_info() const;
  void clear_debug_info();
  static const int kDebugInfoFieldNumber = 4;
  bool debug_info() const;
  void set_debug_info(bool value);

  // optional bool expose_hidden = 5 [default = false];
  bool has_expose_hidden() const;
  void clear_expose_hidden();
  static const int kExposeHiddenFieldNumber = 5;
  bool expose_hidden() const;
  void set_expose_hidden(bool value);

  // @@protoc_insertion_point(class_scope:caffe.RecurrentParameter)
 private:
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_debug_info();
  inline void clear_has_debug_info();
  inline void set_has_expose_hidden();
  inline void clear_has_expose_hidden();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::FillerParameter* weight_filler_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 num_output_;
  bool debug_info_;
  bool expose_hidden_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static RecurrentParameter* default_instance_;
};
// -------------------------------------------------------------------

class ReductionParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ReductionParameter) */ {
 public:
  ReductionParameter();
  virtual ~ReductionParameter();

  ReductionParameter(const ReductionParameter& from);

  inline ReductionParameter& operator=(const ReductionParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReductionParameter& default_instance();

  void Swap(ReductionParameter* other);

  // implements Message ----------------------------------------------

  inline ReductionParameter* New() const { return New(NULL); }

  ReductionParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReductionParameter& from);
  void MergeFrom(const ReductionParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReductionParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReductionParameter_ReductionOp ReductionOp;
  static const ReductionOp SUM =
    ReductionParameter_ReductionOp_SUM;
  static const ReductionOp ASUM =
    ReductionParameter_ReductionOp_ASUM;
  static const ReductionOp SUMSQ =
    ReductionParameter_ReductionOp_SUMSQ;
  static const ReductionOp MEAN =
    ReductionParameter_ReductionOp_MEAN;
  static inline bool ReductionOp_IsValid(int value) {
    return ReductionParameter_ReductionOp_IsValid(value);
  }
  static const ReductionOp ReductionOp_MIN =
    ReductionParameter_ReductionOp_ReductionOp_MIN;
  static const ReductionOp ReductionOp_MAX =
    ReductionParameter_ReductionOp_ReductionOp_MAX;
  static const int ReductionOp_ARRAYSIZE =
    ReductionParameter_ReductionOp_ReductionOp_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReductionOp_descriptor() {
    return ReductionParameter_ReductionOp_descriptor();
  }
  static inline const ::std::string& ReductionOp_Name(ReductionOp value) {
    return ReductionParameter_ReductionOp_Name(value);
  }
  static inline bool ReductionOp_Parse(const ::std::string& name,
      ReductionOp* value) {
    return ReductionParameter_ReductionOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
  bool has_operation() const;
  void clear_operation();
  static const int kOperationFieldNumber = 1;
  ::caffe::ReductionParameter_ReductionOp operation() const;
  void set_operation(::caffe::ReductionParameter_ReductionOp value);

  // optional int32 axis = 2 [default = 0];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional float coeff = 3 [default = 1];
  bool has_coeff() const;
  void clear_coeff();
  static const int kCoeffFieldNumber = 3;
  float coeff() const;
  void set_coeff(float value);

  // @@protoc_insertion_point(class_scope:caffe.ReductionParameter)
 private:
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_coeff();
  inline void clear_has_coeff();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int operation_;
  ::google::protobuf::int32 axis_;
  float coeff_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ReductionParameter* default_instance_;
};
// -------------------------------------------------------------------

class ReLUParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ReLUParameter) */ {
 public:
  ReLUParameter();
  virtual ~ReLUParameter();

  ReLUParameter(const ReLUParameter& from);

  inline ReLUParameter& operator=(const ReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReLUParameter& default_instance();

  void Swap(ReLUParameter* other);

  // implements Message ----------------------------------------------

  inline ReLUParameter* New() const { return New(NULL); }

  ReLUParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReLUParameter& from);
  void MergeFrom(const ReLUParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReLUParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReLUParameter_Engine Engine;
  static const Engine DEFAULT =
    ReLUParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    ReLUParameter_Engine_CAFFE;
  static const Engine CUDNN =
    ReLUParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return ReLUParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    ReLUParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    ReLUParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    ReLUParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return ReLUParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return ReLUParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return ReLUParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional float negative_slope = 1 [default = 0];
  bool has_negative_slope() const;
  void clear_negative_slope();
  static const int kNegativeSlopeFieldNumber = 1;
  float negative_slope() const;
  void set_negative_slope(float value);

  // optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 2;
  ::caffe::ReLUParameter_Engine engine() const;
  void set_engine(::caffe::ReLUParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.ReLUParameter)
 private:
  inline void set_has_negative_slope();
  inline void clear_has_negative_slope();
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float negative_slope_;
  int engine_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ReLUParameter* default_instance_;
};
// -------------------------------------------------------------------

class ResizeBlobParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ResizeBlobParameter) */ {
 public:
  ResizeBlobParameter();
  virtual ~ResizeBlobParameter();

  ResizeBlobParameter(const ResizeBlobParameter& from);

  inline ResizeBlobParameter& operator=(const ResizeBlobParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResizeBlobParameter& default_instance();

  void Swap(ResizeBlobParameter* other);

  // implements Message ----------------------------------------------

  inline ResizeBlobParameter* New() const { return New(NULL); }

  ResizeBlobParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResizeBlobParameter& from);
  void MergeFrom(const ResizeBlobParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResizeBlobParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 target_spatial_width = 1 [default = 48];
  bool has_target_spatial_width() const;
  void clear_target_spatial_width();
  static const int kTargetSpatialWidthFieldNumber = 1;
  ::google::protobuf::int32 target_spatial_width() const;
  void set_target_spatial_width(::google::protobuf::int32 value);

  // optional int32 target_spatial_height = 2 [default = 48];
  bool has_target_spatial_height() const;
  void clear_target_spatial_height();
  static const int kTargetSpatialHeightFieldNumber = 2;
  ::google::protobuf::int32 target_spatial_height() const;
  void set_target_spatial_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.ResizeBlobParameter)
 private:
  inline void set_has_target_spatial_width();
  inline void clear_has_target_spatial_width();
  inline void set_has_target_spatial_height();
  inline void clear_has_target_spatial_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 target_spatial_width_;
  ::google::protobuf::int32 target_spatial_height_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ResizeBlobParameter* default_instance_;
};
// -------------------------------------------------------------------

class RoiResizeParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.RoiResizeParameter) */ {
 public:
  RoiResizeParameter();
  virtual ~RoiResizeParameter();

  RoiResizeParameter(const RoiResizeParameter& from);

  inline RoiResizeParameter& operator=(const RoiResizeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoiResizeParameter& default_instance();

  void Swap(RoiResizeParameter* other);

  // implements Message ----------------------------------------------

  inline RoiResizeParameter* New() const { return New(NULL); }

  RoiResizeParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoiResizeParameter& from);
  void MergeFrom(const RoiResizeParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RoiResizeParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 target_spatial_width = 1 [default = 6];
  bool has_target_spatial_width() const;
  void clear_target_spatial_width();
  static const int kTargetSpatialWidthFieldNumber = 1;
  ::google::protobuf::int32 target_spatial_width() const;
  void set_target_spatial_width(::google::protobuf::int32 value);

  // optional int32 target_spatial_height = 2 [default = 6];
  bool has_target_spatial_height() const;
  void clear_target_spatial_height();
  static const int kTargetSpatialHeightFieldNumber = 2;
  ::google::protobuf::int32 target_spatial_height() const;
  void set_target_spatial_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.RoiResizeParameter)
 private:
  inline void set_has_target_spatial_width();
  inline void clear_has_target_spatial_width();
  inline void set_has_target_spatial_height();
  inline void clear_has_target_spatial_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 target_spatial_width_;
  ::google::protobuf::int32 target_spatial_height_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static RoiResizeParameter* default_instance_;
};
// -------------------------------------------------------------------

class RoiAlignParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.RoiAlignParameter) */ {
 public:
  RoiAlignParameter();
  virtual ~RoiAlignParameter();

  RoiAlignParameter(const RoiAlignParameter& from);

  inline RoiAlignParameter& operator=(const RoiAlignParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoiAlignParameter& default_instance();

  void Swap(RoiAlignParameter* other);

  // implements Message ----------------------------------------------

  inline RoiAlignParameter* New() const { return New(NULL); }

  RoiAlignParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoiAlignParameter& from);
  void MergeFrom(const RoiAlignParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RoiAlignParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 roi_resized_width = 1 [default = 6];
  bool has_roi_resized_width() const;
  void clear_roi_resized_width();
  static const int kRoiResizedWidthFieldNumber = 1;
  ::google::protobuf::int32 roi_resized_width() const;
  void set_roi_resized_width(::google::protobuf::int32 value);

  // optional int32 roi_resized_height = 2 [default = 6];
  bool has_roi_resized_height() const;
  void clear_roi_resized_height();
  static const int kRoiResizedHeightFieldNumber = 2;
  ::google::protobuf::int32 roi_resized_height() const;
  void set_roi_resized_height(::google::protobuf::int32 value);

  // optional int32 inter_times = 3 [default = 1];
  bool has_inter_times() const;
  void clear_inter_times();
  static const int kInterTimesFieldNumber = 3;
  ::google::protobuf::int32 inter_times() const;
  void set_inter_times(::google::protobuf::int32 value);

  // optional float spatial_scale = 4 [default = 1];
  bool has_spatial_scale() const;
  void clear_spatial_scale();
  static const int kSpatialScaleFieldNumber = 4;
  float spatial_scale() const;
  void set_spatial_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.RoiAlignParameter)
 private:
  inline void set_has_roi_resized_width();
  inline void clear_has_roi_resized_width();
  inline void set_has_roi_resized_height();
  inline void clear_has_roi_resized_height();
  inline void set_has_inter_times();
  inline void clear_has_inter_times();
  inline void set_has_spatial_scale();
  inline void clear_has_spatial_scale();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 roi_resized_width_;
  ::google::protobuf::int32 roi_resized_height_;
  ::google::protobuf::int32 inter_times_;
  float spatial_scale_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static RoiAlignParameter* default_instance_;
};
// -------------------------------------------------------------------

class RoiDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.RoiDataParameter) */ {
 public:
  RoiDataParameter();
  virtual ~RoiDataParameter();

  RoiDataParameter(const RoiDataParameter& from);

  inline RoiDataParameter& operator=(const RoiDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoiDataParameter& default_instance();

  void Swap(RoiDataParameter* other);

  // implements Message ----------------------------------------------

  inline RoiDataParameter* New() const { return New(NULL); }

  RoiDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoiDataParameter& from);
  void MergeFrom(const RoiDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RoiDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 net_input_width = 1 [default = 300];
  bool has_net_input_width() const;
  void clear_net_input_width();
  static const int kNetInputWidthFieldNumber = 1;
  ::google::protobuf::int32 net_input_width() const;
  void set_net_input_width(::google::protobuf::int32 value);

  // optional int32 net_input_height = 2 [default = 300];
  bool has_net_input_height() const;
  void clear_net_input_height();
  static const int kNetInputHeightFieldNumber = 2;
  ::google::protobuf::int32 net_input_height() const;
  void set_net_input_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.RoiDataParameter)
 private:
  inline void set_has_net_input_width();
  inline void clear_has_net_input_width();
  inline void set_has_net_input_height();
  inline void clear_has_net_input_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 net_input_width_;
  ::google::protobuf::int32 net_input_height_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static RoiDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class ReshapeParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ReshapeParameter) */ {
 public:
  ReshapeParameter();
  virtual ~ReshapeParameter();

  ReshapeParameter(const ReshapeParameter& from);

  inline ReshapeParameter& operator=(const ReshapeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReshapeParameter& default_instance();

  void Swap(ReshapeParameter* other);

  // implements Message ----------------------------------------------

  inline ReshapeParameter* New() const { return New(NULL); }

  ReshapeParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReshapeParameter& from);
  void MergeFrom(const ReshapeParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReshapeParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.BlobShape shape = 1;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  const ::caffe::BlobShape& shape() const;
  ::caffe::BlobShape* mutable_shape();
  ::caffe::BlobShape* release_shape();
  void set_allocated_shape(::caffe::BlobShape* shape);

  // optional int32 axis = 2 [default = 0];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 3 [default = -1];
  bool has_num_axes() const;
  void clear_num_axes();
  static const int kNumAxesFieldNumber = 3;
  ::google::protobuf::int32 num_axes() const;
  void set_num_axes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.ReshapeParameter)
 private:
  inline void set_has_shape();
  inline void clear_has_shape();
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_num_axes();
  inline void clear_has_num_axes();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::BlobShape* shape_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 num_axes_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ReshapeParameter* default_instance_;
};
// -------------------------------------------------------------------

class ROIPoolingParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ROIPoolingParameter) */ {
 public:
  ROIPoolingParameter();
  virtual ~ROIPoolingParameter();

  ROIPoolingParameter(const ROIPoolingParameter& from);

  inline ROIPoolingParameter& operator=(const ROIPoolingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ROIPoolingParameter& default_instance();

  void Swap(ROIPoolingParameter* other);

  // implements Message ----------------------------------------------

  inline ROIPoolingParameter* New() const { return New(NULL); }

  ROIPoolingParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ROIPoolingParameter& from);
  void MergeFrom(const ROIPoolingParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ROIPoolingParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 pooled_h = 1 [default = 0];
  bool has_pooled_h() const;
  void clear_pooled_h();
  static const int kPooledHFieldNumber = 1;
  ::google::protobuf::int32 pooled_h() const;
  void set_pooled_h(::google::protobuf::int32 value);

  // optional int32 pooled_w = 2 [default = 0];
  bool has_pooled_w() const;
  void clear_pooled_w();
  static const int kPooledWFieldNumber = 2;
  ::google::protobuf::int32 pooled_w() const;
  void set_pooled_w(::google::protobuf::int32 value);

  // optional float spatial_scale = 3 [default = 1];
  bool has_spatial_scale() const;
  void clear_spatial_scale();
  static const int kSpatialScaleFieldNumber = 3;
  float spatial_scale() const;
  void set_spatial_scale(float value);

  // @@protoc_insertion_point(class_scope:caffe.ROIPoolingParameter)
 private:
  inline void set_has_pooled_h();
  inline void clear_has_pooled_h();
  inline void set_has_pooled_w();
  inline void clear_has_pooled_w();
  inline void set_has_spatial_scale();
  inline void clear_has_spatial_scale();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 pooled_h_;
  ::google::protobuf::int32 pooled_w_;
  float spatial_scale_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ROIPoolingParameter* default_instance_;
};
// -------------------------------------------------------------------

class BoxMatchingParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.BoxMatchingParameter) */ {
 public:
  BoxMatchingParameter();
  virtual ~BoxMatchingParameter();

  BoxMatchingParameter(const BoxMatchingParameter& from);

  inline BoxMatchingParameter& operator=(const BoxMatchingParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoxMatchingParameter& default_instance();

  void Swap(BoxMatchingParameter* other);

  // implements Message ----------------------------------------------

  inline BoxMatchingParameter* New() const { return New(NULL); }

  BoxMatchingParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoxMatchingParameter& from);
  void MergeFrom(const BoxMatchingParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BoxMatchingParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float overlap_threshold = 1 [default = 0.5];
  bool has_overlap_threshold() const;
  void clear_overlap_threshold();
  static const int kOverlapThresholdFieldNumber = 1;
  float overlap_threshold() const;
  void set_overlap_threshold(float value);

  // optional bool use_difficult_gt = 2 [default = false];
  bool has_use_difficult_gt() const;
  void clear_use_difficult_gt();
  static const int kUseDifficultGtFieldNumber = 2;
  bool use_difficult_gt() const;
  void set_use_difficult_gt(bool value);

  // optional float size_threshold = 3 [default = 0.001];
  bool has_size_threshold() const;
  void clear_size_threshold();
  static const int kSizeThresholdFieldNumber = 3;
  float size_threshold() const;
  void set_size_threshold(float value);

  // optional int32 top_k = 4 [default = 100];
  bool has_top_k() const;
  void clear_top_k();
  static const int kTopKFieldNumber = 4;
  ::google::protobuf::int32 top_k() const;
  void set_top_k(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.BoxMatchingParameter)
 private:
  inline void set_has_overlap_threshold();
  inline void clear_has_overlap_threshold();
  inline void set_has_use_difficult_gt();
  inline void clear_has_use_difficult_gt();
  inline void set_has_size_threshold();
  inline void clear_has_size_threshold();
  inline void set_has_top_k();
  inline void clear_has_top_k();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float overlap_threshold_;
  bool use_difficult_gt_;
  float size_threshold_;
  ::google::protobuf::int32 top_k_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static BoxMatchingParameter* default_instance_;
};
// -------------------------------------------------------------------

class ScaleParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ScaleParameter) */ {
 public:
  ScaleParameter();
  virtual ~ScaleParameter();

  ScaleParameter(const ScaleParameter& from);

  inline ScaleParameter& operator=(const ScaleParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScaleParameter& default_instance();

  void Swap(ScaleParameter* other);

  // implements Message ----------------------------------------------

  inline ScaleParameter* New() const { return New(NULL); }

  ScaleParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScaleParameter& from);
  void MergeFrom(const ScaleParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScaleParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 1;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional int32 num_axes = 2 [default = 1];
  bool has_num_axes() const;
  void clear_num_axes();
  static const int kNumAxesFieldNumber = 2;
  ::google::protobuf::int32 num_axes() const;
  void set_num_axes(::google::protobuf::int32 value);

  // optional .caffe.FillerParameter filler = 3;
  bool has_filler() const;
  void clear_filler();
  static const int kFillerFieldNumber = 3;
  const ::caffe::FillerParameter& filler() const;
  ::caffe::FillerParameter* mutable_filler();
  ::caffe::FillerParameter* release_filler();
  void set_allocated_filler(::caffe::FillerParameter* filler);

  // optional bool bias_term = 4 [default = false];
  bool has_bias_term() const;
  void clear_bias_term();
  static const int kBiasTermFieldNumber = 4;
  bool bias_term() const;
  void set_bias_term(bool value);

  // optional .caffe.FillerParameter bias_filler = 5;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 5;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* mutable_bias_filler();
  ::caffe::FillerParameter* release_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // @@protoc_insertion_point(class_scope:caffe.ScaleParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_num_axes();
  inline void clear_has_num_axes();
  inline void set_has_filler();
  inline void clear_has_filler();
  inline void set_has_bias_term();
  inline void clear_has_bias_term();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 num_axes_;
  ::caffe::FillerParameter* filler_;
  ::caffe::FillerParameter* bias_filler_;
  bool bias_term_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ScaleParameter* default_instance_;
};
// -------------------------------------------------------------------

class SigmoidParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SigmoidParameter) */ {
 public:
  SigmoidParameter();
  virtual ~SigmoidParameter();

  SigmoidParameter(const SigmoidParameter& from);

  inline SigmoidParameter& operator=(const SigmoidParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SigmoidParameter& default_instance();

  void Swap(SigmoidParameter* other);

  // implements Message ----------------------------------------------

  inline SigmoidParameter* New() const { return New(NULL); }

  SigmoidParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SigmoidParameter& from);
  void MergeFrom(const SigmoidParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SigmoidParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SigmoidParameter_Engine Engine;
  static const Engine DEFAULT =
    SigmoidParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    SigmoidParameter_Engine_CAFFE;
  static const Engine CUDNN =
    SigmoidParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SigmoidParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SigmoidParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SigmoidParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SigmoidParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SigmoidParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SigmoidParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SigmoidParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 1;
  ::caffe::SigmoidParameter_Engine engine() const;
  void set_engine(::caffe::SigmoidParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.SigmoidParameter)
 private:
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int engine_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SigmoidParameter* default_instance_;
};
// -------------------------------------------------------------------

class SliceParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SliceParameter) */ {
 public:
  SliceParameter();
  virtual ~SliceParameter();

  SliceParameter(const SliceParameter& from);

  inline SliceParameter& operator=(const SliceParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SliceParameter& default_instance();

  void Swap(SliceParameter* other);

  // implements Message ----------------------------------------------

  inline SliceParameter* New() const { return New(NULL); }

  SliceParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SliceParameter& from);
  void MergeFrom(const SliceParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SliceParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 3 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 3;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // repeated uint32 slice_point = 2;
  int slice_point_size() const;
  void clear_slice_point();
  static const int kSlicePointFieldNumber = 2;
  ::google::protobuf::uint32 slice_point(int index) const;
  void set_slice_point(int index, ::google::protobuf::uint32 value);
  void add_slice_point(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      slice_point() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_slice_point();

  // optional uint32 slice_dim = 1 [default = 1];
  bool has_slice_dim() const;
  void clear_slice_dim();
  static const int kSliceDimFieldNumber = 1;
  ::google::protobuf::uint32 slice_dim() const;
  void set_slice_dim(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:caffe.SliceParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_slice_dim();
  inline void clear_has_slice_dim();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > slice_point_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::uint32 slice_dim_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SliceParameter* default_instance_;
};
// -------------------------------------------------------------------

class SplitLabelParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SplitLabelParameter) */ {
 public:
  SplitLabelParameter();
  virtual ~SplitLabelParameter();

  SplitLabelParameter(const SplitLabelParameter& from);

  inline SplitLabelParameter& operator=(const SplitLabelParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SplitLabelParameter& default_instance();

  void Swap(SplitLabelParameter* other);

  // implements Message ----------------------------------------------

  inline SplitLabelParameter* New() const { return New(NULL); }

  SplitLabelParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SplitLabelParameter& from);
  void MergeFrom(const SplitLabelParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SplitLabelParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 spatial_dim = 1 [default = 147456];
  bool has_spatial_dim() const;
  void clear_spatial_dim();
  static const int kSpatialDimFieldNumber = 1;
  ::google::protobuf::int32 spatial_dim() const;
  void set_spatial_dim(::google::protobuf::int32 value);

  // optional bool add_parts = 2 [default = false];
  bool has_add_parts() const;
  void clear_add_parts();
  static const int kAddPartsFieldNumber = 2;
  bool add_parts() const;
  void set_add_parts(bool value);

  // @@protoc_insertion_point(class_scope:caffe.SplitLabelParameter)
 private:
  inline void set_has_spatial_dim();
  inline void clear_has_spatial_dim();
  inline void set_has_add_parts();
  inline void clear_has_add_parts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 spatial_dim_;
  bool add_parts_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SplitLabelParameter* default_instance_;
};
// -------------------------------------------------------------------

class SoftmaxParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SoftmaxParameter) */ {
 public:
  SoftmaxParameter();
  virtual ~SoftmaxParameter();

  SoftmaxParameter(const SoftmaxParameter& from);

  inline SoftmaxParameter& operator=(const SoftmaxParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftmaxParameter& default_instance();

  void Swap(SoftmaxParameter* other);

  // implements Message ----------------------------------------------

  inline SoftmaxParameter* New() const { return New(NULL); }

  SoftmaxParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoftmaxParameter& from);
  void MergeFrom(const SoftmaxParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SoftmaxParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SoftmaxParameter_Engine Engine;
  static const Engine DEFAULT =
    SoftmaxParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    SoftmaxParameter_Engine_CAFFE;
  static const Engine CUDNN =
    SoftmaxParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SoftmaxParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SoftmaxParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SoftmaxParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SoftmaxParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SoftmaxParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SoftmaxParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SoftmaxParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 1;
  ::caffe::SoftmaxParameter_Engine engine() const;
  void set_engine(::caffe::SoftmaxParameter_Engine value);

  // optional int32 axis = 2 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 2;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.SoftmaxParameter)
 private:
  inline void set_has_engine();
  inline void clear_has_engine();
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int engine_;
  ::google::protobuf::int32 axis_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SoftmaxParameter* default_instance_;
};
// -------------------------------------------------------------------

class TanHParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TanHParameter) */ {
 public:
  TanHParameter();
  virtual ~TanHParameter();

  TanHParameter(const TanHParameter& from);

  inline TanHParameter& operator=(const TanHParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TanHParameter& default_instance();

  void Swap(TanHParameter* other);

  // implements Message ----------------------------------------------

  inline TanHParameter* New() const { return New(NULL); }

  TanHParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TanHParameter& from);
  void MergeFrom(const TanHParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TanHParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TanHParameter_Engine Engine;
  static const Engine DEFAULT =
    TanHParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    TanHParameter_Engine_CAFFE;
  static const Engine CUDNN =
    TanHParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return TanHParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    TanHParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    TanHParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    TanHParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return TanHParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return TanHParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return TanHParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 1;
  ::caffe::TanHParameter_Engine engine() const;
  void set_engine(::caffe::TanHParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.TanHParameter)
 private:
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int engine_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static TanHParameter* default_instance_;
};
// -------------------------------------------------------------------

class TileParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.TileParameter) */ {
 public:
  TileParameter();
  virtual ~TileParameter();

  TileParameter(const TileParameter& from);

  inline TileParameter& operator=(const TileParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TileParameter& default_instance();

  void Swap(TileParameter* other);

  // implements Message ----------------------------------------------

  inline TileParameter* New() const { return New(NULL); }

  TileParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TileParameter& from);
  void MergeFrom(const TileParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TileParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 axis = 1 [default = 1];
  bool has_axis() const;
  void clear_axis();
  static const int kAxisFieldNumber = 1;
  ::google::protobuf::int32 axis() const;
  void set_axis(::google::protobuf::int32 value);

  // optional int32 tiles = 2;
  bool has_tiles() const;
  void clear_tiles();
  static const int kTilesFieldNumber = 2;
  ::google::protobuf::int32 tiles() const;
  void set_tiles(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.TileParameter)
 private:
  inline void set_has_axis();
  inline void clear_has_axis();
  inline void set_has_tiles();
  inline void clear_has_tiles();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 axis_;
  ::google::protobuf::int32 tiles_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static TileParameter* default_instance_;
};
// -------------------------------------------------------------------

class ThresholdParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.ThresholdParameter) */ {
 public:
  ThresholdParameter();
  virtual ~ThresholdParameter();

  ThresholdParameter(const ThresholdParameter& from);

  inline ThresholdParameter& operator=(const ThresholdParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ThresholdParameter& default_instance();

  void Swap(ThresholdParameter* other);

  // implements Message ----------------------------------------------

  inline ThresholdParameter* New() const { return New(NULL); }

  ThresholdParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ThresholdParameter& from);
  void MergeFrom(const ThresholdParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ThresholdParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float threshold = 1 [default = 0];
  bool has_threshold() const;
  void clear_threshold();
  static const int kThresholdFieldNumber = 1;
  float threshold() const;
  void set_threshold(float value);

  // @@protoc_insertion_point(class_scope:caffe.ThresholdParameter)
 private:
  inline void set_has_threshold();
  inline void clear_has_threshold();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float threshold_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static ThresholdParameter* default_instance_;
};
// -------------------------------------------------------------------

class VideoDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.VideoDataParameter) */ {
 public:
  VideoDataParameter();
  virtual ~VideoDataParameter();

  VideoDataParameter(const VideoDataParameter& from);

  inline VideoDataParameter& operator=(const VideoDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoDataParameter& default_instance();

  void Swap(VideoDataParameter* other);

  // implements Message ----------------------------------------------

  inline VideoDataParameter* New() const { return New(NULL); }

  VideoDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoDataParameter& from);
  void MergeFrom(const VideoDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef VideoDataParameter_VideoType VideoType;
  static const VideoType WEBCAM =
    VideoDataParameter_VideoType_WEBCAM;
  static const VideoType VIDEO =
    VideoDataParameter_VideoType_VIDEO;
  static inline bool VideoType_IsValid(int value) {
    return VideoDataParameter_VideoType_IsValid(value);
  }
  static const VideoType VideoType_MIN =
    VideoDataParameter_VideoType_VideoType_MIN;
  static const VideoType VideoType_MAX =
    VideoDataParameter_VideoType_VideoType_MAX;
  static const int VideoType_ARRAYSIZE =
    VideoDataParameter_VideoType_VideoType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VideoType_descriptor() {
    return VideoDataParameter_VideoType_descriptor();
  }
  static inline const ::std::string& VideoType_Name(VideoType value) {
    return VideoDataParameter_VideoType_Name(value);
  }
  static inline bool VideoType_Parse(const ::std::string& name,
      VideoType* value) {
    return VideoDataParameter_VideoType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.VideoDataParameter.VideoType video_type = 1 [default = WEBCAM];
  bool has_video_type() const;
  void clear_video_type();
  static const int kVideoTypeFieldNumber = 1;
  ::caffe::VideoDataParameter_VideoType video_type() const;
  void set_video_type(::caffe::VideoDataParameter_VideoType value);

  // optional int32 device_id = 2 [default = 0];
  bool has_device_id() const;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 2;
  ::google::protobuf::int32 device_id() const;
  void set_device_id(::google::protobuf::int32 value);

  // optional string video_file = 3;
  bool has_video_file() const;
  void clear_video_file();
  static const int kVideoFileFieldNumber = 3;
  const ::std::string& video_file() const;
  void set_video_file(const ::std::string& value);
  void set_video_file(const char* value);
  void set_video_file(const char* value, size_t size);
  ::std::string* mutable_video_file();
  ::std::string* release_video_file();
  void set_allocated_video_file(::std::string* video_file);

  // optional int32 webcam_width = 4 [default = 1280];
  bool has_webcam_width() const;
  void clear_webcam_width();
  static const int kWebcamWidthFieldNumber = 4;
  ::google::protobuf::int32 webcam_width() const;
  void set_webcam_width(::google::protobuf::int32 value);

  // optional int32 webcam_height = 5 [default = 720];
  bool has_webcam_height() const;
  void clear_webcam_height();
  static const int kWebcamHeightFieldNumber = 5;
  ::google::protobuf::int32 webcam_height() const;
  void set_webcam_height(::google::protobuf::int32 value);

  // optional int32 crop_width = 6 [default = 1280];
  bool has_crop_width() const;
  void clear_crop_width();
  static const int kCropWidthFieldNumber = 6;
  ::google::protobuf::int32 crop_width() const;
  void set_crop_width(::google::protobuf::int32 value);

  // optional int32 crop_height = 7 [default = 720];
  bool has_crop_height() const;
  void clear_crop_height();
  static const int kCropHeightFieldNumber = 7;
  ::google::protobuf::int32 crop_height() const;
  void set_crop_height(::google::protobuf::int32 value);

  // optional float contrast_scale = 8 [default = 1];
  bool has_contrast_scale() const;
  void clear_contrast_scale();
  static const int kContrastScaleFieldNumber = 8;
  float contrast_scale() const;
  void set_contrast_scale(float value);

  // optional int32 exposure = 9 [default = 0];
  bool has_exposure() const;
  void clear_exposure();
  static const int kExposureFieldNumber = 9;
  ::google::protobuf::int32 exposure() const;
  void set_exposure(::google::protobuf::int32 value);

  // optional int32 medianblur_ksize = 10 [default = 3];
  bool has_medianblur_ksize() const;
  void clear_medianblur_ksize();
  static const int kMedianblurKsizeFieldNumber = 10;
  ::google::protobuf::int32 medianblur_ksize() const;
  void set_medianblur_ksize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.VideoDataParameter)
 private:
  inline void set_has_video_type();
  inline void clear_has_video_type();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_video_file();
  inline void clear_has_video_file();
  inline void set_has_webcam_width();
  inline void clear_has_webcam_width();
  inline void set_has_webcam_height();
  inline void clear_has_webcam_height();
  inline void set_has_crop_width();
  inline void clear_has_crop_width();
  inline void set_has_crop_height();
  inline void clear_has_crop_height();
  inline void set_has_contrast_scale();
  inline void clear_has_contrast_scale();
  inline void set_has_exposure();
  inline void clear_has_exposure();
  inline void set_has_medianblur_ksize();
  inline void clear_has_medianblur_ksize();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int video_type_;
  ::google::protobuf::int32 device_id_;
  ::google::protobuf::internal::ArenaStringPtr video_file_;
  ::google::protobuf::int32 webcam_width_;
  ::google::protobuf::int32 webcam_height_;
  ::google::protobuf::int32 crop_width_;
  ::google::protobuf::int32 crop_height_;
  float contrast_scale_;
  ::google::protobuf::int32 exposure_;
  ::google::protobuf::int32 medianblur_ksize_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static VideoDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class UnifiedDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.UnifiedDataParameter) */ {
 public:
  UnifiedDataParameter();
  virtual ~UnifiedDataParameter();

  UnifiedDataParameter(const UnifiedDataParameter& from);

  inline UnifiedDataParameter& operator=(const UnifiedDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnifiedDataParameter& default_instance();

  void Swap(UnifiedDataParameter* other);

  // implements Message ----------------------------------------------

  inline UnifiedDataParameter* New() const { return New(NULL); }

  UnifiedDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnifiedDataParameter& from);
  void MergeFrom(const UnifiedDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnifiedDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string xml_list = 1;
  bool has_xml_list() const;
  void clear_xml_list();
  static const int kXmlListFieldNumber = 1;
  const ::std::string& xml_list() const;
  void set_xml_list(const ::std::string& value);
  void set_xml_list(const char* value);
  void set_xml_list(const char* value, size_t size);
  ::std::string* mutable_xml_list();
  ::std::string* release_xml_list();
  void set_allocated_xml_list(::std::string* xml_list);

  // optional string xml_root = 2;
  bool has_xml_root() const;
  void clear_xml_root();
  static const int kXmlRootFieldNumber = 2;
  const ::std::string& xml_root() const;
  void set_xml_root(const ::std::string& value);
  void set_xml_root(const char* value);
  void set_xml_root(const char* value, size_t size);
  ::std::string* mutable_xml_root();
  ::std::string* release_xml_root();
  void set_allocated_xml_root(::std::string* xml_root);

  // optional bool shuffle = 3 [default = true];
  bool has_shuffle() const;
  void clear_shuffle();
  static const int kShuffleFieldNumber = 3;
  bool shuffle() const;
  void set_shuffle(bool value);

  // optional int32 rand_skip = 4 [default = 100];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 4;
  ::google::protobuf::int32 rand_skip() const;
  void set_rand_skip(::google::protobuf::int32 value);

  // optional int32 batch_size = 5 [default = 24];
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 5;
  ::google::protobuf::int32 batch_size() const;
  void set_batch_size(::google::protobuf::int32 value);

  // repeated float mean_value = 6;
  int mean_value_size() const;
  void clear_mean_value();
  static const int kMeanValueFieldNumber = 6;
  float mean_value(int index) const;
  void set_mean_value(int index, float value);
  void add_mean_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      mean_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_mean_value();

  // optional bool add_parts = 7 [default = false];
  bool has_add_parts() const;
  void clear_add_parts();
  static const int kAddPartsFieldNumber = 7;
  bool add_parts() const;
  void set_add_parts(bool value);

  // optional string parts_xml_dir = 8;
  bool has_parts_xml_dir() const;
  void clear_parts_xml_dir();
  static const int kPartsXmlDirFieldNumber = 8;
  const ::std::string& parts_xml_dir() const;
  void set_parts_xml_dir(const ::std::string& value);
  void set_parts_xml_dir(const char* value);
  void set_parts_xml_dir(const char* value, size_t size);
  ::std::string* mutable_parts_xml_dir();
  ::std::string* release_parts_xml_dir();
  void set_allocated_parts_xml_dir(::std::string* parts_xml_dir);

  // optional bool add_kps = 9 [default = true];
  bool has_add_kps() const;
  void clear_add_kps();
  static const int kAddKpsFieldNumber = 9;
  bool add_kps() const;
  void set_add_kps(bool value);

  // optional bool add_mask = 10 [default = true];
  bool has_add_mask() const;
  void clear_add_mask();
  static const int kAddMaskFieldNumber = 10;
  bool add_mask() const;
  void set_add_mask(bool value);

  // repeated string xml_list_multiple = 11;
  int xml_list_multiple_size() const;
  void clear_xml_list_multiple();
  static const int kXmlListMultipleFieldNumber = 11;
  const ::std::string& xml_list_multiple(int index) const;
  ::std::string* mutable_xml_list_multiple(int index);
  void set_xml_list_multiple(int index, const ::std::string& value);
  void set_xml_list_multiple(int index, const char* value);
  void set_xml_list_multiple(int index, const char* value, size_t size);
  ::std::string* add_xml_list_multiple();
  void add_xml_list_multiple(const ::std::string& value);
  void add_xml_list_multiple(const char* value);
  void add_xml_list_multiple(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& xml_list_multiple() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_xml_list_multiple();

  // repeated string xml_root_multiple = 12;
  int xml_root_multiple_size() const;
  void clear_xml_root_multiple();
  static const int kXmlRootMultipleFieldNumber = 12;
  const ::std::string& xml_root_multiple(int index) const;
  ::std::string* mutable_xml_root_multiple(int index);
  void set_xml_root_multiple(int index, const ::std::string& value);
  void set_xml_root_multiple(int index, const char* value);
  void set_xml_root_multiple(int index, const char* value, size_t size);
  ::std::string* add_xml_root_multiple();
  void add_xml_root_multiple(const ::std::string& value);
  void add_xml_root_multiple(const char* value);
  void add_xml_root_multiple(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& xml_root_multiple() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_xml_root_multiple();

  // optional string hisi_data_maps = 13;
  bool has_hisi_data_maps() const;
  void clear_hisi_data_maps();
  static const int kHisiDataMapsFieldNumber = 13;
  const ::std::string& hisi_data_maps() const;
  void set_hisi_data_maps(const ::std::string& value);
  void set_hisi_data_maps(const char* value);
  void set_hisi_data_maps(const char* value, size_t size);
  ::std::string* mutable_hisi_data_maps();
  ::std::string* release_hisi_data_maps();
  void set_allocated_hisi_data_maps(::std::string* hisi_data_maps);

  // optional int32 base_bindex = 14 [default = 0];
  bool has_base_bindex() const;
  void clear_base_bindex();
  static const int kBaseBindexFieldNumber = 14;
  ::google::protobuf::int32 base_bindex() const;
  void set_base_bindex(::google::protobuf::int32 value);

  // optional bool flag_imginfo = 15 [default = false];
  bool has_flag_imginfo() const;
  void clear_flag_imginfo();
  static const int kFlagImginfoFieldNumber = 15;
  bool flag_imginfo() const;
  void set_flag_imginfo(bool value);

  // optional bool clip_ignoregt = 16 [default = false];
  bool has_clip_ignoregt() const;
  void clear_clip_ignoregt();
  static const int kClipIgnoregtFieldNumber = 16;
  bool clip_ignoregt() const;
  void set_clip_ignoregt(bool value);

  // optional bool use_torsowithhead = 17 [default = false];
  bool has_use_torsowithhead() const;
  void clear_use_torsowithhead();
  static const int kUseTorsowithheadFieldNumber = 17;
  bool use_torsowithhead() const;
  void set_use_torsowithhead(bool value);

  // optional int32 max_neg_num = 18 [default = 15];
  bool has_max_neg_num() const;
  void clear_max_neg_num();
  static const int kMaxNegNumFieldNumber = 18;
  ::google::protobuf::int32 max_neg_num() const;
  void set_max_neg_num(::google::protobuf::int32 value);

  // optional int32 neg_rand_skip = 19 [default = 100];
  bool has_neg_rand_skip() const;
  void clear_neg_rand_skip();
  static const int kNegRandSkipFieldNumber = 19;
  ::google::protobuf::int32 neg_rand_skip() const;
  void set_neg_rand_skip(::google::protobuf::int32 value);

  // optional int32 pos_rand_skip = 20 [default = 100];
  bool has_pos_rand_skip() const;
  void clear_pos_rand_skip();
  static const int kPosRandSkipFieldNumber = 20;
  ::google::protobuf::int32 pos_rand_skip() const;
  void set_pos_rand_skip(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.UnifiedDataParameter)
 private:
  inline void set_has_xml_list();
  inline void clear_has_xml_list();
  inline void set_has_xml_root();
  inline void clear_has_xml_root();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_add_parts();
  inline void clear_has_add_parts();
  inline void set_has_parts_xml_dir();
  inline void clear_has_parts_xml_dir();
  inline void set_has_add_kps();
  inline void clear_has_add_kps();
  inline void set_has_add_mask();
  inline void clear_has_add_mask();
  inline void set_has_hisi_data_maps();
  inline void clear_has_hisi_data_maps();
  inline void set_has_base_bindex();
  inline void clear_has_base_bindex();
  inline void set_has_flag_imginfo();
  inline void clear_has_flag_imginfo();
  inline void set_has_clip_ignoregt();
  inline void clear_has_clip_ignoregt();
  inline void set_has_use_torsowithhead();
  inline void clear_has_use_torsowithhead();
  inline void set_has_max_neg_num();
  inline void clear_has_max_neg_num();
  inline void set_has_neg_rand_skip();
  inline void clear_has_neg_rand_skip();
  inline void set_has_pos_rand_skip();
  inline void clear_has_pos_rand_skip();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr xml_list_;
  ::google::protobuf::internal::ArenaStringPtr xml_root_;
  ::google::protobuf::int32 rand_skip_;
  ::google::protobuf::int32 batch_size_;
  ::google::protobuf::RepeatedField< float > mean_value_;
  ::google::protobuf::internal::ArenaStringPtr parts_xml_dir_;
  bool shuffle_;
  bool add_parts_;
  bool add_kps_;
  bool add_mask_;
  ::google::protobuf::int32 base_bindex_;
  ::google::protobuf::RepeatedPtrField< ::std::string> xml_list_multiple_;
  ::google::protobuf::RepeatedPtrField< ::std::string> xml_root_multiple_;
  ::google::protobuf::internal::ArenaStringPtr hisi_data_maps_;
  bool flag_imginfo_;
  bool clip_ignoregt_;
  bool use_torsowithhead_;
  ::google::protobuf::int32 max_neg_num_;
  ::google::protobuf::int32 neg_rand_skip_;
  ::google::protobuf::int32 pos_rand_skip_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static UnifiedDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class VideoframeParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.VideoframeParameter) */ {
 public:
  VideoframeParameter();
  virtual ~VideoframeParameter();

  VideoframeParameter(const VideoframeParameter& from);

  inline VideoframeParameter& operator=(const VideoframeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoframeParameter& default_instance();

  void Swap(VideoframeParameter* other);

  // implements Message ----------------------------------------------

  inline VideoframeParameter* New() const { return New(NULL); }

  VideoframeParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoframeParameter& from);
  void MergeFrom(const VideoframeParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoframeParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef VideoframeParameter_VideoType VideoType;
  static const VideoType WEBCAM =
    VideoframeParameter_VideoType_WEBCAM;
  static const VideoType VIDEO =
    VideoframeParameter_VideoType_VIDEO;
  static inline bool VideoType_IsValid(int value) {
    return VideoframeParameter_VideoType_IsValid(value);
  }
  static const VideoType VideoType_MIN =
    VideoframeParameter_VideoType_VideoType_MIN;
  static const VideoType VideoType_MAX =
    VideoframeParameter_VideoType_VideoType_MAX;
  static const int VideoType_ARRAYSIZE =
    VideoframeParameter_VideoType_VideoType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VideoType_descriptor() {
    return VideoframeParameter_VideoType_descriptor();
  }
  static inline const ::std::string& VideoType_Name(VideoType value) {
    return VideoframeParameter_VideoType_Name(value);
  }
  static inline bool VideoType_Parse(const ::std::string& name,
      VideoType* value) {
    return VideoframeParameter_VideoType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.VideoframeParameter.VideoType video_type = 1 [default = WEBCAM];
  bool has_video_type() const;
  void clear_video_type();
  static const int kVideoTypeFieldNumber = 1;
  ::caffe::VideoframeParameter_VideoType video_type() const;
  void set_video_type(::caffe::VideoframeParameter_VideoType value);

  // optional int32 device_id = 2 [default = 0];
  bool has_device_id() const;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 2;
  ::google::protobuf::int32 device_id() const;
  void set_device_id(::google::protobuf::int32 value);

  // optional string video_file = 3;
  bool has_video_file() const;
  void clear_video_file();
  static const int kVideoFileFieldNumber = 3;
  const ::std::string& video_file() const;
  void set_video_file(const ::std::string& value);
  void set_video_file(const char* value);
  void set_video_file(const char* value, size_t size);
  ::std::string* mutable_video_file();
  ::std::string* release_video_file();
  void set_allocated_video_file(::std::string* video_file);

  // optional int32 webcam_width = 4 [default = 1280];
  bool has_webcam_width() const;
  void clear_webcam_width();
  static const int kWebcamWidthFieldNumber = 4;
  ::google::protobuf::int32 webcam_width() const;
  void set_webcam_width(::google::protobuf::int32 value);

  // optional int32 webcam_height = 5 [default = 720];
  bool has_webcam_height() const;
  void clear_webcam_height();
  static const int kWebcamHeightFieldNumber = 5;
  ::google::protobuf::int32 webcam_height() const;
  void set_webcam_height(::google::protobuf::int32 value);

  // optional int32 initial_frame = 6 [default = 0];
  bool has_initial_frame() const;
  void clear_initial_frame();
  static const int kInitialFrameFieldNumber = 6;
  ::google::protobuf::int32 initial_frame() const;
  void set_initial_frame(::google::protobuf::int32 value);

  // optional bool normalize = 7 [default = true];
  bool has_normalize() const;
  void clear_normalize();
  static const int kNormalizeFieldNumber = 7;
  bool normalize() const;
  void set_normalize(bool value);

  // repeated float mean_value = 8;
  int mean_value_size() const;
  void clear_mean_value();
  static const int kMeanValueFieldNumber = 8;
  float mean_value(int index) const;
  void set_mean_value(int index, float value);
  void add_mean_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      mean_value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_mean_value();

  // @@protoc_insertion_point(class_scope:caffe.VideoframeParameter)
 private:
  inline void set_has_video_type();
  inline void clear_has_video_type();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_video_file();
  inline void clear_has_video_file();
  inline void set_has_webcam_width();
  inline void clear_has_webcam_width();
  inline void set_has_webcam_height();
  inline void clear_has_webcam_height();
  inline void set_has_initial_frame();
  inline void clear_has_initial_frame();
  inline void set_has_normalize();
  inline void clear_has_normalize();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int video_type_;
  ::google::protobuf::int32 device_id_;
  ::google::protobuf::internal::ArenaStringPtr video_file_;
  ::google::protobuf::int32 webcam_width_;
  ::google::protobuf::int32 webcam_height_;
  ::google::protobuf::int32 initial_frame_;
  bool normalize_;
  ::google::protobuf::RepeatedField< float > mean_value_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static VideoframeParameter* default_instance_;
};
// -------------------------------------------------------------------

class VideoTrackerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.VideoTrackerParameter) */ {
 public:
  VideoTrackerParameter();
  virtual ~VideoTrackerParameter();

  VideoTrackerParameter(const VideoTrackerParameter& from);

  inline VideoTrackerParameter& operator=(const VideoTrackerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoTrackerParameter& default_instance();

  void Swap(VideoTrackerParameter* other);

  // implements Message ----------------------------------------------

  inline VideoTrackerParameter* New() const { return New(NULL); }

  VideoTrackerParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoTrackerParameter& from);
  void MergeFrom(const VideoTrackerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoTrackerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_type_video = 1 [default = true];
  bool has_is_type_video() const;
  void clear_is_type_video();
  static const int kIsTypeVideoFieldNumber = 1;
  bool is_type_video() const;
  void set_is_type_video(bool value);

  // optional string video_file = 2;
  bool has_video_file() const;
  void clear_video_file();
  static const int kVideoFileFieldNumber = 2;
  const ::std::string& video_file() const;
  void set_video_file(const ::std::string& value);
  void set_video_file(const char* value);
  void set_video_file(const char* value, size_t size);
  ::std::string* mutable_video_file();
  ::std::string* release_video_file();
  void set_allocated_video_file(::std::string* video_file);

  // optional int32 initial_frame = 3 [default = 0];
  bool has_initial_frame() const;
  void clear_initial_frame();
  static const int kInitialFrameFieldNumber = 3;
  ::google::protobuf::int32 initial_frame() const;
  void set_initial_frame(::google::protobuf::int32 value);

  // optional int32 webcam_width = 4 [default = 1280];
  bool has_webcam_width() const;
  void clear_webcam_width();
  static const int kWebcamWidthFieldNumber = 4;
  ::google::protobuf::int32 webcam_width() const;
  void set_webcam_width(::google::protobuf::int32 value);

  // optional int32 webcam_height = 5 [default = 720];
  bool has_webcam_height() const;
  void clear_webcam_height();
  static const int kWebcamHeightFieldNumber = 5;
  ::google::protobuf::int32 webcam_height() const;
  void set_webcam_height(::google::protobuf::int32 value);

  // optional int32 device_id = 6 [default = 0];
  bool has_device_id() const;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 6;
  ::google::protobuf::int32 device_id() const;
  void set_device_id(::google::protobuf::int32 value);

  // optional bool save_videos = 7 [default = false];
  bool has_save_videos() const;
  void clear_save_videos();
  static const int kSaveVideosFieldNumber = 7;
  bool save_videos() const;
  void set_save_videos(bool value);

  // optional string output_folder = 8;
  bool has_output_folder() const;
  void clear_output_folder();
  static const int kOutputFolderFieldNumber = 8;
  const ::std::string& output_folder() const;
  void set_output_folder(const ::std::string& value);
  void set_output_folder(const char* value);
  void set_output_folder(const char* value, size_t size);
  ::std::string* mutable_output_folder();
  ::std::string* release_output_folder();
  void set_allocated_output_folder(::std::string* output_folder);

  // @@protoc_insertion_point(class_scope:caffe.VideoTrackerParameter)
 private:
  inline void set_has_is_type_video();
  inline void clear_has_is_type_video();
  inline void set_has_video_file();
  inline void clear_has_video_file();
  inline void set_has_initial_frame();
  inline void clear_has_initial_frame();
  inline void set_has_webcam_width();
  inline void clear_has_webcam_width();
  inline void set_has_webcam_height();
  inline void clear_has_webcam_height();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_save_videos();
  inline void clear_has_save_videos();
  inline void set_has_output_folder();
  inline void clear_has_output_folder();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr video_file_;
  ::google::protobuf::int32 initial_frame_;
  ::google::protobuf::int32 webcam_width_;
  bool is_type_video_;
  bool save_videos_;
  ::google::protobuf::int32 webcam_height_;
  ::google::protobuf::internal::ArenaStringPtr output_folder_;
  ::google::protobuf::int32 device_id_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static VideoTrackerParameter* default_instance_;
};
// -------------------------------------------------------------------

class VisualizeposeParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.VisualizeposeParameter) */ {
 public:
  VisualizeposeParameter();
  virtual ~VisualizeposeParameter();

  VisualizeposeParameter(const VisualizeposeParameter& from);

  inline VisualizeposeParameter& operator=(const VisualizeposeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VisualizeposeParameter& default_instance();

  void Swap(VisualizeposeParameter* other);

  // implements Message ----------------------------------------------

  inline VisualizeposeParameter* New() const { return New(NULL); }

  VisualizeposeParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VisualizeposeParameter& from);
  void MergeFrom(const VisualizeposeParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VisualizeposeParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef VisualizeposeParameter_DrawType DrawType;
  static const DrawType POSE =
    VisualizeposeParameter_DrawType_POSE;
  static const DrawType HEATMAP_ID =
    VisualizeposeParameter_DrawType_HEATMAP_ID;
  static const DrawType HEATMAP_FROM =
    VisualizeposeParameter_DrawType_HEATMAP_FROM;
  static const DrawType VECMAP_ID =
    VisualizeposeParameter_DrawType_VECMAP_ID;
  static const DrawType VECMAP_FROM =
    VisualizeposeParameter_DrawType_VECMAP_FROM;
  static inline bool DrawType_IsValid(int value) {
    return VisualizeposeParameter_DrawType_IsValid(value);
  }
  static const DrawType DrawType_MIN =
    VisualizeposeParameter_DrawType_DrawType_MIN;
  static const DrawType DrawType_MAX =
    VisualizeposeParameter_DrawType_DrawType_MAX;
  static const int DrawType_ARRAYSIZE =
    VisualizeposeParameter_DrawType_DrawType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DrawType_descriptor() {
    return VisualizeposeParameter_DrawType_descriptor();
  }
  static inline const ::std::string& DrawType_Name(DrawType value) {
    return VisualizeposeParameter_DrawType_Name(value);
  }
  static inline bool DrawType_Parse(const ::std::string& name,
      DrawType* value) {
    return VisualizeposeParameter_DrawType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool is_type_coco = 1 [default = true];
  bool has_is_type_coco() const;
  void clear_is_type_coco();
  static const int kIsTypeCocoFieldNumber = 1;
  bool is_type_coco() const;
  void set_is_type_coco(bool value);

  // optional .caffe.VisualizeposeParameter.DrawType type = 2 [default = POSE];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::caffe::VisualizeposeParameter_DrawType type() const;
  void set_type(::caffe::VisualizeposeParameter_DrawType value);

  // optional int32 part_id = 3 [default = 0];
  bool has_part_id() const;
  void clear_part_id();
  static const int kPartIdFieldNumber = 3;
  ::google::protobuf::int32 part_id() const;
  void set_part_id(::google::protobuf::int32 value);

  // optional int32 from_part = 4 [default = 0];
  bool has_from_part() const;
  void clear_from_part();
  static const int kFromPartFieldNumber = 4;
  ::google::protobuf::int32 from_part() const;
  void set_from_part(::google::protobuf::int32 value);

  // optional int32 vec_id = 12 [default = 0];
  bool has_vec_id() const;
  void clear_vec_id();
  static const int kVecIdFieldNumber = 12;
  ::google::protobuf::int32 vec_id() const;
  void set_vec_id(::google::protobuf::int32 value);

  // optional int32 from_vec = 13 [default = 0];
  bool has_from_vec() const;
  void clear_from_vec();
  static const int kFromVecFieldNumber = 13;
  ::google::protobuf::int32 from_vec() const;
  void set_from_vec(::google::protobuf::int32 value);

  // optional float pose_threshold = 5 [default = 0.05];
  bool has_pose_threshold() const;
  void clear_pose_threshold();
  static const int kPoseThresholdFieldNumber = 5;
  float pose_threshold() const;
  void set_pose_threshold(float value);

  // optional bool write_frames = 6 [default = false];
  bool has_write_frames() const;
  void clear_write_frames();
  static const int kWriteFramesFieldNumber = 6;
  bool write_frames() const;
  void set_write_frames(bool value);

  // optional string output_directory = 7 [default = ""];
  bool has_output_directory() const;
  void clear_output_directory();
  static const int kOutputDirectoryFieldNumber = 7;
  const ::std::string& output_directory() const;
  void set_output_directory(const ::std::string& value);
  void set_output_directory(const char* value);
  void set_output_directory(const char* value, size_t size);
  ::std::string* mutable_output_directory();
  ::std::string* release_output_directory();
  void set_allocated_output_directory(::std::string* output_directory);

  // optional bool visualize = 8 [default = true];
  bool has_visualize() const;
  void clear_visualize();
  static const int kVisualizeFieldNumber = 8;
  bool visualize() const;
  void set_visualize(bool value);

  // optional bool draw_skeleton = 9 [default = true];
  bool has_draw_skeleton() const;
  void clear_draw_skeleton();
  static const int kDrawSkeletonFieldNumber = 9;
  bool draw_skeleton() const;
  void set_draw_skeleton(bool value);

  // optional bool print_score = 10 [default = false];
  bool has_print_score() const;
  void clear_print_score();
  static const int kPrintScoreFieldNumber = 10;
  bool print_score() const;
  void set_print_score(bool value);

  // @@protoc_insertion_point(class_scope:caffe.VisualizeposeParameter)
 private:
  inline void set_has_is_type_coco();
  inline void clear_has_is_type_coco();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_part_id();
  inline void clear_has_part_id();
  inline void set_has_from_part();
  inline void clear_has_from_part();
  inline void set_has_vec_id();
  inline void clear_has_vec_id();
  inline void set_has_from_vec();
  inline void clear_has_from_vec();
  inline void set_has_pose_threshold();
  inline void clear_has_pose_threshold();
  inline void set_has_write_frames();
  inline void clear_has_write_frames();
  inline void set_has_output_directory();
  inline void clear_has_output_directory();
  inline void set_has_visualize();
  inline void clear_has_visualize();
  inline void set_has_draw_skeleton();
  inline void clear_has_draw_skeleton();
  inline void set_has_print_score();
  inline void clear_has_print_score();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::int32 part_id_;
  ::google::protobuf::int32 from_part_;
  ::google::protobuf::int32 vec_id_;
  ::google::protobuf::int32 from_vec_;
  float pose_threshold_;
  bool is_type_coco_;
  bool write_frames_;
  bool visualize_;
  bool draw_skeleton_;
  bool print_score_;
  ::google::protobuf::internal::ArenaStringPtr output_directory_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static VisualizeposeParameter* default_instance_;
};
// -------------------------------------------------------------------

class AllocateIdParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.AllocateIdParameter) */ {
 public:
  AllocateIdParameter();
  virtual ~AllocateIdParameter();

  AllocateIdParameter(const AllocateIdParameter& from);

  inline AllocateIdParameter& operator=(const AllocateIdParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllocateIdParameter& default_instance();

  void Swap(AllocateIdParameter* other);

  // implements Message ----------------------------------------------

  inline AllocateIdParameter* New() const { return New(NULL); }

  AllocateIdParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllocateIdParameter& from);
  void MergeFrom(const AllocateIdParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AllocateIdParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float match_iou_thre = 1 [default = 0.2];
  bool has_match_iou_thre() const;
  void clear_match_iou_thre();
  static const int kMatchIouThreFieldNumber = 1;
  float match_iou_thre() const;
  void set_match_iou_thre(float value);

  // optional float thre_for_cal_similarity = 2 [default = 0.6];
  bool has_thre_for_cal_similarity() const;
  void clear_thre_for_cal_similarity();
  static const int kThreForCalSimilarityFieldNumber = 2;
  float thre_for_cal_similarity() const;
  void set_thre_for_cal_similarity(float value);

  // optional float occu_coverage_thre = 3 [default = 0.1];
  bool has_occu_coverage_thre() const;
  void clear_occu_coverage_thre();
  static const int kOccuCoverageThreFieldNumber = 3;
  float occu_coverage_thre() const;
  void set_occu_coverage_thre(float value);

  // optional float scale_for_update_str = 4 [default = 0.1];
  bool has_scale_for_update_str() const;
  void clear_scale_for_update_str();
  static const int kScaleForUpdateStrFieldNumber = 4;
  float scale_for_update_str() const;
  void set_scale_for_update_str(float value);

  // optional float scale_for_update_area = 5 [default = 0.5];
  bool has_scale_for_update_area() const;
  void clear_scale_for_update_area();
  static const int kScaleForUpdateAreaFieldNumber = 5;
  float scale_for_update_area() const;
  void set_scale_for_update_area(float value);

  // optional float split_iou_thre = 6 [default = 0.2];
  bool has_split_iou_thre() const;
  void clear_split_iou_thre();
  static const int kSplitIouThreFieldNumber = 6;
  float split_iou_thre() const;
  void set_split_iou_thre(float value);

  // optional float split_simi_thre = 7 [default = 0.6];
  bool has_split_simi_thre() const;
  void clear_split_simi_thre();
  static const int kSplitSimiThreFieldNumber = 7;
  float split_simi_thre() const;
  void set_split_simi_thre(float value);

  // @@protoc_insertion_point(class_scope:caffe.AllocateIdParameter)
 private:
  inline void set_has_match_iou_thre();
  inline void clear_has_match_iou_thre();
  inline void set_has_thre_for_cal_similarity();
  inline void clear_has_thre_for_cal_similarity();
  inline void set_has_occu_coverage_thre();
  inline void clear_has_occu_coverage_thre();
  inline void set_has_scale_for_update_str();
  inline void clear_has_scale_for_update_str();
  inline void set_has_scale_for_update_area();
  inline void clear_has_scale_for_update_area();
  inline void set_has_split_iou_thre();
  inline void clear_has_split_iou_thre();
  inline void set_has_split_simi_thre();
  inline void clear_has_split_simi_thre();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float match_iou_thre_;
  float thre_for_cal_similarity_;
  float occu_coverage_thre_;
  float scale_for_update_str_;
  float scale_for_update_area_;
  float split_iou_thre_;
  float split_simi_thre_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static AllocateIdParameter* default_instance_;
};
// -------------------------------------------------------------------

class VisualizeBoxposeParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.VisualizeBoxposeParameter) */ {
 public:
  VisualizeBoxposeParameter();
  virtual ~VisualizeBoxposeParameter();

  VisualizeBoxposeParameter(const VisualizeBoxposeParameter& from);

  inline VisualizeBoxposeParameter& operator=(const VisualizeBoxposeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VisualizeBoxposeParameter& default_instance();

  void Swap(VisualizeBoxposeParameter* other);

  // implements Message ----------------------------------------------

  inline VisualizeBoxposeParameter* New() const { return New(NULL); }

  VisualizeBoxposeParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VisualizeBoxposeParameter& from);
  void MergeFrom(const VisualizeBoxposeParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VisualizeBoxposeParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef VisualizeBoxposeParameter_BPDrawType BPDrawType;
  static const BPDrawType BOX =
    VisualizeBoxposeParameter_BPDrawType_BOX;
  static const BPDrawType POSE =
    VisualizeBoxposeParameter_BPDrawType_POSE;
  static const BPDrawType HEATMAP =
    VisualizeBoxposeParameter_BPDrawType_HEATMAP;
  static const BPDrawType VECMAP =
    VisualizeBoxposeParameter_BPDrawType_VECMAP;
  static const BPDrawType POSE_BOX =
    VisualizeBoxposeParameter_BPDrawType_POSE_BOX;
  static const BPDrawType HEATMAP_BOX =
    VisualizeBoxposeParameter_BPDrawType_HEATMAP_BOX;
  static const BPDrawType VECMAP_BOX =
    VisualizeBoxposeParameter_BPDrawType_VECMAP_BOX;
  static inline bool BPDrawType_IsValid(int value) {
    return VisualizeBoxposeParameter_BPDrawType_IsValid(value);
  }
  static const BPDrawType BPDrawType_MIN =
    VisualizeBoxposeParameter_BPDrawType_BPDrawType_MIN;
  static const BPDrawType BPDrawType_MAX =
    VisualizeBoxposeParameter_BPDrawType_BPDrawType_MAX;
  static const int BPDrawType_ARRAYSIZE =
    VisualizeBoxposeParameter_BPDrawType_BPDrawType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BPDrawType_descriptor() {
    return VisualizeBoxposeParameter_BPDrawType_descriptor();
  }
  static inline const ::std::string& BPDrawType_Name(BPDrawType value) {
    return VisualizeBoxposeParameter_BPDrawType_Name(value);
  }
  static inline bool BPDrawType_Parse(const ::std::string& name,
      BPDrawType* value) {
    return VisualizeBoxposeParameter_BPDrawType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .caffe.VisualizeBoxposeParameter.BPDrawType type = 1 [default = POSE];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::caffe::VisualizeBoxposeParameter_BPDrawType type() const;
  void set_type(::caffe::VisualizeBoxposeParameter_BPDrawType value);

  // optional float pose_threshold = 2 [default = 0.05];
  bool has_pose_threshold() const;
  void clear_pose_threshold();
  static const int kPoseThresholdFieldNumber = 2;
  float pose_threshold() const;
  void set_pose_threshold(float value);

  // optional bool write_frames = 3 [default = false];
  bool has_write_frames() const;
  void clear_write_frames();
  static const int kWriteFramesFieldNumber = 3;
  bool write_frames() const;
  void set_write_frames(bool value);

  // optional string output_directory = 4 [default = ""];
  bool has_output_directory() const;
  void clear_output_directory();
  static const int kOutputDirectoryFieldNumber = 4;
  const ::std::string& output_directory() const;
  void set_output_directory(const ::std::string& value);
  void set_output_directory(const char* value);
  void set_output_directory(const char* value, size_t size);
  ::std::string* mutable_output_directory();
  ::std::string* release_output_directory();
  void set_allocated_output_directory(::std::string* output_directory);

  // optional bool visualize = 5 [default = true];
  bool has_visualize() const;
  void clear_visualize();
  static const int kVisualizeFieldNumber = 5;
  bool visualize() const;
  void set_visualize(bool value);

  // optional bool print_score = 6 [default = false];
  bool has_print_score() const;
  void clear_print_score();
  static const int kPrintScoreFieldNumber = 6;
  bool print_score() const;
  void set_print_score(bool value);

  // @@protoc_insertion_point(class_scope:caffe.VisualizeBoxposeParameter)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_pose_threshold();
  inline void clear_has_pose_threshold();
  inline void set_has_write_frames();
  inline void clear_has_write_frames();
  inline void set_has_output_directory();
  inline void clear_has_output_directory();
  inline void set_has_visualize();
  inline void clear_has_visualize();
  inline void set_has_print_score();
  inline void clear_has_print_score();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  float pose_threshold_;
  ::google::protobuf::internal::ArenaStringPtr output_directory_;
  bool write_frames_;
  bool visualize_;
  bool print_score_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static VisualizeBoxposeParameter* default_instance_;
};
// -------------------------------------------------------------------

class VisualMaskParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.VisualMaskParameter) */ {
 public:
  VisualMaskParameter();
  virtual ~VisualMaskParameter();

  VisualMaskParameter(const VisualMaskParameter& from);

  inline VisualMaskParameter& operator=(const VisualMaskParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VisualMaskParameter& default_instance();

  void Swap(VisualMaskParameter* other);

  // implements Message ----------------------------------------------

  inline VisualMaskParameter* New() const { return New(NULL); }

  VisualMaskParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VisualMaskParameter& from);
  void MergeFrom(const VisualMaskParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VisualMaskParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float kps_threshold = 1 [default = 0.6];
  bool has_kps_threshold() const;
  void clear_kps_threshold();
  static const int kKpsThresholdFieldNumber = 1;
  float kps_threshold() const;
  void set_kps_threshold(float value);

  // optional float mask_threshold = 2 [default = 0.5];
  bool has_mask_threshold() const;
  void clear_mask_threshold();
  static const int kMaskThresholdFieldNumber = 2;
  float mask_threshold() const;
  void set_mask_threshold(float value);

  // optional bool write_frames = 3 [default = false];
  bool has_write_frames() const;
  void clear_write_frames();
  static const int kWriteFramesFieldNumber = 3;
  bool write_frames() const;
  void set_write_frames(bool value);

  // optional string output_directory = 4 [default = ""];
  bool has_output_directory() const;
  void clear_output_directory();
  static const int kOutputDirectoryFieldNumber = 4;
  const ::std::string& output_directory() const;
  void set_output_directory(const ::std::string& value);
  void set_output_directory(const char* value);
  void set_output_directory(const char* value, size_t size);
  ::std::string* mutable_output_directory();
  ::std::string* release_output_directory();
  void set_allocated_output_directory(::std::string* output_directory);

  // optional bool show_kps = 5 [default = false];
  bool has_show_kps() const;
  void clear_show_kps();
  static const int kShowKpsFieldNumber = 5;
  bool show_kps() const;
  void set_show_kps(bool value);

  // optional bool show_mask = 6 [default = false];
  bool has_show_mask() const;
  void clear_show_mask();
  static const int kShowMaskFieldNumber = 6;
  bool show_mask() const;
  void set_show_mask(bool value);

  // optional bool print_score = 7 [default = false];
  bool has_print_score() const;
  void clear_print_score();
  static const int kPrintScoreFieldNumber = 7;
  bool print_score() const;
  void set_print_score(bool value);

  // optional int32 max_dis_size = 8 [default = 1000];
  bool has_max_dis_size() const;
  void clear_max_dis_size();
  static const int kMaxDisSizeFieldNumber = 8;
  ::google::protobuf::int32 max_dis_size() const;
  void set_max_dis_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:caffe.VisualMaskParameter)
 private:
  inline void set_has_kps_threshold();
  inline void clear_has_kps_threshold();
  inline void set_has_mask_threshold();
  inline void clear_has_mask_threshold();
  inline void set_has_write_frames();
  inline void clear_has_write_frames();
  inline void set_has_output_directory();
  inline void clear_has_output_directory();
  inline void set_has_show_kps();
  inline void clear_has_show_kps();
  inline void set_has_show_mask();
  inline void clear_has_show_mask();
  inline void set_has_print_score();
  inline void clear_has_print_score();
  inline void set_has_max_dis_size();
  inline void clear_has_max_dis_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float kps_threshold_;
  float mask_threshold_;
  ::google::protobuf::internal::ArenaStringPtr output_directory_;
  bool write_frames_;
  bool show_kps_;
  bool show_mask_;
  bool print_score_;
  ::google::protobuf::int32 max_dis_size_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static VisualMaskParameter* default_instance_;
};
// -------------------------------------------------------------------

class WindowDataParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.WindowDataParameter) */ {
 public:
  WindowDataParameter();
  virtual ~WindowDataParameter();

  WindowDataParameter(const WindowDataParameter& from);

  inline WindowDataParameter& operator=(const WindowDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WindowDataParameter& default_instance();

  void Swap(WindowDataParameter* other);

  // implements Message ----------------------------------------------

  inline WindowDataParameter* New() const { return New(NULL); }

  WindowDataParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WindowDataParameter& from);
  void MergeFrom(const WindowDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WindowDataParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional float scale = 2 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // optional string mean_file = 3;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 3;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // optional uint32 batch_size = 4;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  ::google::protobuf::uint32 batch_size() const;
  void set_batch_size(::google::protobuf::uint32 value);

  // optional uint32 crop_size = 5 [default = 0];
  bool has_crop_size() const;
  void clear_crop_size();
  static const int kCropSizeFieldNumber = 5;
  ::google::protobuf::uint32 crop_size() const;
  void set_crop_size(::google::protobuf::uint32 value);

  // optional bool mirror = 6 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 6;
  bool mirror() const;
  void set_mirror(bool value);

  // optional float fg_threshold = 7 [default = 0.5];
  bool has_fg_threshold() const;
  void clear_fg_threshold();
  static const int kFgThresholdFieldNumber = 7;
  float fg_threshold() const;
  void set_fg_threshold(float value);

  // optional float bg_threshold = 8 [default = 0.5];
  bool has_bg_threshold() const;
  void clear_bg_threshold();
  static const int kBgThresholdFieldNumber = 8;
  float bg_threshold() const;
  void set_bg_threshold(float value);

  // optional float fg_fraction = 9 [default = 0.25];
  bool has_fg_fraction() const;
  void clear_fg_fraction();
  static const int kFgFractionFieldNumber = 9;
  float fg_fraction() const;
  void set_fg_fraction(float value);

  // optional uint32 context_pad = 10 [default = 0];
  bool has_context_pad() const;
  void clear_context_pad();
  static const int kContextPadFieldNumber = 10;
  ::google::protobuf::uint32 context_pad() const;
  void set_context_pad(::google::protobuf::uint32 value);

  // optional string crop_mode = 11 [default = "warp"];
  bool has_crop_mode() const;
  void clear_crop_mode();
  static const int kCropModeFieldNumber = 11;
  const ::std::string& crop_mode() const;
  void set_crop_mode(const ::std::string& value);
  void set_crop_mode(const char* value);
  void set_crop_mode(const char* value, size_t size);
  ::std::string* mutable_crop_mode();
  ::std::string* release_crop_mode();
  void set_allocated_crop_mode(::std::string* crop_mode);

  // optional bool cache_images = 12 [default = false];
  bool has_cache_images() const;
  void clear_cache_images();
  static const int kCacheImagesFieldNumber = 12;
  bool cache_images() const;
  void set_cache_images(bool value);

  // optional string root_folder = 13 [default = ""];
  bool has_root_folder() const;
  void clear_root_folder();
  static const int kRootFolderFieldNumber = 13;
  const ::std::string& root_folder() const;
  void set_root_folder(const ::std::string& value);
  void set_root_folder(const char* value);
  void set_root_folder(const char* value, size_t size);
  ::std::string* mutable_root_folder();
  ::std::string* release_root_folder();
  void set_allocated_root_folder(::std::string* root_folder);

  // @@protoc_insertion_point(class_scope:caffe.WindowDataParameter)
 private:
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_mean_file();
  inline void clear_has_mean_file();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_crop_size();
  inline void clear_has_crop_size();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_fg_threshold();
  inline void clear_has_fg_threshold();
  inline void set_has_bg_threshold();
  inline void clear_has_bg_threshold();
  inline void set_has_fg_fraction();
  inline void clear_has_fg_fraction();
  inline void set_has_context_pad();
  inline void clear_has_context_pad();
  inline void set_has_crop_mode();
  inline void clear_has_crop_mode();
  inline void set_has_cache_images();
  inline void clear_has_cache_images();
  inline void set_has_root_folder();
  inline void clear_has_root_folder();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  float scale_;
  ::google::protobuf::uint32 batch_size_;
  ::google::protobuf::uint32 crop_size_;
  float fg_threshold_;
  float bg_threshold_;
  float fg_fraction_;
  bool mirror_;
  bool cache_images_;
  ::google::protobuf::uint32 context_pad_;
  static ::std::string* _default_crop_mode_;
  ::google::protobuf::internal::ArenaStringPtr crop_mode_;
  ::google::protobuf::internal::ArenaStringPtr root_folder_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static WindowDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class SPPParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.SPPParameter) */ {
 public:
  SPPParameter();
  virtual ~SPPParameter();

  SPPParameter(const SPPParameter& from);

  inline SPPParameter& operator=(const SPPParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPPParameter& default_instance();

  void Swap(SPPParameter* other);

  // implements Message ----------------------------------------------

  inline SPPParameter* New() const { return New(NULL); }

  SPPParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPPParameter& from);
  void MergeFrom(const SPPParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SPPParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SPPParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX =
    SPPParameter_PoolMethod_MAX;
  static const PoolMethod AVE =
    SPPParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC =
    SPPParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return SPPParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    SPPParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    SPPParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    SPPParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return SPPParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return SPPParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return SPPParameter_PoolMethod_Parse(name, value);
  }

  typedef SPPParameter_Engine Engine;
  static const Engine DEFAULT =
    SPPParameter_Engine_DEFAULT;
  static const Engine CAFFE =
    SPPParameter_Engine_CAFFE;
  static const Engine CUDNN =
    SPPParameter_Engine_CUDNN;
  static inline bool Engine_IsValid(int value) {
    return SPPParameter_Engine_IsValid(value);
  }
  static const Engine Engine_MIN =
    SPPParameter_Engine_Engine_MIN;
  static const Engine Engine_MAX =
    SPPParameter_Engine_Engine_MAX;
  static const int Engine_ARRAYSIZE =
    SPPParameter_Engine_Engine_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Engine_descriptor() {
    return SPPParameter_Engine_descriptor();
  }
  static inline const ::std::string& Engine_Name(Engine value) {
    return SPPParameter_Engine_Name(value);
  }
  static inline bool Engine_Parse(const ::std::string& name,
      Engine* value) {
    return SPPParameter_Engine_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 pyramid_height = 1;
  bool has_pyramid_height() const;
  void clear_pyramid_height();
  static const int kPyramidHeightFieldNumber = 1;
  ::google::protobuf::uint32 pyramid_height() const;
  void set_pyramid_height(::google::protobuf::uint32 value);

  // optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
  bool has_pool() const;
  void clear_pool();
  static const int kPoolFieldNumber = 2;
  ::caffe::SPPParameter_PoolMethod pool() const;
  void set_pool(::caffe::SPPParameter_PoolMethod value);

  // optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
  bool has_engine() const;
  void clear_engine();
  static const int kEngineFieldNumber = 6;
  ::caffe::SPPParameter_Engine engine() const;
  void set_engine(::caffe::SPPParameter_Engine value);

  // @@protoc_insertion_point(class_scope:caffe.SPPParameter)
 private:
  inline void set_has_pyramid_height();
  inline void clear_has_pyramid_height();
  inline void set_has_pool();
  inline void clear_has_pool();
  inline void set_has_engine();
  inline void clear_has_engine();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pyramid_height_;
  int pool_;
  int engine_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static SPPParameter* default_instance_;
};
// -------------------------------------------------------------------

class V1LayerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.V1LayerParameter) */ {
 public:
  V1LayerParameter();
  virtual ~V1LayerParameter();

  V1LayerParameter(const V1LayerParameter& from);

  inline V1LayerParameter& operator=(const V1LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const V1LayerParameter& default_instance();

  void Swap(V1LayerParameter* other);

  // implements Message ----------------------------------------------

  inline V1LayerParameter* New() const { return New(NULL); }

  V1LayerParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const V1LayerParameter& from);
  void MergeFrom(const V1LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(V1LayerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef V1LayerParameter_LayerType LayerType;
  static const LayerType NONE =
    V1LayerParameter_LayerType_NONE;
  static const LayerType ABSVAL =
    V1LayerParameter_LayerType_ABSVAL;
  static const LayerType ACCURACY =
    V1LayerParameter_LayerType_ACCURACY;
  static const LayerType ARGMAX =
    V1LayerParameter_LayerType_ARGMAX;
  static const LayerType BNLL =
    V1LayerParameter_LayerType_BNLL;
  static const LayerType CONCAT =
    V1LayerParameter_LayerType_CONCAT;
  static const LayerType CONTRASTIVE_LOSS =
    V1LayerParameter_LayerType_CONTRASTIVE_LOSS;
  static const LayerType CONVOLUTION =
    V1LayerParameter_LayerType_CONVOLUTION;
  static const LayerType DATA =
    V1LayerParameter_LayerType_DATA;
  static const LayerType DECONVOLUTION =
    V1LayerParameter_LayerType_DECONVOLUTION;
  static const LayerType DROPOUT =
    V1LayerParameter_LayerType_DROPOUT;
  static const LayerType DUMMY_DATA =
    V1LayerParameter_LayerType_DUMMY_DATA;
  static const LayerType EUCLIDEAN_LOSS =
    V1LayerParameter_LayerType_EUCLIDEAN_LOSS;
  static const LayerType ELTWISE =
    V1LayerParameter_LayerType_ELTWISE;
  static const LayerType EXP =
    V1LayerParameter_LayerType_EXP;
  static const LayerType FLATTEN =
    V1LayerParameter_LayerType_FLATTEN;
  static const LayerType HDF5_DATA =
    V1LayerParameter_LayerType_HDF5_DATA;
  static const LayerType HDF5_OUTPUT =
    V1LayerParameter_LayerType_HDF5_OUTPUT;
  static const LayerType HINGE_LOSS =
    V1LayerParameter_LayerType_HINGE_LOSS;
  static const LayerType IM2COL =
    V1LayerParameter_LayerType_IM2COL;
  static const LayerType IMAGE_DATA =
    V1LayerParameter_LayerType_IMAGE_DATA;
  static const LayerType INFOGAIN_LOSS =
    V1LayerParameter_LayerType_INFOGAIN_LOSS;
  static const LayerType INNER_PRODUCT =
    V1LayerParameter_LayerType_INNER_PRODUCT;
  static const LayerType LRN =
    V1LayerParameter_LayerType_LRN;
  static const LayerType MEMORY_DATA =
    V1LayerParameter_LayerType_MEMORY_DATA;
  static const LayerType MULTINOMIAL_LOGISTIC_LOSS =
    V1LayerParameter_LayerType_MULTINOMIAL_LOGISTIC_LOSS;
  static const LayerType MVN =
    V1LayerParameter_LayerType_MVN;
  static const LayerType POOLING =
    V1LayerParameter_LayerType_POOLING;
  static const LayerType POWER =
    V1LayerParameter_LayerType_POWER;
  static const LayerType RELU =
    V1LayerParameter_LayerType_RELU;
  static const LayerType SIGMOID =
    V1LayerParameter_LayerType_SIGMOID;
  static const LayerType SIGMOID_CROSS_ENTROPY_LOSS =
    V1LayerParameter_LayerType_SIGMOID_CROSS_ENTROPY_LOSS;
  static const LayerType SILENCE =
    V1LayerParameter_LayerType_SILENCE;
  static const LayerType SOFTMAX =
    V1LayerParameter_LayerType_SOFTMAX;
  static const LayerType SOFTMAX_LOSS =
    V1LayerParameter_LayerType_SOFTMAX_LOSS;
  static const LayerType SPLIT =
    V1LayerParameter_LayerType_SPLIT;
  static const LayerType SLICE =
    V1LayerParameter_LayerType_SLICE;
  static const LayerType TANH =
    V1LayerParameter_LayerType_TANH;
  static const LayerType WINDOW_DATA =
    V1LayerParameter_LayerType_WINDOW_DATA;
  static const LayerType THRESHOLD =
    V1LayerParameter_LayerType_THRESHOLD;
  static inline bool LayerType_IsValid(int value) {
    return V1LayerParameter_LayerType_IsValid(value);
  }
  static const LayerType LayerType_MIN =
    V1LayerParameter_LayerType_LayerType_MIN;
  static const LayerType LayerType_MAX =
    V1LayerParameter_LayerType_LayerType_MAX;
  static const int LayerType_ARRAYSIZE =
    V1LayerParameter_LayerType_LayerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LayerType_descriptor() {
    return V1LayerParameter_LayerType_descriptor();
  }
  static inline const ::std::string& LayerType_Name(LayerType value) {
    return V1LayerParameter_LayerType_Name(value);
  }
  static inline bool LayerType_Parse(const ::std::string& name,
      LayerType* value) {
    return V1LayerParameter_LayerType_Parse(name, value);
  }

  typedef V1LayerParameter_DimCheckMode DimCheckMode;
  static const DimCheckMode STRICT =
    V1LayerParameter_DimCheckMode_STRICT;
  static const DimCheckMode PERMISSIVE =
    V1LayerParameter_DimCheckMode_PERMISSIVE;
  static inline bool DimCheckMode_IsValid(int value) {
    return V1LayerParameter_DimCheckMode_IsValid(value);
  }
  static const DimCheckMode DimCheckMode_MIN =
    V1LayerParameter_DimCheckMode_DimCheckMode_MIN;
  static const DimCheckMode DimCheckMode_MAX =
    V1LayerParameter_DimCheckMode_DimCheckMode_MAX;
  static const int DimCheckMode_ARRAYSIZE =
    V1LayerParameter_DimCheckMode_DimCheckMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DimCheckMode_descriptor() {
    return V1LayerParameter_DimCheckMode_descriptor();
  }
  static inline const ::std::string& DimCheckMode_Name(DimCheckMode value) {
    return V1LayerParameter_DimCheckMode_Name(value);
  }
  static inline bool DimCheckMode_Parse(const ::std::string& name,
      DimCheckMode* value) {
    return V1LayerParameter_DimCheckMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string bottom = 2;
  int bottom_size() const;
  void clear_bottom();
  static const int kBottomFieldNumber = 2;
  const ::std::string& bottom(int index) const;
  ::std::string* mutable_bottom(int index);
  void set_bottom(int index, const ::std::string& value);
  void set_bottom(int index, const char* value);
  void set_bottom(int index, const char* value, size_t size);
  ::std::string* add_bottom();
  void add_bottom(const ::std::string& value);
  void add_bottom(const char* value);
  void add_bottom(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 3;
  int top_size() const;
  void clear_top();
  static const int kTopFieldNumber = 3;
  const ::std::string& top(int index) const;
  ::std::string* mutable_top(int index);
  void set_top(int index, const ::std::string& value);
  void set_top(int index, const char* value);
  void set_top(int index, const char* value, size_t size);
  ::std::string* add_top();
  void add_top(const ::std::string& value);
  void add_top(const char* value);
  void add_top(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // optional string name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .caffe.NetStateRule include = 32;
  int include_size() const;
  void clear_include();
  static const int kIncludeFieldNumber = 32;
  const ::caffe::NetStateRule& include(int index) const;
  ::caffe::NetStateRule* mutable_include(int index);
  ::caffe::NetStateRule* add_include();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_include();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      include() const;

  // repeated .caffe.NetStateRule exclude = 33;
  int exclude_size() const;
  void clear_exclude();
  static const int kExcludeFieldNumber = 33;
  const ::caffe::NetStateRule& exclude(int index) const;
  ::caffe::NetStateRule* mutable_exclude(int index);
  ::caffe::NetStateRule* add_exclude();
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
      mutable_exclude();
  const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
      exclude() const;

  // optional .caffe.V1LayerParameter.LayerType type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::caffe::V1LayerParameter_LayerType type() const;
  void set_type(::caffe::V1LayerParameter_LayerType value);

  // repeated .caffe.BlobProto blobs = 6;
  int blobs_size() const;
  void clear_blobs();
  static const int kBlobsFieldNumber = 6;
  const ::caffe::BlobProto& blobs(int index) const;
  ::caffe::BlobProto* mutable_blobs(int index);
  ::caffe::BlobProto* add_blobs();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;

  // repeated string param = 1001;
  int param_size() const;
  void clear_param();
  static const int kParamFieldNumber = 1001;
  const ::std::string& param(int index) const;
  ::std::string* mutable_param(int index);
  void set_param(int index, const ::std::string& value);
  void set_param(int index, const char* value);
  void set_param(int index, const char* value, size_t size);
  ::std::string* add_param();
  void add_param(const ::std::string& value);
  void add_param(const char* value);
  void add_param(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& param() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_param();

  // repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
  int blob_share_mode_size() const;
  void clear_blob_share_mode();
  static const int kBlobShareModeFieldNumber = 1002;
  ::caffe::V1LayerParameter_DimCheckMode blob_share_mode(int index) const;
  void set_blob_share_mode(int index, ::caffe::V1LayerParameter_DimCheckMode value);
  void add_blob_share_mode(::caffe::V1LayerParameter_DimCheckMode value);
  const ::google::protobuf::RepeatedField<int>& blob_share_mode() const;
  ::google::protobuf::RepeatedField<int>* mutable_blob_share_mode();

  // repeated float blobs_lr = 7;
  int blobs_lr_size() const;
  void clear_blobs_lr();
  static const int kBlobsLrFieldNumber = 7;
  float blobs_lr(int index) const;
  void set_blobs_lr(int index, float value);
  void add_blobs_lr(float value);
  const ::google::protobuf::RepeatedField< float >&
      blobs_lr() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_blobs_lr();

  // repeated float weight_decay = 8;
  int weight_decay_size() const;
  void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 8;
  float weight_decay(int index) const;
  void set_weight_decay(int index, float value);
  void add_weight_decay(float value);
  const ::google::protobuf::RepeatedField< float >&
      weight_decay() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_weight_decay();

  // repeated float loss_weight = 35;
  int loss_weight_size() const;
  void clear_loss_weight();
  static const int kLossWeightFieldNumber = 35;
  float loss_weight(int index) const;
  void set_loss_weight(int index, float value);
  void add_loss_weight(float value);
  const ::google::protobuf::RepeatedField< float >&
      loss_weight() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_loss_weight();

  // optional .caffe.AccuracyParameter accuracy_param = 27;
  bool has_accuracy_param() const;
  void clear_accuracy_param();
  static const int kAccuracyParamFieldNumber = 27;
  const ::caffe::AccuracyParameter& accuracy_param() const;
  ::caffe::AccuracyParameter* mutable_accuracy_param();
  ::caffe::AccuracyParameter* release_accuracy_param();
  void set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param);

  // optional .caffe.ArgMaxParameter argmax_param = 23;
  bool has_argmax_param() const;
  void clear_argmax_param();
  static const int kArgmaxParamFieldNumber = 23;
  const ::caffe::ArgMaxParameter& argmax_param() const;
  ::caffe::ArgMaxParameter* mutable_argmax_param();
  ::caffe::ArgMaxParameter* release_argmax_param();
  void set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param);

  // optional .caffe.ConcatParameter concat_param = 9;
  bool has_concat_param() const;
  void clear_concat_param();
  static const int kConcatParamFieldNumber = 9;
  const ::caffe::ConcatParameter& concat_param() const;
  ::caffe::ConcatParameter* mutable_concat_param();
  ::caffe::ConcatParameter* release_concat_param();
  void set_allocated_concat_param(::caffe::ConcatParameter* concat_param);

  // optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
  bool has_contrastive_loss_param() const;
  void clear_contrastive_loss_param();
  static const int kContrastiveLossParamFieldNumber = 40;
  const ::caffe::ContrastiveLossParameter& contrastive_loss_param() const;
  ::caffe::ContrastiveLossParameter* mutable_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* release_contrastive_loss_param();
  void set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param);

  // optional .caffe.ConvolutionParameter convolution_param = 10;
  bool has_convolution_param() const;
  void clear_convolution_param();
  static const int kConvolutionParamFieldNumber = 10;
  const ::caffe::ConvolutionParameter& convolution_param() const;
  ::caffe::ConvolutionParameter* mutable_convolution_param();
  ::caffe::ConvolutionParameter* release_convolution_param();
  void set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param);

  // optional .caffe.DataParameter data_param = 11;
  bool has_data_param() const;
  void clear_data_param();
  static const int kDataParamFieldNumber = 11;
  const ::caffe::DataParameter& data_param() const;
  ::caffe::DataParameter* mutable_data_param();
  ::caffe::DataParameter* release_data_param();
  void set_allocated_data_param(::caffe::DataParameter* data_param);

  // optional .caffe.DropoutParameter dropout_param = 12;
  bool has_dropout_param() const;
  void clear_dropout_param();
  static const int kDropoutParamFieldNumber = 12;
  const ::caffe::DropoutParameter& dropout_param() const;
  ::caffe::DropoutParameter* mutable_dropout_param();
  ::caffe::DropoutParameter* release_dropout_param();
  void set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param);

  // optional .caffe.DummyDataParameter dummy_data_param = 26;
  bool has_dummy_data_param() const;
  void clear_dummy_data_param();
  static const int kDummyDataParamFieldNumber = 26;
  const ::caffe::DummyDataParameter& dummy_data_param() const;
  ::caffe::DummyDataParameter* mutable_dummy_data_param();
  ::caffe::DummyDataParameter* release_dummy_data_param();
  void set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param);

  // optional .caffe.EltwiseParameter eltwise_param = 24;
  bool has_eltwise_param() const;
  void clear_eltwise_param();
  static const int kEltwiseParamFieldNumber = 24;
  const ::caffe::EltwiseParameter& eltwise_param() const;
  ::caffe::EltwiseParameter* mutable_eltwise_param();
  ::caffe::EltwiseParameter* release_eltwise_param();
  void set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param);

  // optional .caffe.ExpParameter exp_param = 41;
  bool has_exp_param() const;
  void clear_exp_param();
  static const int kExpParamFieldNumber = 41;
  const ::caffe::ExpParameter& exp_param() const;
  ::caffe::ExpParameter* mutable_exp_param();
  ::caffe::ExpParameter* release_exp_param();
  void set_allocated_exp_param(::caffe::ExpParameter* exp_param);

  // optional .caffe.HDF5DataParameter hdf5_data_param = 13;
  bool has_hdf5_data_param() const;
  void clear_hdf5_data_param();
  static const int kHdf5DataParamFieldNumber = 13;
  const ::caffe::HDF5DataParameter& hdf5_data_param() const;
  ::caffe::HDF5DataParameter* mutable_hdf5_data_param();
  ::caffe::HDF5DataParameter* release_hdf5_data_param();
  void set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
  bool has_hdf5_output_param() const;
  void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 14;
  const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);

  // optional .caffe.HingeLossParameter hinge_loss_param = 29;
  bool has_hinge_loss_param() const;
  void clear_hinge_loss_param();
  static const int kHingeLossParamFieldNumber = 29;
  const ::caffe::HingeLossParameter& hinge_loss_param() const;
  ::caffe::HingeLossParameter* mutable_hinge_loss_param();
  ::caffe::HingeLossParameter* release_hinge_loss_param();
  void set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param);

  // optional .caffe.ImageDataParameter image_data_param = 15;
  bool has_image_data_param() const;
  void clear_image_data_param();
  static const int kImageDataParamFieldNumber = 15;
  const ::caffe::ImageDataParameter& image_data_param() const;
  ::caffe::ImageDataParameter* mutable_image_data_param();
  ::caffe::ImageDataParameter* release_image_data_param();
  void set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param);

  // optional .caffe.InfogainLossParameter infogain_loss_param = 16;
  bool has_infogain_loss_param() const;
  void clear_infogain_loss_param();
  static const int kInfogainLossParamFieldNumber = 16;
  const ::caffe::InfogainLossParameter& infogain_loss_param() const;
  ::caffe::InfogainLossParameter* mutable_infogain_loss_param();
  ::caffe::InfogainLossParameter* release_infogain_loss_param();
  void set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param);

  // optional .caffe.InnerProductParameter inner_product_param = 17;
  bool has_inner_product_param() const;
  void clear_inner_product_param();
  static const int kInnerProductParamFieldNumber = 17;
  const ::caffe::InnerProductParameter& inner_product_param() const;
  ::caffe::InnerProductParameter* mutable_inner_product_param();
  ::caffe::InnerProductParameter* release_inner_product_param();
  void set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param);

  // optional .caffe.LRNParameter lrn_param = 18;
  bool has_lrn_param() const;
  void clear_lrn_param();
  static const int kLrnParamFieldNumber = 18;
  const ::caffe::LRNParameter& lrn_param() const;
  ::caffe::LRNParameter* mutable_lrn_param();
  ::caffe::LRNParameter* release_lrn_param();
  void set_allocated_lrn_param(::caffe::LRNParameter* lrn_param);

  // optional .caffe.MemoryDataParameter memory_data_param = 22;
  bool has_memory_data_param() const;
  void clear_memory_data_param();
  static const int kMemoryDataParamFieldNumber = 22;
  const ::caffe::MemoryDataParameter& memory_data_param() const;
  ::caffe::MemoryDataParameter* mutable_memory_data_param();
  ::caffe::MemoryDataParameter* release_memory_data_param();
  void set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param);

  // optional .caffe.MVNParameter mvn_param = 34;
  bool has_mvn_param() const;
  void clear_mvn_param();
  static const int kMvnParamFieldNumber = 34;
  const ::caffe::MVNParameter& mvn_param() const;
  ::caffe::MVNParameter* mutable_mvn_param();
  ::caffe::MVNParameter* release_mvn_param();
  void set_allocated_mvn_param(::caffe::MVNParameter* mvn_param);

  // optional .caffe.PoolingParameter pooling_param = 19;
  bool has_pooling_param() const;
  void clear_pooling_param();
  static const int kPoolingParamFieldNumber = 19;
  const ::caffe::PoolingParameter& pooling_param() const;
  ::caffe::PoolingParameter* mutable_pooling_param();
  ::caffe::PoolingParameter* release_pooling_param();
  void set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param);

  // optional .caffe.PowerParameter power_param = 21;
  bool has_power_param() const;
  void clear_power_param();
  static const int kPowerParamFieldNumber = 21;
  const ::caffe::PowerParameter& power_param() const;
  ::caffe::PowerParameter* mutable_power_param();
  ::caffe::PowerParameter* release_power_param();
  void set_allocated_power_param(::caffe::PowerParameter* power_param);

  // optional .caffe.ReLUParameter relu_param = 30;
  bool has_relu_param() const;
  void clear_relu_param();
  static const int kReluParamFieldNumber = 30;
  const ::caffe::ReLUParameter& relu_param() const;
  ::caffe::ReLUParameter* mutable_relu_param();
  ::caffe::ReLUParameter* release_relu_param();
  void set_allocated_relu_param(::caffe::ReLUParameter* relu_param);

  // optional .caffe.SigmoidParameter sigmoid_param = 38;
  bool has_sigmoid_param() const;
  void clear_sigmoid_param();
  static const int kSigmoidParamFieldNumber = 38;
  const ::caffe::SigmoidParameter& sigmoid_param() const;
  ::caffe::SigmoidParameter* mutable_sigmoid_param();
  ::caffe::SigmoidParameter* release_sigmoid_param();
  void set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param);

  // optional .caffe.SoftmaxParameter softmax_param = 39;
  bool has_softmax_param() const;
  void clear_softmax_param();
  static const int kSoftmaxParamFieldNumber = 39;
  const ::caffe::SoftmaxParameter& softmax_param() const;
  ::caffe::SoftmaxParameter* mutable_softmax_param();
  ::caffe::SoftmaxParameter* release_softmax_param();
  void set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param);

  // optional .caffe.SliceParameter slice_param = 31;
  bool has_slice_param() const;
  void clear_slice_param();
  static const int kSliceParamFieldNumber = 31;
  const ::caffe::SliceParameter& slice_param() const;
  ::caffe::SliceParameter* mutable_slice_param();
  ::caffe::SliceParameter* release_slice_param();
  void set_allocated_slice_param(::caffe::SliceParameter* slice_param);

  // optional .caffe.TanHParameter tanh_param = 37;
  bool has_tanh_param() const;
  void clear_tanh_param();
  static const int kTanhParamFieldNumber = 37;
  const ::caffe::TanHParameter& tanh_param() const;
  ::caffe::TanHParameter* mutable_tanh_param();
  ::caffe::TanHParameter* release_tanh_param();
  void set_allocated_tanh_param(::caffe::TanHParameter* tanh_param);

  // optional .caffe.ThresholdParameter threshold_param = 25;
  bool has_threshold_param() const;
  void clear_threshold_param();
  static const int kThresholdParamFieldNumber = 25;
  const ::caffe::ThresholdParameter& threshold_param() const;
  ::caffe::ThresholdParameter* mutable_threshold_param();
  ::caffe::ThresholdParameter* release_threshold_param();
  void set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param);

  // optional .caffe.WindowDataParameter window_data_param = 20;
  bool has_window_data_param() const;
  void clear_window_data_param();
  static const int kWindowDataParamFieldNumber = 20;
  const ::caffe::WindowDataParameter& window_data_param() const;
  ::caffe::WindowDataParameter* mutable_window_data_param();
  ::caffe::WindowDataParameter* release_window_data_param();
  void set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param);

  // optional .caffe.TransformationParameter transform_param = 36;
  bool has_transform_param() const;
  void clear_transform_param();
  static const int kTransformParamFieldNumber = 36;
  const ::caffe::TransformationParameter& transform_param() const;
  ::caffe::TransformationParameter* mutable_transform_param();
  ::caffe::TransformationParameter* release_transform_param();
  void set_allocated_transform_param(::caffe::TransformationParameter* transform_param);

  // optional .caffe.LossParameter loss_param = 42;
  bool has_loss_param() const;
  void clear_loss_param();
  static const int kLossParamFieldNumber = 42;
  const ::caffe::LossParameter& loss_param() const;
  ::caffe::LossParameter* mutable_loss_param();
  ::caffe::LossParameter* release_loss_param();
  void set_allocated_loss_param(::caffe::LossParameter* loss_param);

  // optional .caffe.V0LayerParameter layer = 1;
  bool has_layer() const;
  void clear_layer();
  static const int kLayerFieldNumber = 1;
  const ::caffe::V0LayerParameter& layer() const;
  ::caffe::V0LayerParameter* mutable_layer();
  ::caffe::V0LayerParameter* release_layer();
  void set_allocated_layer(::caffe::V0LayerParameter* layer);

  // @@protoc_insertion_point(class_scope:caffe.V1LayerParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_accuracy_param();
  inline void clear_has_accuracy_param();
  inline void set_has_argmax_param();
  inline void clear_has_argmax_param();
  inline void set_has_concat_param();
  inline void clear_has_concat_param();
  inline void set_has_contrastive_loss_param();
  inline void clear_has_contrastive_loss_param();
  inline void set_has_convolution_param();
  inline void clear_has_convolution_param();
  inline void set_has_data_param();
  inline void clear_has_data_param();
  inline void set_has_dropout_param();
  inline void clear_has_dropout_param();
  inline void set_has_dummy_data_param();
  inline void clear_has_dummy_data_param();
  inline void set_has_eltwise_param();
  inline void clear_has_eltwise_param();
  inline void set_has_exp_param();
  inline void clear_has_exp_param();
  inline void set_has_hdf5_data_param();
  inline void clear_has_hdf5_data_param();
  inline void set_has_hdf5_output_param();
  inline void clear_has_hdf5_output_param();
  inline void set_has_hinge_loss_param();
  inline void clear_has_hinge_loss_param();
  inline void set_has_image_data_param();
  inline void clear_has_image_data_param();
  inline void set_has_infogain_loss_param();
  inline void clear_has_infogain_loss_param();
  inline void set_has_inner_product_param();
  inline void clear_has_inner_product_param();
  inline void set_has_lrn_param();
  inline void clear_has_lrn_param();
  inline void set_has_memory_data_param();
  inline void clear_has_memory_data_param();
  inline void set_has_mvn_param();
  inline void clear_has_mvn_param();
  inline void set_has_pooling_param();
  inline void clear_has_pooling_param();
  inline void set_has_power_param();
  inline void clear_has_power_param();
  inline void set_has_relu_param();
  inline void clear_has_relu_param();
  inline void set_has_sigmoid_param();
  inline void clear_has_sigmoid_param();
  inline void set_has_softmax_param();
  inline void clear_has_softmax_param();
  inline void set_has_slice_param();
  inline void clear_has_slice_param();
  inline void set_has_tanh_param();
  inline void clear_has_tanh_param();
  inline void set_has_threshold_param();
  inline void clear_has_threshold_param();
  inline void set_has_window_data_param();
  inline void clear_has_window_data_param();
  inline void set_has_transform_param();
  inline void clear_has_transform_param();
  inline void set_has_loss_param();
  inline void clear_has_loss_param();
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > include_;
  ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule > exclude_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::google::protobuf::RepeatedPtrField< ::std::string> param_;
  ::google::protobuf::RepeatedField<int> blob_share_mode_;
  ::google::protobuf::RepeatedField< float > blobs_lr_;
  ::google::protobuf::RepeatedField< float > weight_decay_;
  ::google::protobuf::RepeatedField< float > loss_weight_;
  ::caffe::AccuracyParameter* accuracy_param_;
  ::caffe::ArgMaxParameter* argmax_param_;
  ::caffe::ConcatParameter* concat_param_;
  ::caffe::ContrastiveLossParameter* contrastive_loss_param_;
  ::caffe::ConvolutionParameter* convolution_param_;
  ::caffe::DataParameter* data_param_;
  ::caffe::DropoutParameter* dropout_param_;
  ::caffe::DummyDataParameter* dummy_data_param_;
  ::caffe::EltwiseParameter* eltwise_param_;
  ::caffe::ExpParameter* exp_param_;
  ::caffe::HDF5DataParameter* hdf5_data_param_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::caffe::HingeLossParameter* hinge_loss_param_;
  ::caffe::ImageDataParameter* image_data_param_;
  ::caffe::InfogainLossParameter* infogain_loss_param_;
  ::caffe::InnerProductParameter* inner_product_param_;
  ::caffe::LRNParameter* lrn_param_;
  ::caffe::MemoryDataParameter* memory_data_param_;
  ::caffe::MVNParameter* mvn_param_;
  ::caffe::PoolingParameter* pooling_param_;
  ::caffe::PowerParameter* power_param_;
  ::caffe::ReLUParameter* relu_param_;
  ::caffe::SigmoidParameter* sigmoid_param_;
  ::caffe::SoftmaxParameter* softmax_param_;
  ::caffe::SliceParameter* slice_param_;
  ::caffe::TanHParameter* tanh_param_;
  ::caffe::ThresholdParameter* threshold_param_;
  ::caffe::WindowDataParameter* window_data_param_;
  ::caffe::TransformationParameter* transform_param_;
  ::caffe::LossParameter* loss_param_;
  ::caffe::V0LayerParameter* layer_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static V1LayerParameter* default_instance_;
};
// -------------------------------------------------------------------

class V0LayerParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.V0LayerParameter) */ {
 public:
  V0LayerParameter();
  virtual ~V0LayerParameter();

  V0LayerParameter(const V0LayerParameter& from);

  inline V0LayerParameter& operator=(const V0LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const V0LayerParameter& default_instance();

  void Swap(V0LayerParameter* other);

  // implements Message ----------------------------------------------

  inline V0LayerParameter* New() const { return New(NULL); }

  V0LayerParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const V0LayerParameter& from);
  void MergeFrom(const V0LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(V0LayerParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef V0LayerParameter_PoolMethod PoolMethod;
  static const PoolMethod MAX =
    V0LayerParameter_PoolMethod_MAX;
  static const PoolMethod AVE =
    V0LayerParameter_PoolMethod_AVE;
  static const PoolMethod STOCHASTIC =
    V0LayerParameter_PoolMethod_STOCHASTIC;
  static inline bool PoolMethod_IsValid(int value) {
    return V0LayerParameter_PoolMethod_IsValid(value);
  }
  static const PoolMethod PoolMethod_MIN =
    V0LayerParameter_PoolMethod_PoolMethod_MIN;
  static const PoolMethod PoolMethod_MAX =
    V0LayerParameter_PoolMethod_PoolMethod_MAX;
  static const int PoolMethod_ARRAYSIZE =
    V0LayerParameter_PoolMethod_PoolMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PoolMethod_descriptor() {
    return V0LayerParameter_PoolMethod_descriptor();
  }
  static inline const ::std::string& PoolMethod_Name(PoolMethod value) {
    return V0LayerParameter_PoolMethod_Name(value);
  }
  static inline bool PoolMethod_Parse(const ::std::string& name,
      PoolMethod* value) {
    return V0LayerParameter_PoolMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional uint32 num_output = 3;
  bool has_num_output() const;
  void clear_num_output();
  static const int kNumOutputFieldNumber = 3;
  ::google::protobuf::uint32 num_output() const;
  void set_num_output(::google::protobuf::uint32 value);

  // optional bool biasterm = 4 [default = true];
  bool has_biasterm() const;
  void clear_biasterm();
  static const int kBiastermFieldNumber = 4;
  bool biasterm() const;
  void set_biasterm(bool value);

  // optional .caffe.FillerParameter weight_filler = 5;
  bool has_weight_filler() const;
  void clear_weight_filler();
  static const int kWeightFillerFieldNumber = 5;
  const ::caffe::FillerParameter& weight_filler() const;
  ::caffe::FillerParameter* mutable_weight_filler();
  ::caffe::FillerParameter* release_weight_filler();
  void set_allocated_weight_filler(::caffe::FillerParameter* weight_filler);

  // optional .caffe.FillerParameter bias_filler = 6;
  bool has_bias_filler() const;
  void clear_bias_filler();
  static const int kBiasFillerFieldNumber = 6;
  const ::caffe::FillerParameter& bias_filler() const;
  ::caffe::FillerParameter* mutable_bias_filler();
  ::caffe::FillerParameter* release_bias_filler();
  void set_allocated_bias_filler(::caffe::FillerParameter* bias_filler);

  // optional uint32 pad = 7 [default = 0];
  bool has_pad() const;
  void clear_pad();
  static const int kPadFieldNumber = 7;
  ::google::protobuf::uint32 pad() const;
  void set_pad(::google::protobuf::uint32 value);

  // optional uint32 kernelsize = 8;
  bool has_kernelsize() const;
  void clear_kernelsize();
  static const int kKernelsizeFieldNumber = 8;
  ::google::protobuf::uint32 kernelsize() const;
  void set_kernelsize(::google::protobuf::uint32 value);

  // optional uint32 group = 9 [default = 1];
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 9;
  ::google::protobuf::uint32 group() const;
  void set_group(::google::protobuf::uint32 value);

  // optional uint32 stride = 10 [default = 1];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 10;
  ::google::protobuf::uint32 stride() const;
  void set_stride(::google::protobuf::uint32 value);

  // optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
  bool has_pool() const;
  void clear_pool();
  static const int kPoolFieldNumber = 11;
  ::caffe::V0LayerParameter_PoolMethod pool() const;
  void set_pool(::caffe::V0LayerParameter_PoolMethod value);

  // optional float dropout_ratio = 12 [default = 0.5];
  bool has_dropout_ratio() const;
  void clear_dropout_ratio();
  static const int kDropoutRatioFieldNumber = 12;
  float dropout_ratio() const;
  void set_dropout_ratio(float value);

  // optional uint32 local_size = 13 [default = 5];
  bool has_local_size() const;
  void clear_local_size();
  static const int kLocalSizeFieldNumber = 13;
  ::google::protobuf::uint32 local_size() const;
  void set_local_size(::google::protobuf::uint32 value);

  // optional float alpha = 14 [default = 1];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 14;
  float alpha() const;
  void set_alpha(float value);

  // optional float beta = 15 [default = 0.75];
  bool has_beta() const;
  void clear_beta();
  static const int kBetaFieldNumber = 15;
  float beta() const;
  void set_beta(float value);

  // optional float k = 22 [default = 1];
  bool has_k() const;
  void clear_k();
  static const int kKFieldNumber = 22;
  float k() const;
  void set_k(float value);

  // optional string source = 16;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 16;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // optional float scale = 17 [default = 1];
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 17;
  float scale() const;
  void set_scale(float value);

  // optional string meanfile = 18;
  bool has_meanfile() const;
  void clear_meanfile();
  static const int kMeanfileFieldNumber = 18;
  const ::std::string& meanfile() const;
  void set_meanfile(const ::std::string& value);
  void set_meanfile(const char* value);
  void set_meanfile(const char* value, size_t size);
  ::std::string* mutable_meanfile();
  ::std::string* release_meanfile();
  void set_allocated_meanfile(::std::string* meanfile);

  // optional uint32 batchsize = 19;
  bool has_batchsize() const;
  void clear_batchsize();
  static const int kBatchsizeFieldNumber = 19;
  ::google::protobuf::uint32 batchsize() const;
  void set_batchsize(::google::protobuf::uint32 value);

  // optional uint32 cropsize = 20 [default = 0];
  bool has_cropsize() const;
  void clear_cropsize();
  static const int kCropsizeFieldNumber = 20;
  ::google::protobuf::uint32 cropsize() const;
  void set_cropsize(::google::protobuf::uint32 value);

  // optional bool mirror = 21 [default = false];
  bool has_mirror() const;
  void clear_mirror();
  static const int kMirrorFieldNumber = 21;
  bool mirror() const;
  void set_mirror(bool value);

  // repeated .caffe.BlobProto blobs = 50;
  int blobs_size() const;
  void clear_blobs();
  static const int kBlobsFieldNumber = 50;
  const ::caffe::BlobProto& blobs(int index) const;
  ::caffe::BlobProto* mutable_blobs(int index);
  ::caffe::BlobProto* add_blobs();
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
      mutable_blobs();
  const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
      blobs() const;

  // repeated float blobs_lr = 51;
  int blobs_lr_size() const;
  void clear_blobs_lr();
  static const int kBlobsLrFieldNumber = 51;
  float blobs_lr(int index) const;
  void set_blobs_lr(int index, float value);
  void add_blobs_lr(float value);
  const ::google::protobuf::RepeatedField< float >&
      blobs_lr() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_blobs_lr();

  // repeated float weight_decay = 52;
  int weight_decay_size() const;
  void clear_weight_decay();
  static const int kWeightDecayFieldNumber = 52;
  float weight_decay(int index) const;
  void set_weight_decay(int index, float value);
  void add_weight_decay(float value);
  const ::google::protobuf::RepeatedField< float >&
      weight_decay() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_weight_decay();

  // optional uint32 rand_skip = 53 [default = 0];
  bool has_rand_skip() const;
  void clear_rand_skip();
  static const int kRandSkipFieldNumber = 53;
  ::google::protobuf::uint32 rand_skip() const;
  void set_rand_skip(::google::protobuf::uint32 value);

  // optional float det_fg_threshold = 54 [default = 0.5];
  bool has_det_fg_threshold() const;
  void clear_det_fg_threshold();
  static const int kDetFgThresholdFieldNumber = 54;
  float det_fg_threshold() const;
  void set_det_fg_threshold(float value);

  // optional float det_bg_threshold = 55 [default = 0.5];
  bool has_det_bg_threshold() const;
  void clear_det_bg_threshold();
  static const int kDetBgThresholdFieldNumber = 55;
  float det_bg_threshold() const;
  void set_det_bg_threshold(float value);

  // optional float det_fg_fraction = 56 [default = 0.25];
  bool has_det_fg_fraction() const;
  void clear_det_fg_fraction();
  static const int kDetFgFractionFieldNumber = 56;
  float det_fg_fraction() const;
  void set_det_fg_fraction(float value);

  // optional uint32 det_context_pad = 58 [default = 0];
  bool has_det_context_pad() const;
  void clear_det_context_pad();
  static const int kDetContextPadFieldNumber = 58;
  ::google::protobuf::uint32 det_context_pad() const;
  void set_det_context_pad(::google::protobuf::uint32 value);

  // optional string det_crop_mode = 59 [default = "warp"];
  bool has_det_crop_mode() const;
  void clear_det_crop_mode();
  static const int kDetCropModeFieldNumber = 59;
  const ::std::string& det_crop_mode() const;
  void set_det_crop_mode(const ::std::string& value);
  void set_det_crop_mode(const char* value);
  void set_det_crop_mode(const char* value, size_t size);
  ::std::string* mutable_det_crop_mode();
  ::std::string* release_det_crop_mode();
  void set_allocated_det_crop_mode(::std::string* det_crop_mode);

  // optional int32 new_num = 60 [default = 0];
  bool has_new_num() const;
  void clear_new_num();
  static const int kNewNumFieldNumber = 60;
  ::google::protobuf::int32 new_num() const;
  void set_new_num(::google::protobuf::int32 value);

  // optional int32 new_channels = 61 [default = 0];
  bool has_new_channels() const;
  void clear_new_channels();
  static const int kNewChannelsFieldNumber = 61;
  ::google::protobuf::int32 new_channels() const;
  void set_new_channels(::google::protobuf::int32 value);

  // optional int32 new_height = 62 [default = 0];
  bool has_new_height() const;
  void clear_new_height();
  static const int kNewHeightFieldNumber = 62;
  ::google::protobuf::int32 new_height() const;
  void set_new_height(::google::protobuf::int32 value);

  // optional int32 new_width = 63 [default = 0];
  bool has_new_width() const;
  void clear_new_width();
  static const int kNewWidthFieldNumber = 63;
  ::google::protobuf::int32 new_width() const;
  void set_new_width(::google::protobuf::int32 value);

  // optional bool shuffle_images = 64 [default = false];
  bool has_shuffle_images() const;
  void clear_shuffle_images();
  static const int kShuffleImagesFieldNumber = 64;
  bool shuffle_images() const;
  void set_shuffle_images(bool value);

  // optional uint32 concat_dim = 65 [default = 1];
  bool has_concat_dim() const;
  void clear_concat_dim();
  static const int kConcatDimFieldNumber = 65;
  ::google::protobuf::uint32 concat_dim() const;
  void set_concat_dim(::google::protobuf::uint32 value);

  // optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
  bool has_hdf5_output_param() const;
  void clear_hdf5_output_param();
  static const int kHdf5OutputParamFieldNumber = 1001;
  const ::caffe::HDF5OutputParameter& hdf5_output_param() const;
  ::caffe::HDF5OutputParameter* mutable_hdf5_output_param();
  ::caffe::HDF5OutputParameter* release_hdf5_output_param();
  void set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param);

  // @@protoc_insertion_point(class_scope:caffe.V0LayerParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num_output();
  inline void clear_has_num_output();
  inline void set_has_biasterm();
  inline void clear_has_biasterm();
  inline void set_has_weight_filler();
  inline void clear_has_weight_filler();
  inline void set_has_bias_filler();
  inline void clear_has_bias_filler();
  inline void set_has_pad();
  inline void clear_has_pad();
  inline void set_has_kernelsize();
  inline void clear_has_kernelsize();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_pool();
  inline void clear_has_pool();
  inline void set_has_dropout_ratio();
  inline void clear_has_dropout_ratio();
  inline void set_has_local_size();
  inline void clear_has_local_size();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_beta();
  inline void clear_has_beta();
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_meanfile();
  inline void clear_has_meanfile();
  inline void set_has_batchsize();
  inline void clear_has_batchsize();
  inline void set_has_cropsize();
  inline void clear_has_cropsize();
  inline void set_has_mirror();
  inline void clear_has_mirror();
  inline void set_has_rand_skip();
  inline void clear_has_rand_skip();
  inline void set_has_det_fg_threshold();
  inline void clear_has_det_fg_threshold();
  inline void set_has_det_bg_threshold();
  inline void clear_has_det_bg_threshold();
  inline void set_has_det_fg_fraction();
  inline void clear_has_det_fg_fraction();
  inline void set_has_det_context_pad();
  inline void clear_has_det_context_pad();
  inline void set_has_det_crop_mode();
  inline void clear_has_det_crop_mode();
  inline void set_has_new_num();
  inline void clear_has_new_num();
  inline void set_has_new_channels();
  inline void clear_has_new_channels();
  inline void set_has_new_height();
  inline void clear_has_new_height();
  inline void set_has_new_width();
  inline void clear_has_new_width();
  inline void set_has_shuffle_images();
  inline void clear_has_shuffle_images();
  inline void set_has_concat_dim();
  inline void clear_has_concat_dim();
  inline void set_has_hdf5_output_param();
  inline void clear_has_hdf5_output_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::caffe::FillerParameter* weight_filler_;
  ::google::protobuf::uint32 num_output_;
  ::google::protobuf::uint32 pad_;
  ::caffe::FillerParameter* bias_filler_;
  ::google::protobuf::uint32 kernelsize_;
  ::google::protobuf::uint32 group_;
  ::google::protobuf::uint32 stride_;
  int pool_;
  float dropout_ratio_;
  ::google::protobuf::uint32 local_size_;
  float alpha_;
  float beta_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  float k_;
  float scale_;
  ::google::protobuf::internal::ArenaStringPtr meanfile_;
  ::google::protobuf::uint32 batchsize_;
  bool biasterm_;
  bool mirror_;
  bool shuffle_images_;
  ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto > blobs_;
  ::google::protobuf::uint32 cropsize_;
  ::google::protobuf::uint32 rand_skip_;
  ::google::protobuf::RepeatedField< float > blobs_lr_;
  ::google::protobuf::RepeatedField< float > weight_decay_;
  float det_fg_threshold_;
  float det_bg_threshold_;
  float det_fg_fraction_;
  ::google::protobuf::uint32 det_context_pad_;
  static ::std::string* _default_det_crop_mode_;
  ::google::protobuf::internal::ArenaStringPtr det_crop_mode_;
  ::google::protobuf::int32 new_num_;
  ::google::protobuf::int32 new_channels_;
  ::google::protobuf::int32 new_height_;
  ::google::protobuf::int32 new_width_;
  ::caffe::HDF5OutputParameter* hdf5_output_param_;
  ::google::protobuf::uint32 concat_dim_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static V0LayerParameter* default_instance_;
};
// -------------------------------------------------------------------

class PReLUParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe.PReLUParameter) */ {
 public:
  PReLUParameter();
  virtual ~PReLUParameter();

  PReLUParameter(const PReLUParameter& from);

  inline PReLUParameter& operator=(const PReLUParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PReLUParameter& default_instance();

  void Swap(PReLUParameter* other);

  // implements Message ----------------------------------------------

  inline PReLUParameter* New() const { return New(NULL); }

  PReLUParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PReLUParameter& from);
  void MergeFrom(const PReLUParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PReLUParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .caffe.FillerParameter filler = 1;
  bool has_filler() const;
  void clear_filler();
  static const int kFillerFieldNumber = 1;
  const ::caffe::FillerParameter& filler() const;
  ::caffe::FillerParameter* mutable_filler();
  ::caffe::FillerParameter* release_filler();
  void set_allocated_filler(::caffe::FillerParameter* filler);

  // optional bool channel_shared = 2 [default = false];
  bool has_channel_shared() const;
  void clear_channel_shared();
  static const int kChannelSharedFieldNumber = 2;
  bool channel_shared() const;
  void set_channel_shared(bool value);

  // @@protoc_insertion_point(class_scope:caffe.PReLUParameter)
 private:
  inline void set_has_filler();
  inline void clear_has_filler();
  inline void set_has_channel_shared();
  inline void clear_has_channel_shared();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::caffe::FillerParameter* filler_;
  bool channel_shared_;
  friend void  protobuf_AddDesc_caffe_2eproto();
  friend void protobuf_AssignDesc_caffe_2eproto();
  friend void protobuf_ShutdownFile_caffe_2eproto();

  void InitAsDefaultInstance();
  static PReLUParameter* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BlobShape

// repeated int64 dim = 1 [packed = true];
inline int BlobShape::dim_size() const {
  return dim_.size();
}
inline void BlobShape::clear_dim() {
  dim_.Clear();
}
inline ::google::protobuf::int64 BlobShape::dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobShape.dim)
  return dim_.Get(index);
}
inline void BlobShape::set_dim(int index, ::google::protobuf::int64 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobShape.dim)
}
inline void BlobShape::add_dim(::google::protobuf::int64 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobShape.dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BlobShape::dim() const {
  // @@protoc_insertion_point(field_list:caffe.BlobShape.dim)
  return dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BlobShape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobShape.dim)
  return &dim_;
}

// -------------------------------------------------------------------

// BlobProto

// optional .caffe.BlobShape shape = 7;
inline bool BlobProto::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobProto::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlobProto::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlobProto::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
inline const ::caffe::BlobShape& BlobProto::shape() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::caffe::BlobShape* BlobProto::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BlobProto.shape)
  return shape_;
}
inline ::caffe::BlobShape* BlobProto::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.BlobProto.shape)
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void BlobProto::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BlobProto.shape)
}

// repeated float data = 5 [packed = true];
inline int BlobProto::data_size() const {
  return data_.size();
}
inline void BlobProto::clear_data() {
  data_.Clear();
}
inline float BlobProto::data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.data)
  return data_.Get(index);
}
inline void BlobProto::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.data)
}
inline void BlobProto::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.data)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.data)
  return &data_;
}

// repeated float diff = 6 [packed = true];
inline int BlobProto::diff_size() const {
  return diff_.size();
}
inline void BlobProto::clear_diff() {
  diff_.Clear();
}
inline float BlobProto::diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.diff)
  return diff_.Get(index);
}
inline void BlobProto::set_diff(int index, float value) {
  diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.diff)
}
inline void BlobProto::add_diff(float value) {
  diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.diff)
}
inline const ::google::protobuf::RepeatedField< float >&
BlobProto::diff() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.diff)
  return diff_;
}
inline ::google::protobuf::RepeatedField< float >*
BlobProto::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.diff)
  return &diff_;
}

// repeated double double_data = 8 [packed = true];
inline int BlobProto::double_data_size() const {
  return double_data_.size();
}
inline void BlobProto::clear_double_data() {
  double_data_.Clear();
}
inline double BlobProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.double_data)
  return double_data_.Get(index);
}
inline void BlobProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.double_data)
}
inline void BlobProto::add_double_data(double value) {
  double_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.double_data)
}
inline const ::google::protobuf::RepeatedField< double >&
BlobProto::double_data() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.double_data)
  return double_data_;
}
inline ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.double_data)
  return &double_data_;
}

// repeated double double_diff = 9 [packed = true];
inline int BlobProto::double_diff_size() const {
  return double_diff_.size();
}
inline void BlobProto::clear_double_diff() {
  double_diff_.Clear();
}
inline double BlobProto::double_diff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.double_diff)
  return double_diff_.Get(index);
}
inline void BlobProto::set_double_diff(int index, double value) {
  double_diff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BlobProto.double_diff)
}
inline void BlobProto::add_double_diff(double value) {
  double_diff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BlobProto.double_diff)
}
inline const ::google::protobuf::RepeatedField< double >&
BlobProto::double_diff() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProto.double_diff)
  return double_diff_;
}
inline ::google::protobuf::RepeatedField< double >*
BlobProto::mutable_double_diff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProto.double_diff)
  return &double_diff_;
}

// optional int32 num = 1 [default = 0];
inline bool BlobProto::has_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlobProto::set_has_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlobProto::clear_has_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlobProto::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 BlobProto::num() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.num)
  return num_;
}
inline void BlobProto::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.num)
}

// optional int32 channels = 2 [default = 0];
inline bool BlobProto::has_channels() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlobProto::set_has_channels() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlobProto::clear_has_channels() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlobProto::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 BlobProto::channels() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.channels)
  return channels_;
}
inline void BlobProto::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.channels)
}

// optional int32 height = 3 [default = 0];
inline bool BlobProto::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlobProto::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlobProto::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlobProto::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 BlobProto::height() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.height)
  return height_;
}
inline void BlobProto::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.height)
}

// optional int32 width = 4 [default = 0];
inline bool BlobProto::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlobProto::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlobProto::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlobProto::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 BlobProto::width() const {
  // @@protoc_insertion_point(field_get:caffe.BlobProto.width)
  return width_;
}
inline void BlobProto::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.BlobProto.width)
}

// -------------------------------------------------------------------

// BlobProtoVector

// repeated .caffe.BlobProto blobs = 1;
inline int BlobProtoVector::blobs_size() const {
  return blobs_.size();
}
inline void BlobProtoVector::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& BlobProtoVector::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BlobProtoVector.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* BlobProtoVector::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.BlobProtoVector.blobs)
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* BlobProtoVector::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.BlobProtoVector.blobs)
  return blobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
BlobProtoVector::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BlobProtoVector.blobs)
  return &blobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
BlobProtoVector::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.BlobProtoVector.blobs)
  return blobs_;
}

// -------------------------------------------------------------------

// Datum

// optional int32 channels = 1;
inline bool Datum::has_channels() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Datum::set_has_channels() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Datum::clear_has_channels() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Datum::clear_channels() {
  channels_ = 0;
  clear_has_channels();
}
inline ::google::protobuf::int32 Datum::channels() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.channels)
  return channels_;
}
inline void Datum::set_channels(::google::protobuf::int32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.channels)
}

// optional int32 height = 2;
inline bool Datum::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Datum::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Datum::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Datum::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 Datum::height() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.height)
  return height_;
}
inline void Datum::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.height)
}

// optional int32 width = 3;
inline bool Datum::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Datum::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Datum::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Datum::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 Datum::width() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.width)
  return width_;
}
inline void Datum::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.width)
}

// optional bytes data = 4;
inline bool Datum::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Datum::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Datum::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Datum::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Datum::data() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Datum::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.Datum.data)
}
inline void Datum::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.Datum.data)
}
inline void Datum::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.Datum.data)
}
inline ::std::string* Datum::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:caffe.Datum.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Datum::release_data() {
  // @@protoc_insertion_point(field_release:caffe.Datum.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Datum::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:caffe.Datum.data)
}

// optional int32 label = 5;
inline bool Datum::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Datum::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Datum::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Datum::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 Datum::label() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.label)
  return label_;
}
inline void Datum::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.label)
}

// repeated float float_data = 6;
inline int Datum::float_data_size() const {
  return float_data_.size();
}
inline void Datum::clear_float_data() {
  float_data_.Clear();
}
inline float Datum::float_data(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Datum.float_data)
  return float_data_.Get(index);
}
inline void Datum::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.Datum.float_data)
}
inline void Datum::add_float_data(float value) {
  float_data_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.Datum.float_data)
}
inline const ::google::protobuf::RepeatedField< float >&
Datum::float_data() const {
  // @@protoc_insertion_point(field_list:caffe.Datum.float_data)
  return float_data_;
}
inline ::google::protobuf::RepeatedField< float >*
Datum::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Datum.float_data)
  return &float_data_;
}

// optional bool encoded = 7 [default = false];
inline bool Datum::has_encoded() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Datum::set_has_encoded() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Datum::clear_has_encoded() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Datum::clear_encoded() {
  encoded_ = false;
  clear_has_encoded();
}
inline bool Datum::encoded() const {
  // @@protoc_insertion_point(field_get:caffe.Datum.encoded)
  return encoded_;
}
inline void Datum::set_encoded(bool value) {
  set_has_encoded();
  encoded_ = value;
  // @@protoc_insertion_point(field_set:caffe.Datum.encoded)
}

// -------------------------------------------------------------------

// LabelMapItem

// optional string name = 1;
inline bool LabelMapItem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabelMapItem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabelMapItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabelMapItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& LabelMapItem::name() const {
  // @@protoc_insertion_point(field_get:caffe.LabelMapItem.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LabelMapItem::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LabelMapItem.name)
}
inline void LabelMapItem::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LabelMapItem.name)
}
inline void LabelMapItem::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LabelMapItem.name)
}
inline ::std::string* LabelMapItem::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.LabelMapItem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LabelMapItem::release_name() {
  // @@protoc_insertion_point(field_release:caffe.LabelMapItem.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LabelMapItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.LabelMapItem.name)
}

// optional int32 label = 2;
inline bool LabelMapItem::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LabelMapItem::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LabelMapItem::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LabelMapItem::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 LabelMapItem::label() const {
  // @@protoc_insertion_point(field_get:caffe.LabelMapItem.label)
  return label_;
}
inline void LabelMapItem::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabelMapItem.label)
}

// optional string display_name = 3;
inline bool LabelMapItem::has_display_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LabelMapItem::set_has_display_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LabelMapItem::clear_has_display_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LabelMapItem::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_display_name();
}
inline const ::std::string& LabelMapItem::display_name() const {
  // @@protoc_insertion_point(field_get:caffe.LabelMapItem.display_name)
  return display_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LabelMapItem::set_display_name(const ::std::string& value) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LabelMapItem.display_name)
}
inline void LabelMapItem::set_display_name(const char* value) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LabelMapItem.display_name)
}
inline void LabelMapItem::set_display_name(const char* value, size_t size) {
  set_has_display_name();
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LabelMapItem.display_name)
}
inline ::std::string* LabelMapItem::mutable_display_name() {
  set_has_display_name();
  // @@protoc_insertion_point(field_mutable:caffe.LabelMapItem.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LabelMapItem::release_display_name() {
  // @@protoc_insertion_point(field_release:caffe.LabelMapItem.display_name)
  clear_has_display_name();
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LabelMapItem::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    set_has_display_name();
  } else {
    clear_has_display_name();
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:caffe.LabelMapItem.display_name)
}

// -------------------------------------------------------------------

// LabelMap

// repeated .caffe.LabelMapItem item = 1;
inline int LabelMap::item_size() const {
  return item_.size();
}
inline void LabelMap::clear_item() {
  item_.Clear();
}
inline const ::caffe::LabelMapItem& LabelMap::item(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LabelMap.item)
  return item_.Get(index);
}
inline ::caffe::LabelMapItem* LabelMap::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LabelMap.item)
  return item_.Mutable(index);
}
inline ::caffe::LabelMapItem* LabelMap::add_item() {
  // @@protoc_insertion_point(field_add:caffe.LabelMap.item)
  return item_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::LabelMapItem >*
LabelMap::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LabelMap.item)
  return &item_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::LabelMapItem >&
LabelMap::item() const {
  // @@protoc_insertion_point(field_list:caffe.LabelMap.item)
  return item_;
}

// -------------------------------------------------------------------

// Sampler

// optional float min_scale = 1 [default = 1];
inline bool Sampler::has_min_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sampler::set_has_min_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sampler::clear_has_min_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sampler::clear_min_scale() {
  min_scale_ = 1;
  clear_has_min_scale();
}
inline float Sampler::min_scale() const {
  // @@protoc_insertion_point(field_get:caffe.Sampler.min_scale)
  return min_scale_;
}
inline void Sampler::set_min_scale(float value) {
  set_has_min_scale();
  min_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.Sampler.min_scale)
}

// optional float max_scale = 2 [default = 1];
inline bool Sampler::has_max_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sampler::set_has_max_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sampler::clear_has_max_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sampler::clear_max_scale() {
  max_scale_ = 1;
  clear_has_max_scale();
}
inline float Sampler::max_scale() const {
  // @@protoc_insertion_point(field_get:caffe.Sampler.max_scale)
  return max_scale_;
}
inline void Sampler::set_max_scale(float value) {
  set_has_max_scale();
  max_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.Sampler.max_scale)
}

// optional float min_aspect_ratio = 3 [default = 1];
inline bool Sampler::has_min_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Sampler::set_has_min_aspect_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Sampler::clear_has_min_aspect_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Sampler::clear_min_aspect_ratio() {
  min_aspect_ratio_ = 1;
  clear_has_min_aspect_ratio();
}
inline float Sampler::min_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.Sampler.min_aspect_ratio)
  return min_aspect_ratio_;
}
inline void Sampler::set_min_aspect_ratio(float value) {
  set_has_min_aspect_ratio();
  min_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.Sampler.min_aspect_ratio)
}

// optional float max_aspect_ratio = 4 [default = 1];
inline bool Sampler::has_max_aspect_ratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Sampler::set_has_max_aspect_ratio() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Sampler::clear_has_max_aspect_ratio() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Sampler::clear_max_aspect_ratio() {
  max_aspect_ratio_ = 1;
  clear_has_max_aspect_ratio();
}
inline float Sampler::max_aspect_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.Sampler.max_aspect_ratio)
  return max_aspect_ratio_;
}
inline void Sampler::set_max_aspect_ratio(float value) {
  set_has_max_aspect_ratio();
  max_aspect_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.Sampler.max_aspect_ratio)
}

// -------------------------------------------------------------------

// SampleConstraint

// optional float min_jaccard_overlap = 1;
inline bool SampleConstraint::has_min_jaccard_overlap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SampleConstraint::set_has_min_jaccard_overlap() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SampleConstraint::clear_has_min_jaccard_overlap() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SampleConstraint::clear_min_jaccard_overlap() {
  min_jaccard_overlap_ = 0;
  clear_has_min_jaccard_overlap();
}
inline float SampleConstraint::min_jaccard_overlap() const {
  // @@protoc_insertion_point(field_get:caffe.SampleConstraint.min_jaccard_overlap)
  return min_jaccard_overlap_;
}
inline void SampleConstraint::set_min_jaccard_overlap(float value) {
  set_has_min_jaccard_overlap();
  min_jaccard_overlap_ = value;
  // @@protoc_insertion_point(field_set:caffe.SampleConstraint.min_jaccard_overlap)
}

// optional float max_jaccard_overlap = 2;
inline bool SampleConstraint::has_max_jaccard_overlap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SampleConstraint::set_has_max_jaccard_overlap() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SampleConstraint::clear_has_max_jaccard_overlap() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SampleConstraint::clear_max_jaccard_overlap() {
  max_jaccard_overlap_ = 0;
  clear_has_max_jaccard_overlap();
}
inline float SampleConstraint::max_jaccard_overlap() const {
  // @@protoc_insertion_point(field_get:caffe.SampleConstraint.max_jaccard_overlap)
  return max_jaccard_overlap_;
}
inline void SampleConstraint::set_max_jaccard_overlap(float value) {
  set_has_max_jaccard_overlap();
  max_jaccard_overlap_ = value;
  // @@protoc_insertion_point(field_set:caffe.SampleConstraint.max_jaccard_overlap)
}

// optional float min_sample_coverage = 3;
inline bool SampleConstraint::has_min_sample_coverage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SampleConstraint::set_has_min_sample_coverage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SampleConstraint::clear_has_min_sample_coverage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SampleConstraint::clear_min_sample_coverage() {
  min_sample_coverage_ = 0;
  clear_has_min_sample_coverage();
}
inline float SampleConstraint::min_sample_coverage() const {
  // @@protoc_insertion_point(field_get:caffe.SampleConstraint.min_sample_coverage)
  return min_sample_coverage_;
}
inline void SampleConstraint::set_min_sample_coverage(float value) {
  set_has_min_sample_coverage();
  min_sample_coverage_ = value;
  // @@protoc_insertion_point(field_set:caffe.SampleConstraint.min_sample_coverage)
}

// optional float max_sample_coverage = 4;
inline bool SampleConstraint::has_max_sample_coverage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SampleConstraint::set_has_max_sample_coverage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SampleConstraint::clear_has_max_sample_coverage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SampleConstraint::clear_max_sample_coverage() {
  max_sample_coverage_ = 0;
  clear_has_max_sample_coverage();
}
inline float SampleConstraint::max_sample_coverage() const {
  // @@protoc_insertion_point(field_get:caffe.SampleConstraint.max_sample_coverage)
  return max_sample_coverage_;
}
inline void SampleConstraint::set_max_sample_coverage(float value) {
  set_has_max_sample_coverage();
  max_sample_coverage_ = value;
  // @@protoc_insertion_point(field_set:caffe.SampleConstraint.max_sample_coverage)
}

// optional float min_object_coverage = 5;
inline bool SampleConstraint::has_min_object_coverage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SampleConstraint::set_has_min_object_coverage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SampleConstraint::clear_has_min_object_coverage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SampleConstraint::clear_min_object_coverage() {
  min_object_coverage_ = 0;
  clear_has_min_object_coverage();
}
inline float SampleConstraint::min_object_coverage() const {
  // @@protoc_insertion_point(field_get:caffe.SampleConstraint.min_object_coverage)
  return min_object_coverage_;
}
inline void SampleConstraint::set_min_object_coverage(float value) {
  set_has_min_object_coverage();
  min_object_coverage_ = value;
  // @@protoc_insertion_point(field_set:caffe.SampleConstraint.min_object_coverage)
}

// optional float max_object_coverage = 6;
inline bool SampleConstraint::has_max_object_coverage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SampleConstraint::set_has_max_object_coverage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SampleConstraint::clear_has_max_object_coverage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SampleConstraint::clear_max_object_coverage() {
  max_object_coverage_ = 0;
  clear_has_max_object_coverage();
}
inline float SampleConstraint::max_object_coverage() const {
  // @@protoc_insertion_point(field_get:caffe.SampleConstraint.max_object_coverage)
  return max_object_coverage_;
}
inline void SampleConstraint::set_max_object_coverage(float value) {
  set_has_max_object_coverage();
  max_object_coverage_ = value;
  // @@protoc_insertion_point(field_set:caffe.SampleConstraint.max_object_coverage)
}

// -------------------------------------------------------------------

// BatchSampler

// optional bool use_original_image = 1 [default = true];
inline bool BatchSampler::has_use_original_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchSampler::set_has_use_original_image() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchSampler::clear_has_use_original_image() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchSampler::clear_use_original_image() {
  use_original_image_ = true;
  clear_has_use_original_image();
}
inline bool BatchSampler::use_original_image() const {
  // @@protoc_insertion_point(field_get:caffe.BatchSampler.use_original_image)
  return use_original_image_;
}
inline void BatchSampler::set_use_original_image(bool value) {
  set_has_use_original_image();
  use_original_image_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchSampler.use_original_image)
}

// optional .caffe.Sampler sampler = 2;
inline bool BatchSampler::has_sampler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchSampler::set_has_sampler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchSampler::clear_has_sampler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchSampler::clear_sampler() {
  if (sampler_ != NULL) sampler_->::caffe::Sampler::Clear();
  clear_has_sampler();
}
inline const ::caffe::Sampler& BatchSampler::sampler() const {
  // @@protoc_insertion_point(field_get:caffe.BatchSampler.sampler)
  return sampler_ != NULL ? *sampler_ : *default_instance_->sampler_;
}
inline ::caffe::Sampler* BatchSampler::mutable_sampler() {
  set_has_sampler();
  if (sampler_ == NULL) {
    sampler_ = new ::caffe::Sampler;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BatchSampler.sampler)
  return sampler_;
}
inline ::caffe::Sampler* BatchSampler::release_sampler() {
  // @@protoc_insertion_point(field_release:caffe.BatchSampler.sampler)
  clear_has_sampler();
  ::caffe::Sampler* temp = sampler_;
  sampler_ = NULL;
  return temp;
}
inline void BatchSampler::set_allocated_sampler(::caffe::Sampler* sampler) {
  delete sampler_;
  sampler_ = sampler;
  if (sampler) {
    set_has_sampler();
  } else {
    clear_has_sampler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BatchSampler.sampler)
}

// optional .caffe.SampleConstraint sample_constraint = 3;
inline bool BatchSampler::has_sample_constraint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatchSampler::set_has_sample_constraint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BatchSampler::clear_has_sample_constraint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BatchSampler::clear_sample_constraint() {
  if (sample_constraint_ != NULL) sample_constraint_->::caffe::SampleConstraint::Clear();
  clear_has_sample_constraint();
}
inline const ::caffe::SampleConstraint& BatchSampler::sample_constraint() const {
  // @@protoc_insertion_point(field_get:caffe.BatchSampler.sample_constraint)
  return sample_constraint_ != NULL ? *sample_constraint_ : *default_instance_->sample_constraint_;
}
inline ::caffe::SampleConstraint* BatchSampler::mutable_sample_constraint() {
  set_has_sample_constraint();
  if (sample_constraint_ == NULL) {
    sample_constraint_ = new ::caffe::SampleConstraint;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BatchSampler.sample_constraint)
  return sample_constraint_;
}
inline ::caffe::SampleConstraint* BatchSampler::release_sample_constraint() {
  // @@protoc_insertion_point(field_release:caffe.BatchSampler.sample_constraint)
  clear_has_sample_constraint();
  ::caffe::SampleConstraint* temp = sample_constraint_;
  sample_constraint_ = NULL;
  return temp;
}
inline void BatchSampler::set_allocated_sample_constraint(::caffe::SampleConstraint* sample_constraint) {
  delete sample_constraint_;
  sample_constraint_ = sample_constraint;
  if (sample_constraint) {
    set_has_sample_constraint();
  } else {
    clear_has_sample_constraint();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BatchSampler.sample_constraint)
}

// optional uint32 max_sample = 4;
inline bool BatchSampler::has_max_sample() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BatchSampler::set_has_max_sample() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BatchSampler::clear_has_max_sample() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BatchSampler::clear_max_sample() {
  max_sample_ = 0u;
  clear_has_max_sample();
}
inline ::google::protobuf::uint32 BatchSampler::max_sample() const {
  // @@protoc_insertion_point(field_get:caffe.BatchSampler.max_sample)
  return max_sample_;
}
inline void BatchSampler::set_max_sample(::google::protobuf::uint32 value) {
  set_has_max_sample();
  max_sample_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchSampler.max_sample)
}

// optional uint32 max_trials = 5 [default = 100];
inline bool BatchSampler::has_max_trials() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BatchSampler::set_has_max_trials() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BatchSampler::clear_has_max_trials() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BatchSampler::clear_max_trials() {
  max_trials_ = 100u;
  clear_has_max_trials();
}
inline ::google::protobuf::uint32 BatchSampler::max_trials() const {
  // @@protoc_insertion_point(field_get:caffe.BatchSampler.max_trials)
  return max_trials_;
}
inline void BatchSampler::set_max_trials(::google::protobuf::uint32 value) {
  set_has_max_trials();
  max_trials_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchSampler.max_trials)
}

// -------------------------------------------------------------------

// EmitConstraint

// optional .caffe.EmitConstraint.EmitType emit_type = 1 [default = CENTER];
inline bool EmitConstraint::has_emit_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmitConstraint::set_has_emit_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmitConstraint::clear_has_emit_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmitConstraint::clear_emit_type() {
  emit_type_ = 0;
  clear_has_emit_type();
}
inline ::caffe::EmitConstraint_EmitType EmitConstraint::emit_type() const {
  // @@protoc_insertion_point(field_get:caffe.EmitConstraint.emit_type)
  return static_cast< ::caffe::EmitConstraint_EmitType >(emit_type_);
}
inline void EmitConstraint::set_emit_type(::caffe::EmitConstraint_EmitType value) {
  assert(::caffe::EmitConstraint_EmitType_IsValid(value));
  set_has_emit_type();
  emit_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmitConstraint.emit_type)
}

// optional float emit_overlap = 2;
inline bool EmitConstraint::has_emit_overlap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmitConstraint::set_has_emit_overlap() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmitConstraint::clear_has_emit_overlap() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmitConstraint::clear_emit_overlap() {
  emit_overlap_ = 0;
  clear_has_emit_overlap();
}
inline float EmitConstraint::emit_overlap() const {
  // @@protoc_insertion_point(field_get:caffe.EmitConstraint.emit_overlap)
  return emit_overlap_;
}
inline void EmitConstraint::set_emit_overlap(float value) {
  set_has_emit_overlap();
  emit_overlap_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmitConstraint.emit_overlap)
}

// optional float emit_overlap_dir = 3;
inline bool EmitConstraint::has_emit_overlap_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmitConstraint::set_has_emit_overlap_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmitConstraint::clear_has_emit_overlap_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmitConstraint::clear_emit_overlap_dir() {
  emit_overlap_dir_ = 0;
  clear_has_emit_overlap_dir();
}
inline float EmitConstraint::emit_overlap_dir() const {
  // @@protoc_insertion_point(field_get:caffe.EmitConstraint.emit_overlap_dir)
  return emit_overlap_dir_;
}
inline void EmitConstraint::set_emit_overlap_dir(float value) {
  set_has_emit_overlap_dir();
  emit_overlap_dir_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmitConstraint.emit_overlap_dir)
}

// optional float emit_overlap_pose = 4;
inline bool EmitConstraint::has_emit_overlap_pose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EmitConstraint::set_has_emit_overlap_pose() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EmitConstraint::clear_has_emit_overlap_pose() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EmitConstraint::clear_emit_overlap_pose() {
  emit_overlap_pose_ = 0;
  clear_has_emit_overlap_pose();
}
inline float EmitConstraint::emit_overlap_pose() const {
  // @@protoc_insertion_point(field_get:caffe.EmitConstraint.emit_overlap_pose)
  return emit_overlap_pose_;
}
inline void EmitConstraint::set_emit_overlap_pose(float value) {
  set_has_emit_overlap_pose();
  emit_overlap_pose_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmitConstraint.emit_overlap_pose)
}

// -------------------------------------------------------------------

// NormalizedBBox

// optional float xmin = 1;
inline bool NormalizedBBox::has_xmin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NormalizedBBox::set_has_xmin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NormalizedBBox::clear_has_xmin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NormalizedBBox::clear_xmin() {
  xmin_ = 0;
  clear_has_xmin();
}
inline float NormalizedBBox::xmin() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.xmin)
  return xmin_;
}
inline void NormalizedBBox::set_xmin(float value) {
  set_has_xmin();
  xmin_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.xmin)
}

// optional float ymin = 2;
inline bool NormalizedBBox::has_ymin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NormalizedBBox::set_has_ymin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NormalizedBBox::clear_has_ymin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NormalizedBBox::clear_ymin() {
  ymin_ = 0;
  clear_has_ymin();
}
inline float NormalizedBBox::ymin() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.ymin)
  return ymin_;
}
inline void NormalizedBBox::set_ymin(float value) {
  set_has_ymin();
  ymin_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.ymin)
}

// optional float xmax = 3;
inline bool NormalizedBBox::has_xmax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NormalizedBBox::set_has_xmax() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NormalizedBBox::clear_has_xmax() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NormalizedBBox::clear_xmax() {
  xmax_ = 0;
  clear_has_xmax();
}
inline float NormalizedBBox::xmax() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.xmax)
  return xmax_;
}
inline void NormalizedBBox::set_xmax(float value) {
  set_has_xmax();
  xmax_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.xmax)
}

// optional float ymax = 4;
inline bool NormalizedBBox::has_ymax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NormalizedBBox::set_has_ymax() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NormalizedBBox::clear_has_ymax() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NormalizedBBox::clear_ymax() {
  ymax_ = 0;
  clear_has_ymax();
}
inline float NormalizedBBox::ymax() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.ymax)
  return ymax_;
}
inline void NormalizedBBox::set_ymax(float value) {
  set_has_ymax();
  ymax_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.ymax)
}

// optional int32 label = 5;
inline bool NormalizedBBox::has_label() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NormalizedBBox::set_has_label() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NormalizedBBox::clear_has_label() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NormalizedBBox::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 NormalizedBBox::label() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.label)
  return label_;
}
inline void NormalizedBBox::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.label)
}

// optional bool difficult = 6 [default = false];
inline bool NormalizedBBox::has_difficult() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NormalizedBBox::set_has_difficult() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NormalizedBBox::clear_has_difficult() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NormalizedBBox::clear_difficult() {
  difficult_ = false;
  clear_has_difficult();
}
inline bool NormalizedBBox::difficult() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.difficult)
  return difficult_;
}
inline void NormalizedBBox::set_difficult(bool value) {
  set_has_difficult();
  difficult_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.difficult)
}

// optional float score = 7;
inline bool NormalizedBBox::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NormalizedBBox::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NormalizedBBox::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NormalizedBBox::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline float NormalizedBBox::score() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.score)
  return score_;
}
inline void NormalizedBBox::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.score)
}

// optional float size = 8;
inline bool NormalizedBBox::has_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NormalizedBBox::set_has_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NormalizedBBox::clear_has_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NormalizedBBox::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline float NormalizedBBox::size() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.size)
  return size_;
}
inline void NormalizedBBox::set_size(float value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.size)
}

// optional int32 pose = 9 [default = 0];
inline bool NormalizedBBox::has_pose() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NormalizedBBox::set_has_pose() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NormalizedBBox::clear_has_pose() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NormalizedBBox::clear_pose() {
  pose_ = 0;
  clear_has_pose();
}
inline ::google::protobuf::int32 NormalizedBBox::pose() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.pose)
  return pose_;
}
inline void NormalizedBBox::set_pose(::google::protobuf::int32 value) {
  set_has_pose();
  pose_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.pose)
}

// optional int32 dir = 10 [default = 0];
inline bool NormalizedBBox::has_dir() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NormalizedBBox::set_has_dir() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NormalizedBBox::clear_has_dir() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NormalizedBBox::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline ::google::protobuf::int32 NormalizedBBox::dir() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.dir)
  return dir_;
}
inline void NormalizedBBox::set_dir(::google::protobuf::int32 value) {
  set_has_dir();
  dir_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.dir)
}

// optional bool truncated = 11 [default = true];
inline bool NormalizedBBox::has_truncated() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NormalizedBBox::set_has_truncated() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NormalizedBBox::clear_has_truncated() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NormalizedBBox::clear_truncated() {
  truncated_ = true;
  clear_has_truncated();
}
inline bool NormalizedBBox::truncated() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.truncated)
  return truncated_;
}
inline void NormalizedBBox::set_truncated(bool value) {
  set_has_truncated();
  truncated_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.truncated)
}

// optional bool main = 12 [default = false];
inline bool NormalizedBBox::has_main() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NormalizedBBox::set_has_main() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NormalizedBBox::clear_has_main() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NormalizedBBox::clear_main() {
  main_ = false;
  clear_has_main();
}
inline bool NormalizedBBox::main() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.main)
  return main_;
}
inline void NormalizedBBox::set_main(bool value) {
  set_has_main();
  main_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.main)
}

// optional float pose_conf = 13 [default = 0];
inline bool NormalizedBBox::has_pose_conf() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NormalizedBBox::set_has_pose_conf() {
  _has_bits_[0] |= 0x00001000u;
}
inline void NormalizedBBox::clear_has_pose_conf() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void NormalizedBBox::clear_pose_conf() {
  pose_conf_ = 0;
  clear_has_pose_conf();
}
inline float NormalizedBBox::pose_conf() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.pose_conf)
  return pose_conf_;
}
inline void NormalizedBBox::set_pose_conf(float value) {
  set_has_pose_conf();
  pose_conf_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.pose_conf)
}

// optional float dir_conf = 14 [default = 0];
inline bool NormalizedBBox::has_dir_conf() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NormalizedBBox::set_has_dir_conf() {
  _has_bits_[0] |= 0x00002000u;
}
inline void NormalizedBBox::clear_has_dir_conf() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void NormalizedBBox::clear_dir_conf() {
  dir_conf_ = 0;
  clear_has_dir_conf();
}
inline float NormalizedBBox::dir_conf() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.dir_conf)
  return dir_conf_;
}
inline void NormalizedBBox::set_dir_conf(float value) {
  set_has_dir_conf();
  dir_conf_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.dir_conf)
}

// optional bool state = 15 [default = false];
inline bool NormalizedBBox::has_state() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void NormalizedBBox::set_has_state() {
  _has_bits_[0] |= 0x00004000u;
}
inline void NormalizedBBox::clear_has_state() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void NormalizedBBox::clear_state() {
  state_ = false;
  clear_has_state();
}
inline bool NormalizedBBox::state() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizedBBox.state)
  return state_;
}
inline void NormalizedBBox::set_state(bool value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizedBBox.state)
}

// -------------------------------------------------------------------

// PersonBBox

// optional .caffe.NormalizedBBox body = 1;
inline bool PersonBBox::has_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PersonBBox::set_has_body() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PersonBBox::clear_has_body() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PersonBBox::clear_body() {
  if (body_ != NULL) body_->::caffe::NormalizedBBox::Clear();
  clear_has_body();
}
inline const ::caffe::NormalizedBBox& PersonBBox::body() const {
  // @@protoc_insertion_point(field_get:caffe.PersonBBox.body)
  return body_ != NULL ? *body_ : *default_instance_->body_;
}
inline ::caffe::NormalizedBBox* PersonBBox::mutable_body() {
  set_has_body();
  if (body_ == NULL) {
    body_ = new ::caffe::NormalizedBBox;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PersonBBox.body)
  return body_;
}
inline ::caffe::NormalizedBBox* PersonBBox::release_body() {
  // @@protoc_insertion_point(field_release:caffe.PersonBBox.body)
  clear_has_body();
  ::caffe::NormalizedBBox* temp = body_;
  body_ = NULL;
  return temp;
}
inline void PersonBBox::set_allocated_body(::caffe::NormalizedBBox* body) {
  delete body_;
  body_ = body;
  if (body) {
    set_has_body();
  } else {
    clear_has_body();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PersonBBox.body)
}

// optional .caffe.NormalizedBBox head = 2;
inline bool PersonBBox::has_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PersonBBox::set_has_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PersonBBox::clear_has_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PersonBBox::clear_head() {
  if (head_ != NULL) head_->::caffe::NormalizedBBox::Clear();
  clear_has_head();
}
inline const ::caffe::NormalizedBBox& PersonBBox::head() const {
  // @@protoc_insertion_point(field_get:caffe.PersonBBox.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::caffe::NormalizedBBox* PersonBBox::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::caffe::NormalizedBBox;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PersonBBox.head)
  return head_;
}
inline ::caffe::NormalizedBBox* PersonBBox::release_head() {
  // @@protoc_insertion_point(field_release:caffe.PersonBBox.head)
  clear_has_head();
  ::caffe::NormalizedBBox* temp = head_;
  head_ = NULL;
  return temp;
}
inline void PersonBBox::set_allocated_head(::caffe::NormalizedBBox* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PersonBBox.head)
}

// optional .caffe.NormalizedBBox torso = 3;
inline bool PersonBBox::has_torso() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PersonBBox::set_has_torso() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PersonBBox::clear_has_torso() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PersonBBox::clear_torso() {
  if (torso_ != NULL) torso_->::caffe::NormalizedBBox::Clear();
  clear_has_torso();
}
inline const ::caffe::NormalizedBBox& PersonBBox::torso() const {
  // @@protoc_insertion_point(field_get:caffe.PersonBBox.torso)
  return torso_ != NULL ? *torso_ : *default_instance_->torso_;
}
inline ::caffe::NormalizedBBox* PersonBBox::mutable_torso() {
  set_has_torso();
  if (torso_ == NULL) {
    torso_ = new ::caffe::NormalizedBBox;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PersonBBox.torso)
  return torso_;
}
inline ::caffe::NormalizedBBox* PersonBBox::release_torso() {
  // @@protoc_insertion_point(field_release:caffe.PersonBBox.torso)
  clear_has_torso();
  ::caffe::NormalizedBBox* temp = torso_;
  torso_ = NULL;
  return temp;
}
inline void PersonBBox::set_allocated_torso(::caffe::NormalizedBBox* torso) {
  delete torso_;
  torso_ = torso;
  if (torso) {
    set_has_torso();
  } else {
    clear_has_torso();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PersonBBox.torso)
}

// repeated .caffe.NormalizedBBox arm = 4;
inline int PersonBBox::arm_size() const {
  return arm_.size();
}
inline void PersonBBox::clear_arm() {
  arm_.Clear();
}
inline const ::caffe::NormalizedBBox& PersonBBox::arm(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PersonBBox.arm)
  return arm_.Get(index);
}
inline ::caffe::NormalizedBBox* PersonBBox::mutable_arm(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.PersonBBox.arm)
  return arm_.Mutable(index);
}
inline ::caffe::NormalizedBBox* PersonBBox::add_arm() {
  // @@protoc_insertion_point(field_add:caffe.PersonBBox.arm)
  return arm_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NormalizedBBox >*
PersonBBox::mutable_arm() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PersonBBox.arm)
  return &arm_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NormalizedBBox >&
PersonBBox::arm() const {
  // @@protoc_insertion_point(field_list:caffe.PersonBBox.arm)
  return arm_;
}

// repeated .caffe.NormalizedBBox leg = 5;
inline int PersonBBox::leg_size() const {
  return leg_.size();
}
inline void PersonBBox::clear_leg() {
  leg_.Clear();
}
inline const ::caffe::NormalizedBBox& PersonBBox::leg(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PersonBBox.leg)
  return leg_.Get(index);
}
inline ::caffe::NormalizedBBox* PersonBBox::mutable_leg(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.PersonBBox.leg)
  return leg_.Mutable(index);
}
inline ::caffe::NormalizedBBox* PersonBBox::add_leg() {
  // @@protoc_insertion_point(field_add:caffe.PersonBBox.leg)
  return leg_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NormalizedBBox >*
PersonBBox::mutable_leg() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PersonBBox.leg)
  return &leg_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NormalizedBBox >&
PersonBBox::leg() const {
  // @@protoc_insertion_point(field_list:caffe.PersonBBox.leg)
  return leg_;
}

// repeated .caffe.NormalizedBBox hand = 6;
inline int PersonBBox::hand_size() const {
  return hand_.size();
}
inline void PersonBBox::clear_hand() {
  hand_.Clear();
}
inline const ::caffe::NormalizedBBox& PersonBBox::hand(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PersonBBox.hand)
  return hand_.Get(index);
}
inline ::caffe::NormalizedBBox* PersonBBox::mutable_hand(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.PersonBBox.hand)
  return hand_.Mutable(index);
}
inline ::caffe::NormalizedBBox* PersonBBox::add_hand() {
  // @@protoc_insertion_point(field_add:caffe.PersonBBox.hand)
  return hand_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NormalizedBBox >*
PersonBBox::mutable_hand() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PersonBBox.hand)
  return &hand_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NormalizedBBox >&
PersonBBox::hand() const {
  // @@protoc_insertion_point(field_list:caffe.PersonBBox.hand)
  return hand_;
}

// repeated .caffe.NormalizedBBox foot = 7;
inline int PersonBBox::foot_size() const {
  return foot_.size();
}
inline void PersonBBox::clear_foot() {
  foot_.Clear();
}
inline const ::caffe::NormalizedBBox& PersonBBox::foot(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PersonBBox.foot)
  return foot_.Get(index);
}
inline ::caffe::NormalizedBBox* PersonBBox::mutable_foot(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.PersonBBox.foot)
  return foot_.Mutable(index);
}
inline ::caffe::NormalizedBBox* PersonBBox::add_foot() {
  // @@protoc_insertion_point(field_add:caffe.PersonBBox.foot)
  return foot_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NormalizedBBox >*
PersonBBox::mutable_foot() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PersonBBox.foot)
  return &foot_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NormalizedBBox >&
PersonBBox::foot() const {
  // @@protoc_insertion_point(field_list:caffe.PersonBBox.foot)
  return foot_;
}

// -------------------------------------------------------------------

// AnnotatedPersonDatum

// optional .caffe.Datum datum = 1;
inline bool AnnotatedPersonDatum::has_datum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnnotatedPersonDatum::set_has_datum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnnotatedPersonDatum::clear_has_datum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnnotatedPersonDatum::clear_datum() {
  if (datum_ != NULL) datum_->::caffe::Datum::Clear();
  clear_has_datum();
}
inline const ::caffe::Datum& AnnotatedPersonDatum::datum() const {
  // @@protoc_insertion_point(field_get:caffe.AnnotatedPersonDatum.datum)
  return datum_ != NULL ? *datum_ : *default_instance_->datum_;
}
inline ::caffe::Datum* AnnotatedPersonDatum::mutable_datum() {
  set_has_datum();
  if (datum_ == NULL) {
    datum_ = new ::caffe::Datum;
  }
  // @@protoc_insertion_point(field_mutable:caffe.AnnotatedPersonDatum.datum)
  return datum_;
}
inline ::caffe::Datum* AnnotatedPersonDatum::release_datum() {
  // @@protoc_insertion_point(field_release:caffe.AnnotatedPersonDatum.datum)
  clear_has_datum();
  ::caffe::Datum* temp = datum_;
  datum_ = NULL;
  return temp;
}
inline void AnnotatedPersonDatum::set_allocated_datum(::caffe::Datum* datum) {
  delete datum_;
  datum_ = datum;
  if (datum) {
    set_has_datum();
  } else {
    clear_has_datum();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.AnnotatedPersonDatum.datum)
}

// repeated .caffe.PersonBBox person = 2;
inline int AnnotatedPersonDatum::person_size() const {
  return person_.size();
}
inline void AnnotatedPersonDatum::clear_person() {
  person_.Clear();
}
inline const ::caffe::PersonBBox& AnnotatedPersonDatum::person(int index) const {
  // @@protoc_insertion_point(field_get:caffe.AnnotatedPersonDatum.person)
  return person_.Get(index);
}
inline ::caffe::PersonBBox* AnnotatedPersonDatum::mutable_person(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.AnnotatedPersonDatum.person)
  return person_.Mutable(index);
}
inline ::caffe::PersonBBox* AnnotatedPersonDatum::add_person() {
  // @@protoc_insertion_point(field_add:caffe.AnnotatedPersonDatum.person)
  return person_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::PersonBBox >*
AnnotatedPersonDatum::mutable_person() {
  // @@protoc_insertion_point(field_mutable_list:caffe.AnnotatedPersonDatum.person)
  return &person_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::PersonBBox >&
AnnotatedPersonDatum::person() const {
  // @@protoc_insertion_point(field_list:caffe.AnnotatedPersonDatum.person)
  return person_;
}

// optional .caffe.AnnotatedPersonDatum.AnnotatedPersonType type = 3 [default = BBOX];
inline bool AnnotatedPersonDatum::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnnotatedPersonDatum::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnnotatedPersonDatum::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnnotatedPersonDatum::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::caffe::AnnotatedPersonDatum_AnnotatedPersonType AnnotatedPersonDatum::type() const {
  // @@protoc_insertion_point(field_get:caffe.AnnotatedPersonDatum.type)
  return static_cast< ::caffe::AnnotatedPersonDatum_AnnotatedPersonType >(type_);
}
inline void AnnotatedPersonDatum::set_type(::caffe::AnnotatedPersonDatum_AnnotatedPersonType value) {
  assert(::caffe::AnnotatedPersonDatum_AnnotatedPersonType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnotatedPersonDatum.type)
}

// -------------------------------------------------------------------

// Annotation

// optional int32 instance_id = 1 [default = 0];
inline bool Annotation::has_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Annotation::set_has_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Annotation::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Annotation::clear_instance_id() {
  instance_id_ = 0;
  clear_has_instance_id();
}
inline ::google::protobuf::int32 Annotation::instance_id() const {
  // @@protoc_insertion_point(field_get:caffe.Annotation.instance_id)
  return instance_id_;
}
inline void Annotation::set_instance_id(::google::protobuf::int32 value) {
  set_has_instance_id();
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.Annotation.instance_id)
}

// optional .caffe.NormalizedBBox bbox = 2;
inline bool Annotation::has_bbox() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Annotation::set_has_bbox() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Annotation::clear_has_bbox() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Annotation::clear_bbox() {
  if (bbox_ != NULL) bbox_->::caffe::NormalizedBBox::Clear();
  clear_has_bbox();
}
inline const ::caffe::NormalizedBBox& Annotation::bbox() const {
  // @@protoc_insertion_point(field_get:caffe.Annotation.bbox)
  return bbox_ != NULL ? *bbox_ : *default_instance_->bbox_;
}
inline ::caffe::NormalizedBBox* Annotation::mutable_bbox() {
  set_has_bbox();
  if (bbox_ == NULL) {
    bbox_ = new ::caffe::NormalizedBBox;
  }
  // @@protoc_insertion_point(field_mutable:caffe.Annotation.bbox)
  return bbox_;
}
inline ::caffe::NormalizedBBox* Annotation::release_bbox() {
  // @@protoc_insertion_point(field_release:caffe.Annotation.bbox)
  clear_has_bbox();
  ::caffe::NormalizedBBox* temp = bbox_;
  bbox_ = NULL;
  return temp;
}
inline void Annotation::set_allocated_bbox(::caffe::NormalizedBBox* bbox) {
  delete bbox_;
  bbox_ = bbox;
  if (bbox) {
    set_has_bbox();
  } else {
    clear_has_bbox();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.Annotation.bbox)
}

// -------------------------------------------------------------------

// Annotation_P

// optional int32 body_id = 1 [default = 0];
inline bool Annotation_P::has_body_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Annotation_P::set_has_body_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Annotation_P::clear_has_body_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Annotation_P::clear_body_id() {
  body_id_ = 0;
  clear_has_body_id();
}
inline ::google::protobuf::int32 Annotation_P::body_id() const {
  // @@protoc_insertion_point(field_get:caffe.Annotation_P.body_id)
  return body_id_;
}
inline void Annotation_P::set_body_id(::google::protobuf::int32 value) {
  set_has_body_id();
  body_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.Annotation_P.body_id)
}

// optional int32 instance_id = 2 [default = 0];
inline bool Annotation_P::has_instance_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Annotation_P::set_has_instance_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Annotation_P::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Annotation_P::clear_instance_id() {
  instance_id_ = 0;
  clear_has_instance_id();
}
inline ::google::protobuf::int32 Annotation_P::instance_id() const {
  // @@protoc_insertion_point(field_get:caffe.Annotation_P.instance_id)
  return instance_id_;
}
inline void Annotation_P::set_instance_id(::google::protobuf::int32 value) {
  set_has_instance_id();
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.Annotation_P.instance_id)
}

// optional .caffe.NormalizedBBox bbox = 3;
inline bool Annotation_P::has_bbox() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Annotation_P::set_has_bbox() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Annotation_P::clear_has_bbox() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Annotation_P::clear_bbox() {
  if (bbox_ != NULL) bbox_->::caffe::NormalizedBBox::Clear();
  clear_has_bbox();
}
inline const ::caffe::NormalizedBBox& Annotation_P::bbox() const {
  // @@protoc_insertion_point(field_get:caffe.Annotation_P.bbox)
  return bbox_ != NULL ? *bbox_ : *default_instance_->bbox_;
}
inline ::caffe::NormalizedBBox* Annotation_P::mutable_bbox() {
  set_has_bbox();
  if (bbox_ == NULL) {
    bbox_ = new ::caffe::NormalizedBBox;
  }
  // @@protoc_insertion_point(field_mutable:caffe.Annotation_P.bbox)
  return bbox_;
}
inline ::caffe::NormalizedBBox* Annotation_P::release_bbox() {
  // @@protoc_insertion_point(field_release:caffe.Annotation_P.bbox)
  clear_has_bbox();
  ::caffe::NormalizedBBox* temp = bbox_;
  bbox_ = NULL;
  return temp;
}
inline void Annotation_P::set_allocated_bbox(::caffe::NormalizedBBox* bbox) {
  delete bbox_;
  bbox_ = bbox;
  if (bbox) {
    set_has_bbox();
  } else {
    clear_has_bbox();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.Annotation_P.bbox)
}

// -------------------------------------------------------------------

// AnnotationPart

// optional string part_name = 1 [default = ""];
inline bool AnnotationPart::has_part_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnnotationPart::set_has_part_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnnotationPart::clear_has_part_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnnotationPart::clear_part_name() {
  part_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_part_name();
}
inline const ::std::string& AnnotationPart::part_name() const {
  // @@protoc_insertion_point(field_get:caffe.AnnotationPart.part_name)
  return part_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnotationPart::set_part_name(const ::std::string& value) {
  set_has_part_name();
  part_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.AnnotationPart.part_name)
}
inline void AnnotationPart::set_part_name(const char* value) {
  set_has_part_name();
  part_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.AnnotationPart.part_name)
}
inline void AnnotationPart::set_part_name(const char* value, size_t size) {
  set_has_part_name();
  part_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.AnnotationPart.part_name)
}
inline ::std::string* AnnotationPart::mutable_part_name() {
  set_has_part_name();
  // @@protoc_insertion_point(field_mutable:caffe.AnnotationPart.part_name)
  return part_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnnotationPart::release_part_name() {
  // @@protoc_insertion_point(field_release:caffe.AnnotationPart.part_name)
  clear_has_part_name();
  return part_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnotationPart::set_allocated_part_name(::std::string* part_name) {
  if (part_name != NULL) {
    set_has_part_name();
  } else {
    clear_has_part_name();
  }
  part_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), part_name);
  // @@protoc_insertion_point(field_set_allocated:caffe.AnnotationPart.part_name)
}

// optional int32 part_label = 2;
inline bool AnnotationPart::has_part_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnnotationPart::set_has_part_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnnotationPart::clear_has_part_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnnotationPart::clear_part_label() {
  part_label_ = 0;
  clear_has_part_label();
}
inline ::google::protobuf::int32 AnnotationPart::part_label() const {
  // @@protoc_insertion_point(field_get:caffe.AnnotationPart.part_label)
  return part_label_;
}
inline void AnnotationPart::set_part_label(::google::protobuf::int32 value) {
  set_has_part_label();
  part_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnotationPart.part_label)
}

// repeated .caffe.Annotation_P annotation = 3;
inline int AnnotationPart::annotation_size() const {
  return annotation_.size();
}
inline void AnnotationPart::clear_annotation() {
  annotation_.Clear();
}
inline const ::caffe::Annotation_P& AnnotationPart::annotation(int index) const {
  // @@protoc_insertion_point(field_get:caffe.AnnotationPart.annotation)
  return annotation_.Get(index);
}
inline ::caffe::Annotation_P* AnnotationPart::mutable_annotation(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.AnnotationPart.annotation)
  return annotation_.Mutable(index);
}
inline ::caffe::Annotation_P* AnnotationPart::add_annotation() {
  // @@protoc_insertion_point(field_add:caffe.AnnotationPart.annotation)
  return annotation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::Annotation_P >*
AnnotationPart::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable_list:caffe.AnnotationPart.annotation)
  return &annotation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::Annotation_P >&
AnnotationPart::annotation() const {
  // @@protoc_insertion_point(field_list:caffe.AnnotationPart.annotation)
  return annotation_;
}

// -------------------------------------------------------------------

// AnnotationGroup

// optional int32 group_label = 1;
inline bool AnnotationGroup::has_group_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnnotationGroup::set_has_group_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnnotationGroup::clear_has_group_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnnotationGroup::clear_group_label() {
  group_label_ = 0;
  clear_has_group_label();
}
inline ::google::protobuf::int32 AnnotationGroup::group_label() const {
  // @@protoc_insertion_point(field_get:caffe.AnnotationGroup.group_label)
  return group_label_;
}
inline void AnnotationGroup::set_group_label(::google::protobuf::int32 value) {
  set_has_group_label();
  group_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnotationGroup.group_label)
}

// repeated .caffe.Annotation annotation = 2;
inline int AnnotationGroup::annotation_size() const {
  return annotation_.size();
}
inline void AnnotationGroup::clear_annotation() {
  annotation_.Clear();
}
inline const ::caffe::Annotation& AnnotationGroup::annotation(int index) const {
  // @@protoc_insertion_point(field_get:caffe.AnnotationGroup.annotation)
  return annotation_.Get(index);
}
inline ::caffe::Annotation* AnnotationGroup::mutable_annotation(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.AnnotationGroup.annotation)
  return annotation_.Mutable(index);
}
inline ::caffe::Annotation* AnnotationGroup::add_annotation() {
  // @@protoc_insertion_point(field_add:caffe.AnnotationGroup.annotation)
  return annotation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::Annotation >*
AnnotationGroup::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable_list:caffe.AnnotationGroup.annotation)
  return &annotation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::Annotation >&
AnnotationGroup::annotation() const {
  // @@protoc_insertion_point(field_list:caffe.AnnotationGroup.annotation)
  return annotation_;
}

// -------------------------------------------------------------------

// AnnotatedDatum

// optional .caffe.Datum datum = 1;
inline bool AnnotatedDatum::has_datum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnnotatedDatum::set_has_datum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnnotatedDatum::clear_has_datum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnnotatedDatum::clear_datum() {
  if (datum_ != NULL) datum_->::caffe::Datum::Clear();
  clear_has_datum();
}
inline const ::caffe::Datum& AnnotatedDatum::datum() const {
  // @@protoc_insertion_point(field_get:caffe.AnnotatedDatum.datum)
  return datum_ != NULL ? *datum_ : *default_instance_->datum_;
}
inline ::caffe::Datum* AnnotatedDatum::mutable_datum() {
  set_has_datum();
  if (datum_ == NULL) {
    datum_ = new ::caffe::Datum;
  }
  // @@protoc_insertion_point(field_mutable:caffe.AnnotatedDatum.datum)
  return datum_;
}
inline ::caffe::Datum* AnnotatedDatum::release_datum() {
  // @@protoc_insertion_point(field_release:caffe.AnnotatedDatum.datum)
  clear_has_datum();
  ::caffe::Datum* temp = datum_;
  datum_ = NULL;
  return temp;
}
inline void AnnotatedDatum::set_allocated_datum(::caffe::Datum* datum) {
  delete datum_;
  datum_ = datum;
  if (datum) {
    set_has_datum();
  } else {
    clear_has_datum();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.AnnotatedDatum.datum)
}

// optional .caffe.AnnotatedDatum.AnnotationType type = 2;
inline bool AnnotatedDatum::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnnotatedDatum::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnnotatedDatum::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnnotatedDatum::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::caffe::AnnotatedDatum_AnnotationType AnnotatedDatum::type() const {
  // @@protoc_insertion_point(field_get:caffe.AnnotatedDatum.type)
  return static_cast< ::caffe::AnnotatedDatum_AnnotationType >(type_);
}
inline void AnnotatedDatum::set_type(::caffe::AnnotatedDatum_AnnotationType value) {
  assert(::caffe::AnnotatedDatum_AnnotationType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.AnnotatedDatum.type)
}

// repeated .caffe.AnnotationGroup annotation_group = 3;
inline int AnnotatedDatum::annotation_group_size() const {
  return annotation_group_.size();
}
inline void AnnotatedDatum::clear_annotation_group() {
  annotation_group_.Clear();
}
inline const ::caffe::AnnotationGroup& AnnotatedDatum::annotation_group(int index) const {
  // @@protoc_insertion_point(field_get:caffe.AnnotatedDatum.annotation_group)
  return annotation_group_.Get(index);
}
inline ::caffe::AnnotationGroup* AnnotatedDatum::mutable_annotation_group(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.AnnotatedDatum.annotation_group)
  return annotation_group_.Mutable(index);
}
inline ::caffe::AnnotationGroup* AnnotatedDatum::add_annotation_group() {
  // @@protoc_insertion_point(field_add:caffe.AnnotatedDatum.annotation_group)
  return annotation_group_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::AnnotationGroup >*
AnnotatedDatum::mutable_annotation_group() {
  // @@protoc_insertion_point(field_mutable_list:caffe.AnnotatedDatum.annotation_group)
  return &annotation_group_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::AnnotationGroup >&
AnnotatedDatum::annotation_group() const {
  // @@protoc_insertion_point(field_list:caffe.AnnotatedDatum.annotation_group)
  return annotation_group_;
}

// -------------------------------------------------------------------

// Color

// repeated int32 val = 1;
inline int Color::val_size() const {
  return val_.size();
}
inline void Color::clear_val() {
  val_.Clear();
}
inline ::google::protobuf::int32 Color::val(int index) const {
  // @@protoc_insertion_point(field_get:caffe.Color.val)
  return val_.Get(index);
}
inline void Color::set_val(int index, ::google::protobuf::int32 value) {
  val_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.Color.val)
}
inline void Color::add_val(::google::protobuf::int32 value) {
  val_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.Color.val)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Color::val() const {
  // @@protoc_insertion_point(field_list:caffe.Color.val)
  return val_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Color::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:caffe.Color.val)
  return &val_;
}

// -------------------------------------------------------------------

// ColorParameter

// repeated .caffe.Color rgb = 1;
inline int ColorParameter::rgb_size() const {
  return rgb_.size();
}
inline void ColorParameter::clear_rgb() {
  rgb_.Clear();
}
inline const ::caffe::Color& ColorParameter::rgb(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ColorParameter.rgb)
  return rgb_.Get(index);
}
inline ::caffe::Color* ColorParameter::mutable_rgb(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.ColorParameter.rgb)
  return rgb_.Mutable(index);
}
inline ::caffe::Color* ColorParameter::add_rgb() {
  // @@protoc_insertion_point(field_add:caffe.ColorParameter.rgb)
  return rgb_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::Color >*
ColorParameter::mutable_rgb() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ColorParameter.rgb)
  return &rgb_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::Color >&
ColorParameter::rgb() const {
  // @@protoc_insertion_point(field_list:caffe.ColorParameter.rgb)
  return rgb_;
}

// -------------------------------------------------------------------

// VisualizeParameter

// optional bool visualize = 1;
inline bool VisualizeParameter::has_visualize() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VisualizeParameter::set_has_visualize() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VisualizeParameter::clear_has_visualize() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VisualizeParameter::clear_visualize() {
  visualize_ = false;
  clear_has_visualize();
}
inline bool VisualizeParameter::visualize() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeParameter.visualize)
  return visualize_;
}
inline void VisualizeParameter::set_visualize(bool value) {
  set_has_visualize();
  visualize_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualizeParameter.visualize)
}

// optional float conf_threshold = 5 [default = 0.5];
inline bool VisualizeParameter::has_conf_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VisualizeParameter::set_has_conf_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VisualizeParameter::clear_has_conf_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VisualizeParameter::clear_conf_threshold() {
  conf_threshold_ = 0.5f;
  clear_has_conf_threshold();
}
inline float VisualizeParameter::conf_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeParameter.conf_threshold)
  return conf_threshold_;
}
inline void VisualizeParameter::set_conf_threshold(float value) {
  set_has_conf_threshold();
  conf_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualizeParameter.conf_threshold)
}

// optional float size_threshold = 6 [default = 0];
inline bool VisualizeParameter::has_size_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VisualizeParameter::set_has_size_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VisualizeParameter::clear_has_size_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VisualizeParameter::clear_size_threshold() {
  size_threshold_ = 0;
  clear_has_size_threshold();
}
inline float VisualizeParameter::size_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeParameter.size_threshold)
  return size_threshold_;
}
inline void VisualizeParameter::set_size_threshold(float value) {
  set_has_size_threshold();
  size_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualizeParameter.size_threshold)
}

// optional int32 display_maxsize = 2;
inline bool VisualizeParameter::has_display_maxsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VisualizeParameter::set_has_display_maxsize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VisualizeParameter::clear_has_display_maxsize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VisualizeParameter::clear_display_maxsize() {
  display_maxsize_ = 0;
  clear_has_display_maxsize();
}
inline ::google::protobuf::int32 VisualizeParameter::display_maxsize() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeParameter.display_maxsize)
  return display_maxsize_;
}
inline void VisualizeParameter::set_display_maxsize(::google::protobuf::int32 value) {
  set_has_display_maxsize();
  display_maxsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualizeParameter.display_maxsize)
}

// optional int32 line_width = 3;
inline bool VisualizeParameter::has_line_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VisualizeParameter::set_has_line_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VisualizeParameter::clear_has_line_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VisualizeParameter::clear_line_width() {
  line_width_ = 0;
  clear_has_line_width();
}
inline ::google::protobuf::int32 VisualizeParameter::line_width() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeParameter.line_width)
  return line_width_;
}
inline void VisualizeParameter::set_line_width(::google::protobuf::int32 value) {
  set_has_line_width();
  line_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualizeParameter.line_width)
}

// optional .caffe.ColorParameter color_param = 11;
inline bool VisualizeParameter::has_color_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VisualizeParameter::set_has_color_param() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VisualizeParameter::clear_has_color_param() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VisualizeParameter::clear_color_param() {
  if (color_param_ != NULL) color_param_->::caffe::ColorParameter::Clear();
  clear_has_color_param();
}
inline const ::caffe::ColorParameter& VisualizeParameter::color_param() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeParameter.color_param)
  return color_param_ != NULL ? *color_param_ : *default_instance_->color_param_;
}
inline ::caffe::ColorParameter* VisualizeParameter::mutable_color_param() {
  set_has_color_param();
  if (color_param_ == NULL) {
    color_param_ = new ::caffe::ColorParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.VisualizeParameter.color_param)
  return color_param_;
}
inline ::caffe::ColorParameter* VisualizeParameter::release_color_param() {
  // @@protoc_insertion_point(field_release:caffe.VisualizeParameter.color_param)
  clear_has_color_param();
  ::caffe::ColorParameter* temp = color_param_;
  color_param_ = NULL;
  return temp;
}
inline void VisualizeParameter::set_allocated_color_param(::caffe::ColorParameter* color_param) {
  delete color_param_;
  color_param_ = color_param;
  if (color_param) {
    set_has_color_param();
  } else {
    clear_has_color_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.VisualizeParameter.color_param)
}

// -------------------------------------------------------------------

// FillerParameter

// optional string type = 1 [default = "constant"];
inline bool FillerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FillerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FillerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FillerParameter::clear_type() {
  type_.ClearToDefaultNoArena(_default_type_);
  clear_has_type();
}
inline const ::std::string& FillerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.type)
  return type_.GetNoArena(_default_type_);
}
inline void FillerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(_default_type_, value);
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(_default_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.FillerParameter.type)
}
inline void FillerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(_default_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.FillerParameter.type)
}
inline ::std::string* FillerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.FillerParameter.type)
  return type_.MutableNoArena(_default_type_);
}
inline ::std::string* FillerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.FillerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(_default_type_);
}
inline void FillerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(_default_type_, type);
  // @@protoc_insertion_point(field_set_allocated:caffe.FillerParameter.type)
}

// optional float value = 2 [default = 0];
inline bool FillerParameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FillerParameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FillerParameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FillerParameter::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float FillerParameter::value() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.value)
  return value_;
}
inline void FillerParameter::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.value)
}

// optional float min = 3 [default = 0];
inline bool FillerParameter::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FillerParameter::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FillerParameter::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FillerParameter::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline float FillerParameter::min() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.min)
  return min_;
}
inline void FillerParameter::set_min(float value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.min)
}

// optional float max = 4 [default = 1];
inline bool FillerParameter::has_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FillerParameter::set_has_max() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FillerParameter::clear_has_max() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FillerParameter::clear_max() {
  max_ = 1;
  clear_has_max();
}
inline float FillerParameter::max() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.max)
  return max_;
}
inline void FillerParameter::set_max(float value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.max)
}

// optional float mean = 5 [default = 0];
inline bool FillerParameter::has_mean() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FillerParameter::set_has_mean() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FillerParameter::clear_has_mean() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FillerParameter::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
inline float FillerParameter::mean() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.mean)
  return mean_;
}
inline void FillerParameter::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.mean)
}

// optional float std = 6 [default = 1];
inline bool FillerParameter::has_std() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FillerParameter::set_has_std() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FillerParameter::clear_has_std() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FillerParameter::clear_std() {
  std_ = 1;
  clear_has_std();
}
inline float FillerParameter::std() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.std)
  return std_;
}
inline void FillerParameter::set_std(float value) {
  set_has_std();
  std_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.std)
}

// optional int32 sparse = 7 [default = -1];
inline bool FillerParameter::has_sparse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FillerParameter::set_has_sparse() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FillerParameter::clear_has_sparse() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FillerParameter::clear_sparse() {
  sparse_ = -1;
  clear_has_sparse();
}
inline ::google::protobuf::int32 FillerParameter::sparse() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.sparse)
  return sparse_;
}
inline void FillerParameter::set_sparse(::google::protobuf::int32 value) {
  set_has_sparse();
  sparse_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.sparse)
}

// optional .caffe.FillerParameter.VarianceNorm variance_norm = 8 [default = FAN_IN];
inline bool FillerParameter::has_variance_norm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FillerParameter::set_has_variance_norm() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FillerParameter::clear_has_variance_norm() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FillerParameter::clear_variance_norm() {
  variance_norm_ = 0;
  clear_has_variance_norm();
}
inline ::caffe::FillerParameter_VarianceNorm FillerParameter::variance_norm() const {
  // @@protoc_insertion_point(field_get:caffe.FillerParameter.variance_norm)
  return static_cast< ::caffe::FillerParameter_VarianceNorm >(variance_norm_);
}
inline void FillerParameter::set_variance_norm(::caffe::FillerParameter_VarianceNorm value) {
  assert(::caffe::FillerParameter_VarianceNorm_IsValid(value));
  set_has_variance_norm();
  variance_norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.FillerParameter.variance_norm)
}

// -------------------------------------------------------------------

// NetParameter

// optional string name = 1;
inline bool NetParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& NetParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.name)
}
inline void NetParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.name)
}
inline void NetParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.name)
}
inline ::std::string* NetParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.name)
}

// repeated string input = 3;
inline int NetParameter::input_size() const {
  return input_.size();
}
inline void NetParameter::clear_input() {
  input_.Clear();
}
inline const ::std::string& NetParameter::input(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input)
  return input_.Get(index);
}
inline ::std::string* NetParameter::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input)
  return input_.Mutable(index);
}
inline void NetParameter::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input)
  input_.Mutable(index)->assign(value);
}
inline void NetParameter::set_input(int index, const char* value) {
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetParameter.input)
}
inline void NetParameter::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetParameter.input)
}
inline ::std::string* NetParameter::add_input() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetParameter.input)
  return input_.Add();
}
inline void NetParameter::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input)
}
inline void NetParameter::add_input(const char* value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetParameter.input)
}
inline void NetParameter::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetParameter.input)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetParameter::input() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input)
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetParameter::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input)
  return &input_;
}

// repeated .caffe.BlobShape input_shape = 8;
inline int NetParameter::input_shape_size() const {
  return input_shape_.size();
}
inline void NetParameter::clear_input_shape() {
  input_shape_.Clear();
}
inline const ::caffe::BlobShape& NetParameter::input_shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_shape)
  return input_shape_.Get(index);
}
inline ::caffe::BlobShape* NetParameter::mutable_input_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.input_shape)
  return input_shape_.Mutable(index);
}
inline ::caffe::BlobShape* NetParameter::add_input_shape() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_shape)
  return input_shape_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
NetParameter::mutable_input_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_shape)
  return &input_shape_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
NetParameter::input_shape() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_shape)
  return input_shape_;
}

// repeated int32 input_dim = 4;
inline int NetParameter::input_dim_size() const {
  return input_dim_.size();
}
inline void NetParameter::clear_input_dim() {
  input_dim_.Clear();
}
inline ::google::protobuf::int32 NetParameter::input_dim(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.input_dim)
  return input_dim_.Get(index);
}
inline void NetParameter::set_input_dim(int index, ::google::protobuf::int32 value) {
  input_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.NetParameter.input_dim)
}
inline void NetParameter::add_input_dim(::google::protobuf::int32 value) {
  input_dim_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.NetParameter.input_dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NetParameter::input_dim() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.input_dim)
  return input_dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NetParameter::mutable_input_dim() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.input_dim)
  return &input_dim_;
}

// optional bool force_backward = 5 [default = false];
inline bool NetParameter::has_force_backward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetParameter::set_has_force_backward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetParameter::clear_has_force_backward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetParameter::clear_force_backward() {
  force_backward_ = false;
  clear_has_force_backward();
}
inline bool NetParameter::force_backward() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.force_backward)
  return force_backward_;
}
inline void NetParameter::set_force_backward(bool value) {
  set_has_force_backward();
  force_backward_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.force_backward)
}

// optional .caffe.NetState state = 6;
inline bool NetParameter::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetParameter::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetParameter::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetParameter::clear_state() {
  if (state_ != NULL) state_->::caffe::NetState::Clear();
  clear_has_state();
}
inline const ::caffe::NetState& NetParameter::state() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.state)
  return state_ != NULL ? *state_ : *default_instance_->state_;
}
inline ::caffe::NetState* NetParameter::mutable_state() {
  set_has_state();
  if (state_ == NULL) {
    state_ = new ::caffe::NetState;
  }
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.state)
  return state_;
}
inline ::caffe::NetState* NetParameter::release_state() {
  // @@protoc_insertion_point(field_release:caffe.NetParameter.state)
  clear_has_state();
  ::caffe::NetState* temp = state_;
  state_ = NULL;
  return temp;
}
inline void NetParameter::set_allocated_state(::caffe::NetState* state) {
  delete state_;
  state_ = state;
  if (state) {
    set_has_state();
  } else {
    clear_has_state();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.NetParameter.state)
}

// optional bool debug_info = 7 [default = false];
inline bool NetParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
inline bool NetParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.debug_info)
  return debug_info_;
}
inline void NetParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetParameter.debug_info)
}

// repeated .caffe.LayerParameter layer = 100;
inline int NetParameter::layer_size() const {
  return layer_.size();
}
inline void NetParameter::clear_layer() {
  layer_.Clear();
}
inline const ::caffe::LayerParameter& NetParameter::layer(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layer)
  return layer_.Get(index);
}
inline ::caffe::LayerParameter* NetParameter::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layer)
  return layer_.Mutable(index);
}
inline ::caffe::LayerParameter* NetParameter::add_layer() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layer)
  return layer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >*
NetParameter::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layer)
  return &layer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::LayerParameter >&
NetParameter::layer() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layer)
  return layer_;
}

// repeated .caffe.V1LayerParameter layers = 2;
inline int NetParameter::layers_size() const {
  return layers_.size();
}
inline void NetParameter::clear_layers() {
  layers_.Clear();
}
inline const ::caffe::V1LayerParameter& NetParameter::layers(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetParameter.layers)
  return layers_.Get(index);
}
inline ::caffe::V1LayerParameter* NetParameter::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetParameter.layers)
  return layers_.Mutable(index);
}
inline ::caffe::V1LayerParameter* NetParameter::add_layers() {
  // @@protoc_insertion_point(field_add:caffe.NetParameter.layers)
  return layers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >*
NetParameter::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetParameter.layers)
  return &layers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::V1LayerParameter >&
NetParameter::layers() const {
  // @@protoc_insertion_point(field_list:caffe.NetParameter.layers)
  return layers_;
}

// -------------------------------------------------------------------

// SolverParameter

// optional string net = 24;
inline bool SolverParameter::has_net() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverParameter::set_has_net() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverParameter::clear_has_net() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverParameter::clear_net() {
  net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net();
}
inline const ::std::string& SolverParameter::net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net)
  return net_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_net(const ::std::string& value) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.net)
}
inline void SolverParameter::set_net(const char* value) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.net)
}
inline void SolverParameter::set_net(const char* value, size_t size) {
  set_has_net();
  net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.net)
}
inline ::std::string* SolverParameter::mutable_net() {
  set_has_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net)
  return net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.net)
  clear_has_net();
  return net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_net(::std::string* net) {
  if (net != NULL) {
    set_has_net();
  } else {
    clear_has_net();
  }
  net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net)
}

// optional .caffe.NetParameter net_param = 25;
inline bool SolverParameter::has_net_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverParameter::set_has_net_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverParameter::clear_has_net_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverParameter::clear_net_param() {
  if (net_param_ != NULL) net_param_->::caffe::NetParameter::Clear();
  clear_has_net_param();
}
inline const ::caffe::NetParameter& SolverParameter::net_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.net_param)
  return net_param_ != NULL ? *net_param_ : *default_instance_->net_param_;
}
inline ::caffe::NetParameter* SolverParameter::mutable_net_param() {
  set_has_net_param();
  if (net_param_ == NULL) {
    net_param_ = new ::caffe::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.net_param)
  return net_param_;
}
inline ::caffe::NetParameter* SolverParameter::release_net_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.net_param)
  clear_has_net_param();
  ::caffe::NetParameter* temp = net_param_;
  net_param_ = NULL;
  return temp;
}
inline void SolverParameter::set_allocated_net_param(::caffe::NetParameter* net_param) {
  delete net_param_;
  net_param_ = net_param;
  if (net_param) {
    set_has_net_param();
  } else {
    clear_has_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.net_param)
}

// optional string train_net = 1;
inline bool SolverParameter::has_train_net() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolverParameter::set_has_train_net() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolverParameter::clear_has_train_net() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolverParameter::clear_train_net() {
  train_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_train_net();
}
inline const ::std::string& SolverParameter::train_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_net)
  return train_net_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_train_net(const ::std::string& value) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.train_net)
}
inline void SolverParameter::set_train_net(const char* value) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.train_net)
}
inline void SolverParameter::set_train_net(const char* value, size_t size) {
  set_has_train_net();
  train_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.train_net)
}
inline ::std::string* SolverParameter::mutable_train_net() {
  set_has_train_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_net)
  return train_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_train_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_net)
  clear_has_train_net();
  return train_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_train_net(::std::string* train_net) {
  if (train_net != NULL) {
    set_has_train_net();
  } else {
    clear_has_train_net();
  }
  train_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), train_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_net)
}

// repeated string test_net = 2;
inline int SolverParameter::test_net_size() const {
  return test_net_.size();
}
inline void SolverParameter::clear_test_net() {
  test_net_.Clear();
}
inline const ::std::string& SolverParameter::test_net(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net)
  return test_net_.Get(index);
}
inline ::std::string* SolverParameter::mutable_test_net(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net)
  return test_net_.Mutable(index);
}
inline void SolverParameter::set_test_net(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_net)
  test_net_.Mutable(index)->assign(value);
}
inline void SolverParameter::set_test_net(int index, const char* value) {
  test_net_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.test_net)
}
inline void SolverParameter::set_test_net(int index, const char* value, size_t size) {
  test_net_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.test_net)
}
inline ::std::string* SolverParameter::add_test_net() {
  // @@protoc_insertion_point(field_add_mutable:caffe.SolverParameter.test_net)
  return test_net_.Add();
}
inline void SolverParameter::add_test_net(const ::std::string& value) {
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net)
}
inline void SolverParameter::add_test_net(const char* value) {
  test_net_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.SolverParameter.test_net)
}
inline void SolverParameter::add_test_net(const char* value, size_t size) {
  test_net_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.SolverParameter.test_net)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SolverParameter::test_net() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_net)
  return test_net_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SolverParameter::mutable_test_net() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_net)
  return &test_net_;
}

// optional .caffe.NetParameter train_net_param = 21;
inline bool SolverParameter::has_train_net_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SolverParameter::set_has_train_net_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SolverParameter::clear_has_train_net_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SolverParameter::clear_train_net_param() {
  if (train_net_param_ != NULL) train_net_param_->::caffe::NetParameter::Clear();
  clear_has_train_net_param();
}
inline const ::caffe::NetParameter& SolverParameter::train_net_param() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_net_param)
  return train_net_param_ != NULL ? *train_net_param_ : *default_instance_->train_net_param_;
}
inline ::caffe::NetParameter* SolverParameter::mutable_train_net_param() {
  set_has_train_net_param();
  if (train_net_param_ == NULL) {
    train_net_param_ = new ::caffe::NetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_net_param)
  return train_net_param_;
}
inline ::caffe::NetParameter* SolverParameter::release_train_net_param() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_net_param)
  clear_has_train_net_param();
  ::caffe::NetParameter* temp = train_net_param_;
  train_net_param_ = NULL;
  return temp;
}
inline void SolverParameter::set_allocated_train_net_param(::caffe::NetParameter* train_net_param) {
  delete train_net_param_;
  train_net_param_ = train_net_param;
  if (train_net_param) {
    set_has_train_net_param();
  } else {
    clear_has_train_net_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_net_param)
}

// repeated .caffe.NetParameter test_net_param = 22;
inline int SolverParameter::test_net_param_size() const {
  return test_net_param_.size();
}
inline void SolverParameter::clear_test_net_param() {
  test_net_param_.Clear();
}
inline const ::caffe::NetParameter& SolverParameter::test_net_param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net_param)
  return test_net_param_.Get(index);
}
inline ::caffe::NetParameter* SolverParameter::mutable_test_net_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net_param)
  return test_net_param_.Mutable(index);
}
inline ::caffe::NetParameter* SolverParameter::add_test_net_param() {
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net_param)
  return test_net_param_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >*
SolverParameter::mutable_test_net_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_net_param)
  return &test_net_param_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetParameter >&
SolverParameter::test_net_param() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_net_param)
  return test_net_param_;
}

// optional .caffe.NetState train_state = 26;
inline bool SolverParameter::has_train_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SolverParameter::set_has_train_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SolverParameter::clear_has_train_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SolverParameter::clear_train_state() {
  if (train_state_ != NULL) train_state_->::caffe::NetState::Clear();
  clear_has_train_state();
}
inline const ::caffe::NetState& SolverParameter::train_state() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.train_state)
  return train_state_ != NULL ? *train_state_ : *default_instance_->train_state_;
}
inline ::caffe::NetState* SolverParameter::mutable_train_state() {
  set_has_train_state();
  if (train_state_ == NULL) {
    train_state_ = new ::caffe::NetState;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.train_state)
  return train_state_;
}
inline ::caffe::NetState* SolverParameter::release_train_state() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.train_state)
  clear_has_train_state();
  ::caffe::NetState* temp = train_state_;
  train_state_ = NULL;
  return temp;
}
inline void SolverParameter::set_allocated_train_state(::caffe::NetState* train_state) {
  delete train_state_;
  train_state_ = train_state;
  if (train_state) {
    set_has_train_state();
  } else {
    clear_has_train_state();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.train_state)
}

// repeated .caffe.NetState test_state = 27;
inline int SolverParameter::test_state_size() const {
  return test_state_.size();
}
inline void SolverParameter::clear_test_state() {
  test_state_.Clear();
}
inline const ::caffe::NetState& SolverParameter::test_state(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_state)
  return test_state_.Get(index);
}
inline ::caffe::NetState* SolverParameter::mutable_test_state(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_state)
  return test_state_.Mutable(index);
}
inline ::caffe::NetState* SolverParameter::add_test_state() {
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_state)
  return test_state_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetState >*
SolverParameter::mutable_test_state() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_state)
  return &test_state_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetState >&
SolverParameter::test_state() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_state)
  return test_state_;
}

// optional string eval_type = 41 [default = "classification"];
inline bool SolverParameter::has_eval_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SolverParameter::set_has_eval_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SolverParameter::clear_has_eval_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SolverParameter::clear_eval_type() {
  eval_type_.ClearToDefaultNoArena(_default_eval_type_);
  clear_has_eval_type();
}
inline const ::std::string& SolverParameter::eval_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.eval_type)
  return eval_type_.GetNoArena(_default_eval_type_);
}
inline void SolverParameter::set_eval_type(const ::std::string& value) {
  set_has_eval_type();
  eval_type_.SetNoArena(_default_eval_type_, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.eval_type)
}
inline void SolverParameter::set_eval_type(const char* value) {
  set_has_eval_type();
  eval_type_.SetNoArena(_default_eval_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.eval_type)
}
inline void SolverParameter::set_eval_type(const char* value, size_t size) {
  set_has_eval_type();
  eval_type_.SetNoArena(_default_eval_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.eval_type)
}
inline ::std::string* SolverParameter::mutable_eval_type() {
  set_has_eval_type();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.eval_type)
  return eval_type_.MutableNoArena(_default_eval_type_);
}
inline ::std::string* SolverParameter::release_eval_type() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.eval_type)
  clear_has_eval_type();
  return eval_type_.ReleaseNoArena(_default_eval_type_);
}
inline void SolverParameter::set_allocated_eval_type(::std::string* eval_type) {
  if (eval_type != NULL) {
    set_has_eval_type();
  } else {
    clear_has_eval_type();
  }
  eval_type_.SetAllocatedNoArena(_default_eval_type_, eval_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.eval_type)
}

// repeated string test_net_type = 59;
inline int SolverParameter::test_net_type_size() const {
  return test_net_type_.size();
}
inline void SolverParameter::clear_test_net_type() {
  test_net_type_.Clear();
}
inline const ::std::string& SolverParameter::test_net_type(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_net_type)
  return test_net_type_.Get(index);
}
inline ::std::string* SolverParameter::mutable_test_net_type(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.test_net_type)
  return test_net_type_.Mutable(index);
}
inline void SolverParameter::set_test_net_type(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_net_type)
  test_net_type_.Mutable(index)->assign(value);
}
inline void SolverParameter::set_test_net_type(int index, const char* value) {
  test_net_type_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.test_net_type)
}
inline void SolverParameter::set_test_net_type(int index, const char* value, size_t size) {
  test_net_type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.test_net_type)
}
inline ::std::string* SolverParameter::add_test_net_type() {
  // @@protoc_insertion_point(field_add_mutable:caffe.SolverParameter.test_net_type)
  return test_net_type_.Add();
}
inline void SolverParameter::add_test_net_type(const ::std::string& value) {
  test_net_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_net_type)
}
inline void SolverParameter::add_test_net_type(const char* value) {
  test_net_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.SolverParameter.test_net_type)
}
inline void SolverParameter::add_test_net_type(const char* value, size_t size) {
  test_net_type_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.SolverParameter.test_net_type)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SolverParameter::test_net_type() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_net_type)
  return test_net_type_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SolverParameter::mutable_test_net_type() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_net_type)
  return &test_net_type_;
}

// repeated string tracker_test_vottype_dir = 44;
inline int SolverParameter::tracker_test_vottype_dir_size() const {
  return tracker_test_vottype_dir_.size();
}
inline void SolverParameter::clear_tracker_test_vottype_dir() {
  tracker_test_vottype_dir_.Clear();
}
inline const ::std::string& SolverParameter::tracker_test_vottype_dir(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.tracker_test_vottype_dir)
  return tracker_test_vottype_dir_.Get(index);
}
inline ::std::string* SolverParameter::mutable_tracker_test_vottype_dir(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.tracker_test_vottype_dir)
  return tracker_test_vottype_dir_.Mutable(index);
}
inline void SolverParameter::set_tracker_test_vottype_dir(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.tracker_test_vottype_dir)
  tracker_test_vottype_dir_.Mutable(index)->assign(value);
}
inline void SolverParameter::set_tracker_test_vottype_dir(int index, const char* value) {
  tracker_test_vottype_dir_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.tracker_test_vottype_dir)
}
inline void SolverParameter::set_tracker_test_vottype_dir(int index, const char* value, size_t size) {
  tracker_test_vottype_dir_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.tracker_test_vottype_dir)
}
inline ::std::string* SolverParameter::add_tracker_test_vottype_dir() {
  // @@protoc_insertion_point(field_add_mutable:caffe.SolverParameter.tracker_test_vottype_dir)
  return tracker_test_vottype_dir_.Add();
}
inline void SolverParameter::add_tracker_test_vottype_dir(const ::std::string& value) {
  tracker_test_vottype_dir_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.tracker_test_vottype_dir)
}
inline void SolverParameter::add_tracker_test_vottype_dir(const char* value) {
  tracker_test_vottype_dir_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.SolverParameter.tracker_test_vottype_dir)
}
inline void SolverParameter::add_tracker_test_vottype_dir(const char* value, size_t size) {
  tracker_test_vottype_dir_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.SolverParameter.tracker_test_vottype_dir)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SolverParameter::tracker_test_vottype_dir() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.tracker_test_vottype_dir)
  return tracker_test_vottype_dir_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SolverParameter::mutable_tracker_test_vottype_dir() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.tracker_test_vottype_dir)
  return &tracker_test_vottype_dir_;
}

// repeated string tracker_test_alovtype_image_dir = 45;
inline int SolverParameter::tracker_test_alovtype_image_dir_size() const {
  return tracker_test_alovtype_image_dir_.size();
}
inline void SolverParameter::clear_tracker_test_alovtype_image_dir() {
  tracker_test_alovtype_image_dir_.Clear();
}
inline const ::std::string& SolverParameter::tracker_test_alovtype_image_dir(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.tracker_test_alovtype_image_dir)
  return tracker_test_alovtype_image_dir_.Get(index);
}
inline ::std::string* SolverParameter::mutable_tracker_test_alovtype_image_dir(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.tracker_test_alovtype_image_dir)
  return tracker_test_alovtype_image_dir_.Mutable(index);
}
inline void SolverParameter::set_tracker_test_alovtype_image_dir(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.tracker_test_alovtype_image_dir)
  tracker_test_alovtype_image_dir_.Mutable(index)->assign(value);
}
inline void SolverParameter::set_tracker_test_alovtype_image_dir(int index, const char* value) {
  tracker_test_alovtype_image_dir_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.tracker_test_alovtype_image_dir)
}
inline void SolverParameter::set_tracker_test_alovtype_image_dir(int index, const char* value, size_t size) {
  tracker_test_alovtype_image_dir_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.tracker_test_alovtype_image_dir)
}
inline ::std::string* SolverParameter::add_tracker_test_alovtype_image_dir() {
  // @@protoc_insertion_point(field_add_mutable:caffe.SolverParameter.tracker_test_alovtype_image_dir)
  return tracker_test_alovtype_image_dir_.Add();
}
inline void SolverParameter::add_tracker_test_alovtype_image_dir(const ::std::string& value) {
  tracker_test_alovtype_image_dir_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.tracker_test_alovtype_image_dir)
}
inline void SolverParameter::add_tracker_test_alovtype_image_dir(const char* value) {
  tracker_test_alovtype_image_dir_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.SolverParameter.tracker_test_alovtype_image_dir)
}
inline void SolverParameter::add_tracker_test_alovtype_image_dir(const char* value, size_t size) {
  tracker_test_alovtype_image_dir_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.SolverParameter.tracker_test_alovtype_image_dir)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SolverParameter::tracker_test_alovtype_image_dir() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.tracker_test_alovtype_image_dir)
  return tracker_test_alovtype_image_dir_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SolverParameter::mutable_tracker_test_alovtype_image_dir() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.tracker_test_alovtype_image_dir)
  return &tracker_test_alovtype_image_dir_;
}

// repeated string tracker_test_alovtype_annos_dir = 46;
inline int SolverParameter::tracker_test_alovtype_annos_dir_size() const {
  return tracker_test_alovtype_annos_dir_.size();
}
inline void SolverParameter::clear_tracker_test_alovtype_annos_dir() {
  tracker_test_alovtype_annos_dir_.Clear();
}
inline const ::std::string& SolverParameter::tracker_test_alovtype_annos_dir(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.tracker_test_alovtype_annos_dir)
  return tracker_test_alovtype_annos_dir_.Get(index);
}
inline ::std::string* SolverParameter::mutable_tracker_test_alovtype_annos_dir(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.tracker_test_alovtype_annos_dir)
  return tracker_test_alovtype_annos_dir_.Mutable(index);
}
inline void SolverParameter::set_tracker_test_alovtype_annos_dir(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.tracker_test_alovtype_annos_dir)
  tracker_test_alovtype_annos_dir_.Mutable(index)->assign(value);
}
inline void SolverParameter::set_tracker_test_alovtype_annos_dir(int index, const char* value) {
  tracker_test_alovtype_annos_dir_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.tracker_test_alovtype_annos_dir)
}
inline void SolverParameter::set_tracker_test_alovtype_annos_dir(int index, const char* value, size_t size) {
  tracker_test_alovtype_annos_dir_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.tracker_test_alovtype_annos_dir)
}
inline ::std::string* SolverParameter::add_tracker_test_alovtype_annos_dir() {
  // @@protoc_insertion_point(field_add_mutable:caffe.SolverParameter.tracker_test_alovtype_annos_dir)
  return tracker_test_alovtype_annos_dir_.Add();
}
inline void SolverParameter::add_tracker_test_alovtype_annos_dir(const ::std::string& value) {
  tracker_test_alovtype_annos_dir_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.tracker_test_alovtype_annos_dir)
}
inline void SolverParameter::add_tracker_test_alovtype_annos_dir(const char* value) {
  tracker_test_alovtype_annos_dir_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.SolverParameter.tracker_test_alovtype_annos_dir)
}
inline void SolverParameter::add_tracker_test_alovtype_annos_dir(const char* value, size_t size) {
  tracker_test_alovtype_annos_dir_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.SolverParameter.tracker_test_alovtype_annos_dir)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SolverParameter::tracker_test_alovtype_annos_dir() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.tracker_test_alovtype_annos_dir)
  return tracker_test_alovtype_annos_dir_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SolverParameter::mutable_tracker_test_alovtype_annos_dir() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.tracker_test_alovtype_annos_dir)
  return &tracker_test_alovtype_annos_dir_;
}

// optional bool show_tracking = 47 [default = false];
inline bool SolverParameter::has_show_tracking() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SolverParameter::set_has_show_tracking() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SolverParameter::clear_has_show_tracking() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SolverParameter::clear_show_tracking() {
  show_tracking_ = false;
  clear_has_show_tracking();
}
inline bool SolverParameter::show_tracking() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.show_tracking)
  return show_tracking_;
}
inline void SolverParameter::set_show_tracking(bool value) {
  set_has_show_tracking();
  show_tracking_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.show_tracking)
}

// optional string tracker_test_out_folder = 48;
inline bool SolverParameter::has_tracker_test_out_folder() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SolverParameter::set_has_tracker_test_out_folder() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SolverParameter::clear_has_tracker_test_out_folder() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SolverParameter::clear_tracker_test_out_folder() {
  tracker_test_out_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tracker_test_out_folder();
}
inline const ::std::string& SolverParameter::tracker_test_out_folder() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.tracker_test_out_folder)
  return tracker_test_out_folder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_tracker_test_out_folder(const ::std::string& value) {
  set_has_tracker_test_out_folder();
  tracker_test_out_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.tracker_test_out_folder)
}
inline void SolverParameter::set_tracker_test_out_folder(const char* value) {
  set_has_tracker_test_out_folder();
  tracker_test_out_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.tracker_test_out_folder)
}
inline void SolverParameter::set_tracker_test_out_folder(const char* value, size_t size) {
  set_has_tracker_test_out_folder();
  tracker_test_out_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.tracker_test_out_folder)
}
inline ::std::string* SolverParameter::mutable_tracker_test_out_folder() {
  set_has_tracker_test_out_folder();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.tracker_test_out_folder)
  return tracker_test_out_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_tracker_test_out_folder() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.tracker_test_out_folder)
  clear_has_tracker_test_out_folder();
  return tracker_test_out_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_tracker_test_out_folder(::std::string* tracker_test_out_folder) {
  if (tracker_test_out_folder != NULL) {
    set_has_tracker_test_out_folder();
  } else {
    clear_has_tracker_test_out_folder();
  }
  tracker_test_out_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tracker_test_out_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.tracker_test_out_folder)
}

// optional bool save_tracking = 49 [default = false];
inline bool SolverParameter::has_save_tracking() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SolverParameter::set_has_save_tracking() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SolverParameter::clear_has_save_tracking() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SolverParameter::clear_save_tracking() {
  save_tracking_ = false;
  clear_has_save_tracking();
}
inline bool SolverParameter::save_tracking() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.save_tracking)
  return save_tracking_;
}
inline void SolverParameter::set_save_tracking(bool value) {
  set_has_save_tracking();
  save_tracking_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.save_tracking)
}

// optional string tracker_test_save_folder = 50;
inline bool SolverParameter::has_tracker_test_save_folder() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SolverParameter::set_has_tracker_test_save_folder() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SolverParameter::clear_has_tracker_test_save_folder() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SolverParameter::clear_tracker_test_save_folder() {
  tracker_test_save_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tracker_test_save_folder();
}
inline const ::std::string& SolverParameter::tracker_test_save_folder() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.tracker_test_save_folder)
  return tracker_test_save_folder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_tracker_test_save_folder(const ::std::string& value) {
  set_has_tracker_test_save_folder();
  tracker_test_save_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.tracker_test_save_folder)
}
inline void SolverParameter::set_tracker_test_save_folder(const char* value) {
  set_has_tracker_test_save_folder();
  tracker_test_save_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.tracker_test_save_folder)
}
inline void SolverParameter::set_tracker_test_save_folder(const char* value, size_t size) {
  set_has_tracker_test_save_folder();
  tracker_test_save_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.tracker_test_save_folder)
}
inline ::std::string* SolverParameter::mutable_tracker_test_save_folder() {
  set_has_tracker_test_save_folder();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.tracker_test_save_folder)
  return tracker_test_save_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_tracker_test_save_folder() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.tracker_test_save_folder)
  clear_has_tracker_test_save_folder();
  return tracker_test_save_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_tracker_test_save_folder(::std::string* tracker_test_save_folder) {
  if (tracker_test_save_folder != NULL) {
    set_has_tracker_test_save_folder();
  } else {
    clear_has_tracker_test_save_folder();
  }
  tracker_test_save_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tracker_test_save_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.tracker_test_save_folder)
}

// optional .caffe.VideoTrackerParameter video_tracker_parameter = 51;
inline bool SolverParameter::has_video_tracker_parameter() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SolverParameter::set_has_video_tracker_parameter() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SolverParameter::clear_has_video_tracker_parameter() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SolverParameter::clear_video_tracker_parameter() {
  if (video_tracker_parameter_ != NULL) video_tracker_parameter_->::caffe::VideoTrackerParameter::Clear();
  clear_has_video_tracker_parameter();
}
inline const ::caffe::VideoTrackerParameter& SolverParameter::video_tracker_parameter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.video_tracker_parameter)
  return video_tracker_parameter_ != NULL ? *video_tracker_parameter_ : *default_instance_->video_tracker_parameter_;
}
inline ::caffe::VideoTrackerParameter* SolverParameter::mutable_video_tracker_parameter() {
  set_has_video_tracker_parameter();
  if (video_tracker_parameter_ == NULL) {
    video_tracker_parameter_ = new ::caffe::VideoTrackerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.video_tracker_parameter)
  return video_tracker_parameter_;
}
inline ::caffe::VideoTrackerParameter* SolverParameter::release_video_tracker_parameter() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.video_tracker_parameter)
  clear_has_video_tracker_parameter();
  ::caffe::VideoTrackerParameter* temp = video_tracker_parameter_;
  video_tracker_parameter_ = NULL;
  return temp;
}
inline void SolverParameter::set_allocated_video_tracker_parameter(::caffe::VideoTrackerParameter* video_tracker_parameter) {
  delete video_tracker_parameter_;
  video_tracker_parameter_ = video_tracker_parameter;
  if (video_tracker_parameter) {
    set_has_video_tracker_parameter();
  } else {
    clear_has_video_tracker_parameter();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.video_tracker_parameter)
}

// optional bool test_use_camera = 52 [default = false];
inline bool SolverParameter::has_test_use_camera() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SolverParameter::set_has_test_use_camera() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SolverParameter::clear_has_test_use_camera() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SolverParameter::clear_test_use_camera() {
  test_use_camera_ = false;
  clear_has_test_use_camera();
}
inline bool SolverParameter::test_use_camera() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_use_camera)
  return test_use_camera_;
}
inline void SolverParameter::set_test_use_camera(bool value) {
  set_has_test_use_camera();
  test_use_camera_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_use_camera)
}

// optional string ap_version = 42 [default = "Integral"];
inline bool SolverParameter::has_ap_version() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SolverParameter::set_has_ap_version() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SolverParameter::clear_has_ap_version() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SolverParameter::clear_ap_version() {
  ap_version_.ClearToDefaultNoArena(_default_ap_version_);
  clear_has_ap_version();
}
inline const ::std::string& SolverParameter::ap_version() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.ap_version)
  return ap_version_.GetNoArena(_default_ap_version_);
}
inline void SolverParameter::set_ap_version(const ::std::string& value) {
  set_has_ap_version();
  ap_version_.SetNoArena(_default_ap_version_, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.ap_version)
}
inline void SolverParameter::set_ap_version(const char* value) {
  set_has_ap_version();
  ap_version_.SetNoArena(_default_ap_version_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.ap_version)
}
inline void SolverParameter::set_ap_version(const char* value, size_t size) {
  set_has_ap_version();
  ap_version_.SetNoArena(_default_ap_version_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.ap_version)
}
inline ::std::string* SolverParameter::mutable_ap_version() {
  set_has_ap_version();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.ap_version)
  return ap_version_.MutableNoArena(_default_ap_version_);
}
inline ::std::string* SolverParameter::release_ap_version() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.ap_version)
  clear_has_ap_version();
  return ap_version_.ReleaseNoArena(_default_ap_version_);
}
inline void SolverParameter::set_allocated_ap_version(::std::string* ap_version) {
  if (ap_version != NULL) {
    set_has_ap_version();
  } else {
    clear_has_ap_version();
  }
  ap_version_.SetAllocatedNoArena(_default_ap_version_, ap_version);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.ap_version)
}

// repeated int32 test_iter = 3;
inline int SolverParameter::test_iter_size() const {
  return test_iter_.size();
}
inline void SolverParameter::clear_test_iter() {
  test_iter_.Clear();
}
inline ::google::protobuf::int32 SolverParameter::test_iter(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_iter)
  return test_iter_.Get(index);
}
inline void SolverParameter::set_test_iter(int index, ::google::protobuf::int32 value) {
  test_iter_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_iter)
}
inline void SolverParameter::add_test_iter(::google::protobuf::int32 value) {
  test_iter_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.test_iter)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::test_iter() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.test_iter)
  return test_iter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_test_iter() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.test_iter)
  return &test_iter_;
}

// optional int32 test_interval = 4 [default = 0];
inline bool SolverParameter::has_test_interval() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SolverParameter::set_has_test_interval() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SolverParameter::clear_has_test_interval() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SolverParameter::clear_test_interval() {
  test_interval_ = 0;
  clear_has_test_interval();
}
inline ::google::protobuf::int32 SolverParameter::test_interval() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_interval)
  return test_interval_;
}
inline void SolverParameter::set_test_interval(::google::protobuf::int32 value) {
  set_has_test_interval();
  test_interval_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_interval)
}

// optional bool test_compute_loss = 19 [default = false];
inline bool SolverParameter::has_test_compute_loss() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SolverParameter::set_has_test_compute_loss() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SolverParameter::clear_has_test_compute_loss() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SolverParameter::clear_test_compute_loss() {
  test_compute_loss_ = false;
  clear_has_test_compute_loss();
}
inline bool SolverParameter::test_compute_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_compute_loss)
  return test_compute_loss_;
}
inline void SolverParameter::set_test_compute_loss(bool value) {
  set_has_test_compute_loss();
  test_compute_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_compute_loss)
}

// optional bool test_initialization = 32 [default = true];
inline bool SolverParameter::has_test_initialization() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SolverParameter::set_has_test_initialization() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SolverParameter::clear_has_test_initialization() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SolverParameter::clear_test_initialization() {
  test_initialization_ = true;
  clear_has_test_initialization();
}
inline bool SolverParameter::test_initialization() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.test_initialization)
  return test_initialization_;
}
inline void SolverParameter::set_test_initialization(bool value) {
  set_has_test_initialization();
  test_initialization_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.test_initialization)
}

// optional float base_lr = 5;
inline bool SolverParameter::has_base_lr() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SolverParameter::set_has_base_lr() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SolverParameter::clear_has_base_lr() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SolverParameter::clear_base_lr() {
  base_lr_ = 0;
  clear_has_base_lr();
}
inline float SolverParameter::base_lr() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.base_lr)
  return base_lr_;
}
inline void SolverParameter::set_base_lr(float value) {
  set_has_base_lr();
  base_lr_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.base_lr)
}

// optional int32 display = 6;
inline bool SolverParameter::has_display() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SolverParameter::set_has_display() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SolverParameter::clear_has_display() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SolverParameter::clear_display() {
  display_ = 0;
  clear_has_display();
}
inline ::google::protobuf::int32 SolverParameter::display() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.display)
  return display_;
}
inline void SolverParameter::set_display(::google::protobuf::int32 value) {
  set_has_display();
  display_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.display)
}

// optional int32 average_loss = 33 [default = 1];
inline bool SolverParameter::has_average_loss() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SolverParameter::set_has_average_loss() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SolverParameter::clear_has_average_loss() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SolverParameter::clear_average_loss() {
  average_loss_ = 1;
  clear_has_average_loss();
}
inline ::google::protobuf::int32 SolverParameter::average_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.average_loss)
  return average_loss_;
}
inline void SolverParameter::set_average_loss(::google::protobuf::int32 value) {
  set_has_average_loss();
  average_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.average_loss)
}

// optional int32 max_iter = 7;
inline bool SolverParameter::has_max_iter() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SolverParameter::set_has_max_iter() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SolverParameter::clear_has_max_iter() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SolverParameter::clear_max_iter() {
  max_iter_ = 0;
  clear_has_max_iter();
}
inline ::google::protobuf::int32 SolverParameter::max_iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.max_iter)
  return max_iter_;
}
inline void SolverParameter::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.max_iter)
}

// optional int32 iter_size = 36 [default = 1];
inline bool SolverParameter::has_iter_size() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SolverParameter::set_has_iter_size() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SolverParameter::clear_has_iter_size() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SolverParameter::clear_iter_size() {
  iter_size_ = 1;
  clear_has_iter_size();
}
inline ::google::protobuf::int32 SolverParameter::iter_size() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.iter_size)
  return iter_size_;
}
inline void SolverParameter::set_iter_size(::google::protobuf::int32 value) {
  set_has_iter_size();
  iter_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.iter_size)
}

// optional string lr_policy = 8;
inline bool SolverParameter::has_lr_policy() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SolverParameter::set_has_lr_policy() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SolverParameter::clear_has_lr_policy() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SolverParameter::clear_lr_policy() {
  lr_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lr_policy();
}
inline const ::std::string& SolverParameter::lr_policy() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.lr_policy)
  return lr_policy_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_lr_policy(const ::std::string& value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.lr_policy)
}
inline void SolverParameter::set_lr_policy(const char* value) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.lr_policy)
}
inline void SolverParameter::set_lr_policy(const char* value, size_t size) {
  set_has_lr_policy();
  lr_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.lr_policy)
}
inline ::std::string* SolverParameter::mutable_lr_policy() {
  set_has_lr_policy();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.lr_policy)
  return lr_policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_lr_policy() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.lr_policy)
  clear_has_lr_policy();
  return lr_policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_lr_policy(::std::string* lr_policy) {
  if (lr_policy != NULL) {
    set_has_lr_policy();
  } else {
    clear_has_lr_policy();
  }
  lr_policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lr_policy);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.lr_policy)
}

// optional float gamma = 9;
inline bool SolverParameter::has_gamma() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SolverParameter::set_has_gamma() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SolverParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SolverParameter::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
inline float SolverParameter::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.gamma)
  return gamma_;
}
inline void SolverParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.gamma)
}

// optional float power = 10;
inline bool SolverParameter::has_power() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SolverParameter::set_has_power() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SolverParameter::clear_has_power() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SolverParameter::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline float SolverParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.power)
  return power_;
}
inline void SolverParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.power)
}

// optional float momentum = 11;
inline bool SolverParameter::has_momentum() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SolverParameter::set_has_momentum() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SolverParameter::clear_has_momentum() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SolverParameter::clear_momentum() {
  momentum_ = 0;
  clear_has_momentum();
}
inline float SolverParameter::momentum() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.momentum)
  return momentum_;
}
inline void SolverParameter::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.momentum)
}

// optional float weight_decay = 12;
inline bool SolverParameter::has_weight_decay() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SolverParameter::set_has_weight_decay() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SolverParameter::clear_has_weight_decay() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SolverParameter::clear_weight_decay() {
  weight_decay_ = 0;
  clear_has_weight_decay();
}
inline float SolverParameter::weight_decay() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.weight_decay)
  return weight_decay_;
}
inline void SolverParameter::set_weight_decay(float value) {
  set_has_weight_decay();
  weight_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.weight_decay)
}

// optional string regularization_type = 29 [default = "L2"];
inline bool SolverParameter::has_regularization_type() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SolverParameter::set_has_regularization_type() {
  _has_bits_[1] |= 0x00000004u;
}
inline void SolverParameter::clear_has_regularization_type() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void SolverParameter::clear_regularization_type() {
  regularization_type_.ClearToDefaultNoArena(_default_regularization_type_);
  clear_has_regularization_type();
}
inline const ::std::string& SolverParameter::regularization_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.regularization_type)
  return regularization_type_.GetNoArena(_default_regularization_type_);
}
inline void SolverParameter::set_regularization_type(const ::std::string& value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(_default_regularization_type_, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.regularization_type)
}
inline void SolverParameter::set_regularization_type(const char* value) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(_default_regularization_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.regularization_type)
}
inline void SolverParameter::set_regularization_type(const char* value, size_t size) {
  set_has_regularization_type();
  regularization_type_.SetNoArena(_default_regularization_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.regularization_type)
}
inline ::std::string* SolverParameter::mutable_regularization_type() {
  set_has_regularization_type();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.regularization_type)
  return regularization_type_.MutableNoArena(_default_regularization_type_);
}
inline ::std::string* SolverParameter::release_regularization_type() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.regularization_type)
  clear_has_regularization_type();
  return regularization_type_.ReleaseNoArena(_default_regularization_type_);
}
inline void SolverParameter::set_allocated_regularization_type(::std::string* regularization_type) {
  if (regularization_type != NULL) {
    set_has_regularization_type();
  } else {
    clear_has_regularization_type();
  }
  regularization_type_.SetAllocatedNoArena(_default_regularization_type_, regularization_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.regularization_type)
}

// optional int32 stepsize = 13;
inline bool SolverParameter::has_stepsize() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SolverParameter::set_has_stepsize() {
  _has_bits_[1] |= 0x00000008u;
}
inline void SolverParameter::clear_has_stepsize() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void SolverParameter::clear_stepsize() {
  stepsize_ = 0;
  clear_has_stepsize();
}
inline ::google::protobuf::int32 SolverParameter::stepsize() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.stepsize)
  return stepsize_;
}
inline void SolverParameter::set_stepsize(::google::protobuf::int32 value) {
  set_has_stepsize();
  stepsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.stepsize)
}

// repeated int32 stepvalue = 34;
inline int SolverParameter::stepvalue_size() const {
  return stepvalue_.size();
}
inline void SolverParameter::clear_stepvalue() {
  stepvalue_.Clear();
}
inline ::google::protobuf::int32 SolverParameter::stepvalue(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.stepvalue)
  return stepvalue_.Get(index);
}
inline void SolverParameter::set_stepvalue(int index, ::google::protobuf::int32 value) {
  stepvalue_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.stepvalue)
}
inline void SolverParameter::add_stepvalue(::google::protobuf::int32 value) {
  stepvalue_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.stepvalue)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::stepvalue() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.stepvalue)
  return stepvalue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_stepvalue() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.stepvalue)
  return &stepvalue_;
}

// repeated int32 plateau_winsize = 43;
inline int SolverParameter::plateau_winsize_size() const {
  return plateau_winsize_.size();
}
inline void SolverParameter::clear_plateau_winsize() {
  plateau_winsize_.Clear();
}
inline ::google::protobuf::int32 SolverParameter::plateau_winsize(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.plateau_winsize)
  return plateau_winsize_.Get(index);
}
inline void SolverParameter::set_plateau_winsize(int index, ::google::protobuf::int32 value) {
  plateau_winsize_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.plateau_winsize)
}
inline void SolverParameter::add_plateau_winsize(::google::protobuf::int32 value) {
  plateau_winsize_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SolverParameter.plateau_winsize)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SolverParameter::plateau_winsize() const {
  // @@protoc_insertion_point(field_list:caffe.SolverParameter.plateau_winsize)
  return plateau_winsize_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SolverParameter::mutable_plateau_winsize() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverParameter.plateau_winsize)
  return &plateau_winsize_;
}

// optional float clip_gradients = 35 [default = -1];
inline bool SolverParameter::has_clip_gradients() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void SolverParameter::set_has_clip_gradients() {
  _has_bits_[1] |= 0x00000040u;
}
inline void SolverParameter::clear_has_clip_gradients() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void SolverParameter::clear_clip_gradients() {
  clip_gradients_ = -1;
  clear_has_clip_gradients();
}
inline float SolverParameter::clip_gradients() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.clip_gradients)
  return clip_gradients_;
}
inline void SolverParameter::set_clip_gradients(float value) {
  set_has_clip_gradients();
  clip_gradients_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.clip_gradients)
}

// optional int32 snapshot = 14 [default = 0];
inline bool SolverParameter::has_snapshot() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void SolverParameter::set_has_snapshot() {
  _has_bits_[1] |= 0x00000080u;
}
inline void SolverParameter::clear_has_snapshot() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void SolverParameter::clear_snapshot() {
  snapshot_ = 0;
  clear_has_snapshot();
}
inline ::google::protobuf::int32 SolverParameter::snapshot() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot)
  return snapshot_;
}
inline void SolverParameter::set_snapshot(::google::protobuf::int32 value) {
  set_has_snapshot();
  snapshot_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot)
}

// optional string snapshot_prefix = 15;
inline bool SolverParameter::has_snapshot_prefix() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void SolverParameter::set_has_snapshot_prefix() {
  _has_bits_[1] |= 0x00000100u;
}
inline void SolverParameter::clear_has_snapshot_prefix() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void SolverParameter::clear_snapshot_prefix() {
  snapshot_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_snapshot_prefix();
}
inline const ::std::string& SolverParameter::snapshot_prefix() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_prefix)
  return snapshot_prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_snapshot_prefix(const ::std::string& value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_prefix)
}
inline void SolverParameter::set_snapshot_prefix(const char* value) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.snapshot_prefix)
}
inline void SolverParameter::set_snapshot_prefix(const char* value, size_t size) {
  set_has_snapshot_prefix();
  snapshot_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.snapshot_prefix)
}
inline ::std::string* SolverParameter::mutable_snapshot_prefix() {
  set_has_snapshot_prefix();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.snapshot_prefix)
  return snapshot_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverParameter::release_snapshot_prefix() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.snapshot_prefix)
  clear_has_snapshot_prefix();
  return snapshot_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverParameter::set_allocated_snapshot_prefix(::std::string* snapshot_prefix) {
  if (snapshot_prefix != NULL) {
    set_has_snapshot_prefix();
  } else {
    clear_has_snapshot_prefix();
  }
  snapshot_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot_prefix);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.snapshot_prefix)
}

// optional bool snapshot_diff = 16 [default = false];
inline bool SolverParameter::has_snapshot_diff() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void SolverParameter::set_has_snapshot_diff() {
  _has_bits_[1] |= 0x00000200u;
}
inline void SolverParameter::clear_has_snapshot_diff() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void SolverParameter::clear_snapshot_diff() {
  snapshot_diff_ = false;
  clear_has_snapshot_diff();
}
inline bool SolverParameter::snapshot_diff() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_diff)
  return snapshot_diff_;
}
inline void SolverParameter::set_snapshot_diff(bool value) {
  set_has_snapshot_diff();
  snapshot_diff_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_diff)
}

// optional .caffe.SolverParameter.SnapshotFormat snapshot_format = 37 [default = BINARYPROTO];
inline bool SolverParameter::has_snapshot_format() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void SolverParameter::set_has_snapshot_format() {
  _has_bits_[1] |= 0x00000400u;
}
inline void SolverParameter::clear_has_snapshot_format() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void SolverParameter::clear_snapshot_format() {
  snapshot_format_ = 1;
  clear_has_snapshot_format();
}
inline ::caffe::SolverParameter_SnapshotFormat SolverParameter::snapshot_format() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_format)
  return static_cast< ::caffe::SolverParameter_SnapshotFormat >(snapshot_format_);
}
inline void SolverParameter::set_snapshot_format(::caffe::SolverParameter_SnapshotFormat value) {
  assert(::caffe::SolverParameter_SnapshotFormat_IsValid(value));
  set_has_snapshot_format();
  snapshot_format_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_format)
}

// optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];
inline bool SolverParameter::has_solver_mode() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void SolverParameter::set_has_solver_mode() {
  _has_bits_[1] |= 0x00000800u;
}
inline void SolverParameter::clear_has_solver_mode() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void SolverParameter::clear_solver_mode() {
  solver_mode_ = 1;
  clear_has_solver_mode();
}
inline ::caffe::SolverParameter_SolverMode SolverParameter::solver_mode() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_mode)
  return static_cast< ::caffe::SolverParameter_SolverMode >(solver_mode_);
}
inline void SolverParameter::set_solver_mode(::caffe::SolverParameter_SolverMode value) {
  assert(::caffe::SolverParameter_SolverMode_IsValid(value));
  set_has_solver_mode();
  solver_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_mode)
}

// optional int32 device_id = 18 [default = 0];
inline bool SolverParameter::has_device_id() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void SolverParameter::set_has_device_id() {
  _has_bits_[1] |= 0x00001000u;
}
inline void SolverParameter::clear_has_device_id() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void SolverParameter::clear_device_id() {
  device_id_ = 0;
  clear_has_device_id();
}
inline ::google::protobuf::int32 SolverParameter::device_id() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.device_id)
  return device_id_;
}
inline void SolverParameter::set_device_id(::google::protobuf::int32 value) {
  set_has_device_id();
  device_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.device_id)
}

// optional int64 random_seed = 20 [default = -1];
inline bool SolverParameter::has_random_seed() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void SolverParameter::set_has_random_seed() {
  _has_bits_[1] |= 0x00002000u;
}
inline void SolverParameter::clear_has_random_seed() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void SolverParameter::clear_random_seed() {
  random_seed_ = GOOGLE_LONGLONG(-1);
  clear_has_random_seed();
}
inline ::google::protobuf::int64 SolverParameter::random_seed() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.random_seed)
  return random_seed_;
}
inline void SolverParameter::set_random_seed(::google::protobuf::int64 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.random_seed)
}

// optional string type = 40 [default = "SGD"];
inline bool SolverParameter::has_type() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void SolverParameter::set_has_type() {
  _has_bits_[1] |= 0x00004000u;
}
inline void SolverParameter::clear_has_type() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void SolverParameter::clear_type() {
  type_.ClearToDefaultNoArena(_default_type_);
  clear_has_type();
}
inline const ::std::string& SolverParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.type)
  return type_.GetNoArena(_default_type_);
}
inline void SolverParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(_default_type_, value);
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.type)
}
inline void SolverParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(_default_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverParameter.type)
}
inline void SolverParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(_default_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverParameter.type)
}
inline ::std::string* SolverParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.SolverParameter.type)
  return type_.MutableNoArena(_default_type_);
}
inline ::std::string* SolverParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.SolverParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(_default_type_);
}
inline void SolverParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(_default_type_, type);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverParameter.type)
}

// optional float delta = 31 [default = 1e-08];
inline bool SolverParameter::has_delta() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void SolverParameter::set_has_delta() {
  _has_bits_[1] |= 0x00008000u;
}
inline void SolverParameter::clear_has_delta() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void SolverParameter::clear_delta() {
  delta_ = 1e-08f;
  clear_has_delta();
}
inline float SolverParameter::delta() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.delta)
  return delta_;
}
inline void SolverParameter::set_delta(float value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.delta)
}

// optional float momentum2 = 39 [default = 0.999];
inline bool SolverParameter::has_momentum2() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void SolverParameter::set_has_momentum2() {
  _has_bits_[1] |= 0x00010000u;
}
inline void SolverParameter::clear_has_momentum2() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void SolverParameter::clear_momentum2() {
  momentum2_ = 0.999f;
  clear_has_momentum2();
}
inline float SolverParameter::momentum2() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.momentum2)
  return momentum2_;
}
inline void SolverParameter::set_momentum2(float value) {
  set_has_momentum2();
  momentum2_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.momentum2)
}

// optional float rms_decay = 38 [default = 0.99];
inline bool SolverParameter::has_rms_decay() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void SolverParameter::set_has_rms_decay() {
  _has_bits_[1] |= 0x00020000u;
}
inline void SolverParameter::clear_has_rms_decay() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void SolverParameter::clear_rms_decay() {
  rms_decay_ = 0.99f;
  clear_has_rms_decay();
}
inline float SolverParameter::rms_decay() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.rms_decay)
  return rms_decay_;
}
inline void SolverParameter::set_rms_decay(float value) {
  set_has_rms_decay();
  rms_decay_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.rms_decay)
}

// optional bool debug_info = 23 [default = false];
inline bool SolverParameter::has_debug_info() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void SolverParameter::set_has_debug_info() {
  _has_bits_[1] |= 0x00040000u;
}
inline void SolverParameter::clear_has_debug_info() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void SolverParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
inline bool SolverParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.debug_info)
  return debug_info_;
}
inline void SolverParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.debug_info)
}

// optional bool snapshot_after_train = 28 [default = true];
inline bool SolverParameter::has_snapshot_after_train() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void SolverParameter::set_has_snapshot_after_train() {
  _has_bits_[1] |= 0x00080000u;
}
inline void SolverParameter::clear_has_snapshot_after_train() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void SolverParameter::clear_snapshot_after_train() {
  snapshot_after_train_ = true;
  clear_has_snapshot_after_train();
}
inline bool SolverParameter::snapshot_after_train() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.snapshot_after_train)
  return snapshot_after_train_;
}
inline void SolverParameter::set_snapshot_after_train(bool value) {
  set_has_snapshot_after_train();
  snapshot_after_train_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.snapshot_after_train)
}

// optional .caffe.SolverParameter.SolverType solver_type = 30 [default = SGD];
inline bool SolverParameter::has_solver_type() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void SolverParameter::set_has_solver_type() {
  _has_bits_[1] |= 0x00100000u;
}
inline void SolverParameter::clear_has_solver_type() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void SolverParameter::clear_solver_type() {
  solver_type_ = 0;
  clear_has_solver_type();
}
inline ::caffe::SolverParameter_SolverType SolverParameter::solver_type() const {
  // @@protoc_insertion_point(field_get:caffe.SolverParameter.solver_type)
  return static_cast< ::caffe::SolverParameter_SolverType >(solver_type_);
}
inline void SolverParameter::set_solver_type(::caffe::SolverParameter_SolverType value) {
  assert(::caffe::SolverParameter_SolverType_IsValid(value));
  set_has_solver_type();
  solver_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverParameter.solver_type)
}

// -------------------------------------------------------------------

// SolverState

// optional int32 iter = 1;
inline bool SolverState::has_iter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolverState::set_has_iter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolverState::clear_has_iter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolverState::clear_iter() {
  iter_ = 0;
  clear_has_iter();
}
inline ::google::protobuf::int32 SolverState::iter() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.iter)
  return iter_;
}
inline void SolverState::set_iter(::google::protobuf::int32 value) {
  set_has_iter();
  iter_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.iter)
}

// optional string learned_net = 2;
inline bool SolverState::has_learned_net() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolverState::set_has_learned_net() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolverState::clear_has_learned_net() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolverState::clear_learned_net() {
  learned_net_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_learned_net();
}
inline const ::std::string& SolverState::learned_net() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.learned_net)
  return learned_net_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverState::set_learned_net(const ::std::string& value) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SolverState.learned_net)
}
inline void SolverState::set_learned_net(const char* value) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SolverState.learned_net)
}
inline void SolverState::set_learned_net(const char* value, size_t size) {
  set_has_learned_net();
  learned_net_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SolverState.learned_net)
}
inline ::std::string* SolverState::mutable_learned_net() {
  set_has_learned_net();
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.learned_net)
  return learned_net_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolverState::release_learned_net() {
  // @@protoc_insertion_point(field_release:caffe.SolverState.learned_net)
  clear_has_learned_net();
  return learned_net_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolverState::set_allocated_learned_net(::std::string* learned_net) {
  if (learned_net != NULL) {
    set_has_learned_net();
  } else {
    clear_has_learned_net();
  }
  learned_net_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), learned_net);
  // @@protoc_insertion_point(field_set_allocated:caffe.SolverState.learned_net)
}

// repeated .caffe.BlobProto history = 3;
inline int SolverState::history_size() const {
  return history_.size();
}
inline void SolverState::clear_history() {
  history_.Clear();
}
inline const ::caffe::BlobProto& SolverState::history(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.history)
  return history_.Get(index);
}
inline ::caffe::BlobProto* SolverState::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.SolverState.history)
  return history_.Mutable(index);
}
inline ::caffe::BlobProto* SolverState::add_history() {
  // @@protoc_insertion_point(field_add:caffe.SolverState.history)
  return history_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
SolverState::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SolverState.history)
  return &history_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
SolverState::history() const {
  // @@protoc_insertion_point(field_list:caffe.SolverState.history)
  return history_;
}

// optional int32 current_step = 4 [default = 0];
inline bool SolverState::has_current_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SolverState::set_has_current_step() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SolverState::clear_has_current_step() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SolverState::clear_current_step() {
  current_step_ = 0;
  clear_has_current_step();
}
inline ::google::protobuf::int32 SolverState::current_step() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.current_step)
  return current_step_;
}
inline void SolverState::set_current_step(::google::protobuf::int32 value) {
  set_has_current_step();
  current_step_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.current_step)
}

// optional float minimum_loss = 5 [default = 1e+38];
inline bool SolverState::has_minimum_loss() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SolverState::set_has_minimum_loss() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SolverState::clear_has_minimum_loss() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SolverState::clear_minimum_loss() {
  minimum_loss_ = 1e+38f;
  clear_has_minimum_loss();
}
inline float SolverState::minimum_loss() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.minimum_loss)
  return minimum_loss_;
}
inline void SolverState::set_minimum_loss(float value) {
  set_has_minimum_loss();
  minimum_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.minimum_loss)
}

// optional int32 iter_last_event = 6 [default = 0];
inline bool SolverState::has_iter_last_event() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SolverState::set_has_iter_last_event() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SolverState::clear_has_iter_last_event() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SolverState::clear_iter_last_event() {
  iter_last_event_ = 0;
  clear_has_iter_last_event();
}
inline ::google::protobuf::int32 SolverState::iter_last_event() const {
  // @@protoc_insertion_point(field_get:caffe.SolverState.iter_last_event)
  return iter_last_event_;
}
inline void SolverState::set_iter_last_event(::google::protobuf::int32 value) {
  set_has_iter_last_event();
  iter_last_event_ = value;
  // @@protoc_insertion_point(field_set:caffe.SolverState.iter_last_event)
}

// -------------------------------------------------------------------

// NetState

// optional .caffe.Phase phase = 1 [default = TEST];
inline bool NetState::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetState::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetState::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetState::clear_phase() {
  phase_ = 1;
  clear_has_phase();
}
inline ::caffe::Phase NetState::phase() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
inline void NetState::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.phase)
}

// optional int32 level = 2 [default = 0];
inline bool NetState::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetState::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetState::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetState::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 NetState::level() const {
  // @@protoc_insertion_point(field_get:caffe.NetState.level)
  return level_;
}
inline void NetState::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetState.level)
}

// repeated string stage = 3;
inline int NetState::stage_size() const {
  return stage_.size();
}
inline void NetState::clear_stage() {
  stage_.Clear();
}
inline const ::std::string& NetState::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetState.stage)
  return stage_.Get(index);
}
inline ::std::string* NetState::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetState.stage)
  return stage_.Mutable(index);
}
inline void NetState::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetState.stage)
  stage_.Mutable(index)->assign(value);
}
inline void NetState::set_stage(int index, const char* value) {
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetState.stage)
}
inline void NetState::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetState.stage)
}
inline ::std::string* NetState::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetState.stage)
  return stage_.Add();
}
inline void NetState::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetState.stage)
}
inline void NetState::add_stage(const char* value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetState.stage)
}
inline void NetState::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetState.stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetState::stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetState.stage)
  return stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetState::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetState.stage)
  return &stage_;
}

// -------------------------------------------------------------------

// NetStateRule

// optional .caffe.Phase phase = 1;
inline bool NetStateRule::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetStateRule::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetStateRule::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetStateRule::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::caffe::Phase NetStateRule::phase() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
inline void NetStateRule::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.phase)
}

// optional int32 min_level = 2;
inline bool NetStateRule::has_min_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetStateRule::set_has_min_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetStateRule::clear_has_min_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetStateRule::clear_min_level() {
  min_level_ = 0;
  clear_has_min_level();
}
inline ::google::protobuf::int32 NetStateRule::min_level() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.min_level)
  return min_level_;
}
inline void NetStateRule::set_min_level(::google::protobuf::int32 value) {
  set_has_min_level();
  min_level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.min_level)
}

// optional int32 max_level = 3;
inline bool NetStateRule::has_max_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetStateRule::set_has_max_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetStateRule::clear_has_max_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetStateRule::clear_max_level() {
  max_level_ = 0;
  clear_has_max_level();
}
inline ::google::protobuf::int32 NetStateRule::max_level() const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.max_level)
  return max_level_;
}
inline void NetStateRule::set_max_level(::google::protobuf::int32 value) {
  set_has_max_level();
  max_level_ = value;
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.max_level)
}

// repeated string stage = 4;
inline int NetStateRule::stage_size() const {
  return stage_.size();
}
inline void NetStateRule::clear_stage() {
  stage_.Clear();
}
inline const ::std::string& NetStateRule::stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.stage)
  return stage_.Get(index);
}
inline ::std::string* NetStateRule::mutable_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetStateRule.stage)
  return stage_.Mutable(index);
}
inline void NetStateRule::set_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.stage)
  stage_.Mutable(index)->assign(value);
}
inline void NetStateRule::set_stage(int index, const char* value) {
  stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetStateRule.stage)
}
inline void NetStateRule::set_stage(int index, const char* value, size_t size) {
  stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetStateRule.stage)
}
inline ::std::string* NetStateRule::add_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetStateRule.stage)
  return stage_.Add();
}
inline void NetStateRule::add_stage(const ::std::string& value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.stage)
}
inline void NetStateRule::add_stage(const char* value) {
  stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetStateRule.stage)
}
inline void NetStateRule::add_stage(const char* value, size_t size) {
  stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetStateRule.stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetStateRule.stage)
  return stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetStateRule.stage)
  return &stage_;
}

// repeated string not_stage = 5;
inline int NetStateRule::not_stage_size() const {
  return not_stage_.size();
}
inline void NetStateRule::clear_not_stage() {
  not_stage_.Clear();
}
inline const ::std::string& NetStateRule::not_stage(int index) const {
  // @@protoc_insertion_point(field_get:caffe.NetStateRule.not_stage)
  return not_stage_.Get(index);
}
inline ::std::string* NetStateRule::mutable_not_stage(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.NetStateRule.not_stage)
  return not_stage_.Mutable(index);
}
inline void NetStateRule::set_not_stage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.NetStateRule.not_stage)
  not_stage_.Mutable(index)->assign(value);
}
inline void NetStateRule::set_not_stage(int index, const char* value) {
  not_stage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.NetStateRule.not_stage)
}
inline void NetStateRule::set_not_stage(int index, const char* value, size_t size) {
  not_stage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.NetStateRule.not_stage)
}
inline ::std::string* NetStateRule::add_not_stage() {
  // @@protoc_insertion_point(field_add_mutable:caffe.NetStateRule.not_stage)
  return not_stage_.Add();
}
inline void NetStateRule::add_not_stage(const ::std::string& value) {
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(const char* value) {
  not_stage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.NetStateRule.not_stage)
}
inline void NetStateRule::add_not_stage(const char* value, size_t size) {
  not_stage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.NetStateRule.not_stage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetStateRule::not_stage() const {
  // @@protoc_insertion_point(field_list:caffe.NetStateRule.not_stage)
  return not_stage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetStateRule::mutable_not_stage() {
  // @@protoc_insertion_point(field_mutable_list:caffe.NetStateRule.not_stage)
  return &not_stage_;
}

// -------------------------------------------------------------------

// ParamSpec

// optional string name = 1;
inline bool ParamSpec::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamSpec::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamSpec::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamSpec::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ParamSpec::name() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamSpec::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.name)
}
inline void ParamSpec::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ParamSpec.name)
}
inline void ParamSpec::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ParamSpec.name)
}
inline ::std::string* ParamSpec::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.ParamSpec.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamSpec::release_name() {
  // @@protoc_insertion_point(field_release:caffe.ParamSpec.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamSpec::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.ParamSpec.name)
}

// optional .caffe.ParamSpec.DimCheckMode share_mode = 2;
inline bool ParamSpec::has_share_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParamSpec::set_has_share_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParamSpec::clear_has_share_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParamSpec::clear_share_mode() {
  share_mode_ = 0;
  clear_has_share_mode();
}
inline ::caffe::ParamSpec_DimCheckMode ParamSpec::share_mode() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.share_mode)
  return static_cast< ::caffe::ParamSpec_DimCheckMode >(share_mode_);
}
inline void ParamSpec::set_share_mode(::caffe::ParamSpec_DimCheckMode value) {
  assert(::caffe::ParamSpec_DimCheckMode_IsValid(value));
  set_has_share_mode();
  share_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.share_mode)
}

// optional float lr_mult = 3 [default = 0];
inline bool ParamSpec::has_lr_mult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParamSpec::set_has_lr_mult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParamSpec::clear_has_lr_mult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParamSpec::clear_lr_mult() {
  lr_mult_ = 0;
  clear_has_lr_mult();
}
inline float ParamSpec::lr_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.lr_mult)
  return lr_mult_;
}
inline void ParamSpec::set_lr_mult(float value) {
  set_has_lr_mult();
  lr_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.lr_mult)
}

// optional float decay_mult = 4 [default = 0];
inline bool ParamSpec::has_decay_mult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParamSpec::set_has_decay_mult() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParamSpec::clear_has_decay_mult() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParamSpec::clear_decay_mult() {
  decay_mult_ = 0;
  clear_has_decay_mult();
}
inline float ParamSpec::decay_mult() const {
  // @@protoc_insertion_point(field_get:caffe.ParamSpec.decay_mult)
  return decay_mult_;
}
inline void ParamSpec::set_decay_mult(float value) {
  set_has_decay_mult();
  decay_mult_ = value;
  // @@protoc_insertion_point(field_set:caffe.ParamSpec.decay_mult)
}

// -------------------------------------------------------------------

// LayerParameter

// optional string name = 1;
inline bool LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.name)
}
inline ::std::string* LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.name)
}

// optional string type = 2;
inline bool LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.type)
}
inline void LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.type)
}
inline ::std::string* LayerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.type)
}

// repeated string bottom = 3;
inline int LayerParameter::bottom_size() const {
  return bottom_.size();
}
inline void LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bottom)
  return bottom_.Get(index);
}
inline ::std::string* LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.bottom)
}
inline ::std::string* LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.bottom)
  return bottom_.Add();
}
inline void LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.bottom)
}
inline void LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.bottom)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.bottom)
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 4;
inline int LayerParameter::top_size() const {
  return top_.size();
}
inline void LayerParameter::clear_top() {
  top_.Clear();
}
inline const ::std::string& LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.top)
  return top_.Get(index);
}
inline ::std::string* LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.top)
  return top_.Mutable(index);
}
inline void LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
inline void LayerParameter::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.LayerParameter.top)
}
inline void LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.LayerParameter.top)
}
inline ::std::string* LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:caffe.LayerParameter.top)
  return top_.Add();
}
inline void LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.LayerParameter.top)
}
inline void LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.LayerParameter.top)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.top)
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.top)
  return &top_;
}

// optional .caffe.Phase phase = 10;
inline bool LayerParameter::has_phase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_phase() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LayerParameter::clear_has_phase() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LayerParameter::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
inline ::caffe::Phase LayerParameter::phase() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.phase)
  return static_cast< ::caffe::Phase >(phase_);
}
inline void LayerParameter::set_phase(::caffe::Phase value) {
  assert(::caffe::Phase_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.phase)
}

// repeated float loss_weight = 5;
inline int LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
inline void LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
inline float LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
inline void LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.loss_weight)
}
inline void LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.loss_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.loss_weight)
  return loss_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.loss_weight)
  return &loss_weight_;
}

// repeated .caffe.ParamSpec param = 6;
inline int LayerParameter::param_size() const {
  return param_.size();
}
inline void LayerParameter::clear_param() {
  param_.Clear();
}
inline const ::caffe::ParamSpec& LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.param)
  return param_.Get(index);
}
inline ::caffe::ParamSpec* LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.param)
  return param_.Mutable(index);
}
inline ::caffe::ParamSpec* LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.param)
  return param_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >*
LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.param)
  return &param_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::ParamSpec >&
LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.param)
  return param_;
}

// repeated .caffe.BlobProto blobs = 7;
inline int LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.blobs)
  return blobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.blobs)
  return &blobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.blobs)
  return blobs_;
}

// optional float weight_satvalue = 373 [default = -1];
inline bool LayerParameter::has_weight_satvalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_weight_satvalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LayerParameter::clear_has_weight_satvalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LayerParameter::clear_weight_satvalue() {
  weight_satvalue_ = -1;
  clear_has_weight_satvalue();
}
inline float LayerParameter::weight_satvalue() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.weight_satvalue)
  return weight_satvalue_;
}
inline void LayerParameter::set_weight_satvalue(float value) {
  set_has_weight_satvalue();
  weight_satvalue_ = value;
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.weight_satvalue)
}

// repeated bool propagate_down = 11;
inline int LayerParameter::propagate_down_size() const {
  return propagate_down_.size();
}
inline void LayerParameter::clear_propagate_down() {
  propagate_down_.Clear();
}
inline bool LayerParameter::propagate_down(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.propagate_down)
  return propagate_down_.Get(index);
}
inline void LayerParameter::set_propagate_down(int index, bool value) {
  propagate_down_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.LayerParameter.propagate_down)
}
inline void LayerParameter::add_propagate_down(bool value) {
  propagate_down_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.propagate_down)
}
inline const ::google::protobuf::RepeatedField< bool >&
LayerParameter::propagate_down() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.propagate_down)
  return propagate_down_;
}
inline ::google::protobuf::RepeatedField< bool >*
LayerParameter::mutable_propagate_down() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.propagate_down)
  return &propagate_down_;
}

// repeated .caffe.NetStateRule include = 8;
inline int LayerParameter::include_size() const {
  return include_.size();
}
inline void LayerParameter::clear_include() {
  include_.Clear();
}
inline const ::caffe::NetStateRule& LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.include)
  return include_.Get(index);
}
inline ::caffe::NetStateRule* LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.include)
  return include_.Mutable(index);
}
inline ::caffe::NetStateRule* LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.include)
  return include_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.include)
  return &include_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.include)
  return include_;
}

// repeated .caffe.NetStateRule exclude = 9;
inline int LayerParameter::exclude_size() const {
  return exclude_.size();
}
inline void LayerParameter::clear_exclude() {
  exclude_.Clear();
}
inline const ::caffe::NetStateRule& LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.exclude)
  return exclude_.Get(index);
}
inline ::caffe::NetStateRule* LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.exclude)
  return exclude_.Mutable(index);
}
inline ::caffe::NetStateRule* LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:caffe.LayerParameter.exclude)
  return exclude_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:caffe.LayerParameter.exclude)
  return &exclude_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:caffe.LayerParameter.exclude)
  return exclude_;
}

// optional .caffe.TransformationParameter transform_param = 100;
inline bool LayerParameter::has_transform_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_transform_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LayerParameter::clear_has_transform_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
  clear_has_transform_param();
}
inline const ::caffe::TransformationParameter& LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.transform_param)
  return transform_param_ != NULL ? *transform_param_ : *default_instance_->transform_param_;
}
inline ::caffe::TransformationParameter* LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) {
    transform_param_ = new ::caffe::TransformationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.transform_param)
  return transform_param_;
}
inline ::caffe::TransformationParameter* LayerParameter::release_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.transform_param)
  clear_has_transform_param();
  ::caffe::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_transform_param(::caffe::TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.transform_param)
}

// optional .caffe.PoseDataTransformationParameter pose_data_transform_param = 193;
inline bool LayerParameter::has_pose_data_transform_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_pose_data_transform_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LayerParameter::clear_has_pose_data_transform_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LayerParameter::clear_pose_data_transform_param() {
  if (pose_data_transform_param_ != NULL) pose_data_transform_param_->::caffe::PoseDataTransformationParameter::Clear();
  clear_has_pose_data_transform_param();
}
inline const ::caffe::PoseDataTransformationParameter& LayerParameter::pose_data_transform_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.pose_data_transform_param)
  return pose_data_transform_param_ != NULL ? *pose_data_transform_param_ : *default_instance_->pose_data_transform_param_;
}
inline ::caffe::PoseDataTransformationParameter* LayerParameter::mutable_pose_data_transform_param() {
  set_has_pose_data_transform_param();
  if (pose_data_transform_param_ == NULL) {
    pose_data_transform_param_ = new ::caffe::PoseDataTransformationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.pose_data_transform_param)
  return pose_data_transform_param_;
}
inline ::caffe::PoseDataTransformationParameter* LayerParameter::release_pose_data_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.pose_data_transform_param)
  clear_has_pose_data_transform_param();
  ::caffe::PoseDataTransformationParameter* temp = pose_data_transform_param_;
  pose_data_transform_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_pose_data_transform_param(::caffe::PoseDataTransformationParameter* pose_data_transform_param) {
  delete pose_data_transform_param_;
  pose_data_transform_param_ = pose_data_transform_param;
  if (pose_data_transform_param) {
    set_has_pose_data_transform_param();
  } else {
    clear_has_pose_data_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.pose_data_transform_param)
}

// optional .caffe.ReidTransformationParameter reid_transform_param = 199;
inline bool LayerParameter::has_reid_transform_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_reid_transform_param() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LayerParameter::clear_has_reid_transform_param() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LayerParameter::clear_reid_transform_param() {
  if (reid_transform_param_ != NULL) reid_transform_param_->::caffe::ReidTransformationParameter::Clear();
  clear_has_reid_transform_param();
}
inline const ::caffe::ReidTransformationParameter& LayerParameter::reid_transform_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reid_transform_param)
  return reid_transform_param_ != NULL ? *reid_transform_param_ : *default_instance_->reid_transform_param_;
}
inline ::caffe::ReidTransformationParameter* LayerParameter::mutable_reid_transform_param() {
  set_has_reid_transform_param();
  if (reid_transform_param_ == NULL) {
    reid_transform_param_ = new ::caffe::ReidTransformationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reid_transform_param)
  return reid_transform_param_;
}
inline ::caffe::ReidTransformationParameter* LayerParameter::release_reid_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reid_transform_param)
  clear_has_reid_transform_param();
  ::caffe::ReidTransformationParameter* temp = reid_transform_param_;
  reid_transform_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_reid_transform_param(::caffe::ReidTransformationParameter* reid_transform_param) {
  delete reid_transform_param_;
  reid_transform_param_ = reid_transform_param;
  if (reid_transform_param) {
    set_has_reid_transform_param();
  } else {
    clear_has_reid_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reid_transform_param)
}

// optional .caffe.UnifiedTransformationParameter unified_data_transform_param = 217;
inline bool LayerParameter::has_unified_data_transform_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_unified_data_transform_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LayerParameter::clear_has_unified_data_transform_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LayerParameter::clear_unified_data_transform_param() {
  if (unified_data_transform_param_ != NULL) unified_data_transform_param_->::caffe::UnifiedTransformationParameter::Clear();
  clear_has_unified_data_transform_param();
}
inline const ::caffe::UnifiedTransformationParameter& LayerParameter::unified_data_transform_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.unified_data_transform_param)
  return unified_data_transform_param_ != NULL ? *unified_data_transform_param_ : *default_instance_->unified_data_transform_param_;
}
inline ::caffe::UnifiedTransformationParameter* LayerParameter::mutable_unified_data_transform_param() {
  set_has_unified_data_transform_param();
  if (unified_data_transform_param_ == NULL) {
    unified_data_transform_param_ = new ::caffe::UnifiedTransformationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.unified_data_transform_param)
  return unified_data_transform_param_;
}
inline ::caffe::UnifiedTransformationParameter* LayerParameter::release_unified_data_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.unified_data_transform_param)
  clear_has_unified_data_transform_param();
  ::caffe::UnifiedTransformationParameter* temp = unified_data_transform_param_;
  unified_data_transform_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_unified_data_transform_param(::caffe::UnifiedTransformationParameter* unified_data_transform_param) {
  delete unified_data_transform_param_;
  unified_data_transform_param_ = unified_data_transform_param;
  if (unified_data_transform_param) {
    set_has_unified_data_transform_param();
  } else {
    clear_has_unified_data_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.unified_data_transform_param)
}

// optional .caffe.LossParameter loss_param = 101;
inline bool LayerParameter::has_loss_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_loss_param() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LayerParameter::clear_has_loss_param() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
  clear_has_loss_param();
}
inline const ::caffe::LossParameter& LayerParameter::loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.loss_param)
  return loss_param_ != NULL ? *loss_param_ : *default_instance_->loss_param_;
}
inline ::caffe::LossParameter* LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) {
    loss_param_ = new ::caffe::LossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.loss_param)
  return loss_param_;
}
inline ::caffe::LossParameter* LayerParameter::release_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.loss_param)
  clear_has_loss_param();
  ::caffe::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_loss_param(::caffe::LossParameter* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.loss_param)
}

// optional .caffe.AccuracyParameter accuracy_param = 102;
inline bool LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
  clear_has_accuracy_param();
}
inline const ::caffe::AccuracyParameter& LayerParameter::accuracy_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.accuracy_param)
  return accuracy_param_ != NULL ? *accuracy_param_ : *default_instance_->accuracy_param_;
}
inline ::caffe::AccuracyParameter* LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) {
    accuracy_param_ = new ::caffe::AccuracyParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.accuracy_param)
  return accuracy_param_;
}
inline ::caffe::AccuracyParameter* LayerParameter::release_accuracy_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.accuracy_param)
  clear_has_accuracy_param();
  ::caffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param) {
  delete accuracy_param_;
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.accuracy_param)
}

// optional .caffe.AnnotatedDataParameter annotated_data_param = 200;
inline bool LayerParameter::has_annotated_data_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_annotated_data_param() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LayerParameter::clear_has_annotated_data_param() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LayerParameter::clear_annotated_data_param() {
  if (annotated_data_param_ != NULL) annotated_data_param_->::caffe::AnnotatedDataParameter::Clear();
  clear_has_annotated_data_param();
}
inline const ::caffe::AnnotatedDataParameter& LayerParameter::annotated_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.annotated_data_param)
  return annotated_data_param_ != NULL ? *annotated_data_param_ : *default_instance_->annotated_data_param_;
}
inline ::caffe::AnnotatedDataParameter* LayerParameter::mutable_annotated_data_param() {
  set_has_annotated_data_param();
  if (annotated_data_param_ == NULL) {
    annotated_data_param_ = new ::caffe::AnnotatedDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.annotated_data_param)
  return annotated_data_param_;
}
inline ::caffe::AnnotatedDataParameter* LayerParameter::release_annotated_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.annotated_data_param)
  clear_has_annotated_data_param();
  ::caffe::AnnotatedDataParameter* temp = annotated_data_param_;
  annotated_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_annotated_data_param(::caffe::AnnotatedDataParameter* annotated_data_param) {
  delete annotated_data_param_;
  annotated_data_param_ = annotated_data_param;
  if (annotated_data_param) {
    set_has_annotated_data_param();
  } else {
    clear_has_annotated_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.annotated_data_param)
}

// optional .caffe.ArgMaxParameter argmax_param = 103;
inline bool LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
  clear_has_argmax_param();
}
inline const ::caffe::ArgMaxParameter& LayerParameter::argmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.argmax_param)
  return argmax_param_ != NULL ? *argmax_param_ : *default_instance_->argmax_param_;
}
inline ::caffe::ArgMaxParameter* LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) {
    argmax_param_ = new ::caffe::ArgMaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.argmax_param)
  return argmax_param_;
}
inline ::caffe::ArgMaxParameter* LayerParameter::release_argmax_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.argmax_param)
  clear_has_argmax_param();
  ::caffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param) {
  delete argmax_param_;
  argmax_param_ = argmax_param;
  if (argmax_param) {
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.argmax_param)
}

// optional .caffe.AllocateIdParameter allocate_id_param = 279;
inline bool LayerParameter::has_allocate_id_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_allocate_id_param() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LayerParameter::clear_has_allocate_id_param() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LayerParameter::clear_allocate_id_param() {
  if (allocate_id_param_ != NULL) allocate_id_param_->::caffe::AllocateIdParameter::Clear();
  clear_has_allocate_id_param();
}
inline const ::caffe::AllocateIdParameter& LayerParameter::allocate_id_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.allocate_id_param)
  return allocate_id_param_ != NULL ? *allocate_id_param_ : *default_instance_->allocate_id_param_;
}
inline ::caffe::AllocateIdParameter* LayerParameter::mutable_allocate_id_param() {
  set_has_allocate_id_param();
  if (allocate_id_param_ == NULL) {
    allocate_id_param_ = new ::caffe::AllocateIdParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.allocate_id_param)
  return allocate_id_param_;
}
inline ::caffe::AllocateIdParameter* LayerParameter::release_allocate_id_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.allocate_id_param)
  clear_has_allocate_id_param();
  ::caffe::AllocateIdParameter* temp = allocate_id_param_;
  allocate_id_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_allocate_id_param(::caffe::AllocateIdParameter* allocate_id_param) {
  delete allocate_id_param_;
  allocate_id_param_ = allocate_id_param;
  if (allocate_id_param) {
    set_has_allocate_id_param();
  } else {
    clear_has_allocate_id_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.allocate_id_param)
}

// optional .caffe.BatchNormParameter batch_norm_param = 139;
inline bool LayerParameter::has_batch_norm_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_batch_norm_param() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LayerParameter::clear_has_batch_norm_param() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LayerParameter::clear_batch_norm_param() {
  if (batch_norm_param_ != NULL) batch_norm_param_->::caffe::BatchNormParameter::Clear();
  clear_has_batch_norm_param();
}
inline const ::caffe::BatchNormParameter& LayerParameter::batch_norm_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.batch_norm_param)
  return batch_norm_param_ != NULL ? *batch_norm_param_ : *default_instance_->batch_norm_param_;
}
inline ::caffe::BatchNormParameter* LayerParameter::mutable_batch_norm_param() {
  set_has_batch_norm_param();
  if (batch_norm_param_ == NULL) {
    batch_norm_param_ = new ::caffe::BatchNormParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.batch_norm_param)
  return batch_norm_param_;
}
inline ::caffe::BatchNormParameter* LayerParameter::release_batch_norm_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.batch_norm_param)
  clear_has_batch_norm_param();
  ::caffe::BatchNormParameter* temp = batch_norm_param_;
  batch_norm_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_batch_norm_param(::caffe::BatchNormParameter* batch_norm_param) {
  delete batch_norm_param_;
  batch_norm_param_ = batch_norm_param;
  if (batch_norm_param) {
    set_has_batch_norm_param();
  } else {
    clear_has_batch_norm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.batch_norm_param)
}

// optional .caffe.BiasParameter bias_param = 141;
inline bool LayerParameter::has_bias_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_bias_param() {
  _has_bits_[0] |= 0x00400000u;
}
inline void LayerParameter::clear_has_bias_param() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void LayerParameter::clear_bias_param() {
  if (bias_param_ != NULL) bias_param_->::caffe::BiasParameter::Clear();
  clear_has_bias_param();
}
inline const ::caffe::BiasParameter& LayerParameter::bias_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bias_param)
  return bias_param_ != NULL ? *bias_param_ : *default_instance_->bias_param_;
}
inline ::caffe::BiasParameter* LayerParameter::mutable_bias_param() {
  set_has_bias_param();
  if (bias_param_ == NULL) {
    bias_param_ = new ::caffe::BiasParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bias_param)
  return bias_param_;
}
inline ::caffe::BiasParameter* LayerParameter::release_bias_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bias_param)
  clear_has_bias_param();
  ::caffe::BiasParameter* temp = bias_param_;
  bias_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_bias_param(::caffe::BiasParameter* bias_param) {
  delete bias_param_;
  bias_param_ = bias_param;
  if (bias_param) {
    set_has_bias_param();
  } else {
    clear_has_bias_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bias_param)
}

// optional .caffe.ConcatParameter concat_param = 104;
inline bool LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00800000u;
}
inline void LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
  clear_has_concat_param();
}
inline const ::caffe::ConcatParameter& LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.concat_param)
  return concat_param_ != NULL ? *concat_param_ : *default_instance_->concat_param_;
}
inline ::caffe::ConcatParameter* LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) {
    concat_param_ = new ::caffe::ConcatParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.concat_param)
  return concat_param_;
}
inline ::caffe::ConcatParameter* LayerParameter::release_concat_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.concat_param)
  clear_has_concat_param();
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.concat_param)
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 105;
inline bool LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x01000000u;
}
inline void LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
  clear_has_contrastive_loss_param();
}
inline const ::caffe::ContrastiveLossParameter& LayerParameter::contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_ != NULL ? *contrastive_loss_param_ : *default_instance_->contrastive_loss_param_;
}
inline ::caffe::ContrastiveLossParameter* LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) {
    contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_;
}
inline ::caffe::ContrastiveLossParameter* LayerParameter::release_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.contrastive_loss_param)
  clear_has_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param) {
  delete contrastive_loss_param_;
  contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.contrastive_loss_param)
}

// optional .caffe.ConvolutionParameter convolution_param = 106;
inline bool LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x02000000u;
}
inline void LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
inline const ::caffe::ConvolutionParameter& LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.convolution_param)
  return convolution_param_ != NULL ? *convolution_param_ : *default_instance_->convolution_param_;
}
inline ::caffe::ConvolutionParameter* LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) {
    convolution_param_ = new ::caffe::ConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.convolution_param)
  return convolution_param_;
}
inline ::caffe::ConvolutionParameter* LayerParameter::release_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.convolution_param)
  clear_has_convolution_param();
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.convolution_param)
}

// optional .caffe.CropParameter crop_param = 144;
inline bool LayerParameter::has_crop_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_crop_param() {
  _has_bits_[0] |= 0x04000000u;
}
inline void LayerParameter::clear_has_crop_param() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void LayerParameter::clear_crop_param() {
  if (crop_param_ != NULL) crop_param_->::caffe::CropParameter::Clear();
  clear_has_crop_param();
}
inline const ::caffe::CropParameter& LayerParameter::crop_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.crop_param)
  return crop_param_ != NULL ? *crop_param_ : *default_instance_->crop_param_;
}
inline ::caffe::CropParameter* LayerParameter::mutable_crop_param() {
  set_has_crop_param();
  if (crop_param_ == NULL) {
    crop_param_ = new ::caffe::CropParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.crop_param)
  return crop_param_;
}
inline ::caffe::CropParameter* LayerParameter::release_crop_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.crop_param)
  clear_has_crop_param();
  ::caffe::CropParameter* temp = crop_param_;
  crop_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_crop_param(::caffe::CropParameter* crop_param) {
  delete crop_param_;
  crop_param_ = crop_param;
  if (crop_param) {
    set_has_crop_param();
  } else {
    clear_has_crop_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.crop_param)
}

// optional .caffe.ConnectLimbParameter connect_limb_param = 168;
inline bool LayerParameter::has_connect_limb_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_connect_limb_param() {
  _has_bits_[0] |= 0x08000000u;
}
inline void LayerParameter::clear_has_connect_limb_param() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void LayerParameter::clear_connect_limb_param() {
  if (connect_limb_param_ != NULL) connect_limb_param_->::caffe::ConnectLimbParameter::Clear();
  clear_has_connect_limb_param();
}
inline const ::caffe::ConnectLimbParameter& LayerParameter::connect_limb_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.connect_limb_param)
  return connect_limb_param_ != NULL ? *connect_limb_param_ : *default_instance_->connect_limb_param_;
}
inline ::caffe::ConnectLimbParameter* LayerParameter::mutable_connect_limb_param() {
  set_has_connect_limb_param();
  if (connect_limb_param_ == NULL) {
    connect_limb_param_ = new ::caffe::ConnectLimbParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.connect_limb_param)
  return connect_limb_param_;
}
inline ::caffe::ConnectLimbParameter* LayerParameter::release_connect_limb_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.connect_limb_param)
  clear_has_connect_limb_param();
  ::caffe::ConnectLimbParameter* temp = connect_limb_param_;
  connect_limb_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_connect_limb_param(::caffe::ConnectLimbParameter* connect_limb_param) {
  delete connect_limb_param_;
  connect_limb_param_ = connect_limb_param;
  if (connect_limb_param) {
    set_has_connect_limb_param();
  } else {
    clear_has_connect_limb_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.connect_limb_param)
}

// optional .caffe.DataParameter data_param = 107;
inline bool LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x10000000u;
}
inline void LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
  clear_has_data_param();
}
inline const ::caffe::DataParameter& LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.data_param)
  return data_param_ != NULL ? *data_param_ : *default_instance_->data_param_;
}
inline ::caffe::DataParameter* LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) {
    data_param_ = new ::caffe::DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.data_param)
  return data_param_;
}
inline ::caffe::DataParameter* LayerParameter::release_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.data_param)
  clear_has_data_param();
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.data_param)
}

// optional .caffe.DetectionEvaluateParameter detection_evaluate_param = 205;
inline bool LayerParameter::has_detection_evaluate_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_detection_evaluate_param() {
  _has_bits_[0] |= 0x20000000u;
}
inline void LayerParameter::clear_has_detection_evaluate_param() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void LayerParameter::clear_detection_evaluate_param() {
  if (detection_evaluate_param_ != NULL) detection_evaluate_param_->::caffe::DetectionEvaluateParameter::Clear();
  clear_has_detection_evaluate_param();
}
inline const ::caffe::DetectionEvaluateParameter& LayerParameter::detection_evaluate_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.detection_evaluate_param)
  return detection_evaluate_param_ != NULL ? *detection_evaluate_param_ : *default_instance_->detection_evaluate_param_;
}
inline ::caffe::DetectionEvaluateParameter* LayerParameter::mutable_detection_evaluate_param() {
  set_has_detection_evaluate_param();
  if (detection_evaluate_param_ == NULL) {
    detection_evaluate_param_ = new ::caffe::DetectionEvaluateParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.detection_evaluate_param)
  return detection_evaluate_param_;
}
inline ::caffe::DetectionEvaluateParameter* LayerParameter::release_detection_evaluate_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.detection_evaluate_param)
  clear_has_detection_evaluate_param();
  ::caffe::DetectionEvaluateParameter* temp = detection_evaluate_param_;
  detection_evaluate_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_detection_evaluate_param(::caffe::DetectionEvaluateParameter* detection_evaluate_param) {
  delete detection_evaluate_param_;
  detection_evaluate_param_ = detection_evaluate_param;
  if (detection_evaluate_param) {
    set_has_detection_evaluate_param();
  } else {
    clear_has_detection_evaluate_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.detection_evaluate_param)
}

// optional .caffe.DetectionOutputParameter detection_output_param = 204;
inline bool LayerParameter::has_detection_output_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void LayerParameter::set_has_detection_output_param() {
  _has_bits_[0] |= 0x40000000u;
}
inline void LayerParameter::clear_has_detection_output_param() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void LayerParameter::clear_detection_output_param() {
  if (detection_output_param_ != NULL) detection_output_param_->::caffe::DetectionOutputParameter::Clear();
  clear_has_detection_output_param();
}
inline const ::caffe::DetectionOutputParameter& LayerParameter::detection_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.detection_output_param)
  return detection_output_param_ != NULL ? *detection_output_param_ : *default_instance_->detection_output_param_;
}
inline ::caffe::DetectionOutputParameter* LayerParameter::mutable_detection_output_param() {
  set_has_detection_output_param();
  if (detection_output_param_ == NULL) {
    detection_output_param_ = new ::caffe::DetectionOutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.detection_output_param)
  return detection_output_param_;
}
inline ::caffe::DetectionOutputParameter* LayerParameter::release_detection_output_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.detection_output_param)
  clear_has_detection_output_param();
  ::caffe::DetectionOutputParameter* temp = detection_output_param_;
  detection_output_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_detection_output_param(::caffe::DetectionOutputParameter* detection_output_param) {
  delete detection_output_param_;
  detection_output_param_ = detection_output_param;
  if (detection_output_param) {
    set_has_detection_output_param();
  } else {
    clear_has_detection_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.detection_output_param)
}

// optional .caffe.DetectionMcOutputParameter detection_mc_output_param = 192;
inline bool LayerParameter::has_detection_mc_output_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void LayerParameter::set_has_detection_mc_output_param() {
  _has_bits_[0] |= 0x80000000u;
}
inline void LayerParameter::clear_has_detection_mc_output_param() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void LayerParameter::clear_detection_mc_output_param() {
  if (detection_mc_output_param_ != NULL) detection_mc_output_param_->::caffe::DetectionMcOutputParameter::Clear();
  clear_has_detection_mc_output_param();
}
inline const ::caffe::DetectionMcOutputParameter& LayerParameter::detection_mc_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.detection_mc_output_param)
  return detection_mc_output_param_ != NULL ? *detection_mc_output_param_ : *default_instance_->detection_mc_output_param_;
}
inline ::caffe::DetectionMcOutputParameter* LayerParameter::mutable_detection_mc_output_param() {
  set_has_detection_mc_output_param();
  if (detection_mc_output_param_ == NULL) {
    detection_mc_output_param_ = new ::caffe::DetectionMcOutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.detection_mc_output_param)
  return detection_mc_output_param_;
}
inline ::caffe::DetectionMcOutputParameter* LayerParameter::release_detection_mc_output_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.detection_mc_output_param)
  clear_has_detection_mc_output_param();
  ::caffe::DetectionMcOutputParameter* temp = detection_mc_output_param_;
  detection_mc_output_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_detection_mc_output_param(::caffe::DetectionMcOutputParameter* detection_mc_output_param) {
  delete detection_mc_output_param_;
  detection_mc_output_param_ = detection_mc_output_param;
  if (detection_mc_output_param) {
    set_has_detection_mc_output_param();
  } else {
    clear_has_detection_mc_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.detection_mc_output_param)
}

// optional .caffe.DropoutParameter dropout_param = 108;
inline bool LayerParameter::has_dropout_param() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_dropout_param() {
  _has_bits_[1] |= 0x00000001u;
}
inline void LayerParameter::clear_has_dropout_param() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
  clear_has_dropout_param();
}
inline const ::caffe::DropoutParameter& LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dropout_param)
  return dropout_param_ != NULL ? *dropout_param_ : *default_instance_->dropout_param_;
}
inline ::caffe::DropoutParameter* LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) {
    dropout_param_ = new ::caffe::DropoutParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dropout_param)
  return dropout_param_;
}
inline ::caffe::DropoutParameter* LayerParameter::release_dropout_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dropout_param)
  clear_has_dropout_param();
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dropout_param)
}

// optional .caffe.DummyDataParameter dummy_data_param = 109;
inline bool LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_dummy_data_param() {
  _has_bits_[1] |= 0x00000002u;
}
inline void LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
  clear_has_dummy_data_param();
}
inline const ::caffe::DummyDataParameter& LayerParameter::dummy_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dummy_data_param)
  return dummy_data_param_ != NULL ? *dummy_data_param_ : *default_instance_->dummy_data_param_;
}
inline ::caffe::DummyDataParameter* LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) {
    dummy_data_param_ = new ::caffe::DummyDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dummy_data_param)
  return dummy_data_param_;
}
inline ::caffe::DummyDataParameter* LayerParameter::release_dummy_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dummy_data_param)
  clear_has_dummy_data_param();
  ::caffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param) {
  delete dummy_data_param_;
  dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dummy_data_param)
}

// optional .caffe.EltwiseParameter eltwise_param = 110;
inline bool LayerParameter::has_eltwise_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_eltwise_param() {
  _has_bits_[1] |= 0x00000004u;
}
inline void LayerParameter::clear_has_eltwise_param() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
inline const ::caffe::EltwiseParameter& LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.eltwise_param)
  return eltwise_param_ != NULL ? *eltwise_param_ : *default_instance_->eltwise_param_;
}
inline ::caffe::EltwiseParameter* LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) {
    eltwise_param_ = new ::caffe::EltwiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.eltwise_param)
  return eltwise_param_;
}
inline ::caffe::EltwiseParameter* LayerParameter::release_eltwise_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.eltwise_param)
  clear_has_eltwise_param();
  ::caffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.eltwise_param)
}

// optional .caffe.ELUParameter elu_param = 140;
inline bool LayerParameter::has_elu_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_elu_param() {
  _has_bits_[1] |= 0x00000008u;
}
inline void LayerParameter::clear_has_elu_param() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void LayerParameter::clear_elu_param() {
  if (elu_param_ != NULL) elu_param_->::caffe::ELUParameter::Clear();
  clear_has_elu_param();
}
inline const ::caffe::ELUParameter& LayerParameter::elu_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.elu_param)
  return elu_param_ != NULL ? *elu_param_ : *default_instance_->elu_param_;
}
inline ::caffe::ELUParameter* LayerParameter::mutable_elu_param() {
  set_has_elu_param();
  if (elu_param_ == NULL) {
    elu_param_ = new ::caffe::ELUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.elu_param)
  return elu_param_;
}
inline ::caffe::ELUParameter* LayerParameter::release_elu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.elu_param)
  clear_has_elu_param();
  ::caffe::ELUParameter* temp = elu_param_;
  elu_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_elu_param(::caffe::ELUParameter* elu_param) {
  delete elu_param_;
  elu_param_ = elu_param;
  if (elu_param) {
    set_has_elu_param();
  } else {
    clear_has_elu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.elu_param)
}

// optional .caffe.EmbedParameter embed_param = 137;
inline bool LayerParameter::has_embed_param() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_embed_param() {
  _has_bits_[1] |= 0x00000010u;
}
inline void LayerParameter::clear_has_embed_param() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void LayerParameter::clear_embed_param() {
  if (embed_param_ != NULL) embed_param_->::caffe::EmbedParameter::Clear();
  clear_has_embed_param();
}
inline const ::caffe::EmbedParameter& LayerParameter::embed_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.embed_param)
  return embed_param_ != NULL ? *embed_param_ : *default_instance_->embed_param_;
}
inline ::caffe::EmbedParameter* LayerParameter::mutable_embed_param() {
  set_has_embed_param();
  if (embed_param_ == NULL) {
    embed_param_ = new ::caffe::EmbedParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.embed_param)
  return embed_param_;
}
inline ::caffe::EmbedParameter* LayerParameter::release_embed_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.embed_param)
  clear_has_embed_param();
  ::caffe::EmbedParameter* temp = embed_param_;
  embed_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_embed_param(::caffe::EmbedParameter* embed_param) {
  delete embed_param_;
  embed_param_ = embed_param;
  if (embed_param) {
    set_has_embed_param();
  } else {
    clear_has_embed_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.embed_param)
}

// optional .caffe.EasymatchParameter easy_match_param = 163;
inline bool LayerParameter::has_easy_match_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_easy_match_param() {
  _has_bits_[1] |= 0x00000020u;
}
inline void LayerParameter::clear_has_easy_match_param() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void LayerParameter::clear_easy_match_param() {
  if (easy_match_param_ != NULL) easy_match_param_->::caffe::EasymatchParameter::Clear();
  clear_has_easy_match_param();
}
inline const ::caffe::EasymatchParameter& LayerParameter::easy_match_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.easy_match_param)
  return easy_match_param_ != NULL ? *easy_match_param_ : *default_instance_->easy_match_param_;
}
inline ::caffe::EasymatchParameter* LayerParameter::mutable_easy_match_param() {
  set_has_easy_match_param();
  if (easy_match_param_ == NULL) {
    easy_match_param_ = new ::caffe::EasymatchParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.easy_match_param)
  return easy_match_param_;
}
inline ::caffe::EasymatchParameter* LayerParameter::release_easy_match_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.easy_match_param)
  clear_has_easy_match_param();
  ::caffe::EasymatchParameter* temp = easy_match_param_;
  easy_match_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_easy_match_param(::caffe::EasymatchParameter* easy_match_param) {
  delete easy_match_param_;
  easy_match_param_ = easy_match_param;
  if (easy_match_param) {
    set_has_easy_match_param();
  } else {
    clear_has_easy_match_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.easy_match_param)
}

// optional .caffe.MatchParameter match_param = 164;
inline bool LayerParameter::has_match_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_match_param() {
  _has_bits_[1] |= 0x00000040u;
}
inline void LayerParameter::clear_has_match_param() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void LayerParameter::clear_match_param() {
  if (match_param_ != NULL) match_param_->::caffe::MatchParameter::Clear();
  clear_has_match_param();
}
inline const ::caffe::MatchParameter& LayerParameter::match_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.match_param)
  return match_param_ != NULL ? *match_param_ : *default_instance_->match_param_;
}
inline ::caffe::MatchParameter* LayerParameter::mutable_match_param() {
  set_has_match_param();
  if (match_param_ == NULL) {
    match_param_ = new ::caffe::MatchParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.match_param)
  return match_param_;
}
inline ::caffe::MatchParameter* LayerParameter::release_match_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.match_param)
  clear_has_match_param();
  ::caffe::MatchParameter* temp = match_param_;
  match_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_match_param(::caffe::MatchParameter* match_param) {
  delete match_param_;
  match_param_ = match_param;
  if (match_param) {
    set_has_match_param();
  } else {
    clear_has_match_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.match_param)
}

// optional .caffe.ExpParameter exp_param = 111;
inline bool LayerParameter::has_exp_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_exp_param() {
  _has_bits_[1] |= 0x00000080u;
}
inline void LayerParameter::clear_has_exp_param() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
  clear_has_exp_param();
}
inline const ::caffe::ExpParameter& LayerParameter::exp_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.exp_param)
  return exp_param_ != NULL ? *exp_param_ : *default_instance_->exp_param_;
}
inline ::caffe::ExpParameter* LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) {
    exp_param_ = new ::caffe::ExpParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.exp_param)
  return exp_param_;
}
inline ::caffe::ExpParameter* LayerParameter::release_exp_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.exp_param)
  clear_has_exp_param();
  ::caffe::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_exp_param(::caffe::ExpParameter* exp_param) {
  delete exp_param_;
  exp_param_ = exp_param;
  if (exp_param) {
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.exp_param)
}

// optional .caffe.FlattenParameter flatten_param = 135;
inline bool LayerParameter::has_flatten_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_flatten_param() {
  _has_bits_[1] |= 0x00000100u;
}
inline void LayerParameter::clear_has_flatten_param() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void LayerParameter::clear_flatten_param() {
  if (flatten_param_ != NULL) flatten_param_->::caffe::FlattenParameter::Clear();
  clear_has_flatten_param();
}
inline const ::caffe::FlattenParameter& LayerParameter::flatten_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.flatten_param)
  return flatten_param_ != NULL ? *flatten_param_ : *default_instance_->flatten_param_;
}
inline ::caffe::FlattenParameter* LayerParameter::mutable_flatten_param() {
  set_has_flatten_param();
  if (flatten_param_ == NULL) {
    flatten_param_ = new ::caffe::FlattenParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.flatten_param)
  return flatten_param_;
}
inline ::caffe::FlattenParameter* LayerParameter::release_flatten_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.flatten_param)
  clear_has_flatten_param();
  ::caffe::FlattenParameter* temp = flatten_param_;
  flatten_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_flatten_param(::caffe::FlattenParameter* flatten_param) {
  delete flatten_param_;
  flatten_param_ = flatten_param;
  if (flatten_param) {
    set_has_flatten_param();
  } else {
    clear_has_flatten_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.flatten_param)
}

// optional .caffe.GradClipParameter grad_clip_param = 231;
inline bool LayerParameter::has_grad_clip_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_grad_clip_param() {
  _has_bits_[1] |= 0x00000200u;
}
inline void LayerParameter::clear_has_grad_clip_param() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void LayerParameter::clear_grad_clip_param() {
  if (grad_clip_param_ != NULL) grad_clip_param_->::caffe::GradClipParameter::Clear();
  clear_has_grad_clip_param();
}
inline const ::caffe::GradClipParameter& LayerParameter::grad_clip_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.grad_clip_param)
  return grad_clip_param_ != NULL ? *grad_clip_param_ : *default_instance_->grad_clip_param_;
}
inline ::caffe::GradClipParameter* LayerParameter::mutable_grad_clip_param() {
  set_has_grad_clip_param();
  if (grad_clip_param_ == NULL) {
    grad_clip_param_ = new ::caffe::GradClipParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.grad_clip_param)
  return grad_clip_param_;
}
inline ::caffe::GradClipParameter* LayerParameter::release_grad_clip_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.grad_clip_param)
  clear_has_grad_clip_param();
  ::caffe::GradClipParameter* temp = grad_clip_param_;
  grad_clip_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_grad_clip_param(::caffe::GradClipParameter* grad_clip_param) {
  delete grad_clip_param_;
  grad_clip_param_ = grad_clip_param;
  if (grad_clip_param) {
    set_has_grad_clip_param();
  } else {
    clear_has_grad_clip_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.grad_clip_param)
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 112;
inline bool LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[1] |= 0x00000400u;
}
inline void LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
  clear_has_hdf5_data_param();
}
inline const ::caffe::HDF5DataParameter& LayerParameter::hdf5_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hdf5_data_param)
  return hdf5_data_param_ != NULL ? *hdf5_data_param_ : *default_instance_->hdf5_data_param_;
}
inline ::caffe::HDF5DataParameter* LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) {
    hdf5_data_param_ = new ::caffe::HDF5DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hdf5_data_param)
  return hdf5_data_param_;
}
inline ::caffe::HDF5DataParameter* LayerParameter::release_hdf5_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hdf5_data_param)
  clear_has_hdf5_data_param();
  ::caffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param) {
  delete hdf5_data_param_;
  hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hdf5_data_param)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 113;
inline bool LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[1] |= 0x00000800u;
}
inline void LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
inline const ::caffe::HDF5OutputParameter& LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_ : *default_instance_->hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hdf5_output_param)
}

// optional .caffe.HingeLossParameter hinge_loss_param = 114;
inline bool LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[1] |= 0x00001000u;
}
inline void LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
  clear_has_hinge_loss_param();
}
inline const ::caffe::HingeLossParameter& LayerParameter::hinge_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.hinge_loss_param)
  return hinge_loss_param_ != NULL ? *hinge_loss_param_ : *default_instance_->hinge_loss_param_;
}
inline ::caffe::HingeLossParameter* LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) {
    hinge_loss_param_ = new ::caffe::HingeLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.hinge_loss_param)
  return hinge_loss_param_;
}
inline ::caffe::HingeLossParameter* LayerParameter::release_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.hinge_loss_param)
  clear_has_hinge_loss_param();
  ::caffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param) {
  delete hinge_loss_param_;
  hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.hinge_loss_param)
}

// optional .caffe.ImageDataParameter image_data_param = 115;
inline bool LayerParameter::has_image_data_param() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_image_data_param() {
  _has_bits_[1] |= 0x00002000u;
}
inline void LayerParameter::clear_has_image_data_param() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
  clear_has_image_data_param();
}
inline const ::caffe::ImageDataParameter& LayerParameter::image_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.image_data_param)
  return image_data_param_ != NULL ? *image_data_param_ : *default_instance_->image_data_param_;
}
inline ::caffe::ImageDataParameter* LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) {
    image_data_param_ = new ::caffe::ImageDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.image_data_param)
  return image_data_param_;
}
inline ::caffe::ImageDataParameter* LayerParameter::release_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.image_data_param)
  clear_has_image_data_param();
  ::caffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param) {
  delete image_data_param_;
  image_data_param_ = image_data_param;
  if (image_data_param) {
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.image_data_param)
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 116;
inline bool LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[1] |= 0x00004000u;
}
inline void LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
  clear_has_infogain_loss_param();
}
inline const ::caffe::InfogainLossParameter& LayerParameter::infogain_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.infogain_loss_param)
  return infogain_loss_param_ != NULL ? *infogain_loss_param_ : *default_instance_->infogain_loss_param_;
}
inline ::caffe::InfogainLossParameter* LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) {
    infogain_loss_param_ = new ::caffe::InfogainLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.infogain_loss_param)
  return infogain_loss_param_;
}
inline ::caffe::InfogainLossParameter* LayerParameter::release_infogain_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.infogain_loss_param)
  clear_has_infogain_loss_param();
  ::caffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param) {
  delete infogain_loss_param_;
  infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.infogain_loss_param)
}

// optional .caffe.InnerProductParameter inner_product_param = 117;
inline bool LayerParameter::has_inner_product_param() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_inner_product_param() {
  _has_bits_[1] |= 0x00008000u;
}
inline void LayerParameter::clear_has_inner_product_param() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
inline const ::caffe::InnerProductParameter& LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.inner_product_param)
  return inner_product_param_ != NULL ? *inner_product_param_ : *default_instance_->inner_product_param_;
}
inline ::caffe::InnerProductParameter* LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) {
    inner_product_param_ = new ::caffe::InnerProductParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.inner_product_param)
  return inner_product_param_;
}
inline ::caffe::InnerProductParameter* LayerParameter::release_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.inner_product_param)
  clear_has_inner_product_param();
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.inner_product_param)
}

// optional .caffe.InputParameter input_param = 143;
inline bool LayerParameter::has_input_param() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_input_param() {
  _has_bits_[1] |= 0x00010000u;
}
inline void LayerParameter::clear_has_input_param() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void LayerParameter::clear_input_param() {
  if (input_param_ != NULL) input_param_->::caffe::InputParameter::Clear();
  clear_has_input_param();
}
inline const ::caffe::InputParameter& LayerParameter::input_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.input_param)
  return input_param_ != NULL ? *input_param_ : *default_instance_->input_param_;
}
inline ::caffe::InputParameter* LayerParameter::mutable_input_param() {
  set_has_input_param();
  if (input_param_ == NULL) {
    input_param_ = new ::caffe::InputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.input_param)
  return input_param_;
}
inline ::caffe::InputParameter* LayerParameter::release_input_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.input_param)
  clear_has_input_param();
  ::caffe::InputParameter* temp = input_param_;
  input_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_input_param(::caffe::InputParameter* input_param) {
  delete input_param_;
  input_param_ = input_param;
  if (input_param) {
    set_has_input_param();
  } else {
    clear_has_input_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.input_param)
}

// optional .caffe.ImResizeParameter imresize_param = 149;
inline bool LayerParameter::has_imresize_param() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_imresize_param() {
  _has_bits_[1] |= 0x00020000u;
}
inline void LayerParameter::clear_has_imresize_param() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void LayerParameter::clear_imresize_param() {
  if (imresize_param_ != NULL) imresize_param_->::caffe::ImResizeParameter::Clear();
  clear_has_imresize_param();
}
inline const ::caffe::ImResizeParameter& LayerParameter::imresize_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.imresize_param)
  return imresize_param_ != NULL ? *imresize_param_ : *default_instance_->imresize_param_;
}
inline ::caffe::ImResizeParameter* LayerParameter::mutable_imresize_param() {
  set_has_imresize_param();
  if (imresize_param_ == NULL) {
    imresize_param_ = new ::caffe::ImResizeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.imresize_param)
  return imresize_param_;
}
inline ::caffe::ImResizeParameter* LayerParameter::release_imresize_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.imresize_param)
  clear_has_imresize_param();
  ::caffe::ImResizeParameter* temp = imresize_param_;
  imresize_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_imresize_param(::caffe::ImResizeParameter* imresize_param) {
  delete imresize_param_;
  imresize_param_ = imresize_param;
  if (imresize_param) {
    set_has_imresize_param();
  } else {
    clear_has_imresize_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.imresize_param)
}

// optional .caffe.LogParameter log_param = 134;
inline bool LayerParameter::has_log_param() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_log_param() {
  _has_bits_[1] |= 0x00040000u;
}
inline void LayerParameter::clear_has_log_param() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void LayerParameter::clear_log_param() {
  if (log_param_ != NULL) log_param_->::caffe::LogParameter::Clear();
  clear_has_log_param();
}
inline const ::caffe::LogParameter& LayerParameter::log_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.log_param)
  return log_param_ != NULL ? *log_param_ : *default_instance_->log_param_;
}
inline ::caffe::LogParameter* LayerParameter::mutable_log_param() {
  set_has_log_param();
  if (log_param_ == NULL) {
    log_param_ = new ::caffe::LogParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.log_param)
  return log_param_;
}
inline ::caffe::LogParameter* LayerParameter::release_log_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.log_param)
  clear_has_log_param();
  ::caffe::LogParameter* temp = log_param_;
  log_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_log_param(::caffe::LogParameter* log_param) {
  delete log_param_;
  log_param_ = log_param;
  if (log_param) {
    set_has_log_param();
  } else {
    clear_has_log_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.log_param)
}

// optional .caffe.LRNParameter lrn_param = 118;
inline bool LayerParameter::has_lrn_param() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_lrn_param() {
  _has_bits_[1] |= 0x00080000u;
}
inline void LayerParameter::clear_has_lrn_param() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
  clear_has_lrn_param();
}
inline const ::caffe::LRNParameter& LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.lrn_param)
  return lrn_param_ != NULL ? *lrn_param_ : *default_instance_->lrn_param_;
}
inline ::caffe::LRNParameter* LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) {
    lrn_param_ = new ::caffe::LRNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.lrn_param)
  return lrn_param_;
}
inline ::caffe::LRNParameter* LayerParameter::release_lrn_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.lrn_param)
  clear_has_lrn_param();
  ::caffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_lrn_param(::caffe::LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.lrn_param)
}

// optional .caffe.LabeledMatchParameter labeled_match_param = 247;
inline bool LayerParameter::has_labeled_match_param() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_labeled_match_param() {
  _has_bits_[1] |= 0x00100000u;
}
inline void LayerParameter::clear_has_labeled_match_param() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void LayerParameter::clear_labeled_match_param() {
  if (labeled_match_param_ != NULL) labeled_match_param_->::caffe::LabeledMatchParameter::Clear();
  clear_has_labeled_match_param();
}
inline const ::caffe::LabeledMatchParameter& LayerParameter::labeled_match_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.labeled_match_param)
  return labeled_match_param_ != NULL ? *labeled_match_param_ : *default_instance_->labeled_match_param_;
}
inline ::caffe::LabeledMatchParameter* LayerParameter::mutable_labeled_match_param() {
  set_has_labeled_match_param();
  if (labeled_match_param_ == NULL) {
    labeled_match_param_ = new ::caffe::LabeledMatchParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.labeled_match_param)
  return labeled_match_param_;
}
inline ::caffe::LabeledMatchParameter* LayerParameter::release_labeled_match_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.labeled_match_param)
  clear_has_labeled_match_param();
  ::caffe::LabeledMatchParameter* temp = labeled_match_param_;
  labeled_match_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_labeled_match_param(::caffe::LabeledMatchParameter* labeled_match_param) {
  delete labeled_match_param_;
  labeled_match_param_ = labeled_match_param;
  if (labeled_match_param) {
    set_has_labeled_match_param();
  } else {
    clear_has_labeled_match_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.labeled_match_param)
}

// optional .caffe.UnlabeledMatchParameter unlabeled_match_param = 248;
inline bool LayerParameter::has_unlabeled_match_param() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_unlabeled_match_param() {
  _has_bits_[1] |= 0x00200000u;
}
inline void LayerParameter::clear_has_unlabeled_match_param() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void LayerParameter::clear_unlabeled_match_param() {
  if (unlabeled_match_param_ != NULL) unlabeled_match_param_->::caffe::UnlabeledMatchParameter::Clear();
  clear_has_unlabeled_match_param();
}
inline const ::caffe::UnlabeledMatchParameter& LayerParameter::unlabeled_match_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.unlabeled_match_param)
  return unlabeled_match_param_ != NULL ? *unlabeled_match_param_ : *default_instance_->unlabeled_match_param_;
}
inline ::caffe::UnlabeledMatchParameter* LayerParameter::mutable_unlabeled_match_param() {
  set_has_unlabeled_match_param();
  if (unlabeled_match_param_ == NULL) {
    unlabeled_match_param_ = new ::caffe::UnlabeledMatchParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.unlabeled_match_param)
  return unlabeled_match_param_;
}
inline ::caffe::UnlabeledMatchParameter* LayerParameter::release_unlabeled_match_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.unlabeled_match_param)
  clear_has_unlabeled_match_param();
  ::caffe::UnlabeledMatchParameter* temp = unlabeled_match_param_;
  unlabeled_match_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_unlabeled_match_param(::caffe::UnlabeledMatchParameter* unlabeled_match_param) {
  delete unlabeled_match_param_;
  unlabeled_match_param_ = unlabeled_match_param;
  if (unlabeled_match_param) {
    set_has_unlabeled_match_param();
  } else {
    clear_has_unlabeled_match_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.unlabeled_match_param)
}

// optional .caffe.MemoryDataParameter memory_data_param = 119;
inline bool LayerParameter::has_memory_data_param() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_memory_data_param() {
  _has_bits_[1] |= 0x00400000u;
}
inline void LayerParameter::clear_has_memory_data_param() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
  clear_has_memory_data_param();
}
inline const ::caffe::MemoryDataParameter& LayerParameter::memory_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.memory_data_param)
  return memory_data_param_ != NULL ? *memory_data_param_ : *default_instance_->memory_data_param_;
}
inline ::caffe::MemoryDataParameter* LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) {
    memory_data_param_ = new ::caffe::MemoryDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.memory_data_param)
  return memory_data_param_;
}
inline ::caffe::MemoryDataParameter* LayerParameter::release_memory_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.memory_data_param)
  clear_has_memory_data_param();
  ::caffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param) {
  delete memory_data_param_;
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.memory_data_param)
}

// optional .caffe.MaskGenParameter mask_gen_param = 229;
inline bool LayerParameter::has_mask_gen_param() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_mask_gen_param() {
  _has_bits_[1] |= 0x00800000u;
}
inline void LayerParameter::clear_has_mask_gen_param() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void LayerParameter::clear_mask_gen_param() {
  if (mask_gen_param_ != NULL) mask_gen_param_->::caffe::MaskGenParameter::Clear();
  clear_has_mask_gen_param();
}
inline const ::caffe::MaskGenParameter& LayerParameter::mask_gen_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.mask_gen_param)
  return mask_gen_param_ != NULL ? *mask_gen_param_ : *default_instance_->mask_gen_param_;
}
inline ::caffe::MaskGenParameter* LayerParameter::mutable_mask_gen_param() {
  set_has_mask_gen_param();
  if (mask_gen_param_ == NULL) {
    mask_gen_param_ = new ::caffe::MaskGenParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.mask_gen_param)
  return mask_gen_param_;
}
inline ::caffe::MaskGenParameter* LayerParameter::release_mask_gen_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.mask_gen_param)
  clear_has_mask_gen_param();
  ::caffe::MaskGenParameter* temp = mask_gen_param_;
  mask_gen_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_mask_gen_param(::caffe::MaskGenParameter* mask_gen_param) {
  delete mask_gen_param_;
  mask_gen_param_ = mask_gen_param;
  if (mask_gen_param) {
    set_has_mask_gen_param();
  } else {
    clear_has_mask_gen_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.mask_gen_param)
}

// optional .caffe.KpsGenParameter kps_gen_param = 230;
inline bool LayerParameter::has_kps_gen_param() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_kps_gen_param() {
  _has_bits_[1] |= 0x01000000u;
}
inline void LayerParameter::clear_has_kps_gen_param() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void LayerParameter::clear_kps_gen_param() {
  if (kps_gen_param_ != NULL) kps_gen_param_->::caffe::KpsGenParameter::Clear();
  clear_has_kps_gen_param();
}
inline const ::caffe::KpsGenParameter& LayerParameter::kps_gen_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.kps_gen_param)
  return kps_gen_param_ != NULL ? *kps_gen_param_ : *default_instance_->kps_gen_param_;
}
inline ::caffe::KpsGenParameter* LayerParameter::mutable_kps_gen_param() {
  set_has_kps_gen_param();
  if (kps_gen_param_ == NULL) {
    kps_gen_param_ = new ::caffe::KpsGenParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.kps_gen_param)
  return kps_gen_param_;
}
inline ::caffe::KpsGenParameter* LayerParameter::release_kps_gen_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.kps_gen_param)
  clear_has_kps_gen_param();
  ::caffe::KpsGenParameter* temp = kps_gen_param_;
  kps_gen_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_kps_gen_param(::caffe::KpsGenParameter* kps_gen_param) {
  delete kps_gen_param_;
  kps_gen_param_ = kps_gen_param;
  if (kps_gen_param) {
    set_has_kps_gen_param();
  } else {
    clear_has_kps_gen_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.kps_gen_param)
}

// optional .caffe.KpsEvalParameter kps_eval_param = 233;
inline bool LayerParameter::has_kps_eval_param() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_kps_eval_param() {
  _has_bits_[1] |= 0x02000000u;
}
inline void LayerParameter::clear_has_kps_eval_param() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void LayerParameter::clear_kps_eval_param() {
  if (kps_eval_param_ != NULL) kps_eval_param_->::caffe::KpsEvalParameter::Clear();
  clear_has_kps_eval_param();
}
inline const ::caffe::KpsEvalParameter& LayerParameter::kps_eval_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.kps_eval_param)
  return kps_eval_param_ != NULL ? *kps_eval_param_ : *default_instance_->kps_eval_param_;
}
inline ::caffe::KpsEvalParameter* LayerParameter::mutable_kps_eval_param() {
  set_has_kps_eval_param();
  if (kps_eval_param_ == NULL) {
    kps_eval_param_ = new ::caffe::KpsEvalParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.kps_eval_param)
  return kps_eval_param_;
}
inline ::caffe::KpsEvalParameter* LayerParameter::release_kps_eval_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.kps_eval_param)
  clear_has_kps_eval_param();
  ::caffe::KpsEvalParameter* temp = kps_eval_param_;
  kps_eval_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_kps_eval_param(::caffe::KpsEvalParameter* kps_eval_param) {
  delete kps_eval_param_;
  kps_eval_param_ = kps_eval_param;
  if (kps_eval_param) {
    set_has_kps_eval_param();
  } else {
    clear_has_kps_eval_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.kps_eval_param)
}

// optional .caffe.MultiBoxLossParameter multibox_loss_param = 201;
inline bool LayerParameter::has_multibox_loss_param() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_multibox_loss_param() {
  _has_bits_[1] |= 0x04000000u;
}
inline void LayerParameter::clear_has_multibox_loss_param() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void LayerParameter::clear_multibox_loss_param() {
  if (multibox_loss_param_ != NULL) multibox_loss_param_->::caffe::MultiBoxLossParameter::Clear();
  clear_has_multibox_loss_param();
}
inline const ::caffe::MultiBoxLossParameter& LayerParameter::multibox_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.multibox_loss_param)
  return multibox_loss_param_ != NULL ? *multibox_loss_param_ : *default_instance_->multibox_loss_param_;
}
inline ::caffe::MultiBoxLossParameter* LayerParameter::mutable_multibox_loss_param() {
  set_has_multibox_loss_param();
  if (multibox_loss_param_ == NULL) {
    multibox_loss_param_ = new ::caffe::MultiBoxLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.multibox_loss_param)
  return multibox_loss_param_;
}
inline ::caffe::MultiBoxLossParameter* LayerParameter::release_multibox_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.multibox_loss_param)
  clear_has_multibox_loss_param();
  ::caffe::MultiBoxLossParameter* temp = multibox_loss_param_;
  multibox_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_multibox_loss_param(::caffe::MultiBoxLossParameter* multibox_loss_param) {
  delete multibox_loss_param_;
  multibox_loss_param_ = multibox_loss_param;
  if (multibox_loss_param) {
    set_has_multibox_loss_param();
  } else {
    clear_has_multibox_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.multibox_loss_param)
}

// optional .caffe.BBoxLossParameter bbox_loss_param = 251;
inline bool LayerParameter::has_bbox_loss_param() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_bbox_loss_param() {
  _has_bits_[1] |= 0x08000000u;
}
inline void LayerParameter::clear_has_bbox_loss_param() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void LayerParameter::clear_bbox_loss_param() {
  if (bbox_loss_param_ != NULL) bbox_loss_param_->::caffe::BBoxLossParameter::Clear();
  clear_has_bbox_loss_param();
}
inline const ::caffe::BBoxLossParameter& LayerParameter::bbox_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.bbox_loss_param)
  return bbox_loss_param_ != NULL ? *bbox_loss_param_ : *default_instance_->bbox_loss_param_;
}
inline ::caffe::BBoxLossParameter* LayerParameter::mutable_bbox_loss_param() {
  set_has_bbox_loss_param();
  if (bbox_loss_param_ == NULL) {
    bbox_loss_param_ = new ::caffe::BBoxLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.bbox_loss_param)
  return bbox_loss_param_;
}
inline ::caffe::BBoxLossParameter* LayerParameter::release_bbox_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.bbox_loss_param)
  clear_has_bbox_loss_param();
  ::caffe::BBoxLossParameter* temp = bbox_loss_param_;
  bbox_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_bbox_loss_param(::caffe::BBoxLossParameter* bbox_loss_param) {
  delete bbox_loss_param_;
  bbox_loss_param_ = bbox_loss_param;
  if (bbox_loss_param) {
    set_has_bbox_loss_param();
  } else {
    clear_has_bbox_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.bbox_loss_param)
}

// optional .caffe.DenseBBoxLossParameter dense_bbox_loss_param = 253;
inline bool LayerParameter::has_dense_bbox_loss_param() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_dense_bbox_loss_param() {
  _has_bits_[1] |= 0x10000000u;
}
inline void LayerParameter::clear_has_dense_bbox_loss_param() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void LayerParameter::clear_dense_bbox_loss_param() {
  if (dense_bbox_loss_param_ != NULL) dense_bbox_loss_param_->::caffe::DenseBBoxLossParameter::Clear();
  clear_has_dense_bbox_loss_param();
}
inline const ::caffe::DenseBBoxLossParameter& LayerParameter::dense_bbox_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dense_bbox_loss_param)
  return dense_bbox_loss_param_ != NULL ? *dense_bbox_loss_param_ : *default_instance_->dense_bbox_loss_param_;
}
inline ::caffe::DenseBBoxLossParameter* LayerParameter::mutable_dense_bbox_loss_param() {
  set_has_dense_bbox_loss_param();
  if (dense_bbox_loss_param_ == NULL) {
    dense_bbox_loss_param_ = new ::caffe::DenseBBoxLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dense_bbox_loss_param)
  return dense_bbox_loss_param_;
}
inline ::caffe::DenseBBoxLossParameter* LayerParameter::release_dense_bbox_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dense_bbox_loss_param)
  clear_has_dense_bbox_loss_param();
  ::caffe::DenseBBoxLossParameter* temp = dense_bbox_loss_param_;
  dense_bbox_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_dense_bbox_loss_param(::caffe::DenseBBoxLossParameter* dense_bbox_loss_param) {
  delete dense_bbox_loss_param_;
  dense_bbox_loss_param_ = dense_bbox_loss_param;
  if (dense_bbox_loss_param) {
    set_has_dense_bbox_loss_param();
  } else {
    clear_has_dense_bbox_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dense_bbox_loss_param)
}

// optional .caffe.McBoxLossParameter mcbox_loss_param = 188;
inline bool LayerParameter::has_mcbox_loss_param() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_mcbox_loss_param() {
  _has_bits_[1] |= 0x20000000u;
}
inline void LayerParameter::clear_has_mcbox_loss_param() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void LayerParameter::clear_mcbox_loss_param() {
  if (mcbox_loss_param_ != NULL) mcbox_loss_param_->::caffe::McBoxLossParameter::Clear();
  clear_has_mcbox_loss_param();
}
inline const ::caffe::McBoxLossParameter& LayerParameter::mcbox_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.mcbox_loss_param)
  return mcbox_loss_param_ != NULL ? *mcbox_loss_param_ : *default_instance_->mcbox_loss_param_;
}
inline ::caffe::McBoxLossParameter* LayerParameter::mutable_mcbox_loss_param() {
  set_has_mcbox_loss_param();
  if (mcbox_loss_param_ == NULL) {
    mcbox_loss_param_ = new ::caffe::McBoxLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.mcbox_loss_param)
  return mcbox_loss_param_;
}
inline ::caffe::McBoxLossParameter* LayerParameter::release_mcbox_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.mcbox_loss_param)
  clear_has_mcbox_loss_param();
  ::caffe::McBoxLossParameter* temp = mcbox_loss_param_;
  mcbox_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_mcbox_loss_param(::caffe::McBoxLossParameter* mcbox_loss_param) {
  delete mcbox_loss_param_;
  mcbox_loss_param_ = mcbox_loss_param;
  if (mcbox_loss_param) {
    set_has_mcbox_loss_param();
  } else {
    clear_has_mcbox_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.mcbox_loss_param)
}

// optional .caffe.MultiMcBoxLossParameter multimcbox_loss_param = 210;
inline bool LayerParameter::has_multimcbox_loss_param() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void LayerParameter::set_has_multimcbox_loss_param() {
  _has_bits_[1] |= 0x40000000u;
}
inline void LayerParameter::clear_has_multimcbox_loss_param() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void LayerParameter::clear_multimcbox_loss_param() {
  if (multimcbox_loss_param_ != NULL) multimcbox_loss_param_->::caffe::MultiMcBoxLossParameter::Clear();
  clear_has_multimcbox_loss_param();
}
inline const ::caffe::MultiMcBoxLossParameter& LayerParameter::multimcbox_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.multimcbox_loss_param)
  return multimcbox_loss_param_ != NULL ? *multimcbox_loss_param_ : *default_instance_->multimcbox_loss_param_;
}
inline ::caffe::MultiMcBoxLossParameter* LayerParameter::mutable_multimcbox_loss_param() {
  set_has_multimcbox_loss_param();
  if (multimcbox_loss_param_ == NULL) {
    multimcbox_loss_param_ = new ::caffe::MultiMcBoxLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.multimcbox_loss_param)
  return multimcbox_loss_param_;
}
inline ::caffe::MultiMcBoxLossParameter* LayerParameter::release_multimcbox_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.multimcbox_loss_param)
  clear_has_multimcbox_loss_param();
  ::caffe::MultiMcBoxLossParameter* temp = multimcbox_loss_param_;
  multimcbox_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_multimcbox_loss_param(::caffe::MultiMcBoxLossParameter* multimcbox_loss_param) {
  delete multimcbox_loss_param_;
  multimcbox_loss_param_ = multimcbox_loss_param;
  if (multimcbox_loss_param) {
    set_has_multimcbox_loss_param();
  } else {
    clear_has_multimcbox_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.multimcbox_loss_param)
}

// optional .caffe.MVNParameter mvn_param = 120;
inline bool LayerParameter::has_mvn_param() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void LayerParameter::set_has_mvn_param() {
  _has_bits_[1] |= 0x80000000u;
}
inline void LayerParameter::clear_has_mvn_param() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
  clear_has_mvn_param();
}
inline const ::caffe::MVNParameter& LayerParameter::mvn_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.mvn_param)
  return mvn_param_ != NULL ? *mvn_param_ : *default_instance_->mvn_param_;
}
inline ::caffe::MVNParameter* LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) {
    mvn_param_ = new ::caffe::MVNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.mvn_param)
  return mvn_param_;
}
inline ::caffe::MVNParameter* LayerParameter::release_mvn_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.mvn_param)
  clear_has_mvn_param();
  ::caffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_mvn_param(::caffe::MVNParameter* mvn_param) {
  delete mvn_param_;
  mvn_param_ = mvn_param;
  if (mvn_param) {
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.mvn_param)
}

// optional .caffe.MaskLossParameter mask_loss_param = 274;
inline bool LayerParameter::has_mask_loss_param() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_mask_loss_param() {
  _has_bits_[2] |= 0x00000001u;
}
inline void LayerParameter::clear_has_mask_loss_param() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void LayerParameter::clear_mask_loss_param() {
  if (mask_loss_param_ != NULL) mask_loss_param_->::caffe::MaskLossParameter::Clear();
  clear_has_mask_loss_param();
}
inline const ::caffe::MaskLossParameter& LayerParameter::mask_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.mask_loss_param)
  return mask_loss_param_ != NULL ? *mask_loss_param_ : *default_instance_->mask_loss_param_;
}
inline ::caffe::MaskLossParameter* LayerParameter::mutable_mask_loss_param() {
  set_has_mask_loss_param();
  if (mask_loss_param_ == NULL) {
    mask_loss_param_ = new ::caffe::MaskLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.mask_loss_param)
  return mask_loss_param_;
}
inline ::caffe::MaskLossParameter* LayerParameter::release_mask_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.mask_loss_param)
  clear_has_mask_loss_param();
  ::caffe::MaskLossParameter* temp = mask_loss_param_;
  mask_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_mask_loss_param(::caffe::MaskLossParameter* mask_loss_param) {
  delete mask_loss_param_;
  mask_loss_param_ = mask_loss_param;
  if (mask_loss_param) {
    set_has_mask_loss_param();
  } else {
    clear_has_mask_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.mask_loss_param)
}

// optional .caffe.NormalizeParameter norm_param = 206;
inline bool LayerParameter::has_norm_param() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_norm_param() {
  _has_bits_[2] |= 0x00000002u;
}
inline void LayerParameter::clear_has_norm_param() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void LayerParameter::clear_norm_param() {
  if (norm_param_ != NULL) norm_param_->::caffe::NormalizeParameter::Clear();
  clear_has_norm_param();
}
inline const ::caffe::NormalizeParameter& LayerParameter::norm_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.norm_param)
  return norm_param_ != NULL ? *norm_param_ : *default_instance_->norm_param_;
}
inline ::caffe::NormalizeParameter* LayerParameter::mutable_norm_param() {
  set_has_norm_param();
  if (norm_param_ == NULL) {
    norm_param_ = new ::caffe::NormalizeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.norm_param)
  return norm_param_;
}
inline ::caffe::NormalizeParameter* LayerParameter::release_norm_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.norm_param)
  clear_has_norm_param();
  ::caffe::NormalizeParameter* temp = norm_param_;
  norm_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_norm_param(::caffe::NormalizeParameter* norm_param) {
  delete norm_param_;
  norm_param_ = norm_param;
  if (norm_param) {
    set_has_norm_param();
  } else {
    clear_has_norm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.norm_param)
}

// optional .caffe.NmsParameter nms_param = 209;
inline bool LayerParameter::has_nms_param() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_nms_param() {
  _has_bits_[2] |= 0x00000004u;
}
inline void LayerParameter::clear_has_nms_param() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void LayerParameter::clear_nms_param() {
  if (nms_param_ != NULL) nms_param_->::caffe::NmsParameter::Clear();
  clear_has_nms_param();
}
inline const ::caffe::NmsParameter& LayerParameter::nms_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.nms_param)
  return nms_param_ != NULL ? *nms_param_ : *default_instance_->nms_param_;
}
inline ::caffe::NmsParameter* LayerParameter::mutable_nms_param() {
  set_has_nms_param();
  if (nms_param_ == NULL) {
    nms_param_ = new ::caffe::NmsParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.nms_param)
  return nms_param_;
}
inline ::caffe::NmsParameter* LayerParameter::release_nms_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.nms_param)
  clear_has_nms_param();
  ::caffe::NmsParameter* temp = nms_param_;
  nms_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_nms_param(::caffe::NmsParameter* nms_param) {
  delete nms_param_;
  nms_param_ = nms_param;
  if (nms_param) {
    set_has_nms_param();
  } else {
    clear_has_nms_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.nms_param)
}

// optional .caffe.ParameterParameter parameter_param = 145;
inline bool LayerParameter::has_parameter_param() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_parameter_param() {
  _has_bits_[2] |= 0x00000008u;
}
inline void LayerParameter::clear_has_parameter_param() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void LayerParameter::clear_parameter_param() {
  if (parameter_param_ != NULL) parameter_param_->::caffe::ParameterParameter::Clear();
  clear_has_parameter_param();
}
inline const ::caffe::ParameterParameter& LayerParameter::parameter_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.parameter_param)
  return parameter_param_ != NULL ? *parameter_param_ : *default_instance_->parameter_param_;
}
inline ::caffe::ParameterParameter* LayerParameter::mutable_parameter_param() {
  set_has_parameter_param();
  if (parameter_param_ == NULL) {
    parameter_param_ = new ::caffe::ParameterParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.parameter_param)
  return parameter_param_;
}
inline ::caffe::ParameterParameter* LayerParameter::release_parameter_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.parameter_param)
  clear_has_parameter_param();
  ::caffe::ParameterParameter* temp = parameter_param_;
  parameter_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_parameter_param(::caffe::ParameterParameter* parameter_param) {
  delete parameter_param_;
  parameter_param_ = parameter_param;
  if (parameter_param) {
    set_has_parameter_param();
  } else {
    clear_has_parameter_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.parameter_param)
}

// optional .caffe.PermuteParameter permute_param = 202;
inline bool LayerParameter::has_permute_param() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_permute_param() {
  _has_bits_[2] |= 0x00000010u;
}
inline void LayerParameter::clear_has_permute_param() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void LayerParameter::clear_permute_param() {
  if (permute_param_ != NULL) permute_param_->::caffe::PermuteParameter::Clear();
  clear_has_permute_param();
}
inline const ::caffe::PermuteParameter& LayerParameter::permute_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.permute_param)
  return permute_param_ != NULL ? *permute_param_ : *default_instance_->permute_param_;
}
inline ::caffe::PermuteParameter* LayerParameter::mutable_permute_param() {
  set_has_permute_param();
  if (permute_param_ == NULL) {
    permute_param_ = new ::caffe::PermuteParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.permute_param)
  return permute_param_;
}
inline ::caffe::PermuteParameter* LayerParameter::release_permute_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.permute_param)
  clear_has_permute_param();
  ::caffe::PermuteParameter* temp = permute_param_;
  permute_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_permute_param(::caffe::PermuteParameter* permute_param) {
  delete permute_param_;
  permute_param_ = permute_param;
  if (permute_param) {
    set_has_permute_param();
  } else {
    clear_has_permute_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.permute_param)
}

// optional .caffe.PoolingParameter pooling_param = 121;
inline bool LayerParameter::has_pooling_param() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_pooling_param() {
  _has_bits_[2] |= 0x00000020u;
}
inline void LayerParameter::clear_has_pooling_param() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
  clear_has_pooling_param();
}
inline const ::caffe::PoolingParameter& LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_ : *default_instance_->pooling_param_;
}
inline ::caffe::PoolingParameter* LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::caffe::PoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.pooling_param)
  return pooling_param_;
}
inline ::caffe::PoolingParameter* LayerParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.pooling_param)
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.pooling_param)
}

// optional .caffe.PowerParameter power_param = 122;
inline bool LayerParameter::has_power_param() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_power_param() {
  _has_bits_[2] |= 0x00000040u;
}
inline void LayerParameter::clear_has_power_param() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
  clear_has_power_param();
}
inline const ::caffe::PowerParameter& LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.power_param)
  return power_param_ != NULL ? *power_param_ : *default_instance_->power_param_;
}
inline ::caffe::PowerParameter* LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) {
    power_param_ = new ::caffe::PowerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.power_param)
  return power_param_;
}
inline ::caffe::PowerParameter* LayerParameter::release_power_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.power_param)
  clear_has_power_param();
  ::caffe::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_power_param(::caffe::PowerParameter* power_param) {
  delete power_param_;
  power_param_ = power_param;
  if (power_param) {
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.power_param)
}

// optional .caffe.PoseDataParameter pose_data_param = 177;
inline bool LayerParameter::has_pose_data_param() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_pose_data_param() {
  _has_bits_[2] |= 0x00000080u;
}
inline void LayerParameter::clear_has_pose_data_param() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void LayerParameter::clear_pose_data_param() {
  if (pose_data_param_ != NULL) pose_data_param_->::caffe::PoseDataParameter::Clear();
  clear_has_pose_data_param();
}
inline const ::caffe::PoseDataParameter& LayerParameter::pose_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.pose_data_param)
  return pose_data_param_ != NULL ? *pose_data_param_ : *default_instance_->pose_data_param_;
}
inline ::caffe::PoseDataParameter* LayerParameter::mutable_pose_data_param() {
  set_has_pose_data_param();
  if (pose_data_param_ == NULL) {
    pose_data_param_ = new ::caffe::PoseDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.pose_data_param)
  return pose_data_param_;
}
inline ::caffe::PoseDataParameter* LayerParameter::release_pose_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.pose_data_param)
  clear_has_pose_data_param();
  ::caffe::PoseDataParameter* temp = pose_data_param_;
  pose_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_pose_data_param(::caffe::PoseDataParameter* pose_data_param) {
  delete pose_data_param_;
  pose_data_param_ = pose_data_param;
  if (pose_data_param) {
    set_has_pose_data_param();
  } else {
    clear_has_pose_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.pose_data_param)
}

// optional .caffe.PoseEvalParameter pose_eval_param = 178;
inline bool LayerParameter::has_pose_eval_param() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_pose_eval_param() {
  _has_bits_[2] |= 0x00000100u;
}
inline void LayerParameter::clear_has_pose_eval_param() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void LayerParameter::clear_pose_eval_param() {
  if (pose_eval_param_ != NULL) pose_eval_param_->::caffe::PoseEvalParameter::Clear();
  clear_has_pose_eval_param();
}
inline const ::caffe::PoseEvalParameter& LayerParameter::pose_eval_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.pose_eval_param)
  return pose_eval_param_ != NULL ? *pose_eval_param_ : *default_instance_->pose_eval_param_;
}
inline ::caffe::PoseEvalParameter* LayerParameter::mutable_pose_eval_param() {
  set_has_pose_eval_param();
  if (pose_eval_param_ == NULL) {
    pose_eval_param_ = new ::caffe::PoseEvalParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.pose_eval_param)
  return pose_eval_param_;
}
inline ::caffe::PoseEvalParameter* LayerParameter::release_pose_eval_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.pose_eval_param)
  clear_has_pose_eval_param();
  ::caffe::PoseEvalParameter* temp = pose_eval_param_;
  pose_eval_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_pose_eval_param(::caffe::PoseEvalParameter* pose_eval_param) {
  delete pose_eval_param_;
  pose_eval_param_ = pose_eval_param;
  if (pose_eval_param) {
    set_has_pose_eval_param();
  } else {
    clear_has_pose_eval_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.pose_eval_param)
}

// optional .caffe.PoseDetParameter pose_det_param = 179;
inline bool LayerParameter::has_pose_det_param() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_pose_det_param() {
  _has_bits_[2] |= 0x00000200u;
}
inline void LayerParameter::clear_has_pose_det_param() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void LayerParameter::clear_pose_det_param() {
  if (pose_det_param_ != NULL) pose_det_param_->::caffe::PoseDetParameter::Clear();
  clear_has_pose_det_param();
}
inline const ::caffe::PoseDetParameter& LayerParameter::pose_det_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.pose_det_param)
  return pose_det_param_ != NULL ? *pose_det_param_ : *default_instance_->pose_det_param_;
}
inline ::caffe::PoseDetParameter* LayerParameter::mutable_pose_det_param() {
  set_has_pose_det_param();
  if (pose_det_param_ == NULL) {
    pose_det_param_ = new ::caffe::PoseDetParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.pose_det_param)
  return pose_det_param_;
}
inline ::caffe::PoseDetParameter* LayerParameter::release_pose_det_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.pose_det_param)
  clear_has_pose_det_param();
  ::caffe::PoseDetParameter* temp = pose_det_param_;
  pose_det_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_pose_det_param(::caffe::PoseDetParameter* pose_det_param) {
  delete pose_det_param_;
  pose_det_param_ = pose_det_param;
  if (pose_det_param) {
    set_has_pose_det_param();
  } else {
    clear_has_pose_det_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.pose_det_param)
}

// optional .caffe.PeaksFindParameter peaks_find_param = 181;
inline bool LayerParameter::has_peaks_find_param() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_peaks_find_param() {
  _has_bits_[2] |= 0x00000400u;
}
inline void LayerParameter::clear_has_peaks_find_param() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void LayerParameter::clear_peaks_find_param() {
  if (peaks_find_param_ != NULL) peaks_find_param_->::caffe::PeaksFindParameter::Clear();
  clear_has_peaks_find_param();
}
inline const ::caffe::PeaksFindParameter& LayerParameter::peaks_find_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.peaks_find_param)
  return peaks_find_param_ != NULL ? *peaks_find_param_ : *default_instance_->peaks_find_param_;
}
inline ::caffe::PeaksFindParameter* LayerParameter::mutable_peaks_find_param() {
  set_has_peaks_find_param();
  if (peaks_find_param_ == NULL) {
    peaks_find_param_ = new ::caffe::PeaksFindParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.peaks_find_param)
  return peaks_find_param_;
}
inline ::caffe::PeaksFindParameter* LayerParameter::release_peaks_find_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.peaks_find_param)
  clear_has_peaks_find_param();
  ::caffe::PeaksFindParameter* temp = peaks_find_param_;
  peaks_find_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_peaks_find_param(::caffe::PeaksFindParameter* peaks_find_param) {
  delete peaks_find_param_;
  peaks_find_param_ = peaks_find_param;
  if (peaks_find_param) {
    set_has_peaks_find_param();
  } else {
    clear_has_peaks_find_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.peaks_find_param)
}

// optional .caffe.PReLUParameter prelu_param = 131;
inline bool LayerParameter::has_prelu_param() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_prelu_param() {
  _has_bits_[2] |= 0x00000800u;
}
inline void LayerParameter::clear_has_prelu_param() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void LayerParameter::clear_prelu_param() {
  if (prelu_param_ != NULL) prelu_param_->::caffe::PReLUParameter::Clear();
  clear_has_prelu_param();
}
inline const ::caffe::PReLUParameter& LayerParameter::prelu_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.prelu_param)
  return prelu_param_ != NULL ? *prelu_param_ : *default_instance_->prelu_param_;
}
inline ::caffe::PReLUParameter* LayerParameter::mutable_prelu_param() {
  set_has_prelu_param();
  if (prelu_param_ == NULL) {
    prelu_param_ = new ::caffe::PReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.prelu_param)
  return prelu_param_;
}
inline ::caffe::PReLUParameter* LayerParameter::release_prelu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.prelu_param)
  clear_has_prelu_param();
  ::caffe::PReLUParameter* temp = prelu_param_;
  prelu_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_prelu_param(::caffe::PReLUParameter* prelu_param) {
  delete prelu_param_;
  prelu_param_ = prelu_param;
  if (prelu_param) {
    set_has_prelu_param();
  } else {
    clear_has_prelu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.prelu_param)
}

// optional .caffe.PriorBoxParameter prior_box_param = 203;
inline bool LayerParameter::has_prior_box_param() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_prior_box_param() {
  _has_bits_[2] |= 0x00001000u;
}
inline void LayerParameter::clear_has_prior_box_param() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void LayerParameter::clear_prior_box_param() {
  if (prior_box_param_ != NULL) prior_box_param_->::caffe::PriorBoxParameter::Clear();
  clear_has_prior_box_param();
}
inline const ::caffe::PriorBoxParameter& LayerParameter::prior_box_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.prior_box_param)
  return prior_box_param_ != NULL ? *prior_box_param_ : *default_instance_->prior_box_param_;
}
inline ::caffe::PriorBoxParameter* LayerParameter::mutable_prior_box_param() {
  set_has_prior_box_param();
  if (prior_box_param_ == NULL) {
    prior_box_param_ = new ::caffe::PriorBoxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.prior_box_param)
  return prior_box_param_;
}
inline ::caffe::PriorBoxParameter* LayerParameter::release_prior_box_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.prior_box_param)
  clear_has_prior_box_param();
  ::caffe::PriorBoxParameter* temp = prior_box_param_;
  prior_box_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_prior_box_param(::caffe::PriorBoxParameter* prior_box_param) {
  delete prior_box_param_;
  prior_box_param_ = prior_box_param;
  if (prior_box_param) {
    set_has_prior_box_param();
  } else {
    clear_has_prior_box_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.prior_box_param)
}

// optional .caffe.PythonParameter python_param = 130;
inline bool LayerParameter::has_python_param() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_python_param() {
  _has_bits_[2] |= 0x00002000u;
}
inline void LayerParameter::clear_has_python_param() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void LayerParameter::clear_python_param() {
  if (python_param_ != NULL) python_param_->::caffe::PythonParameter::Clear();
  clear_has_python_param();
}
inline const ::caffe::PythonParameter& LayerParameter::python_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.python_param)
  return python_param_ != NULL ? *python_param_ : *default_instance_->python_param_;
}
inline ::caffe::PythonParameter* LayerParameter::mutable_python_param() {
  set_has_python_param();
  if (python_param_ == NULL) {
    python_param_ = new ::caffe::PythonParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.python_param)
  return python_param_;
}
inline ::caffe::PythonParameter* LayerParameter::release_python_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.python_param)
  clear_has_python_param();
  ::caffe::PythonParameter* temp = python_param_;
  python_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_python_param(::caffe::PythonParameter* python_param) {
  delete python_param_;
  python_param_ = python_param;
  if (python_param) {
    set_has_python_param();
  } else {
    clear_has_python_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.python_param)
}

// optional .caffe.RecurrentParameter recurrent_param = 146;
inline bool LayerParameter::has_recurrent_param() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_recurrent_param() {
  _has_bits_[2] |= 0x00004000u;
}
inline void LayerParameter::clear_has_recurrent_param() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void LayerParameter::clear_recurrent_param() {
  if (recurrent_param_ != NULL) recurrent_param_->::caffe::RecurrentParameter::Clear();
  clear_has_recurrent_param();
}
inline const ::caffe::RecurrentParameter& LayerParameter::recurrent_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.recurrent_param)
  return recurrent_param_ != NULL ? *recurrent_param_ : *default_instance_->recurrent_param_;
}
inline ::caffe::RecurrentParameter* LayerParameter::mutable_recurrent_param() {
  set_has_recurrent_param();
  if (recurrent_param_ == NULL) {
    recurrent_param_ = new ::caffe::RecurrentParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.recurrent_param)
  return recurrent_param_;
}
inline ::caffe::RecurrentParameter* LayerParameter::release_recurrent_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.recurrent_param)
  clear_has_recurrent_param();
  ::caffe::RecurrentParameter* temp = recurrent_param_;
  recurrent_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_recurrent_param(::caffe::RecurrentParameter* recurrent_param) {
  delete recurrent_param_;
  recurrent_param_ = recurrent_param;
  if (recurrent_param) {
    set_has_recurrent_param();
  } else {
    clear_has_recurrent_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.recurrent_param)
}

// optional .caffe.ReductionParameter reduction_param = 136;
inline bool LayerParameter::has_reduction_param() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_reduction_param() {
  _has_bits_[2] |= 0x00008000u;
}
inline void LayerParameter::clear_has_reduction_param() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void LayerParameter::clear_reduction_param() {
  if (reduction_param_ != NULL) reduction_param_->::caffe::ReductionParameter::Clear();
  clear_has_reduction_param();
}
inline const ::caffe::ReductionParameter& LayerParameter::reduction_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reduction_param)
  return reduction_param_ != NULL ? *reduction_param_ : *default_instance_->reduction_param_;
}
inline ::caffe::ReductionParameter* LayerParameter::mutable_reduction_param() {
  set_has_reduction_param();
  if (reduction_param_ == NULL) {
    reduction_param_ = new ::caffe::ReductionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reduction_param)
  return reduction_param_;
}
inline ::caffe::ReductionParameter* LayerParameter::release_reduction_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reduction_param)
  clear_has_reduction_param();
  ::caffe::ReductionParameter* temp = reduction_param_;
  reduction_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_reduction_param(::caffe::ReductionParameter* reduction_param) {
  delete reduction_param_;
  reduction_param_ = reduction_param;
  if (reduction_param) {
    set_has_reduction_param();
  } else {
    clear_has_reduction_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reduction_param)
}

// optional .caffe.ReLUParameter relu_param = 123;
inline bool LayerParameter::has_relu_param() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_relu_param() {
  _has_bits_[2] |= 0x00010000u;
}
inline void LayerParameter::clear_has_relu_param() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
  clear_has_relu_param();
}
inline const ::caffe::ReLUParameter& LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_ : *default_instance_->relu_param_;
}
inline ::caffe::ReLUParameter* LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) {
    relu_param_ = new ::caffe::ReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.relu_param)
  return relu_param_;
}
inline ::caffe::ReLUParameter* LayerParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.relu_param)
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.relu_param)
}

// optional .caffe.ReidDataParameter reid_data_param = 277;
inline bool LayerParameter::has_reid_data_param() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_reid_data_param() {
  _has_bits_[2] |= 0x00020000u;
}
inline void LayerParameter::clear_has_reid_data_param() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void LayerParameter::clear_reid_data_param() {
  if (reid_data_param_ != NULL) reid_data_param_->::caffe::ReidDataParameter::Clear();
  clear_has_reid_data_param();
}
inline const ::caffe::ReidDataParameter& LayerParameter::reid_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reid_data_param)
  return reid_data_param_ != NULL ? *reid_data_param_ : *default_instance_->reid_data_param_;
}
inline ::caffe::ReidDataParameter* LayerParameter::mutable_reid_data_param() {
  set_has_reid_data_param();
  if (reid_data_param_ == NULL) {
    reid_data_param_ = new ::caffe::ReidDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reid_data_param)
  return reid_data_param_;
}
inline ::caffe::ReidDataParameter* LayerParameter::release_reid_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reid_data_param)
  clear_has_reid_data_param();
  ::caffe::ReidDataParameter* temp = reid_data_param_;
  reid_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_reid_data_param(::caffe::ReidDataParameter* reid_data_param) {
  delete reid_data_param_;
  reid_data_param_ = reid_data_param;
  if (reid_data_param) {
    set_has_reid_data_param();
  } else {
    clear_has_reid_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reid_data_param)
}

// optional .caffe.RoiResizeParameter roi_resize_param = 195;
inline bool LayerParameter::has_roi_resize_param() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_roi_resize_param() {
  _has_bits_[2] |= 0x00040000u;
}
inline void LayerParameter::clear_has_roi_resize_param() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void LayerParameter::clear_roi_resize_param() {
  if (roi_resize_param_ != NULL) roi_resize_param_->::caffe::RoiResizeParameter::Clear();
  clear_has_roi_resize_param();
}
inline const ::caffe::RoiResizeParameter& LayerParameter::roi_resize_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.roi_resize_param)
  return roi_resize_param_ != NULL ? *roi_resize_param_ : *default_instance_->roi_resize_param_;
}
inline ::caffe::RoiResizeParameter* LayerParameter::mutable_roi_resize_param() {
  set_has_roi_resize_param();
  if (roi_resize_param_ == NULL) {
    roi_resize_param_ = new ::caffe::RoiResizeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.roi_resize_param)
  return roi_resize_param_;
}
inline ::caffe::RoiResizeParameter* LayerParameter::release_roi_resize_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.roi_resize_param)
  clear_has_roi_resize_param();
  ::caffe::RoiResizeParameter* temp = roi_resize_param_;
  roi_resize_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_roi_resize_param(::caffe::RoiResizeParameter* roi_resize_param) {
  delete roi_resize_param_;
  roi_resize_param_ = roi_resize_param;
  if (roi_resize_param) {
    set_has_roi_resize_param();
  } else {
    clear_has_roi_resize_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.roi_resize_param)
}

// optional .caffe.RoiAlignParameter roi_align_param = 196;
inline bool LayerParameter::has_roi_align_param() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_roi_align_param() {
  _has_bits_[2] |= 0x00080000u;
}
inline void LayerParameter::clear_has_roi_align_param() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void LayerParameter::clear_roi_align_param() {
  if (roi_align_param_ != NULL) roi_align_param_->::caffe::RoiAlignParameter::Clear();
  clear_has_roi_align_param();
}
inline const ::caffe::RoiAlignParameter& LayerParameter::roi_align_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.roi_align_param)
  return roi_align_param_ != NULL ? *roi_align_param_ : *default_instance_->roi_align_param_;
}
inline ::caffe::RoiAlignParameter* LayerParameter::mutable_roi_align_param() {
  set_has_roi_align_param();
  if (roi_align_param_ == NULL) {
    roi_align_param_ = new ::caffe::RoiAlignParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.roi_align_param)
  return roi_align_param_;
}
inline ::caffe::RoiAlignParameter* LayerParameter::release_roi_align_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.roi_align_param)
  clear_has_roi_align_param();
  ::caffe::RoiAlignParameter* temp = roi_align_param_;
  roi_align_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_roi_align_param(::caffe::RoiAlignParameter* roi_align_param) {
  delete roi_align_param_;
  roi_align_param_ = roi_align_param;
  if (roi_align_param) {
    set_has_roi_align_param();
  } else {
    clear_has_roi_align_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.roi_align_param)
}

// optional .caffe.FocusLossParameter focus_loss_param = 265;
inline bool LayerParameter::has_focus_loss_param() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_focus_loss_param() {
  _has_bits_[2] |= 0x00100000u;
}
inline void LayerParameter::clear_has_focus_loss_param() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void LayerParameter::clear_focus_loss_param() {
  if (focus_loss_param_ != NULL) focus_loss_param_->::caffe::FocusLossParameter::Clear();
  clear_has_focus_loss_param();
}
inline const ::caffe::FocusLossParameter& LayerParameter::focus_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.focus_loss_param)
  return focus_loss_param_ != NULL ? *focus_loss_param_ : *default_instance_->focus_loss_param_;
}
inline ::caffe::FocusLossParameter* LayerParameter::mutable_focus_loss_param() {
  set_has_focus_loss_param();
  if (focus_loss_param_ == NULL) {
    focus_loss_param_ = new ::caffe::FocusLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.focus_loss_param)
  return focus_loss_param_;
}
inline ::caffe::FocusLossParameter* LayerParameter::release_focus_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.focus_loss_param)
  clear_has_focus_loss_param();
  ::caffe::FocusLossParameter* temp = focus_loss_param_;
  focus_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_focus_loss_param(::caffe::FocusLossParameter* focus_loss_param) {
  delete focus_loss_param_;
  focus_loss_param_ = focus_loss_param;
  if (focus_loss_param) {
    set_has_focus_loss_param();
  } else {
    clear_has_focus_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.focus_loss_param)
}

// optional .caffe.RoiDataParameter roi_data_param = 258;
inline bool LayerParameter::has_roi_data_param() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_roi_data_param() {
  _has_bits_[2] |= 0x00200000u;
}
inline void LayerParameter::clear_has_roi_data_param() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void LayerParameter::clear_roi_data_param() {
  if (roi_data_param_ != NULL) roi_data_param_->::caffe::RoiDataParameter::Clear();
  clear_has_roi_data_param();
}
inline const ::caffe::RoiDataParameter& LayerParameter::roi_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.roi_data_param)
  return roi_data_param_ != NULL ? *roi_data_param_ : *default_instance_->roi_data_param_;
}
inline ::caffe::RoiDataParameter* LayerParameter::mutable_roi_data_param() {
  set_has_roi_data_param();
  if (roi_data_param_ == NULL) {
    roi_data_param_ = new ::caffe::RoiDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.roi_data_param)
  return roi_data_param_;
}
inline ::caffe::RoiDataParameter* LayerParameter::release_roi_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.roi_data_param)
  clear_has_roi_data_param();
  ::caffe::RoiDataParameter* temp = roi_data_param_;
  roi_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_roi_data_param(::caffe::RoiDataParameter* roi_data_param) {
  delete roi_data_param_;
  roi_data_param_ = roi_data_param;
  if (roi_data_param) {
    set_has_roi_data_param();
  } else {
    clear_has_roi_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.roi_data_param)
}

// optional .caffe.ResizeBlobParameter resize_layer_param = 194;
inline bool LayerParameter::has_resize_layer_param() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_resize_layer_param() {
  _has_bits_[2] |= 0x00400000u;
}
inline void LayerParameter::clear_has_resize_layer_param() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void LayerParameter::clear_resize_layer_param() {
  if (resize_layer_param_ != NULL) resize_layer_param_->::caffe::ResizeBlobParameter::Clear();
  clear_has_resize_layer_param();
}
inline const ::caffe::ResizeBlobParameter& LayerParameter::resize_layer_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.resize_layer_param)
  return resize_layer_param_ != NULL ? *resize_layer_param_ : *default_instance_->resize_layer_param_;
}
inline ::caffe::ResizeBlobParameter* LayerParameter::mutable_resize_layer_param() {
  set_has_resize_layer_param();
  if (resize_layer_param_ == NULL) {
    resize_layer_param_ = new ::caffe::ResizeBlobParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.resize_layer_param)
  return resize_layer_param_;
}
inline ::caffe::ResizeBlobParameter* LayerParameter::release_resize_layer_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.resize_layer_param)
  clear_has_resize_layer_param();
  ::caffe::ResizeBlobParameter* temp = resize_layer_param_;
  resize_layer_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_resize_layer_param(::caffe::ResizeBlobParameter* resize_layer_param) {
  delete resize_layer_param_;
  resize_layer_param_ = resize_layer_param;
  if (resize_layer_param) {
    set_has_resize_layer_param();
  } else {
    clear_has_resize_layer_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.resize_layer_param)
}

// optional .caffe.ReorgParameter reorg_param = 150;
inline bool LayerParameter::has_reorg_param() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_reorg_param() {
  _has_bits_[2] |= 0x00800000u;
}
inline void LayerParameter::clear_has_reorg_param() {
  _has_bits_[2] &= ~0x00800000u;
}
inline void LayerParameter::clear_reorg_param() {
  if (reorg_param_ != NULL) reorg_param_->::caffe::ReorgParameter::Clear();
  clear_has_reorg_param();
}
inline const ::caffe::ReorgParameter& LayerParameter::reorg_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reorg_param)
  return reorg_param_ != NULL ? *reorg_param_ : *default_instance_->reorg_param_;
}
inline ::caffe::ReorgParameter* LayerParameter::mutable_reorg_param() {
  set_has_reorg_param();
  if (reorg_param_ == NULL) {
    reorg_param_ = new ::caffe::ReorgParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reorg_param)
  return reorg_param_;
}
inline ::caffe::ReorgParameter* LayerParameter::release_reorg_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reorg_param)
  clear_has_reorg_param();
  ::caffe::ReorgParameter* temp = reorg_param_;
  reorg_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_reorg_param(::caffe::ReorgParameter* reorg_param) {
  delete reorg_param_;
  reorg_param_ = reorg_param;
  if (reorg_param) {
    set_has_reorg_param();
  } else {
    clear_has_reorg_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reorg_param)
}

// optional .caffe.ReshapeParameter reshape_param = 133;
inline bool LayerParameter::has_reshape_param() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_reshape_param() {
  _has_bits_[2] |= 0x01000000u;
}
inline void LayerParameter::clear_has_reshape_param() {
  _has_bits_[2] &= ~0x01000000u;
}
inline void LayerParameter::clear_reshape_param() {
  if (reshape_param_ != NULL) reshape_param_->::caffe::ReshapeParameter::Clear();
  clear_has_reshape_param();
}
inline const ::caffe::ReshapeParameter& LayerParameter::reshape_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.reshape_param)
  return reshape_param_ != NULL ? *reshape_param_ : *default_instance_->reshape_param_;
}
inline ::caffe::ReshapeParameter* LayerParameter::mutable_reshape_param() {
  set_has_reshape_param();
  if (reshape_param_ == NULL) {
    reshape_param_ = new ::caffe::ReshapeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.reshape_param)
  return reshape_param_;
}
inline ::caffe::ReshapeParameter* LayerParameter::release_reshape_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.reshape_param)
  clear_has_reshape_param();
  ::caffe::ReshapeParameter* temp = reshape_param_;
  reshape_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_reshape_param(::caffe::ReshapeParameter* reshape_param) {
  delete reshape_param_;
  reshape_param_ = reshape_param;
  if (reshape_param) {
    set_has_reshape_param();
  } else {
    clear_has_reshape_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.reshape_param)
}

// optional .caffe.ROIPoolingParameter roi_pooling_param = 167;
inline bool LayerParameter::has_roi_pooling_param() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_roi_pooling_param() {
  _has_bits_[2] |= 0x02000000u;
}
inline void LayerParameter::clear_has_roi_pooling_param() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void LayerParameter::clear_roi_pooling_param() {
  if (roi_pooling_param_ != NULL) roi_pooling_param_->::caffe::ROIPoolingParameter::Clear();
  clear_has_roi_pooling_param();
}
inline const ::caffe::ROIPoolingParameter& LayerParameter::roi_pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.roi_pooling_param)
  return roi_pooling_param_ != NULL ? *roi_pooling_param_ : *default_instance_->roi_pooling_param_;
}
inline ::caffe::ROIPoolingParameter* LayerParameter::mutable_roi_pooling_param() {
  set_has_roi_pooling_param();
  if (roi_pooling_param_ == NULL) {
    roi_pooling_param_ = new ::caffe::ROIPoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.roi_pooling_param)
  return roi_pooling_param_;
}
inline ::caffe::ROIPoolingParameter* LayerParameter::release_roi_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.roi_pooling_param)
  clear_has_roi_pooling_param();
  ::caffe::ROIPoolingParameter* temp = roi_pooling_param_;
  roi_pooling_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_roi_pooling_param(::caffe::ROIPoolingParameter* roi_pooling_param) {
  delete roi_pooling_param_;
  roi_pooling_param_ = roi_pooling_param;
  if (roi_pooling_param) {
    set_has_roi_pooling_param();
  } else {
    clear_has_roi_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.roi_pooling_param)
}

// optional .caffe.BoxMatchingParameter box_matching_param = 261;
inline bool LayerParameter::has_box_matching_param() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_box_matching_param() {
  _has_bits_[2] |= 0x04000000u;
}
inline void LayerParameter::clear_has_box_matching_param() {
  _has_bits_[2] &= ~0x04000000u;
}
inline void LayerParameter::clear_box_matching_param() {
  if (box_matching_param_ != NULL) box_matching_param_->::caffe::BoxMatchingParameter::Clear();
  clear_has_box_matching_param();
}
inline const ::caffe::BoxMatchingParameter& LayerParameter::box_matching_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.box_matching_param)
  return box_matching_param_ != NULL ? *box_matching_param_ : *default_instance_->box_matching_param_;
}
inline ::caffe::BoxMatchingParameter* LayerParameter::mutable_box_matching_param() {
  set_has_box_matching_param();
  if (box_matching_param_ == NULL) {
    box_matching_param_ = new ::caffe::BoxMatchingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.box_matching_param)
  return box_matching_param_;
}
inline ::caffe::BoxMatchingParameter* LayerParameter::release_box_matching_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.box_matching_param)
  clear_has_box_matching_param();
  ::caffe::BoxMatchingParameter* temp = box_matching_param_;
  box_matching_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_box_matching_param(::caffe::BoxMatchingParameter* box_matching_param) {
  delete box_matching_param_;
  box_matching_param_ = box_matching_param;
  if (box_matching_param) {
    set_has_box_matching_param();
  } else {
    clear_has_box_matching_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.box_matching_param)
}

// optional .caffe.ScaleParameter scale_param = 142;
inline bool LayerParameter::has_scale_param() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_scale_param() {
  _has_bits_[2] |= 0x08000000u;
}
inline void LayerParameter::clear_has_scale_param() {
  _has_bits_[2] &= ~0x08000000u;
}
inline void LayerParameter::clear_scale_param() {
  if (scale_param_ != NULL) scale_param_->::caffe::ScaleParameter::Clear();
  clear_has_scale_param();
}
inline const ::caffe::ScaleParameter& LayerParameter::scale_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.scale_param)
  return scale_param_ != NULL ? *scale_param_ : *default_instance_->scale_param_;
}
inline ::caffe::ScaleParameter* LayerParameter::mutable_scale_param() {
  set_has_scale_param();
  if (scale_param_ == NULL) {
    scale_param_ = new ::caffe::ScaleParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.scale_param)
  return scale_param_;
}
inline ::caffe::ScaleParameter* LayerParameter::release_scale_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.scale_param)
  clear_has_scale_param();
  ::caffe::ScaleParameter* temp = scale_param_;
  scale_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_scale_param(::caffe::ScaleParameter* scale_param) {
  delete scale_param_;
  scale_param_ = scale_param;
  if (scale_param) {
    set_has_scale_param();
  } else {
    clear_has_scale_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.scale_param)
}

// optional .caffe.SigmoidParameter sigmoid_param = 124;
inline bool LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_sigmoid_param() {
  _has_bits_[2] |= 0x10000000u;
}
inline void LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[2] &= ~0x10000000u;
}
inline void LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
  clear_has_sigmoid_param();
}
inline const ::caffe::SigmoidParameter& LayerParameter::sigmoid_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.sigmoid_param)
  return sigmoid_param_ != NULL ? *sigmoid_param_ : *default_instance_->sigmoid_param_;
}
inline ::caffe::SigmoidParameter* LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) {
    sigmoid_param_ = new ::caffe::SigmoidParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
inline ::caffe::SigmoidParameter* LayerParameter::release_sigmoid_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.sigmoid_param)
  clear_has_sigmoid_param();
  ::caffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param) {
  delete sigmoid_param_;
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.sigmoid_param)
}

// optional .caffe.SoftmaxParameter softmax_param = 125;
inline bool LayerParameter::has_softmax_param() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_softmax_param() {
  _has_bits_[2] |= 0x20000000u;
}
inline void LayerParameter::clear_has_softmax_param() {
  _has_bits_[2] &= ~0x20000000u;
}
inline void LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
inline const ::caffe::SoftmaxParameter& LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_ : *default_instance_->softmax_param_;
}
inline ::caffe::SoftmaxParameter* LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) {
    softmax_param_ = new ::caffe::SoftmaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.softmax_param)
  return softmax_param_;
}
inline ::caffe::SoftmaxParameter* LayerParameter::release_softmax_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.softmax_param)
  clear_has_softmax_param();
  ::caffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.softmax_param)
}

// optional .caffe.SPPParameter spp_param = 132;
inline bool LayerParameter::has_spp_param() const {
  return (_has_bits_[2] & 0x40000000u) != 0;
}
inline void LayerParameter::set_has_spp_param() {
  _has_bits_[2] |= 0x40000000u;
}
inline void LayerParameter::clear_has_spp_param() {
  _has_bits_[2] &= ~0x40000000u;
}
inline void LayerParameter::clear_spp_param() {
  if (spp_param_ != NULL) spp_param_->::caffe::SPPParameter::Clear();
  clear_has_spp_param();
}
inline const ::caffe::SPPParameter& LayerParameter::spp_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.spp_param)
  return spp_param_ != NULL ? *spp_param_ : *default_instance_->spp_param_;
}
inline ::caffe::SPPParameter* LayerParameter::mutable_spp_param() {
  set_has_spp_param();
  if (spp_param_ == NULL) {
    spp_param_ = new ::caffe::SPPParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.spp_param)
  return spp_param_;
}
inline ::caffe::SPPParameter* LayerParameter::release_spp_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.spp_param)
  clear_has_spp_param();
  ::caffe::SPPParameter* temp = spp_param_;
  spp_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_spp_param(::caffe::SPPParameter* spp_param) {
  delete spp_param_;
  spp_param_ = spp_param;
  if (spp_param) {
    set_has_spp_param();
  } else {
    clear_has_spp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.spp_param)
}

// optional .caffe.SliceParameter slice_param = 126;
inline bool LayerParameter::has_slice_param() const {
  return (_has_bits_[2] & 0x80000000u) != 0;
}
inline void LayerParameter::set_has_slice_param() {
  _has_bits_[2] |= 0x80000000u;
}
inline void LayerParameter::clear_has_slice_param() {
  _has_bits_[2] &= ~0x80000000u;
}
inline void LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
  clear_has_slice_param();
}
inline const ::caffe::SliceParameter& LayerParameter::slice_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.slice_param)
  return slice_param_ != NULL ? *slice_param_ : *default_instance_->slice_param_;
}
inline ::caffe::SliceParameter* LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) {
    slice_param_ = new ::caffe::SliceParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.slice_param)
  return slice_param_;
}
inline ::caffe::SliceParameter* LayerParameter::release_slice_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.slice_param)
  clear_has_slice_param();
  ::caffe::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_slice_param(::caffe::SliceParameter* slice_param) {
  delete slice_param_;
  slice_param_ = slice_param;
  if (slice_param) {
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.slice_param)
}

// optional .caffe.SplitLabelParameter split_label_param = 252;
inline bool LayerParameter::has_split_label_param() const {
  return (_has_bits_[3] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_split_label_param() {
  _has_bits_[3] |= 0x00000001u;
}
inline void LayerParameter::clear_has_split_label_param() {
  _has_bits_[3] &= ~0x00000001u;
}
inline void LayerParameter::clear_split_label_param() {
  if (split_label_param_ != NULL) split_label_param_->::caffe::SplitLabelParameter::Clear();
  clear_has_split_label_param();
}
inline const ::caffe::SplitLabelParameter& LayerParameter::split_label_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.split_label_param)
  return split_label_param_ != NULL ? *split_label_param_ : *default_instance_->split_label_param_;
}
inline ::caffe::SplitLabelParameter* LayerParameter::mutable_split_label_param() {
  set_has_split_label_param();
  if (split_label_param_ == NULL) {
    split_label_param_ = new ::caffe::SplitLabelParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.split_label_param)
  return split_label_param_;
}
inline ::caffe::SplitLabelParameter* LayerParameter::release_split_label_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.split_label_param)
  clear_has_split_label_param();
  ::caffe::SplitLabelParameter* temp = split_label_param_;
  split_label_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_split_label_param(::caffe::SplitLabelParameter* split_label_param) {
  delete split_label_param_;
  split_label_param_ = split_label_param;
  if (split_label_param) {
    set_has_split_label_param();
  } else {
    clear_has_split_label_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.split_label_param)
}

// optional .caffe.TanHParameter tanh_param = 127;
inline bool LayerParameter::has_tanh_param() const {
  return (_has_bits_[3] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_tanh_param() {
  _has_bits_[3] |= 0x00000002u;
}
inline void LayerParameter::clear_has_tanh_param() {
  _has_bits_[3] &= ~0x00000002u;
}
inline void LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
  clear_has_tanh_param();
}
inline const ::caffe::TanHParameter& LayerParameter::tanh_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.tanh_param)
  return tanh_param_ != NULL ? *tanh_param_ : *default_instance_->tanh_param_;
}
inline ::caffe::TanHParameter* LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) {
    tanh_param_ = new ::caffe::TanHParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.tanh_param)
  return tanh_param_;
}
inline ::caffe::TanHParameter* LayerParameter::release_tanh_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.tanh_param)
  clear_has_tanh_param();
  ::caffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tanh_param(::caffe::TanHParameter* tanh_param) {
  delete tanh_param_;
  tanh_param_ = tanh_param;
  if (tanh_param) {
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.tanh_param)
}

// optional .caffe.ThresholdParameter threshold_param = 128;
inline bool LayerParameter::has_threshold_param() const {
  return (_has_bits_[3] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_threshold_param() {
  _has_bits_[3] |= 0x00000004u;
}
inline void LayerParameter::clear_has_threshold_param() {
  _has_bits_[3] &= ~0x00000004u;
}
inline void LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
  clear_has_threshold_param();
}
inline const ::caffe::ThresholdParameter& LayerParameter::threshold_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.threshold_param)
  return threshold_param_ != NULL ? *threshold_param_ : *default_instance_->threshold_param_;
}
inline ::caffe::ThresholdParameter* LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) {
    threshold_param_ = new ::caffe::ThresholdParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.threshold_param)
  return threshold_param_;
}
inline ::caffe::ThresholdParameter* LayerParameter::release_threshold_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.threshold_param)
  clear_has_threshold_param();
  ::caffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param) {
  delete threshold_param_;
  threshold_param_ = threshold_param;
  if (threshold_param) {
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.threshold_param)
}

// optional .caffe.TileParameter tile_param = 138;
inline bool LayerParameter::has_tile_param() const {
  return (_has_bits_[3] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_tile_param() {
  _has_bits_[3] |= 0x00000008u;
}
inline void LayerParameter::clear_has_tile_param() {
  _has_bits_[3] &= ~0x00000008u;
}
inline void LayerParameter::clear_tile_param() {
  if (tile_param_ != NULL) tile_param_->::caffe::TileParameter::Clear();
  clear_has_tile_param();
}
inline const ::caffe::TileParameter& LayerParameter::tile_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.tile_param)
  return tile_param_ != NULL ? *tile_param_ : *default_instance_->tile_param_;
}
inline ::caffe::TileParameter* LayerParameter::mutable_tile_param() {
  set_has_tile_param();
  if (tile_param_ == NULL) {
    tile_param_ = new ::caffe::TileParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.tile_param)
  return tile_param_;
}
inline ::caffe::TileParameter* LayerParameter::release_tile_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.tile_param)
  clear_has_tile_param();
  ::caffe::TileParameter* temp = tile_param_;
  tile_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tile_param(::caffe::TileParameter* tile_param) {
  delete tile_param_;
  tile_param_ = tile_param;
  if (tile_param) {
    set_has_tile_param();
  } else {
    clear_has_tile_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.tile_param)
}

// optional .caffe.TrackerDataParameter tracker_data_param = 171;
inline bool LayerParameter::has_tracker_data_param() const {
  return (_has_bits_[3] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_tracker_data_param() {
  _has_bits_[3] |= 0x00000010u;
}
inline void LayerParameter::clear_has_tracker_data_param() {
  _has_bits_[3] &= ~0x00000010u;
}
inline void LayerParameter::clear_tracker_data_param() {
  if (tracker_data_param_ != NULL) tracker_data_param_->::caffe::TrackerDataParameter::Clear();
  clear_has_tracker_data_param();
}
inline const ::caffe::TrackerDataParameter& LayerParameter::tracker_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.tracker_data_param)
  return tracker_data_param_ != NULL ? *tracker_data_param_ : *default_instance_->tracker_data_param_;
}
inline ::caffe::TrackerDataParameter* LayerParameter::mutable_tracker_data_param() {
  set_has_tracker_data_param();
  if (tracker_data_param_ == NULL) {
    tracker_data_param_ = new ::caffe::TrackerDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.tracker_data_param)
  return tracker_data_param_;
}
inline ::caffe::TrackerDataParameter* LayerParameter::release_tracker_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.tracker_data_param)
  clear_has_tracker_data_param();
  ::caffe::TrackerDataParameter* temp = tracker_data_param_;
  tracker_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tracker_data_param(::caffe::TrackerDataParameter* tracker_data_param) {
  delete tracker_data_param_;
  tracker_data_param_ = tracker_data_param;
  if (tracker_data_param) {
    set_has_tracker_data_param();
  } else {
    clear_has_tracker_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.tracker_data_param)
}

// optional .caffe.TrackerMcOutParameter tracker_mcout_param = 184;
inline bool LayerParameter::has_tracker_mcout_param() const {
  return (_has_bits_[3] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_tracker_mcout_param() {
  _has_bits_[3] |= 0x00000020u;
}
inline void LayerParameter::clear_has_tracker_mcout_param() {
  _has_bits_[3] &= ~0x00000020u;
}
inline void LayerParameter::clear_tracker_mcout_param() {
  if (tracker_mcout_param_ != NULL) tracker_mcout_param_->::caffe::TrackerMcOutParameter::Clear();
  clear_has_tracker_mcout_param();
}
inline const ::caffe::TrackerMcOutParameter& LayerParameter::tracker_mcout_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.tracker_mcout_param)
  return tracker_mcout_param_ != NULL ? *tracker_mcout_param_ : *default_instance_->tracker_mcout_param_;
}
inline ::caffe::TrackerMcOutParameter* LayerParameter::mutable_tracker_mcout_param() {
  set_has_tracker_mcout_param();
  if (tracker_mcout_param_ == NULL) {
    tracker_mcout_param_ = new ::caffe::TrackerMcOutParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.tracker_mcout_param)
  return tracker_mcout_param_;
}
inline ::caffe::TrackerMcOutParameter* LayerParameter::release_tracker_mcout_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.tracker_mcout_param)
  clear_has_tracker_mcout_param();
  ::caffe::TrackerMcOutParameter* temp = tracker_mcout_param_;
  tracker_mcout_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tracker_mcout_param(::caffe::TrackerMcOutParameter* tracker_mcout_param) {
  delete tracker_mcout_param_;
  tracker_mcout_param_ = tracker_mcout_param;
  if (tracker_mcout_param) {
    set_has_tracker_mcout_param();
  } else {
    clear_has_tracker_mcout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.tracker_mcout_param)
}

// optional .caffe.TrackerMcLossParameter tracker_mcloss_param = 183;
inline bool LayerParameter::has_tracker_mcloss_param() const {
  return (_has_bits_[3] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_tracker_mcloss_param() {
  _has_bits_[3] |= 0x00000040u;
}
inline void LayerParameter::clear_has_tracker_mcloss_param() {
  _has_bits_[3] &= ~0x00000040u;
}
inline void LayerParameter::clear_tracker_mcloss_param() {
  if (tracker_mcloss_param_ != NULL) tracker_mcloss_param_->::caffe::TrackerMcLossParameter::Clear();
  clear_has_tracker_mcloss_param();
}
inline const ::caffe::TrackerMcLossParameter& LayerParameter::tracker_mcloss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.tracker_mcloss_param)
  return tracker_mcloss_param_ != NULL ? *tracker_mcloss_param_ : *default_instance_->tracker_mcloss_param_;
}
inline ::caffe::TrackerMcLossParameter* LayerParameter::mutable_tracker_mcloss_param() {
  set_has_tracker_mcloss_param();
  if (tracker_mcloss_param_ == NULL) {
    tracker_mcloss_param_ = new ::caffe::TrackerMcLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.tracker_mcloss_param)
  return tracker_mcloss_param_;
}
inline ::caffe::TrackerMcLossParameter* LayerParameter::release_tracker_mcloss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.tracker_mcloss_param)
  clear_has_tracker_mcloss_param();
  ::caffe::TrackerMcLossParameter* temp = tracker_mcloss_param_;
  tracker_mcloss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_tracker_mcloss_param(::caffe::TrackerMcLossParameter* tracker_mcloss_param) {
  delete tracker_mcloss_param_;
  tracker_mcloss_param_ = tracker_mcloss_param;
  if (tracker_mcloss_param) {
    set_has_tracker_mcloss_param();
  } else {
    clear_has_tracker_mcloss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.tracker_mcloss_param)
}

// optional .caffe.TrueRoiParameter true_roi_param = 197;
inline bool LayerParameter::has_true_roi_param() const {
  return (_has_bits_[3] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_true_roi_param() {
  _has_bits_[3] |= 0x00000080u;
}
inline void LayerParameter::clear_has_true_roi_param() {
  _has_bits_[3] &= ~0x00000080u;
}
inline void LayerParameter::clear_true_roi_param() {
  if (true_roi_param_ != NULL) true_roi_param_->::caffe::TrueRoiParameter::Clear();
  clear_has_true_roi_param();
}
inline const ::caffe::TrueRoiParameter& LayerParameter::true_roi_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.true_roi_param)
  return true_roi_param_ != NULL ? *true_roi_param_ : *default_instance_->true_roi_param_;
}
inline ::caffe::TrueRoiParameter* LayerParameter::mutable_true_roi_param() {
  set_has_true_roi_param();
  if (true_roi_param_ == NULL) {
    true_roi_param_ = new ::caffe::TrueRoiParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.true_roi_param)
  return true_roi_param_;
}
inline ::caffe::TrueRoiParameter* LayerParameter::release_true_roi_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.true_roi_param)
  clear_has_true_roi_param();
  ::caffe::TrueRoiParameter* temp = true_roi_param_;
  true_roi_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_true_roi_param(::caffe::TrueRoiParameter* true_roi_param) {
  delete true_roi_param_;
  true_roi_param_ = true_roi_param;
  if (true_roi_param) {
    set_has_true_roi_param();
  } else {
    clear_has_true_roi_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.true_roi_param)
}

// optional .caffe.FTrackerDataParameter ftracker_data_param = 172;
inline bool LayerParameter::has_ftracker_data_param() const {
  return (_has_bits_[3] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_ftracker_data_param() {
  _has_bits_[3] |= 0x00000100u;
}
inline void LayerParameter::clear_has_ftracker_data_param() {
  _has_bits_[3] &= ~0x00000100u;
}
inline void LayerParameter::clear_ftracker_data_param() {
  if (ftracker_data_param_ != NULL) ftracker_data_param_->::caffe::FTrackerDataParameter::Clear();
  clear_has_ftracker_data_param();
}
inline const ::caffe::FTrackerDataParameter& LayerParameter::ftracker_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.ftracker_data_param)
  return ftracker_data_param_ != NULL ? *ftracker_data_param_ : *default_instance_->ftracker_data_param_;
}
inline ::caffe::FTrackerDataParameter* LayerParameter::mutable_ftracker_data_param() {
  set_has_ftracker_data_param();
  if (ftracker_data_param_ == NULL) {
    ftracker_data_param_ = new ::caffe::FTrackerDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.ftracker_data_param)
  return ftracker_data_param_;
}
inline ::caffe::FTrackerDataParameter* LayerParameter::release_ftracker_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.ftracker_data_param)
  clear_has_ftracker_data_param();
  ::caffe::FTrackerDataParameter* temp = ftracker_data_param_;
  ftracker_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_ftracker_data_param(::caffe::FTrackerDataParameter* ftracker_data_param) {
  delete ftracker_data_param_;
  ftracker_data_param_ = ftracker_data_param;
  if (ftracker_data_param) {
    set_has_ftracker_data_param();
  } else {
    clear_has_ftracker_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.ftracker_data_param)
}

// optional .caffe.UnifiedDataParameter unified_data_param = 218;
inline bool LayerParameter::has_unified_data_param() const {
  return (_has_bits_[3] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_unified_data_param() {
  _has_bits_[3] |= 0x00000200u;
}
inline void LayerParameter::clear_has_unified_data_param() {
  _has_bits_[3] &= ~0x00000200u;
}
inline void LayerParameter::clear_unified_data_param() {
  if (unified_data_param_ != NULL) unified_data_param_->::caffe::UnifiedDataParameter::Clear();
  clear_has_unified_data_param();
}
inline const ::caffe::UnifiedDataParameter& LayerParameter::unified_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.unified_data_param)
  return unified_data_param_ != NULL ? *unified_data_param_ : *default_instance_->unified_data_param_;
}
inline ::caffe::UnifiedDataParameter* LayerParameter::mutable_unified_data_param() {
  set_has_unified_data_param();
  if (unified_data_param_ == NULL) {
    unified_data_param_ = new ::caffe::UnifiedDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.unified_data_param)
  return unified_data_param_;
}
inline ::caffe::UnifiedDataParameter* LayerParameter::release_unified_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.unified_data_param)
  clear_has_unified_data_param();
  ::caffe::UnifiedDataParameter* temp = unified_data_param_;
  unified_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_unified_data_param(::caffe::UnifiedDataParameter* unified_data_param) {
  delete unified_data_param_;
  unified_data_param_ = unified_data_param;
  if (unified_data_param) {
    set_has_unified_data_param();
  } else {
    clear_has_unified_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.unified_data_param)
}

// optional .caffe.VideoDataParameter video_data_param = 207;
inline bool LayerParameter::has_video_data_param() const {
  return (_has_bits_[3] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_video_data_param() {
  _has_bits_[3] |= 0x00000400u;
}
inline void LayerParameter::clear_has_video_data_param() {
  _has_bits_[3] &= ~0x00000400u;
}
inline void LayerParameter::clear_video_data_param() {
  if (video_data_param_ != NULL) video_data_param_->::caffe::VideoDataParameter::Clear();
  clear_has_video_data_param();
}
inline const ::caffe::VideoDataParameter& LayerParameter::video_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.video_data_param)
  return video_data_param_ != NULL ? *video_data_param_ : *default_instance_->video_data_param_;
}
inline ::caffe::VideoDataParameter* LayerParameter::mutable_video_data_param() {
  set_has_video_data_param();
  if (video_data_param_ == NULL) {
    video_data_param_ = new ::caffe::VideoDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.video_data_param)
  return video_data_param_;
}
inline ::caffe::VideoDataParameter* LayerParameter::release_video_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.video_data_param)
  clear_has_video_data_param();
  ::caffe::VideoDataParameter* temp = video_data_param_;
  video_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_video_data_param(::caffe::VideoDataParameter* video_data_param) {
  delete video_data_param_;
  video_data_param_ = video_data_param;
  if (video_data_param) {
    set_has_video_data_param();
  } else {
    clear_has_video_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.video_data_param)
}

// optional .caffe.VideoframeParameter video_frame_param = 208;
inline bool LayerParameter::has_video_frame_param() const {
  return (_has_bits_[3] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_video_frame_param() {
  _has_bits_[3] |= 0x00000800u;
}
inline void LayerParameter::clear_has_video_frame_param() {
  _has_bits_[3] &= ~0x00000800u;
}
inline void LayerParameter::clear_video_frame_param() {
  if (video_frame_param_ != NULL) video_frame_param_->::caffe::VideoframeParameter::Clear();
  clear_has_video_frame_param();
}
inline const ::caffe::VideoframeParameter& LayerParameter::video_frame_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.video_frame_param)
  return video_frame_param_ != NULL ? *video_frame_param_ : *default_instance_->video_frame_param_;
}
inline ::caffe::VideoframeParameter* LayerParameter::mutable_video_frame_param() {
  set_has_video_frame_param();
  if (video_frame_param_ == NULL) {
    video_frame_param_ = new ::caffe::VideoframeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.video_frame_param)
  return video_frame_param_;
}
inline ::caffe::VideoframeParameter* LayerParameter::release_video_frame_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.video_frame_param)
  clear_has_video_frame_param();
  ::caffe::VideoframeParameter* temp = video_frame_param_;
  video_frame_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_video_frame_param(::caffe::VideoframeParameter* video_frame_param) {
  delete video_frame_param_;
  video_frame_param_ = video_frame_param;
  if (video_frame_param) {
    set_has_video_frame_param();
  } else {
    clear_has_video_frame_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.video_frame_param)
}

// optional .caffe.VisualizeposeParameter visualize_pose_param = 211;
inline bool LayerParameter::has_visualize_pose_param() const {
  return (_has_bits_[3] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_visualize_pose_param() {
  _has_bits_[3] |= 0x00001000u;
}
inline void LayerParameter::clear_has_visualize_pose_param() {
  _has_bits_[3] &= ~0x00001000u;
}
inline void LayerParameter::clear_visualize_pose_param() {
  if (visualize_pose_param_ != NULL) visualize_pose_param_->::caffe::VisualizeposeParameter::Clear();
  clear_has_visualize_pose_param();
}
inline const ::caffe::VisualizeposeParameter& LayerParameter::visualize_pose_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.visualize_pose_param)
  return visualize_pose_param_ != NULL ? *visualize_pose_param_ : *default_instance_->visualize_pose_param_;
}
inline ::caffe::VisualizeposeParameter* LayerParameter::mutable_visualize_pose_param() {
  set_has_visualize_pose_param();
  if (visualize_pose_param_ == NULL) {
    visualize_pose_param_ = new ::caffe::VisualizeposeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.visualize_pose_param)
  return visualize_pose_param_;
}
inline ::caffe::VisualizeposeParameter* LayerParameter::release_visualize_pose_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.visualize_pose_param)
  clear_has_visualize_pose_param();
  ::caffe::VisualizeposeParameter* temp = visualize_pose_param_;
  visualize_pose_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_visualize_pose_param(::caffe::VisualizeposeParameter* visualize_pose_param) {
  delete visualize_pose_param_;
  visualize_pose_param_ = visualize_pose_param;
  if (visualize_pose_param) {
    set_has_visualize_pose_param();
  } else {
    clear_has_visualize_pose_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.visualize_pose_param)
}

// optional .caffe.VisualizeBoxposeParameter visualize_boxpose_param = 212;
inline bool LayerParameter::has_visualize_boxpose_param() const {
  return (_has_bits_[3] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_visualize_boxpose_param() {
  _has_bits_[3] |= 0x00002000u;
}
inline void LayerParameter::clear_has_visualize_boxpose_param() {
  _has_bits_[3] &= ~0x00002000u;
}
inline void LayerParameter::clear_visualize_boxpose_param() {
  if (visualize_boxpose_param_ != NULL) visualize_boxpose_param_->::caffe::VisualizeBoxposeParameter::Clear();
  clear_has_visualize_boxpose_param();
}
inline const ::caffe::VisualizeBoxposeParameter& LayerParameter::visualize_boxpose_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.visualize_boxpose_param)
  return visualize_boxpose_param_ != NULL ? *visualize_boxpose_param_ : *default_instance_->visualize_boxpose_param_;
}
inline ::caffe::VisualizeBoxposeParameter* LayerParameter::mutable_visualize_boxpose_param() {
  set_has_visualize_boxpose_param();
  if (visualize_boxpose_param_ == NULL) {
    visualize_boxpose_param_ = new ::caffe::VisualizeBoxposeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.visualize_boxpose_param)
  return visualize_boxpose_param_;
}
inline ::caffe::VisualizeBoxposeParameter* LayerParameter::release_visualize_boxpose_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.visualize_boxpose_param)
  clear_has_visualize_boxpose_param();
  ::caffe::VisualizeBoxposeParameter* temp = visualize_boxpose_param_;
  visualize_boxpose_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_visualize_boxpose_param(::caffe::VisualizeBoxposeParameter* visualize_boxpose_param) {
  delete visualize_boxpose_param_;
  visualize_boxpose_param_ = visualize_boxpose_param;
  if (visualize_boxpose_param) {
    set_has_visualize_boxpose_param();
  } else {
    clear_has_visualize_boxpose_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.visualize_boxpose_param)
}

// optional .caffe.VisualMaskParameter visual_mask_param = 213;
inline bool LayerParameter::has_visual_mask_param() const {
  return (_has_bits_[3] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_visual_mask_param() {
  _has_bits_[3] |= 0x00004000u;
}
inline void LayerParameter::clear_has_visual_mask_param() {
  _has_bits_[3] &= ~0x00004000u;
}
inline void LayerParameter::clear_visual_mask_param() {
  if (visual_mask_param_ != NULL) visual_mask_param_->::caffe::VisualMaskParameter::Clear();
  clear_has_visual_mask_param();
}
inline const ::caffe::VisualMaskParameter& LayerParameter::visual_mask_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.visual_mask_param)
  return visual_mask_param_ != NULL ? *visual_mask_param_ : *default_instance_->visual_mask_param_;
}
inline ::caffe::VisualMaskParameter* LayerParameter::mutable_visual_mask_param() {
  set_has_visual_mask_param();
  if (visual_mask_param_ == NULL) {
    visual_mask_param_ = new ::caffe::VisualMaskParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.visual_mask_param)
  return visual_mask_param_;
}
inline ::caffe::VisualMaskParameter* LayerParameter::release_visual_mask_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.visual_mask_param)
  clear_has_visual_mask_param();
  ::caffe::VisualMaskParameter* temp = visual_mask_param_;
  visual_mask_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_visual_mask_param(::caffe::VisualMaskParameter* visual_mask_param) {
  delete visual_mask_param_;
  visual_mask_param_ = visual_mask_param;
  if (visual_mask_param) {
    set_has_visual_mask_param();
  } else {
    clear_has_visual_mask_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.visual_mask_param)
}

// optional .caffe.WindowDataParameter window_data_param = 129;
inline bool LayerParameter::has_window_data_param() const {
  return (_has_bits_[3] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_window_data_param() {
  _has_bits_[3] |= 0x00008000u;
}
inline void LayerParameter::clear_has_window_data_param() {
  _has_bits_[3] &= ~0x00008000u;
}
inline void LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
  clear_has_window_data_param();
}
inline const ::caffe::WindowDataParameter& LayerParameter::window_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.window_data_param)
  return window_data_param_ != NULL ? *window_data_param_ : *default_instance_->window_data_param_;
}
inline ::caffe::WindowDataParameter* LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) {
    window_data_param_ = new ::caffe::WindowDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.window_data_param)
  return window_data_param_;
}
inline ::caffe::WindowDataParameter* LayerParameter::release_window_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.window_data_param)
  clear_has_window_data_param();
  ::caffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param) {
  delete window_data_param_;
  window_data_param_ = window_data_param;
  if (window_data_param) {
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.window_data_param)
}

// optional .caffe.HandPoseDataParameter handpose_data_param = 300;
inline bool LayerParameter::has_handpose_data_param() const {
  return (_has_bits_[3] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_handpose_data_param() {
  _has_bits_[3] |= 0x00010000u;
}
inline void LayerParameter::clear_has_handpose_data_param() {
  _has_bits_[3] &= ~0x00010000u;
}
inline void LayerParameter::clear_handpose_data_param() {
  if (handpose_data_param_ != NULL) handpose_data_param_->::caffe::HandPoseDataParameter::Clear();
  clear_has_handpose_data_param();
}
inline const ::caffe::HandPoseDataParameter& LayerParameter::handpose_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.handpose_data_param)
  return handpose_data_param_ != NULL ? *handpose_data_param_ : *default_instance_->handpose_data_param_;
}
inline ::caffe::HandPoseDataParameter* LayerParameter::mutable_handpose_data_param() {
  set_has_handpose_data_param();
  if (handpose_data_param_ == NULL) {
    handpose_data_param_ = new ::caffe::HandPoseDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.handpose_data_param)
  return handpose_data_param_;
}
inline ::caffe::HandPoseDataParameter* LayerParameter::release_handpose_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.handpose_data_param)
  clear_has_handpose_data_param();
  ::caffe::HandPoseDataParameter* temp = handpose_data_param_;
  handpose_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_handpose_data_param(::caffe::HandPoseDataParameter* handpose_data_param) {
  delete handpose_data_param_;
  handpose_data_param_ = handpose_data_param;
  if (handpose_data_param) {
    set_has_handpose_data_param();
  } else {
    clear_has_handpose_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.handpose_data_param)
}

// optional .caffe.MarginInnerProductParameter margin_inner_product_param = 299;
inline bool LayerParameter::has_margin_inner_product_param() const {
  return (_has_bits_[3] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_margin_inner_product_param() {
  _has_bits_[3] |= 0x00020000u;
}
inline void LayerParameter::clear_has_margin_inner_product_param() {
  _has_bits_[3] &= ~0x00020000u;
}
inline void LayerParameter::clear_margin_inner_product_param() {
  if (margin_inner_product_param_ != NULL) margin_inner_product_param_->::caffe::MarginInnerProductParameter::Clear();
  clear_has_margin_inner_product_param();
}
inline const ::caffe::MarginInnerProductParameter& LayerParameter::margin_inner_product_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.margin_inner_product_param)
  return margin_inner_product_param_ != NULL ? *margin_inner_product_param_ : *default_instance_->margin_inner_product_param_;
}
inline ::caffe::MarginInnerProductParameter* LayerParameter::mutable_margin_inner_product_param() {
  set_has_margin_inner_product_param();
  if (margin_inner_product_param_ == NULL) {
    margin_inner_product_param_ = new ::caffe::MarginInnerProductParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.margin_inner_product_param)
  return margin_inner_product_param_;
}
inline ::caffe::MarginInnerProductParameter* LayerParameter::release_margin_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.margin_inner_product_param)
  clear_has_margin_inner_product_param();
  ::caffe::MarginInnerProductParameter* temp = margin_inner_product_param_;
  margin_inner_product_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_margin_inner_product_param(::caffe::MarginInnerProductParameter* margin_inner_product_param) {
  delete margin_inner_product_param_;
  margin_inner_product_param_ = margin_inner_product_param;
  if (margin_inner_product_param) {
    set_has_margin_inner_product_param();
  } else {
    clear_has_margin_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.margin_inner_product_param)
}

// optional .caffe.TrackerPriorParameter trackerprior_param = 266;
inline bool LayerParameter::has_trackerprior_param() const {
  return (_has_bits_[3] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_trackerprior_param() {
  _has_bits_[3] |= 0x00040000u;
}
inline void LayerParameter::clear_has_trackerprior_param() {
  _has_bits_[3] &= ~0x00040000u;
}
inline void LayerParameter::clear_trackerprior_param() {
  if (trackerprior_param_ != NULL) trackerprior_param_->::caffe::TrackerPriorParameter::Clear();
  clear_has_trackerprior_param();
}
inline const ::caffe::TrackerPriorParameter& LayerParameter::trackerprior_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.trackerprior_param)
  return trackerprior_param_ != NULL ? *trackerprior_param_ : *default_instance_->trackerprior_param_;
}
inline ::caffe::TrackerPriorParameter* LayerParameter::mutable_trackerprior_param() {
  set_has_trackerprior_param();
  if (trackerprior_param_ == NULL) {
    trackerprior_param_ = new ::caffe::TrackerPriorParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.trackerprior_param)
  return trackerprior_param_;
}
inline ::caffe::TrackerPriorParameter* LayerParameter::release_trackerprior_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.trackerprior_param)
  clear_has_trackerprior_param();
  ::caffe::TrackerPriorParameter* temp = trackerprior_param_;
  trackerprior_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_trackerprior_param(::caffe::TrackerPriorParameter* trackerprior_param) {
  delete trackerprior_param_;
  trackerprior_param_ = trackerprior_param;
  if (trackerprior_param) {
    set_has_trackerprior_param();
  } else {
    clear_has_trackerprior_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.trackerprior_param)
}

// optional .caffe.MinihandTransformationParameter minihand_transform_param = 239;
inline bool LayerParameter::has_minihand_transform_param() const {
  return (_has_bits_[3] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_minihand_transform_param() {
  _has_bits_[3] |= 0x00080000u;
}
inline void LayerParameter::clear_has_minihand_transform_param() {
  _has_bits_[3] &= ~0x00080000u;
}
inline void LayerParameter::clear_minihand_transform_param() {
  if (minihand_transform_param_ != NULL) minihand_transform_param_->::caffe::MinihandTransformationParameter::Clear();
  clear_has_minihand_transform_param();
}
inline const ::caffe::MinihandTransformationParameter& LayerParameter::minihand_transform_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.minihand_transform_param)
  return minihand_transform_param_ != NULL ? *minihand_transform_param_ : *default_instance_->minihand_transform_param_;
}
inline ::caffe::MinihandTransformationParameter* LayerParameter::mutable_minihand_transform_param() {
  set_has_minihand_transform_param();
  if (minihand_transform_param_ == NULL) {
    minihand_transform_param_ = new ::caffe::MinihandTransformationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.minihand_transform_param)
  return minihand_transform_param_;
}
inline ::caffe::MinihandTransformationParameter* LayerParameter::release_minihand_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.minihand_transform_param)
  clear_has_minihand_transform_param();
  ::caffe::MinihandTransformationParameter* temp = minihand_transform_param_;
  minihand_transform_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_minihand_transform_param(::caffe::MinihandTransformationParameter* minihand_transform_param) {
  delete minihand_transform_param_;
  minihand_transform_param_ = minihand_transform_param;
  if (minihand_transform_param) {
    set_has_minihand_transform_param();
  } else {
    clear_has_minihand_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.minihand_transform_param)
}

// optional .caffe.MinihandDataParameter minihand_data_param = 240;
inline bool LayerParameter::has_minihand_data_param() const {
  return (_has_bits_[3] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_minihand_data_param() {
  _has_bits_[3] |= 0x00100000u;
}
inline void LayerParameter::clear_has_minihand_data_param() {
  _has_bits_[3] &= ~0x00100000u;
}
inline void LayerParameter::clear_minihand_data_param() {
  if (minihand_data_param_ != NULL) minihand_data_param_->::caffe::MinihandDataParameter::Clear();
  clear_has_minihand_data_param();
}
inline const ::caffe::MinihandDataParameter& LayerParameter::minihand_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.minihand_data_param)
  return minihand_data_param_ != NULL ? *minihand_data_param_ : *default_instance_->minihand_data_param_;
}
inline ::caffe::MinihandDataParameter* LayerParameter::mutable_minihand_data_param() {
  set_has_minihand_data_param();
  if (minihand_data_param_ == NULL) {
    minihand_data_param_ = new ::caffe::MinihandDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.minihand_data_param)
  return minihand_data_param_;
}
inline ::caffe::MinihandDataParameter* LayerParameter::release_minihand_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.minihand_data_param)
  clear_has_minihand_data_param();
  ::caffe::MinihandDataParameter* temp = minihand_data_param_;
  minihand_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_minihand_data_param(::caffe::MinihandDataParameter* minihand_data_param) {
  delete minihand_data_param_;
  minihand_data_param_ = minihand_data_param;
  if (minihand_data_param) {
    set_has_minihand_data_param();
  } else {
    clear_has_minihand_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.minihand_data_param)
}

// optional .caffe.SmoothL1LossParameter smooth_l1_loss_param = 241;
inline bool LayerParameter::has_smooth_l1_loss_param() const {
  return (_has_bits_[3] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_smooth_l1_loss_param() {
  _has_bits_[3] |= 0x00200000u;
}
inline void LayerParameter::clear_has_smooth_l1_loss_param() {
  _has_bits_[3] &= ~0x00200000u;
}
inline void LayerParameter::clear_smooth_l1_loss_param() {
  if (smooth_l1_loss_param_ != NULL) smooth_l1_loss_param_->::caffe::SmoothL1LossParameter::Clear();
  clear_has_smooth_l1_loss_param();
}
inline const ::caffe::SmoothL1LossParameter& LayerParameter::smooth_l1_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.smooth_l1_loss_param)
  return smooth_l1_loss_param_ != NULL ? *smooth_l1_loss_param_ : *default_instance_->smooth_l1_loss_param_;
}
inline ::caffe::SmoothL1LossParameter* LayerParameter::mutable_smooth_l1_loss_param() {
  set_has_smooth_l1_loss_param();
  if (smooth_l1_loss_param_ == NULL) {
    smooth_l1_loss_param_ = new ::caffe::SmoothL1LossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.smooth_l1_loss_param)
  return smooth_l1_loss_param_;
}
inline ::caffe::SmoothL1LossParameter* LayerParameter::release_smooth_l1_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.smooth_l1_loss_param)
  clear_has_smooth_l1_loss_param();
  ::caffe::SmoothL1LossParameter* temp = smooth_l1_loss_param_;
  smooth_l1_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_smooth_l1_loss_param(::caffe::SmoothL1LossParameter* smooth_l1_loss_param) {
  delete smooth_l1_loss_param_;
  smooth_l1_loss_param_ = smooth_l1_loss_param;
  if (smooth_l1_loss_param) {
    set_has_smooth_l1_loss_param();
  } else {
    clear_has_smooth_l1_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.smooth_l1_loss_param)
}

// optional .caffe.SpatialDropoutParameter spatial_dropout_param = 400;
inline bool LayerParameter::has_spatial_dropout_param() const {
  return (_has_bits_[3] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_spatial_dropout_param() {
  _has_bits_[3] |= 0x00400000u;
}
inline void LayerParameter::clear_has_spatial_dropout_param() {
  _has_bits_[3] &= ~0x00400000u;
}
inline void LayerParameter::clear_spatial_dropout_param() {
  if (spatial_dropout_param_ != NULL) spatial_dropout_param_->::caffe::SpatialDropoutParameter::Clear();
  clear_has_spatial_dropout_param();
}
inline const ::caffe::SpatialDropoutParameter& LayerParameter::spatial_dropout_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.spatial_dropout_param)
  return spatial_dropout_param_ != NULL ? *spatial_dropout_param_ : *default_instance_->spatial_dropout_param_;
}
inline ::caffe::SpatialDropoutParameter* LayerParameter::mutable_spatial_dropout_param() {
  set_has_spatial_dropout_param();
  if (spatial_dropout_param_ == NULL) {
    spatial_dropout_param_ = new ::caffe::SpatialDropoutParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.spatial_dropout_param)
  return spatial_dropout_param_;
}
inline ::caffe::SpatialDropoutParameter* LayerParameter::release_spatial_dropout_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.spatial_dropout_param)
  clear_has_spatial_dropout_param();
  ::caffe::SpatialDropoutParameter* temp = spatial_dropout_param_;
  spatial_dropout_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_spatial_dropout_param(::caffe::SpatialDropoutParameter* spatial_dropout_param) {
  delete spatial_dropout_param_;
  spatial_dropout_param_ = spatial_dropout_param;
  if (spatial_dropout_param) {
    set_has_spatial_dropout_param();
  } else {
    clear_has_spatial_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.spatial_dropout_param)
}

// optional .caffe.ClipSptialmapParameter clip_sptialmap_param = 401;
inline bool LayerParameter::has_clip_sptialmap_param() const {
  return (_has_bits_[3] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_clip_sptialmap_param() {
  _has_bits_[3] |= 0x00800000u;
}
inline void LayerParameter::clear_has_clip_sptialmap_param() {
  _has_bits_[3] &= ~0x00800000u;
}
inline void LayerParameter::clear_clip_sptialmap_param() {
  if (clip_sptialmap_param_ != NULL) clip_sptialmap_param_->::caffe::ClipSptialmapParameter::Clear();
  clear_has_clip_sptialmap_param();
}
inline const ::caffe::ClipSptialmapParameter& LayerParameter::clip_sptialmap_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.clip_sptialmap_param)
  return clip_sptialmap_param_ != NULL ? *clip_sptialmap_param_ : *default_instance_->clip_sptialmap_param_;
}
inline ::caffe::ClipSptialmapParameter* LayerParameter::mutable_clip_sptialmap_param() {
  set_has_clip_sptialmap_param();
  if (clip_sptialmap_param_ == NULL) {
    clip_sptialmap_param_ = new ::caffe::ClipSptialmapParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.clip_sptialmap_param)
  return clip_sptialmap_param_;
}
inline ::caffe::ClipSptialmapParameter* LayerParameter::release_clip_sptialmap_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.clip_sptialmap_param)
  clear_has_clip_sptialmap_param();
  ::caffe::ClipSptialmapParameter* temp = clip_sptialmap_param_;
  clip_sptialmap_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_clip_sptialmap_param(::caffe::ClipSptialmapParameter* clip_sptialmap_param) {
  delete clip_sptialmap_param_;
  clip_sptialmap_param_ = clip_sptialmap_param;
  if (clip_sptialmap_param) {
    set_has_clip_sptialmap_param();
  } else {
    clear_has_clip_sptialmap_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.clip_sptialmap_param)
}

// optional .caffe.InterpParameter interp_param = 402;
inline bool LayerParameter::has_interp_param() const {
  return (_has_bits_[3] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_interp_param() {
  _has_bits_[3] |= 0x01000000u;
}
inline void LayerParameter::clear_has_interp_param() {
  _has_bits_[3] &= ~0x01000000u;
}
inline void LayerParameter::clear_interp_param() {
  if (interp_param_ != NULL) interp_param_->::caffe::InterpParameter::Clear();
  clear_has_interp_param();
}
inline const ::caffe::InterpParameter& LayerParameter::interp_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.interp_param)
  return interp_param_ != NULL ? *interp_param_ : *default_instance_->interp_param_;
}
inline ::caffe::InterpParameter* LayerParameter::mutable_interp_param() {
  set_has_interp_param();
  if (interp_param_ == NULL) {
    interp_param_ = new ::caffe::InterpParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.interp_param)
  return interp_param_;
}
inline ::caffe::InterpParameter* LayerParameter::release_interp_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.interp_param)
  clear_has_interp_param();
  ::caffe::InterpParameter* temp = interp_param_;
  interp_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_interp_param(::caffe::InterpParameter* interp_param) {
  delete interp_param_;
  interp_param_ = interp_param;
  if (interp_param) {
    set_has_interp_param();
  } else {
    clear_has_interp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.interp_param)
}

// optional .caffe.DenseImageDataParameter dense_image_data_param = 403;
inline bool LayerParameter::has_dense_image_data_param() const {
  return (_has_bits_[3] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_dense_image_data_param() {
  _has_bits_[3] |= 0x02000000u;
}
inline void LayerParameter::clear_has_dense_image_data_param() {
  _has_bits_[3] &= ~0x02000000u;
}
inline void LayerParameter::clear_dense_image_data_param() {
  if (dense_image_data_param_ != NULL) dense_image_data_param_->::caffe::DenseImageDataParameter::Clear();
  clear_has_dense_image_data_param();
}
inline const ::caffe::DenseImageDataParameter& LayerParameter::dense_image_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.dense_image_data_param)
  return dense_image_data_param_ != NULL ? *dense_image_data_param_ : *default_instance_->dense_image_data_param_;
}
inline ::caffe::DenseImageDataParameter* LayerParameter::mutable_dense_image_data_param() {
  set_has_dense_image_data_param();
  if (dense_image_data_param_ == NULL) {
    dense_image_data_param_ = new ::caffe::DenseImageDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.dense_image_data_param)
  return dense_image_data_param_;
}
inline ::caffe::DenseImageDataParameter* LayerParameter::release_dense_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.dense_image_data_param)
  clear_has_dense_image_data_param();
  ::caffe::DenseImageDataParameter* temp = dense_image_data_param_;
  dense_image_data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_dense_image_data_param(::caffe::DenseImageDataParameter* dense_image_data_param) {
  delete dense_image_data_param_;
  dense_image_data_param_ = dense_image_data_param;
  if (dense_image_data_param) {
    set_has_dense_image_data_param();
  } else {
    clear_has_dense_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.dense_image_data_param)
}

// optional .caffe.EnforceOneParameter enforce_one_param = 404;
inline bool LayerParameter::has_enforce_one_param() const {
  return (_has_bits_[3] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_enforce_one_param() {
  _has_bits_[3] |= 0x04000000u;
}
inline void LayerParameter::clear_has_enforce_one_param() {
  _has_bits_[3] &= ~0x04000000u;
}
inline void LayerParameter::clear_enforce_one_param() {
  if (enforce_one_param_ != NULL) enforce_one_param_->::caffe::EnforceOneParameter::Clear();
  clear_has_enforce_one_param();
}
inline const ::caffe::EnforceOneParameter& LayerParameter::enforce_one_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.enforce_one_param)
  return enforce_one_param_ != NULL ? *enforce_one_param_ : *default_instance_->enforce_one_param_;
}
inline ::caffe::EnforceOneParameter* LayerParameter::mutable_enforce_one_param() {
  set_has_enforce_one_param();
  if (enforce_one_param_ == NULL) {
    enforce_one_param_ = new ::caffe::EnforceOneParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.enforce_one_param)
  return enforce_one_param_;
}
inline ::caffe::EnforceOneParameter* LayerParameter::release_enforce_one_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.enforce_one_param)
  clear_has_enforce_one_param();
  ::caffe::EnforceOneParameter* temp = enforce_one_param_;
  enforce_one_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_enforce_one_param(::caffe::EnforceOneParameter* enforce_one_param) {
  delete enforce_one_param_;
  enforce_one_param_ = enforce_one_param;
  if (enforce_one_param) {
    set_has_enforce_one_param();
  } else {
    clear_has_enforce_one_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.enforce_one_param)
}

// optional .caffe.SegDataTransformationParameter seg_data_transformer_param = 405;
inline bool LayerParameter::has_seg_data_transformer_param() const {
  return (_has_bits_[3] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_seg_data_transformer_param() {
  _has_bits_[3] |= 0x08000000u;
}
inline void LayerParameter::clear_has_seg_data_transformer_param() {
  _has_bits_[3] &= ~0x08000000u;
}
inline void LayerParameter::clear_seg_data_transformer_param() {
  if (seg_data_transformer_param_ != NULL) seg_data_transformer_param_->::caffe::SegDataTransformationParameter::Clear();
  clear_has_seg_data_transformer_param();
}
inline const ::caffe::SegDataTransformationParameter& LayerParameter::seg_data_transformer_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.seg_data_transformer_param)
  return seg_data_transformer_param_ != NULL ? *seg_data_transformer_param_ : *default_instance_->seg_data_transformer_param_;
}
inline ::caffe::SegDataTransformationParameter* LayerParameter::mutable_seg_data_transformer_param() {
  set_has_seg_data_transformer_param();
  if (seg_data_transformer_param_ == NULL) {
    seg_data_transformer_param_ = new ::caffe::SegDataTransformationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.seg_data_transformer_param)
  return seg_data_transformer_param_;
}
inline ::caffe::SegDataTransformationParameter* LayerParameter::release_seg_data_transformer_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.seg_data_transformer_param)
  clear_has_seg_data_transformer_param();
  ::caffe::SegDataTransformationParameter* temp = seg_data_transformer_param_;
  seg_data_transformer_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_seg_data_transformer_param(::caffe::SegDataTransformationParameter* seg_data_transformer_param) {
  delete seg_data_transformer_param_;
  seg_data_transformer_param_ = seg_data_transformer_param;
  if (seg_data_transformer_param) {
    set_has_seg_data_transformer_param();
  } else {
    clear_has_seg_data_transformer_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.seg_data_transformer_param)
}

// optional .caffe.SegAccuracyParameter seg_accuracy_param = 406;
inline bool LayerParameter::has_seg_accuracy_param() const {
  return (_has_bits_[3] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_seg_accuracy_param() {
  _has_bits_[3] |= 0x10000000u;
}
inline void LayerParameter::clear_has_seg_accuracy_param() {
  _has_bits_[3] &= ~0x10000000u;
}
inline void LayerParameter::clear_seg_accuracy_param() {
  if (seg_accuracy_param_ != NULL) seg_accuracy_param_->::caffe::SegAccuracyParameter::Clear();
  clear_has_seg_accuracy_param();
}
inline const ::caffe::SegAccuracyParameter& LayerParameter::seg_accuracy_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.seg_accuracy_param)
  return seg_accuracy_param_ != NULL ? *seg_accuracy_param_ : *default_instance_->seg_accuracy_param_;
}
inline ::caffe::SegAccuracyParameter* LayerParameter::mutable_seg_accuracy_param() {
  set_has_seg_accuracy_param();
  if (seg_accuracy_param_ == NULL) {
    seg_accuracy_param_ = new ::caffe::SegAccuracyParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.seg_accuracy_param)
  return seg_accuracy_param_;
}
inline ::caffe::SegAccuracyParameter* LayerParameter::release_seg_accuracy_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.seg_accuracy_param)
  clear_has_seg_accuracy_param();
  ::caffe::SegAccuracyParameter* temp = seg_accuracy_param_;
  seg_accuracy_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_seg_accuracy_param(::caffe::SegAccuracyParameter* seg_accuracy_param) {
  delete seg_accuracy_param_;
  seg_accuracy_param_ = seg_accuracy_param;
  if (seg_accuracy_param) {
    set_has_seg_accuracy_param();
  } else {
    clear_has_seg_accuracy_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.seg_accuracy_param)
}

// optional .caffe.GhmcLossParameter ghmc_loss_param = 407;
inline bool LayerParameter::has_ghmc_loss_param() const {
  return (_has_bits_[3] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_ghmc_loss_param() {
  _has_bits_[3] |= 0x20000000u;
}
inline void LayerParameter::clear_has_ghmc_loss_param() {
  _has_bits_[3] &= ~0x20000000u;
}
inline void LayerParameter::clear_ghmc_loss_param() {
  if (ghmc_loss_param_ != NULL) ghmc_loss_param_->::caffe::GhmcLossParameter::Clear();
  clear_has_ghmc_loss_param();
}
inline const ::caffe::GhmcLossParameter& LayerParameter::ghmc_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.ghmc_loss_param)
  return ghmc_loss_param_ != NULL ? *ghmc_loss_param_ : *default_instance_->ghmc_loss_param_;
}
inline ::caffe::GhmcLossParameter* LayerParameter::mutable_ghmc_loss_param() {
  set_has_ghmc_loss_param();
  if (ghmc_loss_param_ == NULL) {
    ghmc_loss_param_ = new ::caffe::GhmcLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.ghmc_loss_param)
  return ghmc_loss_param_;
}
inline ::caffe::GhmcLossParameter* LayerParameter::release_ghmc_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.ghmc_loss_param)
  clear_has_ghmc_loss_param();
  ::caffe::GhmcLossParameter* temp = ghmc_loss_param_;
  ghmc_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_ghmc_loss_param(::caffe::GhmcLossParameter* ghmc_loss_param) {
  delete ghmc_loss_param_;
  ghmc_loss_param_ = ghmc_loss_param;
  if (ghmc_loss_param) {
    set_has_ghmc_loss_param();
  } else {
    clear_has_ghmc_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.ghmc_loss_param)
}

// optional .caffe.TwoClassBalancedSigmoidCrossEntropyLossParameter two_class_balanced_sigmoid_cross_entropy_loss_param = 408;
inline bool LayerParameter::has_two_class_balanced_sigmoid_cross_entropy_loss_param() const {
  return (_has_bits_[3] & 0x40000000u) != 0;
}
inline void LayerParameter::set_has_two_class_balanced_sigmoid_cross_entropy_loss_param() {
  _has_bits_[3] |= 0x40000000u;
}
inline void LayerParameter::clear_has_two_class_balanced_sigmoid_cross_entropy_loss_param() {
  _has_bits_[3] &= ~0x40000000u;
}
inline void LayerParameter::clear_two_class_balanced_sigmoid_cross_entropy_loss_param() {
  if (two_class_balanced_sigmoid_cross_entropy_loss_param_ != NULL) two_class_balanced_sigmoid_cross_entropy_loss_param_->::caffe::TwoClassBalancedSigmoidCrossEntropyLossParameter::Clear();
  clear_has_two_class_balanced_sigmoid_cross_entropy_loss_param();
}
inline const ::caffe::TwoClassBalancedSigmoidCrossEntropyLossParameter& LayerParameter::two_class_balanced_sigmoid_cross_entropy_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.LayerParameter.two_class_balanced_sigmoid_cross_entropy_loss_param)
  return two_class_balanced_sigmoid_cross_entropy_loss_param_ != NULL ? *two_class_balanced_sigmoid_cross_entropy_loss_param_ : *default_instance_->two_class_balanced_sigmoid_cross_entropy_loss_param_;
}
inline ::caffe::TwoClassBalancedSigmoidCrossEntropyLossParameter* LayerParameter::mutable_two_class_balanced_sigmoid_cross_entropy_loss_param() {
  set_has_two_class_balanced_sigmoid_cross_entropy_loss_param();
  if (two_class_balanced_sigmoid_cross_entropy_loss_param_ == NULL) {
    two_class_balanced_sigmoid_cross_entropy_loss_param_ = new ::caffe::TwoClassBalancedSigmoidCrossEntropyLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.LayerParameter.two_class_balanced_sigmoid_cross_entropy_loss_param)
  return two_class_balanced_sigmoid_cross_entropy_loss_param_;
}
inline ::caffe::TwoClassBalancedSigmoidCrossEntropyLossParameter* LayerParameter::release_two_class_balanced_sigmoid_cross_entropy_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.LayerParameter.two_class_balanced_sigmoid_cross_entropy_loss_param)
  clear_has_two_class_balanced_sigmoid_cross_entropy_loss_param();
  ::caffe::TwoClassBalancedSigmoidCrossEntropyLossParameter* temp = two_class_balanced_sigmoid_cross_entropy_loss_param_;
  two_class_balanced_sigmoid_cross_entropy_loss_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_two_class_balanced_sigmoid_cross_entropy_loss_param(::caffe::TwoClassBalancedSigmoidCrossEntropyLossParameter* two_class_balanced_sigmoid_cross_entropy_loss_param) {
  delete two_class_balanced_sigmoid_cross_entropy_loss_param_;
  two_class_balanced_sigmoid_cross_entropy_loss_param_ = two_class_balanced_sigmoid_cross_entropy_loss_param;
  if (two_class_balanced_sigmoid_cross_entropy_loss_param) {
    set_has_two_class_balanced_sigmoid_cross_entropy_loss_param();
  } else {
    clear_has_two_class_balanced_sigmoid_cross_entropy_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.LayerParameter.two_class_balanced_sigmoid_cross_entropy_loss_param)
}

// -------------------------------------------------------------------

// TwoClassBalancedSigmoidCrossEntropyLossParameter

// optional float alpha = 1 [default = 0.5];
inline bool TwoClassBalancedSigmoidCrossEntropyLossParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TwoClassBalancedSigmoidCrossEntropyLossParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TwoClassBalancedSigmoidCrossEntropyLossParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TwoClassBalancedSigmoidCrossEntropyLossParameter::clear_alpha() {
  alpha_ = 0.5f;
  clear_has_alpha();
}
inline float TwoClassBalancedSigmoidCrossEntropyLossParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.TwoClassBalancedSigmoidCrossEntropyLossParameter.alpha)
  return alpha_;
}
inline void TwoClassBalancedSigmoidCrossEntropyLossParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.TwoClassBalancedSigmoidCrossEntropyLossParameter.alpha)
}

// optional bool only_pos = 2 [default = false];
inline bool TwoClassBalancedSigmoidCrossEntropyLossParameter::has_only_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TwoClassBalancedSigmoidCrossEntropyLossParameter::set_has_only_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TwoClassBalancedSigmoidCrossEntropyLossParameter::clear_has_only_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TwoClassBalancedSigmoidCrossEntropyLossParameter::clear_only_pos() {
  only_pos_ = false;
  clear_has_only_pos();
}
inline bool TwoClassBalancedSigmoidCrossEntropyLossParameter::only_pos() const {
  // @@protoc_insertion_point(field_get:caffe.TwoClassBalancedSigmoidCrossEntropyLossParameter.only_pos)
  return only_pos_;
}
inline void TwoClassBalancedSigmoidCrossEntropyLossParameter::set_only_pos(bool value) {
  set_has_only_pos();
  only_pos_ = value;
  // @@protoc_insertion_point(field_set:caffe.TwoClassBalancedSigmoidCrossEntropyLossParameter.only_pos)
}

// -------------------------------------------------------------------

// GhmcLossParameter

// optional uint32 m = 1 [default = 30];
inline bool GhmcLossParameter::has_m() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GhmcLossParameter::set_has_m() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GhmcLossParameter::clear_has_m() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GhmcLossParameter::clear_m() {
  m_ = 30u;
  clear_has_m();
}
inline ::google::protobuf::uint32 GhmcLossParameter::m() const {
  // @@protoc_insertion_point(field_get:caffe.GhmcLossParameter.m)
  return m_;
}
inline void GhmcLossParameter::set_m(::google::protobuf::uint32 value) {
  set_has_m();
  m_ = value;
  // @@protoc_insertion_point(field_set:caffe.GhmcLossParameter.m)
}

// optional float alpha = 2 [default = 0];
inline bool GhmcLossParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GhmcLossParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GhmcLossParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GhmcLossParameter::clear_alpha() {
  alpha_ = 0;
  clear_has_alpha();
}
inline float GhmcLossParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.GhmcLossParameter.alpha)
  return alpha_;
}
inline void GhmcLossParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.GhmcLossParameter.alpha)
}

// optional float weight = 3 [default = 1];
inline bool GhmcLossParameter::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GhmcLossParameter::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GhmcLossParameter::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GhmcLossParameter::clear_weight() {
  weight_ = 1;
  clear_has_weight();
}
inline float GhmcLossParameter::weight() const {
  // @@protoc_insertion_point(field_get:caffe.GhmcLossParameter.weight)
  return weight_;
}
inline void GhmcLossParameter::set_weight(float value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.GhmcLossParameter.weight)
}

// optional string weight_type = 4 [default = "index"];
inline bool GhmcLossParameter::has_weight_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GhmcLossParameter::set_has_weight_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GhmcLossParameter::clear_has_weight_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GhmcLossParameter::clear_weight_type() {
  weight_type_.ClearToDefaultNoArena(_default_weight_type_);
  clear_has_weight_type();
}
inline const ::std::string& GhmcLossParameter::weight_type() const {
  // @@protoc_insertion_point(field_get:caffe.GhmcLossParameter.weight_type)
  return weight_type_.GetNoArena(_default_weight_type_);
}
inline void GhmcLossParameter::set_weight_type(const ::std::string& value) {
  set_has_weight_type();
  weight_type_.SetNoArena(_default_weight_type_, value);
  // @@protoc_insertion_point(field_set:caffe.GhmcLossParameter.weight_type)
}
inline void GhmcLossParameter::set_weight_type(const char* value) {
  set_has_weight_type();
  weight_type_.SetNoArena(_default_weight_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.GhmcLossParameter.weight_type)
}
inline void GhmcLossParameter::set_weight_type(const char* value, size_t size) {
  set_has_weight_type();
  weight_type_.SetNoArena(_default_weight_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.GhmcLossParameter.weight_type)
}
inline ::std::string* GhmcLossParameter::mutable_weight_type() {
  set_has_weight_type();
  // @@protoc_insertion_point(field_mutable:caffe.GhmcLossParameter.weight_type)
  return weight_type_.MutableNoArena(_default_weight_type_);
}
inline ::std::string* GhmcLossParameter::release_weight_type() {
  // @@protoc_insertion_point(field_release:caffe.GhmcLossParameter.weight_type)
  clear_has_weight_type();
  return weight_type_.ReleaseNoArena(_default_weight_type_);
}
inline void GhmcLossParameter::set_allocated_weight_type(::std::string* weight_type) {
  if (weight_type != NULL) {
    set_has_weight_type();
  } else {
    clear_has_weight_type();
  }
  weight_type_.SetAllocatedNoArena(_default_weight_type_, weight_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.GhmcLossParameter.weight_type)
}

// optional bool use_group = 5 [default = false];
inline bool GhmcLossParameter::has_use_group() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GhmcLossParameter::set_has_use_group() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GhmcLossParameter::clear_has_use_group() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GhmcLossParameter::clear_use_group() {
  use_group_ = false;
  clear_has_use_group();
}
inline bool GhmcLossParameter::use_group() const {
  // @@protoc_insertion_point(field_get:caffe.GhmcLossParameter.use_group)
  return use_group_;
}
inline void GhmcLossParameter::set_use_group(bool value) {
  set_has_use_group();
  use_group_ = value;
  // @@protoc_insertion_point(field_set:caffe.GhmcLossParameter.use_group)
}

// optional float k1 = 6 [default = 1];
inline bool GhmcLossParameter::has_k1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GhmcLossParameter::set_has_k1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GhmcLossParameter::clear_has_k1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GhmcLossParameter::clear_k1() {
  k1_ = 1;
  clear_has_k1();
}
inline float GhmcLossParameter::k1() const {
  // @@protoc_insertion_point(field_get:caffe.GhmcLossParameter.k1)
  return k1_;
}
inline void GhmcLossParameter::set_k1(float value) {
  set_has_k1();
  k1_ = value;
  // @@protoc_insertion_point(field_set:caffe.GhmcLossParameter.k1)
}

// optional float k2 = 7 [default = 1];
inline bool GhmcLossParameter::has_k2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GhmcLossParameter::set_has_k2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GhmcLossParameter::clear_has_k2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GhmcLossParameter::clear_k2() {
  k2_ = 1;
  clear_has_k2();
}
inline float GhmcLossParameter::k2() const {
  // @@protoc_insertion_point(field_get:caffe.GhmcLossParameter.k2)
  return k2_;
}
inline void GhmcLossParameter::set_k2(float value) {
  set_has_k2();
  k2_ = value;
  // @@protoc_insertion_point(field_set:caffe.GhmcLossParameter.k2)
}

// optional float b1 = 8 [default = 0];
inline bool GhmcLossParameter::has_b1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GhmcLossParameter::set_has_b1() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GhmcLossParameter::clear_has_b1() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GhmcLossParameter::clear_b1() {
  b1_ = 0;
  clear_has_b1();
}
inline float GhmcLossParameter::b1() const {
  // @@protoc_insertion_point(field_get:caffe.GhmcLossParameter.b1)
  return b1_;
}
inline void GhmcLossParameter::set_b1(float value) {
  set_has_b1();
  b1_ = value;
  // @@protoc_insertion_point(field_set:caffe.GhmcLossParameter.b1)
}

// optional float b2 = 9 [default = 0];
inline bool GhmcLossParameter::has_b2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GhmcLossParameter::set_has_b2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GhmcLossParameter::clear_has_b2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GhmcLossParameter::clear_b2() {
  b2_ = 0;
  clear_has_b2();
}
inline float GhmcLossParameter::b2() const {
  // @@protoc_insertion_point(field_get:caffe.GhmcLossParameter.b2)
  return b2_;
}
inline void GhmcLossParameter::set_b2(float value) {
  set_has_b2();
  b2_ = value;
  // @@protoc_insertion_point(field_set:caffe.GhmcLossParameter.b2)
}

// optional float diff_thred = 10 [default = 0.05];
inline bool GhmcLossParameter::has_diff_thred() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GhmcLossParameter::set_has_diff_thred() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GhmcLossParameter::clear_has_diff_thred() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GhmcLossParameter::clear_diff_thred() {
  diff_thred_ = 0.05f;
  clear_has_diff_thred();
}
inline float GhmcLossParameter::diff_thred() const {
  // @@protoc_insertion_point(field_get:caffe.GhmcLossParameter.diff_thred)
  return diff_thred_;
}
inline void GhmcLossParameter::set_diff_thred(float value) {
  set_has_diff_thred();
  diff_thred_ = value;
  // @@protoc_insertion_point(field_set:caffe.GhmcLossParameter.diff_thred)
}

// optional float power = 11 [default = 1];
inline bool GhmcLossParameter::has_power() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GhmcLossParameter::set_has_power() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GhmcLossParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GhmcLossParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
inline float GhmcLossParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.GhmcLossParameter.power)
  return power_;
}
inline void GhmcLossParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.GhmcLossParameter.power)
}

// -------------------------------------------------------------------

// SegAccuracyParameter

// optional .caffe.SegAccuracyParameter.AccuracyMetric metric = 1 [default = PixelAccuracy];
inline bool SegAccuracyParameter::has_metric() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SegAccuracyParameter::set_has_metric() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SegAccuracyParameter::clear_has_metric() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SegAccuracyParameter::clear_metric() {
  metric_ = 0;
  clear_has_metric();
}
inline ::caffe::SegAccuracyParameter_AccuracyMetric SegAccuracyParameter::metric() const {
  // @@protoc_insertion_point(field_get:caffe.SegAccuracyParameter.metric)
  return static_cast< ::caffe::SegAccuracyParameter_AccuracyMetric >(metric_);
}
inline void SegAccuracyParameter::set_metric(::caffe::SegAccuracyParameter_AccuracyMetric value) {
  assert(::caffe::SegAccuracyParameter_AccuracyMetric_IsValid(value));
  set_has_metric();
  metric_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegAccuracyParameter.metric)
}

// repeated int32 ignore_label = 2;
inline int SegAccuracyParameter::ignore_label_size() const {
  return ignore_label_.size();
}
inline void SegAccuracyParameter::clear_ignore_label() {
  ignore_label_.Clear();
}
inline ::google::protobuf::int32 SegAccuracyParameter::ignore_label(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SegAccuracyParameter.ignore_label)
  return ignore_label_.Get(index);
}
inline void SegAccuracyParameter::set_ignore_label(int index, ::google::protobuf::int32 value) {
  ignore_label_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SegAccuracyParameter.ignore_label)
}
inline void SegAccuracyParameter::add_ignore_label(::google::protobuf::int32 value) {
  ignore_label_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SegAccuracyParameter.ignore_label)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SegAccuracyParameter::ignore_label() const {
  // @@protoc_insertion_point(field_list:caffe.SegAccuracyParameter.ignore_label)
  return ignore_label_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SegAccuracyParameter::mutable_ignore_label() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SegAccuracyParameter.ignore_label)
  return &ignore_label_;
}

// optional bool reset = 3 [default = true];
inline bool SegAccuracyParameter::has_reset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SegAccuracyParameter::set_has_reset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SegAccuracyParameter::clear_has_reset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SegAccuracyParameter::clear_reset() {
  reset_ = true;
  clear_has_reset();
}
inline bool SegAccuracyParameter::reset() const {
  // @@protoc_insertion_point(field_get:caffe.SegAccuracyParameter.reset)
  return reset_;
}
inline void SegAccuracyParameter::set_reset(bool value) {
  set_has_reset();
  reset_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegAccuracyParameter.reset)
}

// -------------------------------------------------------------------

// SegDataTransformationParameter

// optional float scale = 1 [default = 1];
inline bool SegDataTransformationParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SegDataTransformationParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SegDataTransformationParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SegDataTransformationParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float SegDataTransformationParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.SegDataTransformationParameter.scale)
  return scale_;
}
inline void SegDataTransformationParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegDataTransformationParameter.scale)
}

// optional bool mirror = 2 [default = false];
inline bool SegDataTransformationParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SegDataTransformationParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SegDataTransformationParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SegDataTransformationParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool SegDataTransformationParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.SegDataTransformationParameter.mirror)
  return mirror_;
}
inline void SegDataTransformationParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegDataTransformationParameter.mirror)
}

// optional string mean_file = 3;
inline bool SegDataTransformationParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SegDataTransformationParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SegDataTransformationParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SegDataTransformationParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& SegDataTransformationParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.SegDataTransformationParameter.mean_file)
  return mean_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SegDataTransformationParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SegDataTransformationParameter.mean_file)
}
inline void SegDataTransformationParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SegDataTransformationParameter.mean_file)
}
inline void SegDataTransformationParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SegDataTransformationParameter.mean_file)
}
inline ::std::string* SegDataTransformationParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.SegDataTransformationParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SegDataTransformationParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.SegDataTransformationParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SegDataTransformationParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.SegDataTransformationParameter.mean_file)
}

// repeated float mean_value = 4;
inline int SegDataTransformationParameter::mean_value_size() const {
  return mean_value_.size();
}
inline void SegDataTransformationParameter::clear_mean_value() {
  mean_value_.Clear();
}
inline float SegDataTransformationParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SegDataTransformationParameter.mean_value)
  return mean_value_.Get(index);
}
inline void SegDataTransformationParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SegDataTransformationParameter.mean_value)
}
inline void SegDataTransformationParameter::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SegDataTransformationParameter.mean_value)
}
inline const ::google::protobuf::RepeatedField< float >&
SegDataTransformationParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.SegDataTransformationParameter.mean_value)
  return mean_value_;
}
inline ::google::protobuf::RepeatedField< float >*
SegDataTransformationParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SegDataTransformationParameter.mean_value)
  return &mean_value_;
}

// optional .caffe.DistortionParameter dis_param = 5;
inline bool SegDataTransformationParameter::has_dis_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SegDataTransformationParameter::set_has_dis_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SegDataTransformationParameter::clear_has_dis_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SegDataTransformationParameter::clear_dis_param() {
  if (dis_param_ != NULL) dis_param_->::caffe::DistortionParameter::Clear();
  clear_has_dis_param();
}
inline const ::caffe::DistortionParameter& SegDataTransformationParameter::dis_param() const {
  // @@protoc_insertion_point(field_get:caffe.SegDataTransformationParameter.dis_param)
  return dis_param_ != NULL ? *dis_param_ : *default_instance_->dis_param_;
}
inline ::caffe::DistortionParameter* SegDataTransformationParameter::mutable_dis_param() {
  set_has_dis_param();
  if (dis_param_ == NULL) {
    dis_param_ = new ::caffe::DistortionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.SegDataTransformationParameter.dis_param)
  return dis_param_;
}
inline ::caffe::DistortionParameter* SegDataTransformationParameter::release_dis_param() {
  // @@protoc_insertion_point(field_release:caffe.SegDataTransformationParameter.dis_param)
  clear_has_dis_param();
  ::caffe::DistortionParameter* temp = dis_param_;
  dis_param_ = NULL;
  return temp;
}
inline void SegDataTransformationParameter::set_allocated_dis_param(::caffe::DistortionParameter* dis_param) {
  delete dis_param_;
  dis_param_ = dis_param;
  if (dis_param) {
    set_has_dis_param();
  } else {
    clear_has_dis_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.SegDataTransformationParameter.dis_param)
}

// optional float dark_prop = 6 [default = 0];
inline bool SegDataTransformationParameter::has_dark_prop() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SegDataTransformationParameter::set_has_dark_prop() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SegDataTransformationParameter::clear_has_dark_prop() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SegDataTransformationParameter::clear_dark_prop() {
  dark_prop_ = 0;
  clear_has_dark_prop();
}
inline float SegDataTransformationParameter::dark_prop() const {
  // @@protoc_insertion_point(field_get:caffe.SegDataTransformationParameter.dark_prop)
  return dark_prop_;
}
inline void SegDataTransformationParameter::set_dark_prop(float value) {
  set_has_dark_prop();
  dark_prop_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegDataTransformationParameter.dark_prop)
}

// optional float dark_gamma_min = 7 [default = 0.5];
inline bool SegDataTransformationParameter::has_dark_gamma_min() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SegDataTransformationParameter::set_has_dark_gamma_min() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SegDataTransformationParameter::clear_has_dark_gamma_min() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SegDataTransformationParameter::clear_dark_gamma_min() {
  dark_gamma_min_ = 0.5f;
  clear_has_dark_gamma_min();
}
inline float SegDataTransformationParameter::dark_gamma_min() const {
  // @@protoc_insertion_point(field_get:caffe.SegDataTransformationParameter.dark_gamma_min)
  return dark_gamma_min_;
}
inline void SegDataTransformationParameter::set_dark_gamma_min(float value) {
  set_has_dark_gamma_min();
  dark_gamma_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegDataTransformationParameter.dark_gamma_min)
}

// optional float dark_gamma_max = 8 [default = 1];
inline bool SegDataTransformationParameter::has_dark_gamma_max() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SegDataTransformationParameter::set_has_dark_gamma_max() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SegDataTransformationParameter::clear_has_dark_gamma_max() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SegDataTransformationParameter::clear_dark_gamma_max() {
  dark_gamma_max_ = 1;
  clear_has_dark_gamma_max();
}
inline float SegDataTransformationParameter::dark_gamma_max() const {
  // @@protoc_insertion_point(field_get:caffe.SegDataTransformationParameter.dark_gamma_max)
  return dark_gamma_max_;
}
inline void SegDataTransformationParameter::set_dark_gamma_max(float value) {
  set_has_dark_gamma_max();
  dark_gamma_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegDataTransformationParameter.dark_gamma_max)
}

// optional bool augmention = 9 [default = false];
inline bool SegDataTransformationParameter::has_augmention() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SegDataTransformationParameter::set_has_augmention() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SegDataTransformationParameter::clear_has_augmention() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SegDataTransformationParameter::clear_augmention() {
  augmention_ = false;
  clear_has_augmention();
}
inline bool SegDataTransformationParameter::augmention() const {
  // @@protoc_insertion_point(field_get:caffe.SegDataTransformationParameter.augmention)
  return augmention_;
}
inline void SegDataTransformationParameter::set_augmention(bool value) {
  set_has_augmention();
  augmention_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegDataTransformationParameter.augmention)
}

// optional uint32 quality = 10 [default = 100];
inline bool SegDataTransformationParameter::has_quality() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SegDataTransformationParameter::set_has_quality() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SegDataTransformationParameter::clear_has_quality() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SegDataTransformationParameter::clear_quality() {
  quality_ = 100u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 SegDataTransformationParameter::quality() const {
  // @@protoc_insertion_point(field_get:caffe.SegDataTransformationParameter.quality)
  return quality_;
}
inline void SegDataTransformationParameter::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegDataTransformationParameter.quality)
}

// optional uint32 noise_num = 11 [default = 1000];
inline bool SegDataTransformationParameter::has_noise_num() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SegDataTransformationParameter::set_has_noise_num() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SegDataTransformationParameter::clear_has_noise_num() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SegDataTransformationParameter::clear_noise_num() {
  noise_num_ = 1000u;
  clear_has_noise_num();
}
inline ::google::protobuf::uint32 SegDataTransformationParameter::noise_num() const {
  // @@protoc_insertion_point(field_get:caffe.SegDataTransformationParameter.noise_num)
  return noise_num_;
}
inline void SegDataTransformationParameter::set_noise_num(::google::protobuf::uint32 value) {
  set_has_noise_num();
  noise_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegDataTransformationParameter.noise_num)
}

// optional uint32 crop_size = 12 [default = 0];
inline bool SegDataTransformationParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SegDataTransformationParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SegDataTransformationParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SegDataTransformationParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 SegDataTransformationParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.SegDataTransformationParameter.crop_size)
  return crop_size_;
}
inline void SegDataTransformationParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegDataTransformationParameter.crop_size)
}

// optional uint32 crop_h = 13 [default = 0];
inline bool SegDataTransformationParameter::has_crop_h() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SegDataTransformationParameter::set_has_crop_h() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SegDataTransformationParameter::clear_has_crop_h() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SegDataTransformationParameter::clear_crop_h() {
  crop_h_ = 0u;
  clear_has_crop_h();
}
inline ::google::protobuf::uint32 SegDataTransformationParameter::crop_h() const {
  // @@protoc_insertion_point(field_get:caffe.SegDataTransformationParameter.crop_h)
  return crop_h_;
}
inline void SegDataTransformationParameter::set_crop_h(::google::protobuf::uint32 value) {
  set_has_crop_h();
  crop_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegDataTransformationParameter.crop_h)
}

// optional uint32 crop_w = 14 [default = 0];
inline bool SegDataTransformationParameter::has_crop_w() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SegDataTransformationParameter::set_has_crop_w() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SegDataTransformationParameter::clear_has_crop_w() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SegDataTransformationParameter::clear_crop_w() {
  crop_w_ = 0u;
  clear_has_crop_w();
}
inline ::google::protobuf::uint32 SegDataTransformationParameter::crop_w() const {
  // @@protoc_insertion_point(field_get:caffe.SegDataTransformationParameter.crop_w)
  return crop_w_;
}
inline void SegDataTransformationParameter::set_crop_w(::google::protobuf::uint32 value) {
  set_has_crop_w();
  crop_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.SegDataTransformationParameter.crop_w)
}

// -------------------------------------------------------------------

// EnforceOneParameter

// optional float threshold = 1 [default = 0];
inline bool EnforceOneParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnforceOneParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnforceOneParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnforceOneParameter::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
inline float EnforceOneParameter::threshold() const {
  // @@protoc_insertion_point(field_get:caffe.EnforceOneParameter.threshold)
  return threshold_;
}
inline void EnforceOneParameter::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.EnforceOneParameter.threshold)
}

// -------------------------------------------------------------------

// DenseImageDataParameter

// optional string source = 1;
inline bool DenseImageDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DenseImageDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DenseImageDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DenseImageDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& DenseImageDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.DenseImageDataParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DenseImageDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DenseImageDataParameter.source)
}
inline void DenseImageDataParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DenseImageDataParameter.source)
}
inline void DenseImageDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DenseImageDataParameter.source)
}
inline ::std::string* DenseImageDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.DenseImageDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DenseImageDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.DenseImageDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DenseImageDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.DenseImageDataParameter.source)
}

// optional uint32 batch_size = 2;
inline bool DenseImageDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DenseImageDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DenseImageDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DenseImageDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 DenseImageDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.DenseImageDataParameter.batch_size)
  return batch_size_;
}
inline void DenseImageDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseImageDataParameter.batch_size)
}

// optional uint32 rand_skip = 3 [default = 0];
inline bool DenseImageDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DenseImageDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DenseImageDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DenseImageDataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 DenseImageDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.DenseImageDataParameter.rand_skip)
  return rand_skip_;
}
inline void DenseImageDataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseImageDataParameter.rand_skip)
}

// optional bool shuffle = 4 [default = false];
inline bool DenseImageDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DenseImageDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DenseImageDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DenseImageDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool DenseImageDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.DenseImageDataParameter.shuffle)
  return shuffle_;
}
inline void DenseImageDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseImageDataParameter.shuffle)
}

// optional uint32 new_height = 5 [default = 0];
inline bool DenseImageDataParameter::has_new_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DenseImageDataParameter::set_has_new_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DenseImageDataParameter::clear_has_new_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DenseImageDataParameter::clear_new_height() {
  new_height_ = 0u;
  clear_has_new_height();
}
inline ::google::protobuf::uint32 DenseImageDataParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.DenseImageDataParameter.new_height)
  return new_height_;
}
inline void DenseImageDataParameter::set_new_height(::google::protobuf::uint32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseImageDataParameter.new_height)
}

// optional uint32 new_width = 6 [default = 0];
inline bool DenseImageDataParameter::has_new_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DenseImageDataParameter::set_has_new_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DenseImageDataParameter::clear_has_new_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DenseImageDataParameter::clear_new_width() {
  new_width_ = 0u;
  clear_has_new_width();
}
inline ::google::protobuf::uint32 DenseImageDataParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.DenseImageDataParameter.new_width)
  return new_width_;
}
inline void DenseImageDataParameter::set_new_width(::google::protobuf::uint32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseImageDataParameter.new_width)
}

// optional bool is_color = 7 [default = true];
inline bool DenseImageDataParameter::has_is_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DenseImageDataParameter::set_has_is_color() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DenseImageDataParameter::clear_has_is_color() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DenseImageDataParameter::clear_is_color() {
  is_color_ = true;
  clear_has_is_color();
}
inline bool DenseImageDataParameter::is_color() const {
  // @@protoc_insertion_point(field_get:caffe.DenseImageDataParameter.is_color)
  return is_color_;
}
inline void DenseImageDataParameter::set_is_color(bool value) {
  set_has_is_color();
  is_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseImageDataParameter.is_color)
}

// optional string mean_file = 8;
inline bool DenseImageDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DenseImageDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DenseImageDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DenseImageDataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& DenseImageDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.DenseImageDataParameter.mean_file)
  return mean_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DenseImageDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DenseImageDataParameter.mean_file)
}
inline void DenseImageDataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DenseImageDataParameter.mean_file)
}
inline void DenseImageDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DenseImageDataParameter.mean_file)
}
inline ::std::string* DenseImageDataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.DenseImageDataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DenseImageDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.DenseImageDataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DenseImageDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.DenseImageDataParameter.mean_file)
}

// optional string root_folder = 9 [default = ""];
inline bool DenseImageDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DenseImageDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DenseImageDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DenseImageDataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
inline const ::std::string& DenseImageDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.DenseImageDataParameter.root_folder)
  return root_folder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DenseImageDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DenseImageDataParameter.root_folder)
}
inline void DenseImageDataParameter::set_root_folder(const char* value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DenseImageDataParameter.root_folder)
}
inline void DenseImageDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DenseImageDataParameter.root_folder)
}
inline ::std::string* DenseImageDataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.DenseImageDataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DenseImageDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.DenseImageDataParameter.root_folder)
  clear_has_root_folder();
  return root_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DenseImageDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.DenseImageDataParameter.root_folder)
}

// optional bool mirror = 10 [default = false];
inline bool DenseImageDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DenseImageDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DenseImageDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DenseImageDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool DenseImageDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.DenseImageDataParameter.mirror)
  return mirror_;
}
inline void DenseImageDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseImageDataParameter.mirror)
}

// optional uint32 crop_width = 11 [default = 0];
inline bool DenseImageDataParameter::has_crop_width() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DenseImageDataParameter::set_has_crop_width() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DenseImageDataParameter::clear_has_crop_width() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DenseImageDataParameter::clear_crop_width() {
  crop_width_ = 0u;
  clear_has_crop_width();
}
inline ::google::protobuf::uint32 DenseImageDataParameter::crop_width() const {
  // @@protoc_insertion_point(field_get:caffe.DenseImageDataParameter.crop_width)
  return crop_width_;
}
inline void DenseImageDataParameter::set_crop_width(::google::protobuf::uint32 value) {
  set_has_crop_width();
  crop_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseImageDataParameter.crop_width)
}

// optional uint32 crop_height = 12 [default = 0];
inline bool DenseImageDataParameter::has_crop_height() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DenseImageDataParameter::set_has_crop_height() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DenseImageDataParameter::clear_has_crop_height() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DenseImageDataParameter::clear_crop_height() {
  crop_height_ = 0u;
  clear_has_crop_height();
}
inline ::google::protobuf::uint32 DenseImageDataParameter::crop_height() const {
  // @@protoc_insertion_point(field_get:caffe.DenseImageDataParameter.crop_height)
  return crop_height_;
}
inline void DenseImageDataParameter::set_crop_height(::google::protobuf::uint32 value) {
  set_has_crop_height();
  crop_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseImageDataParameter.crop_height)
}

// -------------------------------------------------------------------

// InterpParameter

// optional int32 height = 1 [default = 0];
inline bool InterpParameter::has_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InterpParameter::set_has_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InterpParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InterpParameter::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 InterpParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.InterpParameter.height)
  return height_;
}
inline void InterpParameter::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.InterpParameter.height)
}

// optional int32 width = 2 [default = 0];
inline bool InterpParameter::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InterpParameter::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InterpParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InterpParameter::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 InterpParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.InterpParameter.width)
  return width_;
}
inline void InterpParameter::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.InterpParameter.width)
}

// optional int32 zoom_factor = 3 [default = 1];
inline bool InterpParameter::has_zoom_factor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InterpParameter::set_has_zoom_factor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InterpParameter::clear_has_zoom_factor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InterpParameter::clear_zoom_factor() {
  zoom_factor_ = 1;
  clear_has_zoom_factor();
}
inline ::google::protobuf::int32 InterpParameter::zoom_factor() const {
  // @@protoc_insertion_point(field_get:caffe.InterpParameter.zoom_factor)
  return zoom_factor_;
}
inline void InterpParameter::set_zoom_factor(::google::protobuf::int32 value) {
  set_has_zoom_factor();
  zoom_factor_ = value;
  // @@protoc_insertion_point(field_set:caffe.InterpParameter.zoom_factor)
}

// optional int32 shrink_factor = 4 [default = 1];
inline bool InterpParameter::has_shrink_factor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InterpParameter::set_has_shrink_factor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InterpParameter::clear_has_shrink_factor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InterpParameter::clear_shrink_factor() {
  shrink_factor_ = 1;
  clear_has_shrink_factor();
}
inline ::google::protobuf::int32 InterpParameter::shrink_factor() const {
  // @@protoc_insertion_point(field_get:caffe.InterpParameter.shrink_factor)
  return shrink_factor_;
}
inline void InterpParameter::set_shrink_factor(::google::protobuf::int32 value) {
  set_has_shrink_factor();
  shrink_factor_ = value;
  // @@protoc_insertion_point(field_set:caffe.InterpParameter.shrink_factor)
}

// optional int32 pad_beg = 5 [default = 0];
inline bool InterpParameter::has_pad_beg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InterpParameter::set_has_pad_beg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InterpParameter::clear_has_pad_beg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InterpParameter::clear_pad_beg() {
  pad_beg_ = 0;
  clear_has_pad_beg();
}
inline ::google::protobuf::int32 InterpParameter::pad_beg() const {
  // @@protoc_insertion_point(field_get:caffe.InterpParameter.pad_beg)
  return pad_beg_;
}
inline void InterpParameter::set_pad_beg(::google::protobuf::int32 value) {
  set_has_pad_beg();
  pad_beg_ = value;
  // @@protoc_insertion_point(field_set:caffe.InterpParameter.pad_beg)
}

// optional int32 pad_end = 6 [default = 0];
inline bool InterpParameter::has_pad_end() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InterpParameter::set_has_pad_end() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InterpParameter::clear_has_pad_end() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InterpParameter::clear_pad_end() {
  pad_end_ = 0;
  clear_has_pad_end();
}
inline ::google::protobuf::int32 InterpParameter::pad_end() const {
  // @@protoc_insertion_point(field_get:caffe.InterpParameter.pad_end)
  return pad_end_;
}
inline void InterpParameter::set_pad_end(::google::protobuf::int32 value) {
  set_has_pad_end();
  pad_end_ = value;
  // @@protoc_insertion_point(field_set:caffe.InterpParameter.pad_end)
}

// -------------------------------------------------------------------

// ClipSptialmapParameter

// optional int32 map_scale = 1 [default = 1];
inline bool ClipSptialmapParameter::has_map_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClipSptialmapParameter::set_has_map_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClipSptialmapParameter::clear_has_map_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClipSptialmapParameter::clear_map_scale() {
  map_scale_ = 1;
  clear_has_map_scale();
}
inline ::google::protobuf::int32 ClipSptialmapParameter::map_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ClipSptialmapParameter.map_scale)
  return map_scale_;
}
inline void ClipSptialmapParameter::set_map_scale(::google::protobuf::int32 value) {
  set_has_map_scale();
  map_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ClipSptialmapParameter.map_scale)
}

// repeated int32 axis = 2;
inline int ClipSptialmapParameter::axis_size() const {
  return axis_.size();
}
inline void ClipSptialmapParameter::clear_axis() {
  axis_.Clear();
}
inline ::google::protobuf::int32 ClipSptialmapParameter::axis(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ClipSptialmapParameter.axis)
  return axis_.Get(index);
}
inline void ClipSptialmapParameter::set_axis(int index, ::google::protobuf::int32 value) {
  axis_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ClipSptialmapParameter.axis)
}
inline void ClipSptialmapParameter::add_axis(::google::protobuf::int32 value) {
  axis_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ClipSptialmapParameter.axis)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ClipSptialmapParameter::axis() const {
  // @@protoc_insertion_point(field_list:caffe.ClipSptialmapParameter.axis)
  return axis_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ClipSptialmapParameter::mutable_axis() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ClipSptialmapParameter.axis)
  return &axis_;
}

// -------------------------------------------------------------------

// SpatialDropoutParameter

// optional float dropout_ratio = 1 [default = 0.5];
inline bool SpatialDropoutParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpatialDropoutParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpatialDropoutParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpatialDropoutParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
inline float SpatialDropoutParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.SpatialDropoutParameter.dropout_ratio)
  return dropout_ratio_;
}
inline void SpatialDropoutParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.SpatialDropoutParameter.dropout_ratio)
}

// -------------------------------------------------------------------

// SmoothL1LossParameter

// optional float sigma = 1 [default = 1];
inline bool SmoothL1LossParameter::has_sigma() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmoothL1LossParameter::set_has_sigma() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmoothL1LossParameter::clear_has_sigma() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SmoothL1LossParameter::clear_sigma() {
  sigma_ = 1;
  clear_has_sigma();
}
inline float SmoothL1LossParameter::sigma() const {
  // @@protoc_insertion_point(field_get:caffe.SmoothL1LossParameter.sigma)
  return sigma_;
}
inline void SmoothL1LossParameter::set_sigma(float value) {
  set_has_sigma();
  sigma_ = value;
  // @@protoc_insertion_point(field_set:caffe.SmoothL1LossParameter.sigma)
}

// -------------------------------------------------------------------

// MinihandTransformationParameter

// optional bool do_flip = 1 [default = true];
inline bool MinihandTransformationParameter::has_do_flip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MinihandTransformationParameter::set_has_do_flip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MinihandTransformationParameter::clear_has_do_flip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MinihandTransformationParameter::clear_do_flip() {
  do_flip_ = true;
  clear_has_do_flip();
}
inline bool MinihandTransformationParameter::do_flip() const {
  // @@protoc_insertion_point(field_get:caffe.MinihandTransformationParameter.do_flip)
  return do_flip_;
}
inline void MinihandTransformationParameter::set_do_flip(bool value) {
  set_has_do_flip();
  do_flip_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinihandTransformationParameter.do_flip)
}

// optional float flip_prob = 2 [default = 0.5];
inline bool MinihandTransformationParameter::has_flip_prob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MinihandTransformationParameter::set_has_flip_prob() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MinihandTransformationParameter::clear_has_flip_prob() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MinihandTransformationParameter::clear_flip_prob() {
  flip_prob_ = 0.5f;
  clear_has_flip_prob();
}
inline float MinihandTransformationParameter::flip_prob() const {
  // @@protoc_insertion_point(field_get:caffe.MinihandTransformationParameter.flip_prob)
  return flip_prob_;
}
inline void MinihandTransformationParameter::set_flip_prob(float value) {
  set_has_flip_prob();
  flip_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinihandTransformationParameter.flip_prob)
}

// optional int32 resized_width = 3 [default = 512];
inline bool MinihandTransformationParameter::has_resized_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MinihandTransformationParameter::set_has_resized_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MinihandTransformationParameter::clear_has_resized_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MinihandTransformationParameter::clear_resized_width() {
  resized_width_ = 512;
  clear_has_resized_width();
}
inline ::google::protobuf::int32 MinihandTransformationParameter::resized_width() const {
  // @@protoc_insertion_point(field_get:caffe.MinihandTransformationParameter.resized_width)
  return resized_width_;
}
inline void MinihandTransformationParameter::set_resized_width(::google::protobuf::int32 value) {
  set_has_resized_width();
  resized_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinihandTransformationParameter.resized_width)
}

// optional int32 resized_height = 4 [default = 288];
inline bool MinihandTransformationParameter::has_resized_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MinihandTransformationParameter::set_has_resized_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MinihandTransformationParameter::clear_has_resized_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MinihandTransformationParameter::clear_resized_height() {
  resized_height_ = 288;
  clear_has_resized_height();
}
inline ::google::protobuf::int32 MinihandTransformationParameter::resized_height() const {
  // @@protoc_insertion_point(field_get:caffe.MinihandTransformationParameter.resized_height)
  return resized_height_;
}
inline void MinihandTransformationParameter::set_resized_height(::google::protobuf::int32 value) {
  set_has_resized_height();
  resized_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinihandTransformationParameter.resized_height)
}

// optional bool save = 5 [default = false];
inline bool MinihandTransformationParameter::has_save() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MinihandTransformationParameter::set_has_save() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MinihandTransformationParameter::clear_has_save() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MinihandTransformationParameter::clear_save() {
  save_ = false;
  clear_has_save();
}
inline bool MinihandTransformationParameter::save() const {
  // @@protoc_insertion_point(field_get:caffe.MinihandTransformationParameter.save)
  return save_;
}
inline void MinihandTransformationParameter::set_save(bool value) {
  set_has_save();
  save_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinihandTransformationParameter.save)
}

// optional string save_path = 6 [default = ""];
inline bool MinihandTransformationParameter::has_save_path() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MinihandTransformationParameter::set_has_save_path() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MinihandTransformationParameter::clear_has_save_path() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MinihandTransformationParameter::clear_save_path() {
  save_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_save_path();
}
inline const ::std::string& MinihandTransformationParameter::save_path() const {
  // @@protoc_insertion_point(field_get:caffe.MinihandTransformationParameter.save_path)
  return save_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MinihandTransformationParameter::set_save_path(const ::std::string& value) {
  set_has_save_path();
  save_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MinihandTransformationParameter.save_path)
}
inline void MinihandTransformationParameter::set_save_path(const char* value) {
  set_has_save_path();
  save_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MinihandTransformationParameter.save_path)
}
inline void MinihandTransformationParameter::set_save_path(const char* value, size_t size) {
  set_has_save_path();
  save_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MinihandTransformationParameter.save_path)
}
inline ::std::string* MinihandTransformationParameter::mutable_save_path() {
  set_has_save_path();
  // @@protoc_insertion_point(field_mutable:caffe.MinihandTransformationParameter.save_path)
  return save_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MinihandTransformationParameter::release_save_path() {
  // @@protoc_insertion_point(field_release:caffe.MinihandTransformationParameter.save_path)
  clear_has_save_path();
  return save_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MinihandTransformationParameter::set_allocated_save_path(::std::string* save_path) {
  if (save_path != NULL) {
    set_has_save_path();
  } else {
    clear_has_save_path();
  }
  save_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_path);
  // @@protoc_insertion_point(field_set_allocated:caffe.MinihandTransformationParameter.save_path)
}

// repeated float cov_limits = 7;
inline int MinihandTransformationParameter::cov_limits_size() const {
  return cov_limits_.size();
}
inline void MinihandTransformationParameter::clear_cov_limits() {
  cov_limits_.Clear();
}
inline float MinihandTransformationParameter::cov_limits(int index) const {
  // @@protoc_insertion_point(field_get:caffe.MinihandTransformationParameter.cov_limits)
  return cov_limits_.Get(index);
}
inline void MinihandTransformationParameter::set_cov_limits(int index, float value) {
  cov_limits_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.MinihandTransformationParameter.cov_limits)
}
inline void MinihandTransformationParameter::add_cov_limits(float value) {
  cov_limits_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.MinihandTransformationParameter.cov_limits)
}
inline const ::google::protobuf::RepeatedField< float >&
MinihandTransformationParameter::cov_limits() const {
  // @@protoc_insertion_point(field_list:caffe.MinihandTransformationParameter.cov_limits)
  return cov_limits_;
}
inline ::google::protobuf::RepeatedField< float >*
MinihandTransformationParameter::mutable_cov_limits() {
  // @@protoc_insertion_point(field_mutable_list:caffe.MinihandTransformationParameter.cov_limits)
  return &cov_limits_;
}

// optional .caffe.DistortionParameter dis_param = 8;
inline bool MinihandTransformationParameter::has_dis_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MinihandTransformationParameter::set_has_dis_param() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MinihandTransformationParameter::clear_has_dis_param() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MinihandTransformationParameter::clear_dis_param() {
  if (dis_param_ != NULL) dis_param_->::caffe::DistortionParameter::Clear();
  clear_has_dis_param();
}
inline const ::caffe::DistortionParameter& MinihandTransformationParameter::dis_param() const {
  // @@protoc_insertion_point(field_get:caffe.MinihandTransformationParameter.dis_param)
  return dis_param_ != NULL ? *dis_param_ : *default_instance_->dis_param_;
}
inline ::caffe::DistortionParameter* MinihandTransformationParameter::mutable_dis_param() {
  set_has_dis_param();
  if (dis_param_ == NULL) {
    dis_param_ = new ::caffe::DistortionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.MinihandTransformationParameter.dis_param)
  return dis_param_;
}
inline ::caffe::DistortionParameter* MinihandTransformationParameter::release_dis_param() {
  // @@protoc_insertion_point(field_release:caffe.MinihandTransformationParameter.dis_param)
  clear_has_dis_param();
  ::caffe::DistortionParameter* temp = dis_param_;
  dis_param_ = NULL;
  return temp;
}
inline void MinihandTransformationParameter::set_allocated_dis_param(::caffe::DistortionParameter* dis_param) {
  delete dis_param_;
  dis_param_ = dis_param;
  if (dis_param) {
    set_has_dis_param();
  } else {
    clear_has_dis_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.MinihandTransformationParameter.dis_param)
}

// optional bool flag_eqhist = 9 [default = false];
inline bool MinihandTransformationParameter::has_flag_eqhist() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MinihandTransformationParameter::set_has_flag_eqhist() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MinihandTransformationParameter::clear_has_flag_eqhist() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MinihandTransformationParameter::clear_flag_eqhist() {
  flag_eqhist_ = false;
  clear_has_flag_eqhist();
}
inline bool MinihandTransformationParameter::flag_eqhist() const {
  // @@protoc_insertion_point(field_get:caffe.MinihandTransformationParameter.flag_eqhist)
  return flag_eqhist_;
}
inline void MinihandTransformationParameter::set_flag_eqhist(bool value) {
  set_has_flag_eqhist();
  flag_eqhist_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinihandTransformationParameter.flag_eqhist)
}

// optional bool sample_sixteennine = 10 [default = true];
inline bool MinihandTransformationParameter::has_sample_sixteennine() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MinihandTransformationParameter::set_has_sample_sixteennine() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MinihandTransformationParameter::clear_has_sample_sixteennine() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MinihandTransformationParameter::clear_sample_sixteennine() {
  sample_sixteennine_ = true;
  clear_has_sample_sixteennine();
}
inline bool MinihandTransformationParameter::sample_sixteennine() const {
  // @@protoc_insertion_point(field_get:caffe.MinihandTransformationParameter.sample_sixteennine)
  return sample_sixteennine_;
}
inline void MinihandTransformationParameter::set_sample_sixteennine(bool value) {
  set_has_sample_sixteennine();
  sample_sixteennine_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinihandTransformationParameter.sample_sixteennine)
}

// optional bool sample_ninesixteen = 11 [default = false];
inline bool MinihandTransformationParameter::has_sample_ninesixteen() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MinihandTransformationParameter::set_has_sample_ninesixteen() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MinihandTransformationParameter::clear_has_sample_ninesixteen() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MinihandTransformationParameter::clear_sample_ninesixteen() {
  sample_ninesixteen_ = false;
  clear_has_sample_ninesixteen();
}
inline bool MinihandTransformationParameter::sample_ninesixteen() const {
  // @@protoc_insertion_point(field_get:caffe.MinihandTransformationParameter.sample_ninesixteen)
  return sample_ninesixteen_;
}
inline void MinihandTransformationParameter::set_sample_ninesixteen(bool value) {
  set_has_sample_ninesixteen();
  sample_ninesixteen_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinihandTransformationParameter.sample_ninesixteen)
}

// optional bool crop_around_gt = 20 [default = false];
inline bool MinihandTransformationParameter::has_crop_around_gt() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MinihandTransformationParameter::set_has_crop_around_gt() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MinihandTransformationParameter::clear_has_crop_around_gt() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MinihandTransformationParameter::clear_crop_around_gt() {
  crop_around_gt_ = false;
  clear_has_crop_around_gt();
}
inline bool MinihandTransformationParameter::crop_around_gt() const {
  // @@protoc_insertion_point(field_get:caffe.MinihandTransformationParameter.crop_around_gt)
  return crop_around_gt_;
}
inline void MinihandTransformationParameter::set_crop_around_gt(bool value) {
  set_has_crop_around_gt();
  crop_around_gt_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinihandTransformationParameter.crop_around_gt)
}

// optional float crop_max_area_scale = 21;
inline bool MinihandTransformationParameter::has_crop_max_area_scale() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MinihandTransformationParameter::set_has_crop_max_area_scale() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MinihandTransformationParameter::clear_has_crop_max_area_scale() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MinihandTransformationParameter::clear_crop_max_area_scale() {
  crop_max_area_scale_ = 0;
  clear_has_crop_max_area_scale();
}
inline float MinihandTransformationParameter::crop_max_area_scale() const {
  // @@protoc_insertion_point(field_get:caffe.MinihandTransformationParameter.crop_max_area_scale)
  return crop_max_area_scale_;
}
inline void MinihandTransformationParameter::set_crop_max_area_scale(float value) {
  set_has_crop_max_area_scale();
  crop_max_area_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinihandTransformationParameter.crop_max_area_scale)
}

// optional float crop_min_area_scale = 24;
inline bool MinihandTransformationParameter::has_crop_min_area_scale() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MinihandTransformationParameter::set_has_crop_min_area_scale() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MinihandTransformationParameter::clear_has_crop_min_area_scale() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MinihandTransformationParameter::clear_crop_min_area_scale() {
  crop_min_area_scale_ = 0;
  clear_has_crop_min_area_scale();
}
inline float MinihandTransformationParameter::crop_min_area_scale() const {
  // @@protoc_insertion_point(field_get:caffe.MinihandTransformationParameter.crop_min_area_scale)
  return crop_min_area_scale_;
}
inline void MinihandTransformationParameter::set_crop_min_area_scale(float value) {
  set_has_crop_min_area_scale();
  crop_min_area_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinihandTransformationParameter.crop_min_area_scale)
}

// -------------------------------------------------------------------

// MinihandDataParameter

// optional string xml_list = 1;
inline bool MinihandDataParameter::has_xml_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MinihandDataParameter::set_has_xml_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MinihandDataParameter::clear_has_xml_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MinihandDataParameter::clear_xml_list() {
  xml_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_xml_list();
}
inline const ::std::string& MinihandDataParameter::xml_list() const {
  // @@protoc_insertion_point(field_get:caffe.MinihandDataParameter.xml_list)
  return xml_list_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MinihandDataParameter::set_xml_list(const ::std::string& value) {
  set_has_xml_list();
  xml_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MinihandDataParameter.xml_list)
}
inline void MinihandDataParameter::set_xml_list(const char* value) {
  set_has_xml_list();
  xml_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MinihandDataParameter.xml_list)
}
inline void MinihandDataParameter::set_xml_list(const char* value, size_t size) {
  set_has_xml_list();
  xml_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MinihandDataParameter.xml_list)
}
inline ::std::string* MinihandDataParameter::mutable_xml_list() {
  set_has_xml_list();
  // @@protoc_insertion_point(field_mutable:caffe.MinihandDataParameter.xml_list)
  return xml_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MinihandDataParameter::release_xml_list() {
  // @@protoc_insertion_point(field_release:caffe.MinihandDataParameter.xml_list)
  clear_has_xml_list();
  return xml_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MinihandDataParameter::set_allocated_xml_list(::std::string* xml_list) {
  if (xml_list != NULL) {
    set_has_xml_list();
  } else {
    clear_has_xml_list();
  }
  xml_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xml_list);
  // @@protoc_insertion_point(field_set_allocated:caffe.MinihandDataParameter.xml_list)
}

// optional string xml_root = 2;
inline bool MinihandDataParameter::has_xml_root() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MinihandDataParameter::set_has_xml_root() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MinihandDataParameter::clear_has_xml_root() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MinihandDataParameter::clear_xml_root() {
  xml_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_xml_root();
}
inline const ::std::string& MinihandDataParameter::xml_root() const {
  // @@protoc_insertion_point(field_get:caffe.MinihandDataParameter.xml_root)
  return xml_root_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MinihandDataParameter::set_xml_root(const ::std::string& value) {
  set_has_xml_root();
  xml_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MinihandDataParameter.xml_root)
}
inline void MinihandDataParameter::set_xml_root(const char* value) {
  set_has_xml_root();
  xml_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MinihandDataParameter.xml_root)
}
inline void MinihandDataParameter::set_xml_root(const char* value, size_t size) {
  set_has_xml_root();
  xml_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MinihandDataParameter.xml_root)
}
inline ::std::string* MinihandDataParameter::mutable_xml_root() {
  set_has_xml_root();
  // @@protoc_insertion_point(field_mutable:caffe.MinihandDataParameter.xml_root)
  return xml_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MinihandDataParameter::release_xml_root() {
  // @@protoc_insertion_point(field_release:caffe.MinihandDataParameter.xml_root)
  clear_has_xml_root();
  return xml_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MinihandDataParameter::set_allocated_xml_root(::std::string* xml_root) {
  if (xml_root != NULL) {
    set_has_xml_root();
  } else {
    clear_has_xml_root();
  }
  xml_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xml_root);
  // @@protoc_insertion_point(field_set_allocated:caffe.MinihandDataParameter.xml_root)
}

// optional string image_root = 3;
inline bool MinihandDataParameter::has_image_root() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MinihandDataParameter::set_has_image_root() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MinihandDataParameter::clear_has_image_root() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MinihandDataParameter::clear_image_root() {
  image_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image_root();
}
inline const ::std::string& MinihandDataParameter::image_root() const {
  // @@protoc_insertion_point(field_get:caffe.MinihandDataParameter.image_root)
  return image_root_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MinihandDataParameter::set_image_root(const ::std::string& value) {
  set_has_image_root();
  image_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MinihandDataParameter.image_root)
}
inline void MinihandDataParameter::set_image_root(const char* value) {
  set_has_image_root();
  image_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MinihandDataParameter.image_root)
}
inline void MinihandDataParameter::set_image_root(const char* value, size_t size) {
  set_has_image_root();
  image_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MinihandDataParameter.image_root)
}
inline ::std::string* MinihandDataParameter::mutable_image_root() {
  set_has_image_root();
  // @@protoc_insertion_point(field_mutable:caffe.MinihandDataParameter.image_root)
  return image_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MinihandDataParameter::release_image_root() {
  // @@protoc_insertion_point(field_release:caffe.MinihandDataParameter.image_root)
  clear_has_image_root();
  return image_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MinihandDataParameter::set_allocated_image_root(::std::string* image_root) {
  if (image_root != NULL) {
    set_has_image_root();
  } else {
    clear_has_image_root();
  }
  image_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_root);
  // @@protoc_insertion_point(field_set_allocated:caffe.MinihandDataParameter.image_root)
}

// optional bool shuffle = 4 [default = true];
inline bool MinihandDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MinihandDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MinihandDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MinihandDataParameter::clear_shuffle() {
  shuffle_ = true;
  clear_has_shuffle();
}
inline bool MinihandDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.MinihandDataParameter.shuffle)
  return shuffle_;
}
inline void MinihandDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinihandDataParameter.shuffle)
}

// optional int32 rand_skip = 5 [default = 100];
inline bool MinihandDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MinihandDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MinihandDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MinihandDataParameter::clear_rand_skip() {
  rand_skip_ = 100;
  clear_has_rand_skip();
}
inline ::google::protobuf::int32 MinihandDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.MinihandDataParameter.rand_skip)
  return rand_skip_;
}
inline void MinihandDataParameter::set_rand_skip(::google::protobuf::int32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinihandDataParameter.rand_skip)
}

// optional int32 batch_size = 6 [default = 24];
inline bool MinihandDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MinihandDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MinihandDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MinihandDataParameter::clear_batch_size() {
  batch_size_ = 24;
  clear_has_batch_size();
}
inline ::google::protobuf::int32 MinihandDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.MinihandDataParameter.batch_size)
  return batch_size_;
}
inline void MinihandDataParameter::set_batch_size(::google::protobuf::int32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinihandDataParameter.batch_size)
}

// repeated float mean_value = 7;
inline int MinihandDataParameter::mean_value_size() const {
  return mean_value_.size();
}
inline void MinihandDataParameter::clear_mean_value() {
  mean_value_.Clear();
}
inline float MinihandDataParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.MinihandDataParameter.mean_value)
  return mean_value_.Get(index);
}
inline void MinihandDataParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.MinihandDataParameter.mean_value)
}
inline void MinihandDataParameter::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.MinihandDataParameter.mean_value)
}
inline const ::google::protobuf::RepeatedField< float >&
MinihandDataParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.MinihandDataParameter.mean_value)
  return mean_value_;
}
inline ::google::protobuf::RepeatedField< float >*
MinihandDataParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.MinihandDataParameter.mean_value)
  return &mean_value_;
}

// repeated string xml_list_multiple = 8;
inline int MinihandDataParameter::xml_list_multiple_size() const {
  return xml_list_multiple_.size();
}
inline void MinihandDataParameter::clear_xml_list_multiple() {
  xml_list_multiple_.Clear();
}
inline const ::std::string& MinihandDataParameter::xml_list_multiple(int index) const {
  // @@protoc_insertion_point(field_get:caffe.MinihandDataParameter.xml_list_multiple)
  return xml_list_multiple_.Get(index);
}
inline ::std::string* MinihandDataParameter::mutable_xml_list_multiple(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.MinihandDataParameter.xml_list_multiple)
  return xml_list_multiple_.Mutable(index);
}
inline void MinihandDataParameter::set_xml_list_multiple(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.MinihandDataParameter.xml_list_multiple)
  xml_list_multiple_.Mutable(index)->assign(value);
}
inline void MinihandDataParameter::set_xml_list_multiple(int index, const char* value) {
  xml_list_multiple_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.MinihandDataParameter.xml_list_multiple)
}
inline void MinihandDataParameter::set_xml_list_multiple(int index, const char* value, size_t size) {
  xml_list_multiple_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.MinihandDataParameter.xml_list_multiple)
}
inline ::std::string* MinihandDataParameter::add_xml_list_multiple() {
  // @@protoc_insertion_point(field_add_mutable:caffe.MinihandDataParameter.xml_list_multiple)
  return xml_list_multiple_.Add();
}
inline void MinihandDataParameter::add_xml_list_multiple(const ::std::string& value) {
  xml_list_multiple_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.MinihandDataParameter.xml_list_multiple)
}
inline void MinihandDataParameter::add_xml_list_multiple(const char* value) {
  xml_list_multiple_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.MinihandDataParameter.xml_list_multiple)
}
inline void MinihandDataParameter::add_xml_list_multiple(const char* value, size_t size) {
  xml_list_multiple_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.MinihandDataParameter.xml_list_multiple)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MinihandDataParameter::xml_list_multiple() const {
  // @@protoc_insertion_point(field_list:caffe.MinihandDataParameter.xml_list_multiple)
  return xml_list_multiple_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MinihandDataParameter::mutable_xml_list_multiple() {
  // @@protoc_insertion_point(field_mutable_list:caffe.MinihandDataParameter.xml_list_multiple)
  return &xml_list_multiple_;
}

// repeated string xml_root_multiple = 9;
inline int MinihandDataParameter::xml_root_multiple_size() const {
  return xml_root_multiple_.size();
}
inline void MinihandDataParameter::clear_xml_root_multiple() {
  xml_root_multiple_.Clear();
}
inline const ::std::string& MinihandDataParameter::xml_root_multiple(int index) const {
  // @@protoc_insertion_point(field_get:caffe.MinihandDataParameter.xml_root_multiple)
  return xml_root_multiple_.Get(index);
}
inline ::std::string* MinihandDataParameter::mutable_xml_root_multiple(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.MinihandDataParameter.xml_root_multiple)
  return xml_root_multiple_.Mutable(index);
}
inline void MinihandDataParameter::set_xml_root_multiple(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.MinihandDataParameter.xml_root_multiple)
  xml_root_multiple_.Mutable(index)->assign(value);
}
inline void MinihandDataParameter::set_xml_root_multiple(int index, const char* value) {
  xml_root_multiple_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.MinihandDataParameter.xml_root_multiple)
}
inline void MinihandDataParameter::set_xml_root_multiple(int index, const char* value, size_t size) {
  xml_root_multiple_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.MinihandDataParameter.xml_root_multiple)
}
inline ::std::string* MinihandDataParameter::add_xml_root_multiple() {
  // @@protoc_insertion_point(field_add_mutable:caffe.MinihandDataParameter.xml_root_multiple)
  return xml_root_multiple_.Add();
}
inline void MinihandDataParameter::add_xml_root_multiple(const ::std::string& value) {
  xml_root_multiple_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.MinihandDataParameter.xml_root_multiple)
}
inline void MinihandDataParameter::add_xml_root_multiple(const char* value) {
  xml_root_multiple_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.MinihandDataParameter.xml_root_multiple)
}
inline void MinihandDataParameter::add_xml_root_multiple(const char* value, size_t size) {
  xml_root_multiple_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.MinihandDataParameter.xml_root_multiple)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MinihandDataParameter::xml_root_multiple() const {
  // @@protoc_insertion_point(field_list:caffe.MinihandDataParameter.xml_root_multiple)
  return xml_root_multiple_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MinihandDataParameter::mutable_xml_root_multiple() {
  // @@protoc_insertion_point(field_mutable_list:caffe.MinihandDataParameter.xml_root_multiple)
  return &xml_root_multiple_;
}

// optional int32 base_bindex = 10 [default = 0];
inline bool MinihandDataParameter::has_base_bindex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MinihandDataParameter::set_has_base_bindex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MinihandDataParameter::clear_has_base_bindex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MinihandDataParameter::clear_base_bindex() {
  base_bindex_ = 0;
  clear_has_base_bindex();
}
inline ::google::protobuf::int32 MinihandDataParameter::base_bindex() const {
  // @@protoc_insertion_point(field_get:caffe.MinihandDataParameter.base_bindex)
  return base_bindex_;
}
inline void MinihandDataParameter::set_base_bindex(::google::protobuf::int32 value) {
  set_has_base_bindex();
  base_bindex_ = value;
  // @@protoc_insertion_point(field_set:caffe.MinihandDataParameter.base_bindex)
}

// -------------------------------------------------------------------

// TrackerPriorParameter

// optional float step = 1 [default = 1];
inline bool TrackerPriorParameter::has_step() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackerPriorParameter::set_has_step() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackerPriorParameter::clear_has_step() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackerPriorParameter::clear_step() {
  step_ = 1;
  clear_has_step();
}
inline float TrackerPriorParameter::step() const {
  // @@protoc_insertion_point(field_get:caffe.TrackerPriorParameter.step)
  return step_;
}
inline void TrackerPriorParameter::set_step(float value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrackerPriorParameter.step)
}

// optional float extent_scale = 2 [default = 0];
inline bool TrackerPriorParameter::has_extent_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackerPriorParameter::set_has_extent_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackerPriorParameter::clear_has_extent_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackerPriorParameter::clear_extent_scale() {
  extent_scale_ = 0;
  clear_has_extent_scale();
}
inline float TrackerPriorParameter::extent_scale() const {
  // @@protoc_insertion_point(field_get:caffe.TrackerPriorParameter.extent_scale)
  return extent_scale_;
}
inline void TrackerPriorParameter::set_extent_scale(float value) {
  set_has_extent_scale();
  extent_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrackerPriorParameter.extent_scale)
}

// -------------------------------------------------------------------

// MarginInnerProductParameter

// optional uint32 num_output = 1;
inline bool MarginInnerProductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarginInnerProductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarginInnerProductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarginInnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 MarginInnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.num_output)
  return num_output_;
}
inline void MarginInnerProductParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.num_output)
}

// optional .caffe.MarginInnerProductParameter.MarginType margin_type = 2 [default = QUADRUPLE];
inline bool MarginInnerProductParameter::has_margin_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarginInnerProductParameter::set_has_margin_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarginInnerProductParameter::clear_has_margin_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarginInnerProductParameter::clear_margin_type() {
  margin_type_ = 3;
  clear_has_margin_type();
}
inline ::caffe::MarginInnerProductParameter_MarginType MarginInnerProductParameter::margin_type() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.margin_type)
  return static_cast< ::caffe::MarginInnerProductParameter_MarginType >(margin_type_);
}
inline void MarginInnerProductParameter::set_margin_type(::caffe::MarginInnerProductParameter_MarginType value) {
  assert(::caffe::MarginInnerProductParameter_MarginType_IsValid(value));
  set_has_margin_type();
  margin_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.margin_type)
}

// optional .caffe.FillerParameter weight_filler = 3;
inline bool MarginInnerProductParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarginInnerProductParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarginInnerProductParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarginInnerProductParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& MarginInnerProductParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::caffe::FillerParameter* MarginInnerProductParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.MarginInnerProductParameter.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* MarginInnerProductParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.MarginInnerProductParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void MarginInnerProductParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.MarginInnerProductParameter.weight_filler)
}

// optional int32 axis = 4 [default = 1];
inline bool MarginInnerProductParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarginInnerProductParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarginInnerProductParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarginInnerProductParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 MarginInnerProductParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.axis)
  return axis_;
}
inline void MarginInnerProductParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.axis)
}

// optional float base = 5 [default = 1];
inline bool MarginInnerProductParameter::has_base() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarginInnerProductParameter::set_has_base() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarginInnerProductParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarginInnerProductParameter::clear_base() {
  base_ = 1;
  clear_has_base();
}
inline float MarginInnerProductParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.base)
  return base_;
}
inline void MarginInnerProductParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.base)
}

// optional float gamma = 6 [default = 0];
inline bool MarginInnerProductParameter::has_gamma() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarginInnerProductParameter::set_has_gamma() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarginInnerProductParameter::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarginInnerProductParameter::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
inline float MarginInnerProductParameter::gamma() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.gamma)
  return gamma_;
}
inline void MarginInnerProductParameter::set_gamma(float value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.gamma)
}

// optional float power = 7 [default = 1];
inline bool MarginInnerProductParameter::has_power() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MarginInnerProductParameter::set_has_power() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MarginInnerProductParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MarginInnerProductParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
inline float MarginInnerProductParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.power)
  return power_;
}
inline void MarginInnerProductParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.power)
}

// optional int32 iteration = 8 [default = 0];
inline bool MarginInnerProductParameter::has_iteration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MarginInnerProductParameter::set_has_iteration() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MarginInnerProductParameter::clear_has_iteration() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MarginInnerProductParameter::clear_iteration() {
  iteration_ = 0;
  clear_has_iteration();
}
inline ::google::protobuf::int32 MarginInnerProductParameter::iteration() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.iteration)
  return iteration_;
}
inline void MarginInnerProductParameter::set_iteration(::google::protobuf::int32 value) {
  set_has_iteration();
  iteration_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.iteration)
}

// optional float lambda_min = 9 [default = 0];
inline bool MarginInnerProductParameter::has_lambda_min() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MarginInnerProductParameter::set_has_lambda_min() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MarginInnerProductParameter::clear_has_lambda_min() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MarginInnerProductParameter::clear_lambda_min() {
  lambda_min_ = 0;
  clear_has_lambda_min();
}
inline float MarginInnerProductParameter::lambda_min() const {
  // @@protoc_insertion_point(field_get:caffe.MarginInnerProductParameter.lambda_min)
  return lambda_min_;
}
inline void MarginInnerProductParameter::set_lambda_min(float value) {
  set_has_lambda_min();
  lambda_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.MarginInnerProductParameter.lambda_min)
}

// -------------------------------------------------------------------

// HandPoseDataParameter

// optional string source = 1;
inline bool HandPoseDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HandPoseDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HandPoseDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HandPoseDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& HandPoseDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.HandPoseDataParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HandPoseDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HandPoseDataParameter.source)
}
inline void HandPoseDataParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HandPoseDataParameter.source)
}
inline void HandPoseDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HandPoseDataParameter.source)
}
inline ::std::string* HandPoseDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.HandPoseDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HandPoseDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.HandPoseDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HandPoseDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.HandPoseDataParameter.source)
}

// optional uint32 batch_size = 2 [default = 1];
inline bool HandPoseDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HandPoseDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HandPoseDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HandPoseDataParameter::clear_batch_size() {
  batch_size_ = 1u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 HandPoseDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.HandPoseDataParameter.batch_size)
  return batch_size_;
}
inline void HandPoseDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.HandPoseDataParameter.batch_size)
}

// optional uint32 rand_skip = 3 [default = 0];
inline bool HandPoseDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HandPoseDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HandPoseDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HandPoseDataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 HandPoseDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.HandPoseDataParameter.rand_skip)
  return rand_skip_;
}
inline void HandPoseDataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.HandPoseDataParameter.rand_skip)
}

// optional bool shuffle = 4 [default = false];
inline bool HandPoseDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HandPoseDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HandPoseDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HandPoseDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool HandPoseDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.HandPoseDataParameter.shuffle)
  return shuffle_;
}
inline void HandPoseDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.HandPoseDataParameter.shuffle)
}

// optional uint32 resize_h = 5 [default = 0];
inline bool HandPoseDataParameter::has_resize_h() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HandPoseDataParameter::set_has_resize_h() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HandPoseDataParameter::clear_has_resize_h() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HandPoseDataParameter::clear_resize_h() {
  resize_h_ = 0u;
  clear_has_resize_h();
}
inline ::google::protobuf::uint32 HandPoseDataParameter::resize_h() const {
  // @@protoc_insertion_point(field_get:caffe.HandPoseDataParameter.resize_h)
  return resize_h_;
}
inline void HandPoseDataParameter::set_resize_h(::google::protobuf::uint32 value) {
  set_has_resize_h();
  resize_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.HandPoseDataParameter.resize_h)
}

// optional uint32 resize_w = 6 [default = 0];
inline bool HandPoseDataParameter::has_resize_w() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HandPoseDataParameter::set_has_resize_w() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HandPoseDataParameter::clear_has_resize_w() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HandPoseDataParameter::clear_resize_w() {
  resize_w_ = 0u;
  clear_has_resize_w();
}
inline ::google::protobuf::uint32 HandPoseDataParameter::resize_w() const {
  // @@protoc_insertion_point(field_get:caffe.HandPoseDataParameter.resize_w)
  return resize_w_;
}
inline void HandPoseDataParameter::set_resize_w(::google::protobuf::uint32 value) {
  set_has_resize_w();
  resize_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.HandPoseDataParameter.resize_w)
}

// optional string root_folder = 7 [default = ""];
inline bool HandPoseDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HandPoseDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HandPoseDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HandPoseDataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
inline const ::std::string& HandPoseDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.HandPoseDataParameter.root_folder)
  return root_folder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HandPoseDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HandPoseDataParameter.root_folder)
}
inline void HandPoseDataParameter::set_root_folder(const char* value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HandPoseDataParameter.root_folder)
}
inline void HandPoseDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HandPoseDataParameter.root_folder)
}
inline ::std::string* HandPoseDataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.HandPoseDataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HandPoseDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.HandPoseDataParameter.root_folder)
  clear_has_root_folder();
  return root_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HandPoseDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.HandPoseDataParameter.root_folder)
}

// optional float flip_prob = 8 [default = 0];
inline bool HandPoseDataParameter::has_flip_prob() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HandPoseDataParameter::set_has_flip_prob() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HandPoseDataParameter::clear_has_flip_prob() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HandPoseDataParameter::clear_flip_prob() {
  flip_prob_ = 0;
  clear_has_flip_prob();
}
inline float HandPoseDataParameter::flip_prob() const {
  // @@protoc_insertion_point(field_get:caffe.HandPoseDataParameter.flip_prob)
  return flip_prob_;
}
inline void HandPoseDataParameter::set_flip_prob(float value) {
  set_has_flip_prob();
  flip_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.HandPoseDataParameter.flip_prob)
}

// optional bool flip = 9 [default = true];
inline bool HandPoseDataParameter::has_flip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HandPoseDataParameter::set_has_flip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HandPoseDataParameter::clear_has_flip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HandPoseDataParameter::clear_flip() {
  flip_ = true;
  clear_has_flip();
}
inline bool HandPoseDataParameter::flip() const {
  // @@protoc_insertion_point(field_get:caffe.HandPoseDataParameter.flip)
  return flip_;
}
inline void HandPoseDataParameter::set_flip(bool value) {
  set_has_flip();
  flip_ = value;
  // @@protoc_insertion_point(field_set:caffe.HandPoseDataParameter.flip)
}

// optional bool save = 10 [default = false];
inline bool HandPoseDataParameter::has_save() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HandPoseDataParameter::set_has_save() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HandPoseDataParameter::clear_has_save() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HandPoseDataParameter::clear_save() {
  save_ = false;
  clear_has_save();
}
inline bool HandPoseDataParameter::save() const {
  // @@protoc_insertion_point(field_get:caffe.HandPoseDataParameter.save)
  return save_;
}
inline void HandPoseDataParameter::set_save(bool value) {
  set_has_save();
  save_ = value;
  // @@protoc_insertion_point(field_set:caffe.HandPoseDataParameter.save)
}

// optional string save_path = 11;
inline bool HandPoseDataParameter::has_save_path() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HandPoseDataParameter::set_has_save_path() {
  _has_bits_[0] |= 0x00000400u;
}
inline void HandPoseDataParameter::clear_has_save_path() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void HandPoseDataParameter::clear_save_path() {
  save_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_save_path();
}
inline const ::std::string& HandPoseDataParameter::save_path() const {
  // @@protoc_insertion_point(field_get:caffe.HandPoseDataParameter.save_path)
  return save_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HandPoseDataParameter::set_save_path(const ::std::string& value) {
  set_has_save_path();
  save_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HandPoseDataParameter.save_path)
}
inline void HandPoseDataParameter::set_save_path(const char* value) {
  set_has_save_path();
  save_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HandPoseDataParameter.save_path)
}
inline void HandPoseDataParameter::set_save_path(const char* value, size_t size) {
  set_has_save_path();
  save_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HandPoseDataParameter.save_path)
}
inline ::std::string* HandPoseDataParameter::mutable_save_path() {
  set_has_save_path();
  // @@protoc_insertion_point(field_mutable:caffe.HandPoseDataParameter.save_path)
  return save_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HandPoseDataParameter::release_save_path() {
  // @@protoc_insertion_point(field_release:caffe.HandPoseDataParameter.save_path)
  clear_has_save_path();
  return save_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HandPoseDataParameter::set_allocated_save_path(::std::string* save_path) {
  if (save_path != NULL) {
    set_has_save_path();
  } else {
    clear_has_save_path();
  }
  save_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_path);
  // @@protoc_insertion_point(field_set_allocated:caffe.HandPoseDataParameter.save_path)
}

// optional float bbox_extend_min = 12 [default = 1.5];
inline bool HandPoseDataParameter::has_bbox_extend_min() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void HandPoseDataParameter::set_has_bbox_extend_min() {
  _has_bits_[0] |= 0x00000800u;
}
inline void HandPoseDataParameter::clear_has_bbox_extend_min() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void HandPoseDataParameter::clear_bbox_extend_min() {
  bbox_extend_min_ = 1.5f;
  clear_has_bbox_extend_min();
}
inline float HandPoseDataParameter::bbox_extend_min() const {
  // @@protoc_insertion_point(field_get:caffe.HandPoseDataParameter.bbox_extend_min)
  return bbox_extend_min_;
}
inline void HandPoseDataParameter::set_bbox_extend_min(float value) {
  set_has_bbox_extend_min();
  bbox_extend_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.HandPoseDataParameter.bbox_extend_min)
}

// optional float bbox_extend_max = 13 [default = 2];
inline bool HandPoseDataParameter::has_bbox_extend_max() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void HandPoseDataParameter::set_has_bbox_extend_max() {
  _has_bits_[0] |= 0x00001000u;
}
inline void HandPoseDataParameter::clear_has_bbox_extend_max() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void HandPoseDataParameter::clear_bbox_extend_max() {
  bbox_extend_max_ = 2;
  clear_has_bbox_extend_max();
}
inline float HandPoseDataParameter::bbox_extend_max() const {
  // @@protoc_insertion_point(field_get:caffe.HandPoseDataParameter.bbox_extend_max)
  return bbox_extend_max_;
}
inline void HandPoseDataParameter::set_bbox_extend_max(float value) {
  set_has_bbox_extend_max();
  bbox_extend_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.HandPoseDataParameter.bbox_extend_max)
}

// optional float rotate_angle = 14 [default = 20];
inline bool HandPoseDataParameter::has_rotate_angle() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void HandPoseDataParameter::set_has_rotate_angle() {
  _has_bits_[0] |= 0x00002000u;
}
inline void HandPoseDataParameter::clear_has_rotate_angle() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void HandPoseDataParameter::clear_rotate_angle() {
  rotate_angle_ = 20;
  clear_has_rotate_angle();
}
inline float HandPoseDataParameter::rotate_angle() const {
  // @@protoc_insertion_point(field_get:caffe.HandPoseDataParameter.rotate_angle)
  return rotate_angle_;
}
inline void HandPoseDataParameter::set_rotate_angle(float value) {
  set_has_rotate_angle();
  rotate_angle_ = value;
  // @@protoc_insertion_point(field_set:caffe.HandPoseDataParameter.rotate_angle)
}

// optional bool clip = 15;
inline bool HandPoseDataParameter::has_clip() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void HandPoseDataParameter::set_has_clip() {
  _has_bits_[0] |= 0x00004000u;
}
inline void HandPoseDataParameter::clear_has_clip() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void HandPoseDataParameter::clear_clip() {
  clip_ = false;
  clear_has_clip();
}
inline bool HandPoseDataParameter::clip() const {
  // @@protoc_insertion_point(field_get:caffe.HandPoseDataParameter.clip)
  return clip_;
}
inline void HandPoseDataParameter::set_clip(bool value) {
  set_has_clip();
  clip_ = value;
  // @@protoc_insertion_point(field_set:caffe.HandPoseDataParameter.clip)
}

// optional bool flag_augintrain = 16;
inline bool HandPoseDataParameter::has_flag_augintrain() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void HandPoseDataParameter::set_has_flag_augintrain() {
  _has_bits_[0] |= 0x00008000u;
}
inline void HandPoseDataParameter::clear_has_flag_augintrain() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void HandPoseDataParameter::clear_flag_augintrain() {
  flag_augintrain_ = false;
  clear_has_flag_augintrain();
}
inline bool HandPoseDataParameter::flag_augintrain() const {
  // @@protoc_insertion_point(field_get:caffe.HandPoseDataParameter.flag_augintrain)
  return flag_augintrain_;
}
inline void HandPoseDataParameter::set_flag_augintrain(bool value) {
  set_has_flag_augintrain();
  flag_augintrain_ = value;
  // @@protoc_insertion_point(field_set:caffe.HandPoseDataParameter.flag_augintrain)
}

// -------------------------------------------------------------------

// TransformationParameter

// optional float scale = 1 [default = 1];
inline bool TransformationParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransformationParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransformationParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransformationParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float TransformationParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.scale)
  return scale_;
}
inline void TransformationParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.scale)
}

// optional bool mirror = 2 [default = false];
inline bool TransformationParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransformationParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransformationParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransformationParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool TransformationParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mirror)
  return mirror_;
}
inline void TransformationParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mirror)
}

// optional uint32 crop_size = 3 [default = 0];
inline bool TransformationParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransformationParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransformationParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransformationParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 TransformationParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.crop_size)
  return crop_size_;
}
inline void TransformationParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.crop_size)
}

// optional uint32 crop_h = 11 [default = 0];
inline bool TransformationParameter::has_crop_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransformationParameter::set_has_crop_h() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransformationParameter::clear_has_crop_h() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransformationParameter::clear_crop_h() {
  crop_h_ = 0u;
  clear_has_crop_h();
}
inline ::google::protobuf::uint32 TransformationParameter::crop_h() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.crop_h)
  return crop_h_;
}
inline void TransformationParameter::set_crop_h(::google::protobuf::uint32 value) {
  set_has_crop_h();
  crop_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.crop_h)
}

// optional uint32 crop_w = 12 [default = 0];
inline bool TransformationParameter::has_crop_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TransformationParameter::set_has_crop_w() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TransformationParameter::clear_has_crop_w() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TransformationParameter::clear_crop_w() {
  crop_w_ = 0u;
  clear_has_crop_w();
}
inline ::google::protobuf::uint32 TransformationParameter::crop_w() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.crop_w)
  return crop_w_;
}
inline void TransformationParameter::set_crop_w(::google::protobuf::uint32 value) {
  set_has_crop_w();
  crop_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.crop_w)
}

// optional string mean_file = 4;
inline bool TransformationParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TransformationParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TransformationParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TransformationParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& TransformationParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mean_file)
  return mean_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransformationParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mean_file)
}
inline void TransformationParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.TransformationParameter.mean_file)
}
inline void TransformationParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.TransformationParameter.mean_file)
}
inline ::std::string* TransformationParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransformationParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.TransformationParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransformationParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.TransformationParameter.mean_file)
}

// repeated float mean_value = 5;
inline int TransformationParameter::mean_value_size() const {
  return mean_value_.size();
}
inline void TransformationParameter::clear_mean_value() {
  mean_value_.Clear();
}
inline float TransformationParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.mean_value)
  return mean_value_.Get(index);
}
inline void TransformationParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.mean_value)
}
inline void TransformationParameter::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TransformationParameter.mean_value)
}
inline const ::google::protobuf::RepeatedField< float >&
TransformationParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.TransformationParameter.mean_value)
  return mean_value_;
}
inline ::google::protobuf::RepeatedField< float >*
TransformationParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TransformationParameter.mean_value)
  return &mean_value_;
}

// optional bool force_color = 6 [default = false];
inline bool TransformationParameter::has_force_color() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TransformationParameter::set_has_force_color() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TransformationParameter::clear_has_force_color() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TransformationParameter::clear_force_color() {
  force_color_ = false;
  clear_has_force_color();
}
inline bool TransformationParameter::force_color() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.force_color)
  return force_color_;
}
inline void TransformationParameter::set_force_color(bool value) {
  set_has_force_color();
  force_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.force_color)
}

// optional bool force_gray = 7 [default = false];
inline bool TransformationParameter::has_force_gray() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TransformationParameter::set_has_force_gray() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TransformationParameter::clear_has_force_gray() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TransformationParameter::clear_force_gray() {
  force_gray_ = false;
  clear_has_force_gray();
}
inline bool TransformationParameter::force_gray() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.force_gray)
  return force_gray_;
}
inline void TransformationParameter::set_force_gray(bool value) {
  set_has_force_gray();
  force_gray_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.force_gray)
}

// optional .caffe.ResizeParameter resize_param = 8;
inline bool TransformationParameter::has_resize_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TransformationParameter::set_has_resize_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TransformationParameter::clear_has_resize_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TransformationParameter::clear_resize_param() {
  if (resize_param_ != NULL) resize_param_->::caffe::ResizeParameter::Clear();
  clear_has_resize_param();
}
inline const ::caffe::ResizeParameter& TransformationParameter::resize_param() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.resize_param)
  return resize_param_ != NULL ? *resize_param_ : *default_instance_->resize_param_;
}
inline ::caffe::ResizeParameter* TransformationParameter::mutable_resize_param() {
  set_has_resize_param();
  if (resize_param_ == NULL) {
    resize_param_ = new ::caffe::ResizeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.resize_param)
  return resize_param_;
}
inline ::caffe::ResizeParameter* TransformationParameter::release_resize_param() {
  // @@protoc_insertion_point(field_release:caffe.TransformationParameter.resize_param)
  clear_has_resize_param();
  ::caffe::ResizeParameter* temp = resize_param_;
  resize_param_ = NULL;
  return temp;
}
inline void TransformationParameter::set_allocated_resize_param(::caffe::ResizeParameter* resize_param) {
  delete resize_param_;
  resize_param_ = resize_param;
  if (resize_param) {
    set_has_resize_param();
  } else {
    clear_has_resize_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TransformationParameter.resize_param)
}

// optional .caffe.NoiseParameter noise_param = 9;
inline bool TransformationParameter::has_noise_param() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TransformationParameter::set_has_noise_param() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TransformationParameter::clear_has_noise_param() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TransformationParameter::clear_noise_param() {
  if (noise_param_ != NULL) noise_param_->::caffe::NoiseParameter::Clear();
  clear_has_noise_param();
}
inline const ::caffe::NoiseParameter& TransformationParameter::noise_param() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.noise_param)
  return noise_param_ != NULL ? *noise_param_ : *default_instance_->noise_param_;
}
inline ::caffe::NoiseParameter* TransformationParameter::mutable_noise_param() {
  set_has_noise_param();
  if (noise_param_ == NULL) {
    noise_param_ = new ::caffe::NoiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.noise_param)
  return noise_param_;
}
inline ::caffe::NoiseParameter* TransformationParameter::release_noise_param() {
  // @@protoc_insertion_point(field_release:caffe.TransformationParameter.noise_param)
  clear_has_noise_param();
  ::caffe::NoiseParameter* temp = noise_param_;
  noise_param_ = NULL;
  return temp;
}
inline void TransformationParameter::set_allocated_noise_param(::caffe::NoiseParameter* noise_param) {
  delete noise_param_;
  noise_param_ = noise_param;
  if (noise_param) {
    set_has_noise_param();
  } else {
    clear_has_noise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TransformationParameter.noise_param)
}

// optional .caffe.EmitConstraint emit_constraint = 10;
inline bool TransformationParameter::has_emit_constraint() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TransformationParameter::set_has_emit_constraint() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TransformationParameter::clear_has_emit_constraint() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TransformationParameter::clear_emit_constraint() {
  if (emit_constraint_ != NULL) emit_constraint_->::caffe::EmitConstraint::Clear();
  clear_has_emit_constraint();
}
inline const ::caffe::EmitConstraint& TransformationParameter::emit_constraint() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.emit_constraint)
  return emit_constraint_ != NULL ? *emit_constraint_ : *default_instance_->emit_constraint_;
}
inline ::caffe::EmitConstraint* TransformationParameter::mutable_emit_constraint() {
  set_has_emit_constraint();
  if (emit_constraint_ == NULL) {
    emit_constraint_ = new ::caffe::EmitConstraint;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.emit_constraint)
  return emit_constraint_;
}
inline ::caffe::EmitConstraint* TransformationParameter::release_emit_constraint() {
  // @@protoc_insertion_point(field_release:caffe.TransformationParameter.emit_constraint)
  clear_has_emit_constraint();
  ::caffe::EmitConstraint* temp = emit_constraint_;
  emit_constraint_ = NULL;
  return temp;
}
inline void TransformationParameter::set_allocated_emit_constraint(::caffe::EmitConstraint* emit_constraint) {
  delete emit_constraint_;
  emit_constraint_ = emit_constraint;
  if (emit_constraint) {
    set_has_emit_constraint();
  } else {
    clear_has_emit_constraint();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TransformationParameter.emit_constraint)
}

// optional .caffe.DistoredParameter distored_param = 13;
inline bool TransformationParameter::has_distored_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TransformationParameter::set_has_distored_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TransformationParameter::clear_has_distored_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TransformationParameter::clear_distored_param() {
  if (distored_param_ != NULL) distored_param_->::caffe::DistoredParameter::Clear();
  clear_has_distored_param();
}
inline const ::caffe::DistoredParameter& TransformationParameter::distored_param() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.distored_param)
  return distored_param_ != NULL ? *distored_param_ : *default_instance_->distored_param_;
}
inline ::caffe::DistoredParameter* TransformationParameter::mutable_distored_param() {
  set_has_distored_param();
  if (distored_param_ == NULL) {
    distored_param_ = new ::caffe::DistoredParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.distored_param)
  return distored_param_;
}
inline ::caffe::DistoredParameter* TransformationParameter::release_distored_param() {
  // @@protoc_insertion_point(field_release:caffe.TransformationParameter.distored_param)
  clear_has_distored_param();
  ::caffe::DistoredParameter* temp = distored_param_;
  distored_param_ = NULL;
  return temp;
}
inline void TransformationParameter::set_allocated_distored_param(::caffe::DistoredParameter* distored_param) {
  delete distored_param_;
  distored_param_ = distored_param;
  if (distored_param) {
    set_has_distored_param();
  } else {
    clear_has_distored_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TransformationParameter.distored_param)
}

// optional .caffe.RandomCropParameter crop_param = 14;
inline bool TransformationParameter::has_crop_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TransformationParameter::set_has_crop_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TransformationParameter::clear_has_crop_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TransformationParameter::clear_crop_param() {
  if (crop_param_ != NULL) crop_param_->::caffe::RandomCropParameter::Clear();
  clear_has_crop_param();
}
inline const ::caffe::RandomCropParameter& TransformationParameter::crop_param() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.crop_param)
  return crop_param_ != NULL ? *crop_param_ : *default_instance_->crop_param_;
}
inline ::caffe::RandomCropParameter* TransformationParameter::mutable_crop_param() {
  set_has_crop_param();
  if (crop_param_ == NULL) {
    crop_param_ = new ::caffe::RandomCropParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.crop_param)
  return crop_param_;
}
inline ::caffe::RandomCropParameter* TransformationParameter::release_crop_param() {
  // @@protoc_insertion_point(field_release:caffe.TransformationParameter.crop_param)
  clear_has_crop_param();
  ::caffe::RandomCropParameter* temp = crop_param_;
  crop_param_ = NULL;
  return temp;
}
inline void TransformationParameter::set_allocated_crop_param(::caffe::RandomCropParameter* crop_param) {
  delete crop_param_;
  crop_param_ = crop_param;
  if (crop_param) {
    set_has_crop_param();
  } else {
    clear_has_crop_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TransformationParameter.crop_param)
}

// optional float boxsize_threshold = 18 [default = 0];
inline bool TransformationParameter::has_boxsize_threshold() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TransformationParameter::set_has_boxsize_threshold() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TransformationParameter::clear_has_boxsize_threshold() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TransformationParameter::clear_boxsize_threshold() {
  boxsize_threshold_ = 0;
  clear_has_boxsize_threshold();
}
inline float TransformationParameter::boxsize_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.boxsize_threshold)
  return boxsize_threshold_;
}
inline void TransformationParameter::set_boxsize_threshold(float value) {
  set_has_boxsize_threshold();
  boxsize_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.TransformationParameter.boxsize_threshold)
}

// optional .caffe.DistortionParameter distort_param = 15;
inline bool TransformationParameter::has_distort_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TransformationParameter::set_has_distort_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TransformationParameter::clear_has_distort_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TransformationParameter::clear_distort_param() {
  if (distort_param_ != NULL) distort_param_->::caffe::DistortionParameter::Clear();
  clear_has_distort_param();
}
inline const ::caffe::DistortionParameter& TransformationParameter::distort_param() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.distort_param)
  return distort_param_ != NULL ? *distort_param_ : *default_instance_->distort_param_;
}
inline ::caffe::DistortionParameter* TransformationParameter::mutable_distort_param() {
  set_has_distort_param();
  if (distort_param_ == NULL) {
    distort_param_ = new ::caffe::DistortionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.distort_param)
  return distort_param_;
}
inline ::caffe::DistortionParameter* TransformationParameter::release_distort_param() {
  // @@protoc_insertion_point(field_release:caffe.TransformationParameter.distort_param)
  clear_has_distort_param();
  ::caffe::DistortionParameter* temp = distort_param_;
  distort_param_ = NULL;
  return temp;
}
inline void TransformationParameter::set_allocated_distort_param(::caffe::DistortionParameter* distort_param) {
  delete distort_param_;
  distort_param_ = distort_param;
  if (distort_param) {
    set_has_distort_param();
  } else {
    clear_has_distort_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TransformationParameter.distort_param)
}

// optional .caffe.ExpansionParameter expand_param = 16;
inline bool TransformationParameter::has_expand_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TransformationParameter::set_has_expand_param() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TransformationParameter::clear_has_expand_param() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TransformationParameter::clear_expand_param() {
  if (expand_param_ != NULL) expand_param_->::caffe::ExpansionParameter::Clear();
  clear_has_expand_param();
}
inline const ::caffe::ExpansionParameter& TransformationParameter::expand_param() const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.expand_param)
  return expand_param_ != NULL ? *expand_param_ : *default_instance_->expand_param_;
}
inline ::caffe::ExpansionParameter* TransformationParameter::mutable_expand_param() {
  set_has_expand_param();
  if (expand_param_ == NULL) {
    expand_param_ = new ::caffe::ExpansionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.expand_param)
  return expand_param_;
}
inline ::caffe::ExpansionParameter* TransformationParameter::release_expand_param() {
  // @@protoc_insertion_point(field_release:caffe.TransformationParameter.expand_param)
  clear_has_expand_param();
  ::caffe::ExpansionParameter* temp = expand_param_;
  expand_param_ = NULL;
  return temp;
}
inline void TransformationParameter::set_allocated_expand_param(::caffe::ExpansionParameter* expand_param) {
  delete expand_param_;
  expand_param_ = expand_param;
  if (expand_param) {
    set_has_expand_param();
  } else {
    clear_has_expand_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TransformationParameter.expand_param)
}

// repeated .caffe.BatchSampler batch_sampler = 17;
inline int TransformationParameter::batch_sampler_size() const {
  return batch_sampler_.size();
}
inline void TransformationParameter::clear_batch_sampler() {
  batch_sampler_.Clear();
}
inline const ::caffe::BatchSampler& TransformationParameter::batch_sampler(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TransformationParameter.batch_sampler)
  return batch_sampler_.Get(index);
}
inline ::caffe::BatchSampler* TransformationParameter::mutable_batch_sampler(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.TransformationParameter.batch_sampler)
  return batch_sampler_.Mutable(index);
}
inline ::caffe::BatchSampler* TransformationParameter::add_batch_sampler() {
  // @@protoc_insertion_point(field_add:caffe.TransformationParameter.batch_sampler)
  return batch_sampler_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler >*
TransformationParameter::mutable_batch_sampler() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TransformationParameter.batch_sampler)
  return &batch_sampler_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler >&
TransformationParameter::batch_sampler() const {
  // @@protoc_insertion_point(field_list:caffe.TransformationParameter.batch_sampler)
  return batch_sampler_;
}

// -------------------------------------------------------------------

// DistortionParameter

// optional float brightness_prob = 1 [default = 0];
inline bool DistortionParameter::has_brightness_prob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DistortionParameter::set_has_brightness_prob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DistortionParameter::clear_has_brightness_prob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DistortionParameter::clear_brightness_prob() {
  brightness_prob_ = 0;
  clear_has_brightness_prob();
}
inline float DistortionParameter::brightness_prob() const {
  // @@protoc_insertion_point(field_get:caffe.DistortionParameter.brightness_prob)
  return brightness_prob_;
}
inline void DistortionParameter::set_brightness_prob(float value) {
  set_has_brightness_prob();
  brightness_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistortionParameter.brightness_prob)
}

// optional float brightness_delta = 2 [default = 0];
inline bool DistortionParameter::has_brightness_delta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DistortionParameter::set_has_brightness_delta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DistortionParameter::clear_has_brightness_delta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DistortionParameter::clear_brightness_delta() {
  brightness_delta_ = 0;
  clear_has_brightness_delta();
}
inline float DistortionParameter::brightness_delta() const {
  // @@protoc_insertion_point(field_get:caffe.DistortionParameter.brightness_delta)
  return brightness_delta_;
}
inline void DistortionParameter::set_brightness_delta(float value) {
  set_has_brightness_delta();
  brightness_delta_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistortionParameter.brightness_delta)
}

// optional float contrast_prob = 3 [default = 0];
inline bool DistortionParameter::has_contrast_prob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DistortionParameter::set_has_contrast_prob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DistortionParameter::clear_has_contrast_prob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DistortionParameter::clear_contrast_prob() {
  contrast_prob_ = 0;
  clear_has_contrast_prob();
}
inline float DistortionParameter::contrast_prob() const {
  // @@protoc_insertion_point(field_get:caffe.DistortionParameter.contrast_prob)
  return contrast_prob_;
}
inline void DistortionParameter::set_contrast_prob(float value) {
  set_has_contrast_prob();
  contrast_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistortionParameter.contrast_prob)
}

// optional float contrast_lower = 4 [default = 0];
inline bool DistortionParameter::has_contrast_lower() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DistortionParameter::set_has_contrast_lower() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DistortionParameter::clear_has_contrast_lower() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DistortionParameter::clear_contrast_lower() {
  contrast_lower_ = 0;
  clear_has_contrast_lower();
}
inline float DistortionParameter::contrast_lower() const {
  // @@protoc_insertion_point(field_get:caffe.DistortionParameter.contrast_lower)
  return contrast_lower_;
}
inline void DistortionParameter::set_contrast_lower(float value) {
  set_has_contrast_lower();
  contrast_lower_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistortionParameter.contrast_lower)
}

// optional float contrast_upper = 5 [default = 0];
inline bool DistortionParameter::has_contrast_upper() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DistortionParameter::set_has_contrast_upper() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DistortionParameter::clear_has_contrast_upper() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DistortionParameter::clear_contrast_upper() {
  contrast_upper_ = 0;
  clear_has_contrast_upper();
}
inline float DistortionParameter::contrast_upper() const {
  // @@protoc_insertion_point(field_get:caffe.DistortionParameter.contrast_upper)
  return contrast_upper_;
}
inline void DistortionParameter::set_contrast_upper(float value) {
  set_has_contrast_upper();
  contrast_upper_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistortionParameter.contrast_upper)
}

// optional float hue_prob = 6 [default = 0];
inline bool DistortionParameter::has_hue_prob() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DistortionParameter::set_has_hue_prob() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DistortionParameter::clear_has_hue_prob() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DistortionParameter::clear_hue_prob() {
  hue_prob_ = 0;
  clear_has_hue_prob();
}
inline float DistortionParameter::hue_prob() const {
  // @@protoc_insertion_point(field_get:caffe.DistortionParameter.hue_prob)
  return hue_prob_;
}
inline void DistortionParameter::set_hue_prob(float value) {
  set_has_hue_prob();
  hue_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistortionParameter.hue_prob)
}

// optional float hue_delta = 7 [default = 0];
inline bool DistortionParameter::has_hue_delta() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DistortionParameter::set_has_hue_delta() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DistortionParameter::clear_has_hue_delta() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DistortionParameter::clear_hue_delta() {
  hue_delta_ = 0;
  clear_has_hue_delta();
}
inline float DistortionParameter::hue_delta() const {
  // @@protoc_insertion_point(field_get:caffe.DistortionParameter.hue_delta)
  return hue_delta_;
}
inline void DistortionParameter::set_hue_delta(float value) {
  set_has_hue_delta();
  hue_delta_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistortionParameter.hue_delta)
}

// optional float saturation_prob = 8 [default = 0];
inline bool DistortionParameter::has_saturation_prob() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DistortionParameter::set_has_saturation_prob() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DistortionParameter::clear_has_saturation_prob() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DistortionParameter::clear_saturation_prob() {
  saturation_prob_ = 0;
  clear_has_saturation_prob();
}
inline float DistortionParameter::saturation_prob() const {
  // @@protoc_insertion_point(field_get:caffe.DistortionParameter.saturation_prob)
  return saturation_prob_;
}
inline void DistortionParameter::set_saturation_prob(float value) {
  set_has_saturation_prob();
  saturation_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistortionParameter.saturation_prob)
}

// optional float saturation_lower = 9 [default = 0];
inline bool DistortionParameter::has_saturation_lower() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DistortionParameter::set_has_saturation_lower() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DistortionParameter::clear_has_saturation_lower() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DistortionParameter::clear_saturation_lower() {
  saturation_lower_ = 0;
  clear_has_saturation_lower();
}
inline float DistortionParameter::saturation_lower() const {
  // @@protoc_insertion_point(field_get:caffe.DistortionParameter.saturation_lower)
  return saturation_lower_;
}
inline void DistortionParameter::set_saturation_lower(float value) {
  set_has_saturation_lower();
  saturation_lower_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistortionParameter.saturation_lower)
}

// optional float saturation_upper = 10 [default = 0];
inline bool DistortionParameter::has_saturation_upper() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DistortionParameter::set_has_saturation_upper() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DistortionParameter::clear_has_saturation_upper() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DistortionParameter::clear_saturation_upper() {
  saturation_upper_ = 0;
  clear_has_saturation_upper();
}
inline float DistortionParameter::saturation_upper() const {
  // @@protoc_insertion_point(field_get:caffe.DistortionParameter.saturation_upper)
  return saturation_upper_;
}
inline void DistortionParameter::set_saturation_upper(float value) {
  set_has_saturation_upper();
  saturation_upper_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistortionParameter.saturation_upper)
}

// optional float random_order_prob = 11 [default = 0];
inline bool DistortionParameter::has_random_order_prob() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DistortionParameter::set_has_random_order_prob() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DistortionParameter::clear_has_random_order_prob() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DistortionParameter::clear_random_order_prob() {
  random_order_prob_ = 0;
  clear_has_random_order_prob();
}
inline float DistortionParameter::random_order_prob() const {
  // @@protoc_insertion_point(field_get:caffe.DistortionParameter.random_order_prob)
  return random_order_prob_;
}
inline void DistortionParameter::set_random_order_prob(float value) {
  set_has_random_order_prob();
  random_order_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistortionParameter.random_order_prob)
}

// -------------------------------------------------------------------

// ExpansionParameter

// optional float prob = 1 [default = 1];
inline bool ExpansionParameter::has_prob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExpansionParameter::set_has_prob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExpansionParameter::clear_has_prob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExpansionParameter::clear_prob() {
  prob_ = 1;
  clear_has_prob();
}
inline float ExpansionParameter::prob() const {
  // @@protoc_insertion_point(field_get:caffe.ExpansionParameter.prob)
  return prob_;
}
inline void ExpansionParameter::set_prob(float value) {
  set_has_prob();
  prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpansionParameter.prob)
}

// optional float max_expand_ratio = 2 [default = 1];
inline bool ExpansionParameter::has_max_expand_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExpansionParameter::set_has_max_expand_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExpansionParameter::clear_has_max_expand_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExpansionParameter::clear_max_expand_ratio() {
  max_expand_ratio_ = 1;
  clear_has_max_expand_ratio();
}
inline float ExpansionParameter::max_expand_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.ExpansionParameter.max_expand_ratio)
  return max_expand_ratio_;
}
inline void ExpansionParameter::set_max_expand_ratio(float value) {
  set_has_max_expand_ratio();
  max_expand_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpansionParameter.max_expand_ratio)
}

// -------------------------------------------------------------------

// RandomCropParameter

// optional float min_scale = 1 [default = 1];
inline bool RandomCropParameter::has_min_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RandomCropParameter::set_has_min_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RandomCropParameter::clear_has_min_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RandomCropParameter::clear_min_scale() {
  min_scale_ = 1;
  clear_has_min_scale();
}
inline float RandomCropParameter::min_scale() const {
  // @@protoc_insertion_point(field_get:caffe.RandomCropParameter.min_scale)
  return min_scale_;
}
inline void RandomCropParameter::set_min_scale(float value) {
  set_has_min_scale();
  min_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.RandomCropParameter.min_scale)
}

// optional float max_scale = 2 [default = 1];
inline bool RandomCropParameter::has_max_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RandomCropParameter::set_has_max_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RandomCropParameter::clear_has_max_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RandomCropParameter::clear_max_scale() {
  max_scale_ = 1;
  clear_has_max_scale();
}
inline float RandomCropParameter::max_scale() const {
  // @@protoc_insertion_point(field_get:caffe.RandomCropParameter.max_scale)
  return max_scale_;
}
inline void RandomCropParameter::set_max_scale(float value) {
  set_has_max_scale();
  max_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.RandomCropParameter.max_scale)
}

// optional float min_aspect = 3 [default = 1];
inline bool RandomCropParameter::has_min_aspect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RandomCropParameter::set_has_min_aspect() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RandomCropParameter::clear_has_min_aspect() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RandomCropParameter::clear_min_aspect() {
  min_aspect_ = 1;
  clear_has_min_aspect();
}
inline float RandomCropParameter::min_aspect() const {
  // @@protoc_insertion_point(field_get:caffe.RandomCropParameter.min_aspect)
  return min_aspect_;
}
inline void RandomCropParameter::set_min_aspect(float value) {
  set_has_min_aspect();
  min_aspect_ = value;
  // @@protoc_insertion_point(field_set:caffe.RandomCropParameter.min_aspect)
}

// optional float max_aspect = 4 [default = 1];
inline bool RandomCropParameter::has_max_aspect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RandomCropParameter::set_has_max_aspect() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RandomCropParameter::clear_has_max_aspect() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RandomCropParameter::clear_max_aspect() {
  max_aspect_ = 1;
  clear_has_max_aspect();
}
inline float RandomCropParameter::max_aspect() const {
  // @@protoc_insertion_point(field_get:caffe.RandomCropParameter.max_aspect)
  return max_aspect_;
}
inline void RandomCropParameter::set_max_aspect(float value) {
  set_has_max_aspect();
  max_aspect_ = value;
  // @@protoc_insertion_point(field_set:caffe.RandomCropParameter.max_aspect)
}

// optional int32 max_sample_size = 5 [default = 1];
inline bool RandomCropParameter::has_max_sample_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RandomCropParameter::set_has_max_sample_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RandomCropParameter::clear_has_max_sample_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RandomCropParameter::clear_max_sample_size() {
  max_sample_size_ = 1;
  clear_has_max_sample_size();
}
inline ::google::protobuf::int32 RandomCropParameter::max_sample_size() const {
  // @@protoc_insertion_point(field_get:caffe.RandomCropParameter.max_sample_size)
  return max_sample_size_;
}
inline void RandomCropParameter::set_max_sample_size(::google::protobuf::int32 value) {
  set_has_max_sample_size();
  max_sample_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.RandomCropParameter.max_sample_size)
}

// -------------------------------------------------------------------

// ConnectLimbParameter

// optional bool is_type_coco = 1 [default = true];
inline bool ConnectLimbParameter::has_is_type_coco() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectLimbParameter::set_has_is_type_coco() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectLimbParameter::clear_has_is_type_coco() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectLimbParameter::clear_is_type_coco() {
  is_type_coco_ = true;
  clear_has_is_type_coco();
}
inline bool ConnectLimbParameter::is_type_coco() const {
  // @@protoc_insertion_point(field_get:caffe.ConnectLimbParameter.is_type_coco)
  return is_type_coco_;
}
inline void ConnectLimbParameter::set_is_type_coco(bool value) {
  set_has_is_type_coco();
  is_type_coco_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConnectLimbParameter.is_type_coco)
}

// optional int32 max_person = 2 [default = 20];
inline bool ConnectLimbParameter::has_max_person() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectLimbParameter::set_has_max_person() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectLimbParameter::clear_has_max_person() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnectLimbParameter::clear_max_person() {
  max_person_ = 20;
  clear_has_max_person();
}
inline ::google::protobuf::int32 ConnectLimbParameter::max_person() const {
  // @@protoc_insertion_point(field_get:caffe.ConnectLimbParameter.max_person)
  return max_person_;
}
inline void ConnectLimbParameter::set_max_person(::google::protobuf::int32 value) {
  set_has_max_person();
  max_person_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConnectLimbParameter.max_person)
}

// optional int32 iters_pa_cal = 3 [default = 10];
inline bool ConnectLimbParameter::has_iters_pa_cal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConnectLimbParameter::set_has_iters_pa_cal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConnectLimbParameter::clear_has_iters_pa_cal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConnectLimbParameter::clear_iters_pa_cal() {
  iters_pa_cal_ = 10;
  clear_has_iters_pa_cal();
}
inline ::google::protobuf::int32 ConnectLimbParameter::iters_pa_cal() const {
  // @@protoc_insertion_point(field_get:caffe.ConnectLimbParameter.iters_pa_cal)
  return iters_pa_cal_;
}
inline void ConnectLimbParameter::set_iters_pa_cal(::google::protobuf::int32 value) {
  set_has_iters_pa_cal();
  iters_pa_cal_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConnectLimbParameter.iters_pa_cal)
}

// optional float connect_inter_threshold = 4 [default = 0.05];
inline bool ConnectLimbParameter::has_connect_inter_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConnectLimbParameter::set_has_connect_inter_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConnectLimbParameter::clear_has_connect_inter_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConnectLimbParameter::clear_connect_inter_threshold() {
  connect_inter_threshold_ = 0.05f;
  clear_has_connect_inter_threshold();
}
inline float ConnectLimbParameter::connect_inter_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.ConnectLimbParameter.connect_inter_threshold)
  return connect_inter_threshold_;
}
inline void ConnectLimbParameter::set_connect_inter_threshold(float value) {
  set_has_connect_inter_threshold();
  connect_inter_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConnectLimbParameter.connect_inter_threshold)
}

// optional int32 connect_inter_min_nums = 5 [default = 8];
inline bool ConnectLimbParameter::has_connect_inter_min_nums() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConnectLimbParameter::set_has_connect_inter_min_nums() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConnectLimbParameter::clear_has_connect_inter_min_nums() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConnectLimbParameter::clear_connect_inter_min_nums() {
  connect_inter_min_nums_ = 8;
  clear_has_connect_inter_min_nums();
}
inline ::google::protobuf::int32 ConnectLimbParameter::connect_inter_min_nums() const {
  // @@protoc_insertion_point(field_get:caffe.ConnectLimbParameter.connect_inter_min_nums)
  return connect_inter_min_nums_;
}
inline void ConnectLimbParameter::set_connect_inter_min_nums(::google::protobuf::int32 value) {
  set_has_connect_inter_min_nums();
  connect_inter_min_nums_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConnectLimbParameter.connect_inter_min_nums)
}

// optional int32 connect_min_subset_cnt = 6 [default = 3];
inline bool ConnectLimbParameter::has_connect_min_subset_cnt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConnectLimbParameter::set_has_connect_min_subset_cnt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConnectLimbParameter::clear_has_connect_min_subset_cnt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConnectLimbParameter::clear_connect_min_subset_cnt() {
  connect_min_subset_cnt_ = 3;
  clear_has_connect_min_subset_cnt();
}
inline ::google::protobuf::int32 ConnectLimbParameter::connect_min_subset_cnt() const {
  // @@protoc_insertion_point(field_get:caffe.ConnectLimbParameter.connect_min_subset_cnt)
  return connect_min_subset_cnt_;
}
inline void ConnectLimbParameter::set_connect_min_subset_cnt(::google::protobuf::int32 value) {
  set_has_connect_min_subset_cnt();
  connect_min_subset_cnt_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConnectLimbParameter.connect_min_subset_cnt)
}

// optional float connect_min_subset_score = 7 [default = 0.3];
inline bool ConnectLimbParameter::has_connect_min_subset_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConnectLimbParameter::set_has_connect_min_subset_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConnectLimbParameter::clear_has_connect_min_subset_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConnectLimbParameter::clear_connect_min_subset_score() {
  connect_min_subset_score_ = 0.3f;
  clear_has_connect_min_subset_score();
}
inline float ConnectLimbParameter::connect_min_subset_score() const {
  // @@protoc_insertion_point(field_get:caffe.ConnectLimbParameter.connect_min_subset_score)
  return connect_min_subset_score_;
}
inline void ConnectLimbParameter::set_connect_min_subset_score(float value) {
  set_has_connect_min_subset_score();
  connect_min_subset_score_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConnectLimbParameter.connect_min_subset_score)
}

// optional int32 max_peaks_use = 8 [default = 32];
inline bool ConnectLimbParameter::has_max_peaks_use() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConnectLimbParameter::set_has_max_peaks_use() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConnectLimbParameter::clear_has_max_peaks_use() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConnectLimbParameter::clear_max_peaks_use() {
  max_peaks_use_ = 32;
  clear_has_max_peaks_use();
}
inline ::google::protobuf::int32 ConnectLimbParameter::max_peaks_use() const {
  // @@protoc_insertion_point(field_get:caffe.ConnectLimbParameter.max_peaks_use)
  return max_peaks_use_;
}
inline void ConnectLimbParameter::set_max_peaks_use(::google::protobuf::int32 value) {
  set_has_max_peaks_use();
  max_peaks_use_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConnectLimbParameter.max_peaks_use)
}

// -------------------------------------------------------------------

// DistoredParameter

// optional float hue = 1 [default = 0];
inline bool DistoredParameter::has_hue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DistoredParameter::set_has_hue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DistoredParameter::clear_has_hue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DistoredParameter::clear_hue() {
  hue_ = 0;
  clear_has_hue();
}
inline float DistoredParameter::hue() const {
  // @@protoc_insertion_point(field_get:caffe.DistoredParameter.hue)
  return hue_;
}
inline void DistoredParameter::set_hue(float value) {
  set_has_hue();
  hue_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistoredParameter.hue)
}

// optional float sat = 2 [default = 1];
inline bool DistoredParameter::has_sat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DistoredParameter::set_has_sat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DistoredParameter::clear_has_sat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DistoredParameter::clear_sat() {
  sat_ = 1;
  clear_has_sat();
}
inline float DistoredParameter::sat() const {
  // @@protoc_insertion_point(field_get:caffe.DistoredParameter.sat)
  return sat_;
}
inline void DistoredParameter::set_sat(float value) {
  set_has_sat();
  sat_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistoredParameter.sat)
}

// optional float val = 3 [default = 1];
inline bool DistoredParameter::has_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DistoredParameter::set_has_val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DistoredParameter::clear_has_val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DistoredParameter::clear_val() {
  val_ = 1;
  clear_has_val();
}
inline float DistoredParameter::val() const {
  // @@protoc_insertion_point(field_get:caffe.DistoredParameter.val)
  return val_;
}
inline void DistoredParameter::set_val(float value) {
  set_has_val();
  val_ = value;
  // @@protoc_insertion_point(field_set:caffe.DistoredParameter.val)
}

// -------------------------------------------------------------------

// LabeledMatchParameter

// optional int32 num_classes = 1 [default = 100];
inline bool LabeledMatchParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LabeledMatchParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LabeledMatchParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LabeledMatchParameter::clear_num_classes() {
  num_classes_ = 100;
  clear_has_num_classes();
}
inline ::google::protobuf::int32 LabeledMatchParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:caffe.LabeledMatchParameter.num_classes)
  return num_classes_;
}
inline void LabeledMatchParameter::set_num_classes(::google::protobuf::int32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabeledMatchParameter.num_classes)
}

// optional float momentum = 2 [default = 0.5];
inline bool LabeledMatchParameter::has_momentum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LabeledMatchParameter::set_has_momentum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LabeledMatchParameter::clear_has_momentum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LabeledMatchParameter::clear_momentum() {
  momentum_ = 0.5f;
  clear_has_momentum();
}
inline float LabeledMatchParameter::momentum() const {
  // @@protoc_insertion_point(field_get:caffe.LabeledMatchParameter.momentum)
  return momentum_;
}
inline void LabeledMatchParameter::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabeledMatchParameter.momentum)
}

// optional bool copy_status = 3 [default = false];
inline bool LabeledMatchParameter::has_copy_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LabeledMatchParameter::set_has_copy_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LabeledMatchParameter::clear_has_copy_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LabeledMatchParameter::clear_copy_status() {
  copy_status_ = false;
  clear_has_copy_status();
}
inline bool LabeledMatchParameter::copy_status() const {
  // @@protoc_insertion_point(field_get:caffe.LabeledMatchParameter.copy_status)
  return copy_status_;
}
inline void LabeledMatchParameter::set_copy_status(bool value) {
  set_has_copy_status();
  copy_status_ = value;
  // @@protoc_insertion_point(field_set:caffe.LabeledMatchParameter.copy_status)
}

// -------------------------------------------------------------------

// UnlabeledMatchParameter

// optional int32 queue_size = 1 [default = 100];
inline bool UnlabeledMatchParameter::has_queue_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnlabeledMatchParameter::set_has_queue_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnlabeledMatchParameter::clear_has_queue_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnlabeledMatchParameter::clear_queue_size() {
  queue_size_ = 100;
  clear_has_queue_size();
}
inline ::google::protobuf::int32 UnlabeledMatchParameter::queue_size() const {
  // @@protoc_insertion_point(field_get:caffe.UnlabeledMatchParameter.queue_size)
  return queue_size_;
}
inline void UnlabeledMatchParameter::set_queue_size(::google::protobuf::int32 value) {
  set_has_queue_size();
  queue_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnlabeledMatchParameter.queue_size)
}

// -------------------------------------------------------------------

// ResizeParameter

// optional float prob = 1 [default = 1];
inline bool ResizeParameter::has_prob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResizeParameter::set_has_prob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResizeParameter::clear_has_prob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResizeParameter::clear_prob() {
  prob_ = 1;
  clear_has_prob();
}
inline float ResizeParameter::prob() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.prob)
  return prob_;
}
inline void ResizeParameter::set_prob(float value) {
  set_has_prob();
  prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.prob)
}

// optional .caffe.ResizeParameter.Resize_mode resize_mode = 2 [default = WARP];
inline bool ResizeParameter::has_resize_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResizeParameter::set_has_resize_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResizeParameter::clear_has_resize_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResizeParameter::clear_resize_mode() {
  resize_mode_ = 1;
  clear_has_resize_mode();
}
inline ::caffe::ResizeParameter_Resize_mode ResizeParameter::resize_mode() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.resize_mode)
  return static_cast< ::caffe::ResizeParameter_Resize_mode >(resize_mode_);
}
inline void ResizeParameter::set_resize_mode(::caffe::ResizeParameter_Resize_mode value) {
  assert(::caffe::ResizeParameter_Resize_mode_IsValid(value));
  set_has_resize_mode();
  resize_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.resize_mode)
}

// optional uint32 height = 3 [default = 0];
inline bool ResizeParameter::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResizeParameter::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResizeParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResizeParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 ResizeParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.height)
  return height_;
}
inline void ResizeParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.height)
}

// optional uint32 width = 4 [default = 0];
inline bool ResizeParameter::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResizeParameter::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResizeParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResizeParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 ResizeParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.width)
  return width_;
}
inline void ResizeParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.width)
}

// optional .caffe.ResizeParameter.Pad_mode pad_mode = 5 [default = CONSTANT];
inline bool ResizeParameter::has_pad_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResizeParameter::set_has_pad_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResizeParameter::clear_has_pad_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResizeParameter::clear_pad_mode() {
  pad_mode_ = 1;
  clear_has_pad_mode();
}
inline ::caffe::ResizeParameter_Pad_mode ResizeParameter::pad_mode() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.pad_mode)
  return static_cast< ::caffe::ResizeParameter_Pad_mode >(pad_mode_);
}
inline void ResizeParameter::set_pad_mode(::caffe::ResizeParameter_Pad_mode value) {
  assert(::caffe::ResizeParameter_Pad_mode_IsValid(value));
  set_has_pad_mode();
  pad_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.pad_mode)
}

// repeated float pad_value = 6;
inline int ResizeParameter::pad_value_size() const {
  return pad_value_.size();
}
inline void ResizeParameter::clear_pad_value() {
  pad_value_.Clear();
}
inline float ResizeParameter::pad_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.pad_value)
  return pad_value_.Get(index);
}
inline void ResizeParameter::set_pad_value(int index, float value) {
  pad_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.pad_value)
}
inline void ResizeParameter::add_pad_value(float value) {
  pad_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ResizeParameter.pad_value)
}
inline const ::google::protobuf::RepeatedField< float >&
ResizeParameter::pad_value() const {
  // @@protoc_insertion_point(field_list:caffe.ResizeParameter.pad_value)
  return pad_value_;
}
inline ::google::protobuf::RepeatedField< float >*
ResizeParameter::mutable_pad_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ResizeParameter.pad_value)
  return &pad_value_;
}

// repeated .caffe.ResizeParameter.Interp_mode interp_mode = 7;
inline int ResizeParameter::interp_mode_size() const {
  return interp_mode_.size();
}
inline void ResizeParameter::clear_interp_mode() {
  interp_mode_.Clear();
}
inline ::caffe::ResizeParameter_Interp_mode ResizeParameter::interp_mode(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ResizeParameter.interp_mode)
  return static_cast< ::caffe::ResizeParameter_Interp_mode >(interp_mode_.Get(index));
}
inline void ResizeParameter::set_interp_mode(int index, ::caffe::ResizeParameter_Interp_mode value) {
  assert(::caffe::ResizeParameter_Interp_mode_IsValid(value));
  interp_mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ResizeParameter.interp_mode)
}
inline void ResizeParameter::add_interp_mode(::caffe::ResizeParameter_Interp_mode value) {
  assert(::caffe::ResizeParameter_Interp_mode_IsValid(value));
  interp_mode_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ResizeParameter.interp_mode)
}
inline const ::google::protobuf::RepeatedField<int>&
ResizeParameter::interp_mode() const {
  // @@protoc_insertion_point(field_list:caffe.ResizeParameter.interp_mode)
  return interp_mode_;
}
inline ::google::protobuf::RepeatedField<int>*
ResizeParameter::mutable_interp_mode() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ResizeParameter.interp_mode)
  return &interp_mode_;
}

// -------------------------------------------------------------------

// SaltPepperParameter

// optional float fraction = 1 [default = 0];
inline bool SaltPepperParameter::has_fraction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaltPepperParameter::set_has_fraction() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaltPepperParameter::clear_has_fraction() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaltPepperParameter::clear_fraction() {
  fraction_ = 0;
  clear_has_fraction();
}
inline float SaltPepperParameter::fraction() const {
  // @@protoc_insertion_point(field_get:caffe.SaltPepperParameter.fraction)
  return fraction_;
}
inline void SaltPepperParameter::set_fraction(float value) {
  set_has_fraction();
  fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.SaltPepperParameter.fraction)
}

// repeated float value = 2;
inline int SaltPepperParameter::value_size() const {
  return value_.size();
}
inline void SaltPepperParameter::clear_value() {
  value_.Clear();
}
inline float SaltPepperParameter::value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SaltPepperParameter.value)
  return value_.Get(index);
}
inline void SaltPepperParameter::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SaltPepperParameter.value)
}
inline void SaltPepperParameter::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SaltPepperParameter.value)
}
inline const ::google::protobuf::RepeatedField< float >&
SaltPepperParameter::value() const {
  // @@protoc_insertion_point(field_list:caffe.SaltPepperParameter.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
SaltPepperParameter::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SaltPepperParameter.value)
  return &value_;
}

// -------------------------------------------------------------------

// NoiseParameter

// optional float prob = 1 [default = 0];
inline bool NoiseParameter::has_prob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NoiseParameter::set_has_prob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NoiseParameter::clear_has_prob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NoiseParameter::clear_prob() {
  prob_ = 0;
  clear_has_prob();
}
inline float NoiseParameter::prob() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.prob)
  return prob_;
}
inline void NoiseParameter::set_prob(float value) {
  set_has_prob();
  prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.prob)
}

// optional bool hist_eq = 2 [default = false];
inline bool NoiseParameter::has_hist_eq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NoiseParameter::set_has_hist_eq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NoiseParameter::clear_has_hist_eq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NoiseParameter::clear_hist_eq() {
  hist_eq_ = false;
  clear_has_hist_eq();
}
inline bool NoiseParameter::hist_eq() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.hist_eq)
  return hist_eq_;
}
inline void NoiseParameter::set_hist_eq(bool value) {
  set_has_hist_eq();
  hist_eq_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.hist_eq)
}

// optional bool inverse = 3 [default = false];
inline bool NoiseParameter::has_inverse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NoiseParameter::set_has_inverse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NoiseParameter::clear_has_inverse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NoiseParameter::clear_inverse() {
  inverse_ = false;
  clear_has_inverse();
}
inline bool NoiseParameter::inverse() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.inverse)
  return inverse_;
}
inline void NoiseParameter::set_inverse(bool value) {
  set_has_inverse();
  inverse_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.inverse)
}

// optional bool decolorize = 4 [default = false];
inline bool NoiseParameter::has_decolorize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NoiseParameter::set_has_decolorize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NoiseParameter::clear_has_decolorize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NoiseParameter::clear_decolorize() {
  decolorize_ = false;
  clear_has_decolorize();
}
inline bool NoiseParameter::decolorize() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.decolorize)
  return decolorize_;
}
inline void NoiseParameter::set_decolorize(bool value) {
  set_has_decolorize();
  decolorize_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.decolorize)
}

// optional bool gauss_blur = 5 [default = false];
inline bool NoiseParameter::has_gauss_blur() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NoiseParameter::set_has_gauss_blur() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NoiseParameter::clear_has_gauss_blur() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NoiseParameter::clear_gauss_blur() {
  gauss_blur_ = false;
  clear_has_gauss_blur();
}
inline bool NoiseParameter::gauss_blur() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.gauss_blur)
  return gauss_blur_;
}
inline void NoiseParameter::set_gauss_blur(bool value) {
  set_has_gauss_blur();
  gauss_blur_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.gauss_blur)
}

// optional float jpeg = 6 [default = -1];
inline bool NoiseParameter::has_jpeg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NoiseParameter::set_has_jpeg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NoiseParameter::clear_has_jpeg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NoiseParameter::clear_jpeg() {
  jpeg_ = -1;
  clear_has_jpeg();
}
inline float NoiseParameter::jpeg() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.jpeg)
  return jpeg_;
}
inline void NoiseParameter::set_jpeg(float value) {
  set_has_jpeg();
  jpeg_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.jpeg)
}

// optional bool posterize = 7 [default = false];
inline bool NoiseParameter::has_posterize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NoiseParameter::set_has_posterize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NoiseParameter::clear_has_posterize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NoiseParameter::clear_posterize() {
  posterize_ = false;
  clear_has_posterize();
}
inline bool NoiseParameter::posterize() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.posterize)
  return posterize_;
}
inline void NoiseParameter::set_posterize(bool value) {
  set_has_posterize();
  posterize_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.posterize)
}

// optional bool erode = 8 [default = false];
inline bool NoiseParameter::has_erode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NoiseParameter::set_has_erode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NoiseParameter::clear_has_erode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NoiseParameter::clear_erode() {
  erode_ = false;
  clear_has_erode();
}
inline bool NoiseParameter::erode() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.erode)
  return erode_;
}
inline void NoiseParameter::set_erode(bool value) {
  set_has_erode();
  erode_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.erode)
}

// optional bool saltpepper = 9 [default = false];
inline bool NoiseParameter::has_saltpepper() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NoiseParameter::set_has_saltpepper() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NoiseParameter::clear_has_saltpepper() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NoiseParameter::clear_saltpepper() {
  saltpepper_ = false;
  clear_has_saltpepper();
}
inline bool NoiseParameter::saltpepper() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.saltpepper)
  return saltpepper_;
}
inline void NoiseParameter::set_saltpepper(bool value) {
  set_has_saltpepper();
  saltpepper_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.saltpepper)
}

// optional .caffe.SaltPepperParameter saltpepper_param = 10;
inline bool NoiseParameter::has_saltpepper_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NoiseParameter::set_has_saltpepper_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NoiseParameter::clear_has_saltpepper_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NoiseParameter::clear_saltpepper_param() {
  if (saltpepper_param_ != NULL) saltpepper_param_->::caffe::SaltPepperParameter::Clear();
  clear_has_saltpepper_param();
}
inline const ::caffe::SaltPepperParameter& NoiseParameter::saltpepper_param() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.saltpepper_param)
  return saltpepper_param_ != NULL ? *saltpepper_param_ : *default_instance_->saltpepper_param_;
}
inline ::caffe::SaltPepperParameter* NoiseParameter::mutable_saltpepper_param() {
  set_has_saltpepper_param();
  if (saltpepper_param_ == NULL) {
    saltpepper_param_ = new ::caffe::SaltPepperParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.NoiseParameter.saltpepper_param)
  return saltpepper_param_;
}
inline ::caffe::SaltPepperParameter* NoiseParameter::release_saltpepper_param() {
  // @@protoc_insertion_point(field_release:caffe.NoiseParameter.saltpepper_param)
  clear_has_saltpepper_param();
  ::caffe::SaltPepperParameter* temp = saltpepper_param_;
  saltpepper_param_ = NULL;
  return temp;
}
inline void NoiseParameter::set_allocated_saltpepper_param(::caffe::SaltPepperParameter* saltpepper_param) {
  delete saltpepper_param_;
  saltpepper_param_ = saltpepper_param;
  if (saltpepper_param) {
    set_has_saltpepper_param();
  } else {
    clear_has_saltpepper_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.NoiseParameter.saltpepper_param)
}

// optional bool clahe = 11 [default = false];
inline bool NoiseParameter::has_clahe() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NoiseParameter::set_has_clahe() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NoiseParameter::clear_has_clahe() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NoiseParameter::clear_clahe() {
  clahe_ = false;
  clear_has_clahe();
}
inline bool NoiseParameter::clahe() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.clahe)
  return clahe_;
}
inline void NoiseParameter::set_clahe(bool value) {
  set_has_clahe();
  clahe_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.clahe)
}

// optional bool convert_to_hsv = 12 [default = false];
inline bool NoiseParameter::has_convert_to_hsv() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NoiseParameter::set_has_convert_to_hsv() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NoiseParameter::clear_has_convert_to_hsv() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NoiseParameter::clear_convert_to_hsv() {
  convert_to_hsv_ = false;
  clear_has_convert_to_hsv();
}
inline bool NoiseParameter::convert_to_hsv() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.convert_to_hsv)
  return convert_to_hsv_;
}
inline void NoiseParameter::set_convert_to_hsv(bool value) {
  set_has_convert_to_hsv();
  convert_to_hsv_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.convert_to_hsv)
}

// optional bool convert_to_lab = 13 [default = false];
inline bool NoiseParameter::has_convert_to_lab() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NoiseParameter::set_has_convert_to_lab() {
  _has_bits_[0] |= 0x00001000u;
}
inline void NoiseParameter::clear_has_convert_to_lab() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void NoiseParameter::clear_convert_to_lab() {
  convert_to_lab_ = false;
  clear_has_convert_to_lab();
}
inline bool NoiseParameter::convert_to_lab() const {
  // @@protoc_insertion_point(field_get:caffe.NoiseParameter.convert_to_lab)
  return convert_to_lab_;
}
inline void NoiseParameter::set_convert_to_lab(bool value) {
  set_has_convert_to_lab();
  convert_to_lab_ = value;
  // @@protoc_insertion_point(field_set:caffe.NoiseParameter.convert_to_lab)
}

// -------------------------------------------------------------------

// PoseDataTransformationParameter

// optional float scale = 1 [default = 1];
inline bool PoseDataTransformationParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoseDataTransformationParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoseDataTransformationParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoseDataTransformationParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float PoseDataTransformationParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.scale)
  return scale_;
}
inline void PoseDataTransformationParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.scale)
}

// optional bool mirror = 2 [default = false];
inline bool PoseDataTransformationParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoseDataTransformationParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoseDataTransformationParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoseDataTransformationParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool PoseDataTransformationParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.mirror)
  return mirror_;
}
inline void PoseDataTransformationParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.mirror)
}

// optional int32 crop_size = 3 [default = 0];
inline bool PoseDataTransformationParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoseDataTransformationParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoseDataTransformationParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoseDataTransformationParameter::clear_crop_size() {
  crop_size_ = 0;
  clear_has_crop_size();
}
inline ::google::protobuf::int32 PoseDataTransformationParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.crop_size)
  return crop_size_;
}
inline void PoseDataTransformationParameter::set_crop_size(::google::protobuf::int32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.crop_size)
}

// optional string mean_file = 4;
inline bool PoseDataTransformationParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PoseDataTransformationParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PoseDataTransformationParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PoseDataTransformationParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& PoseDataTransformationParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.mean_file)
  return mean_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PoseDataTransformationParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.mean_file)
}
inline void PoseDataTransformationParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PoseDataTransformationParameter.mean_file)
}
inline void PoseDataTransformationParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PoseDataTransformationParameter.mean_file)
}
inline ::std::string* PoseDataTransformationParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.PoseDataTransformationParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PoseDataTransformationParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.PoseDataTransformationParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PoseDataTransformationParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.PoseDataTransformationParameter.mean_file)
}

// repeated float mean_value = 5;
inline int PoseDataTransformationParameter::mean_value_size() const {
  return mean_value_.size();
}
inline void PoseDataTransformationParameter::clear_mean_value() {
  mean_value_.Clear();
}
inline float PoseDataTransformationParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.mean_value)
  return mean_value_.Get(index);
}
inline void PoseDataTransformationParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.mean_value)
}
inline void PoseDataTransformationParameter::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PoseDataTransformationParameter.mean_value)
}
inline const ::google::protobuf::RepeatedField< float >&
PoseDataTransformationParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.PoseDataTransformationParameter.mean_value)
  return mean_value_;
}
inline ::google::protobuf::RepeatedField< float >*
PoseDataTransformationParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PoseDataTransformationParameter.mean_value)
  return &mean_value_;
}

// optional int32 stride = 6 [default = 8];
inline bool PoseDataTransformationParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PoseDataTransformationParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PoseDataTransformationParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PoseDataTransformationParameter::clear_stride() {
  stride_ = 8;
  clear_has_stride();
}
inline ::google::protobuf::int32 PoseDataTransformationParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.stride)
  return stride_;
}
inline void PoseDataTransformationParameter::set_stride(::google::protobuf::int32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.stride)
}

// optional float flip_prob = 7 [default = 0.5];
inline bool PoseDataTransformationParameter::has_flip_prob() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PoseDataTransformationParameter::set_has_flip_prob() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PoseDataTransformationParameter::clear_has_flip_prob() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PoseDataTransformationParameter::clear_flip_prob() {
  flip_prob_ = 0.5f;
  clear_has_flip_prob();
}
inline float PoseDataTransformationParameter::flip_prob() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.flip_prob)
  return flip_prob_;
}
inline void PoseDataTransformationParameter::set_flip_prob(float value) {
  set_has_flip_prob();
  flip_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.flip_prob)
}

// optional float max_rotate_degree = 8 [default = 20];
inline bool PoseDataTransformationParameter::has_max_rotate_degree() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PoseDataTransformationParameter::set_has_max_rotate_degree() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PoseDataTransformationParameter::clear_has_max_rotate_degree() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PoseDataTransformationParameter::clear_max_rotate_degree() {
  max_rotate_degree_ = 20;
  clear_has_max_rotate_degree();
}
inline float PoseDataTransformationParameter::max_rotate_degree() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.max_rotate_degree)
  return max_rotate_degree_;
}
inline void PoseDataTransformationParameter::set_max_rotate_degree(float value) {
  set_has_max_rotate_degree();
  max_rotate_degree_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.max_rotate_degree)
}

// optional bool visualize = 9 [default = false];
inline bool PoseDataTransformationParameter::has_visualize() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PoseDataTransformationParameter::set_has_visualize() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PoseDataTransformationParameter::clear_has_visualize() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PoseDataTransformationParameter::clear_visualize() {
  visualize_ = false;
  clear_has_visualize();
}
inline bool PoseDataTransformationParameter::visualize() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.visualize)
  return visualize_;
}
inline void PoseDataTransformationParameter::set_visualize(bool value) {
  set_has_visualize();
  visualize_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.visualize)
}

// optional int32 crop_size_x = 10 [default = 368];
inline bool PoseDataTransformationParameter::has_crop_size_x() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PoseDataTransformationParameter::set_has_crop_size_x() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PoseDataTransformationParameter::clear_has_crop_size_x() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PoseDataTransformationParameter::clear_crop_size_x() {
  crop_size_x_ = 368;
  clear_has_crop_size_x();
}
inline ::google::protobuf::int32 PoseDataTransformationParameter::crop_size_x() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.crop_size_x)
  return crop_size_x_;
}
inline void PoseDataTransformationParameter::set_crop_size_x(::google::protobuf::int32 value) {
  set_has_crop_size_x();
  crop_size_x_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.crop_size_x)
}

// optional int32 crop_size_y = 11 [default = 368];
inline bool PoseDataTransformationParameter::has_crop_size_y() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PoseDataTransformationParameter::set_has_crop_size_y() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PoseDataTransformationParameter::clear_has_crop_size_y() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PoseDataTransformationParameter::clear_crop_size_y() {
  crop_size_y_ = 368;
  clear_has_crop_size_y();
}
inline ::google::protobuf::int32 PoseDataTransformationParameter::crop_size_y() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.crop_size_y)
  return crop_size_y_;
}
inline void PoseDataTransformationParameter::set_crop_size_y(::google::protobuf::int32 value) {
  set_has_crop_size_y();
  crop_size_y_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.crop_size_y)
}

// optional int32 train_resized_width = 40 [default = 368];
inline bool PoseDataTransformationParameter::has_train_resized_width() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PoseDataTransformationParameter::set_has_train_resized_width() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PoseDataTransformationParameter::clear_has_train_resized_width() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PoseDataTransformationParameter::clear_train_resized_width() {
  train_resized_width_ = 368;
  clear_has_train_resized_width();
}
inline ::google::protobuf::int32 PoseDataTransformationParameter::train_resized_width() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.train_resized_width)
  return train_resized_width_;
}
inline void PoseDataTransformationParameter::set_train_resized_width(::google::protobuf::int32 value) {
  set_has_train_resized_width();
  train_resized_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.train_resized_width)
}

// optional int32 train_resized_height = 41 [default = 368];
inline bool PoseDataTransformationParameter::has_train_resized_height() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PoseDataTransformationParameter::set_has_train_resized_height() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PoseDataTransformationParameter::clear_has_train_resized_height() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PoseDataTransformationParameter::clear_train_resized_height() {
  train_resized_height_ = 368;
  clear_has_train_resized_height();
}
inline ::google::protobuf::int32 PoseDataTransformationParameter::train_resized_height() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.train_resized_height)
  return train_resized_height_;
}
inline void PoseDataTransformationParameter::set_train_resized_height(::google::protobuf::int32 value) {
  set_has_train_resized_height();
  train_resized_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.train_resized_height)
}

// optional bool crop_using_resize = 39 [default = false];
inline bool PoseDataTransformationParameter::has_crop_using_resize() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PoseDataTransformationParameter::set_has_crop_using_resize() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PoseDataTransformationParameter::clear_has_crop_using_resize() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PoseDataTransformationParameter::clear_crop_using_resize() {
  crop_using_resize_ = false;
  clear_has_crop_using_resize();
}
inline bool PoseDataTransformationParameter::crop_using_resize() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.crop_using_resize)
  return crop_using_resize_;
}
inline void PoseDataTransformationParameter::set_crop_using_resize(bool value) {
  set_has_crop_using_resize();
  crop_using_resize_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.crop_using_resize)
}

// optional float crop_as_max = 42 [default = 2];
inline bool PoseDataTransformationParameter::has_crop_as_max() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PoseDataTransformationParameter::set_has_crop_as_max() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PoseDataTransformationParameter::clear_has_crop_as_max() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PoseDataTransformationParameter::clear_crop_as_max() {
  crop_as_max_ = 2;
  clear_has_crop_as_max();
}
inline float PoseDataTransformationParameter::crop_as_max() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.crop_as_max)
  return crop_as_max_;
}
inline void PoseDataTransformationParameter::set_crop_as_max(float value) {
  set_has_crop_as_max();
  crop_as_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.crop_as_max)
}

// optional float crop_as_min = 43 [default = 0.5];
inline bool PoseDataTransformationParameter::has_crop_as_min() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PoseDataTransformationParameter::set_has_crop_as_min() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PoseDataTransformationParameter::clear_has_crop_as_min() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PoseDataTransformationParameter::clear_crop_as_min() {
  crop_as_min_ = 0.5f;
  clear_has_crop_as_min();
}
inline float PoseDataTransformationParameter::crop_as_min() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.crop_as_min)
  return crop_as_min_;
}
inline void PoseDataTransformationParameter::set_crop_as_min(float value) {
  set_has_crop_as_min();
  crop_as_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.crop_as_min)
}

// optional float scale_prob = 12 [default = 0.5];
inline bool PoseDataTransformationParameter::has_scale_prob() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PoseDataTransformationParameter::set_has_scale_prob() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PoseDataTransformationParameter::clear_has_scale_prob() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PoseDataTransformationParameter::clear_scale_prob() {
  scale_prob_ = 0.5f;
  clear_has_scale_prob();
}
inline float PoseDataTransformationParameter::scale_prob() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.scale_prob)
  return scale_prob_;
}
inline void PoseDataTransformationParameter::set_scale_prob(float value) {
  set_has_scale_prob();
  scale_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.scale_prob)
}

// optional float scale_min = 13 [default = 0.9];
inline bool PoseDataTransformationParameter::has_scale_min() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PoseDataTransformationParameter::set_has_scale_min() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PoseDataTransformationParameter::clear_has_scale_min() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PoseDataTransformationParameter::clear_scale_min() {
  scale_min_ = 0.9f;
  clear_has_scale_min();
}
inline float PoseDataTransformationParameter::scale_min() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.scale_min)
  return scale_min_;
}
inline void PoseDataTransformationParameter::set_scale_min(float value) {
  set_has_scale_min();
  scale_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.scale_min)
}

// optional float scale_max = 14 [default = 1.1];
inline bool PoseDataTransformationParameter::has_scale_max() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PoseDataTransformationParameter::set_has_scale_max() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PoseDataTransformationParameter::clear_has_scale_max() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PoseDataTransformationParameter::clear_scale_max() {
  scale_max_ = 1.1f;
  clear_has_scale_max();
}
inline float PoseDataTransformationParameter::scale_max() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.scale_max)
  return scale_max_;
}
inline void PoseDataTransformationParameter::set_scale_max(float value) {
  set_has_scale_max();
  scale_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.scale_max)
}

// optional float bbox_norm_factor = 15 [default = 300];
inline bool PoseDataTransformationParameter::has_bbox_norm_factor() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PoseDataTransformationParameter::set_has_bbox_norm_factor() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PoseDataTransformationParameter::clear_has_bbox_norm_factor() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PoseDataTransformationParameter::clear_bbox_norm_factor() {
  bbox_norm_factor_ = 300;
  clear_has_bbox_norm_factor();
}
inline float PoseDataTransformationParameter::bbox_norm_factor() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.bbox_norm_factor)
  return bbox_norm_factor_;
}
inline void PoseDataTransformationParameter::set_bbox_norm_factor(float value) {
  set_has_bbox_norm_factor();
  bbox_norm_factor_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.bbox_norm_factor)
}

// optional float target_dist = 16 [default = 1];
inline bool PoseDataTransformationParameter::has_target_dist() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PoseDataTransformationParameter::set_has_target_dist() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PoseDataTransformationParameter::clear_has_target_dist() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PoseDataTransformationParameter::clear_target_dist() {
  target_dist_ = 1;
  clear_has_target_dist();
}
inline float PoseDataTransformationParameter::target_dist() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.target_dist)
  return target_dist_;
}
inline void PoseDataTransformationParameter::set_target_dist(float value) {
  set_has_target_dist();
  target_dist_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.target_dist)
}

// optional float center_perterb_max = 17 [default = 10];
inline bool PoseDataTransformationParameter::has_center_perterb_max() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PoseDataTransformationParameter::set_has_center_perterb_max() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PoseDataTransformationParameter::clear_has_center_perterb_max() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PoseDataTransformationParameter::clear_center_perterb_max() {
  center_perterb_max_ = 10;
  clear_has_center_perterb_max();
}
inline float PoseDataTransformationParameter::center_perterb_max() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.center_perterb_max)
  return center_perterb_max_;
}
inline void PoseDataTransformationParameter::set_center_perterb_max(float value) {
  set_has_center_perterb_max();
  center_perterb_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.center_perterb_max)
}

// optional float sigma = 18 [default = 7];
inline bool PoseDataTransformationParameter::has_sigma() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PoseDataTransformationParameter::set_has_sigma() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PoseDataTransformationParameter::clear_has_sigma() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PoseDataTransformationParameter::clear_sigma() {
  sigma_ = 7;
  clear_has_sigma();
}
inline float PoseDataTransformationParameter::sigma() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.sigma)
  return sigma_;
}
inline void PoseDataTransformationParameter::set_sigma(float value) {
  set_has_sigma();
  sigma_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.sigma)
}

// optional float sigma_center = 19 [default = 21];
inline bool PoseDataTransformationParameter::has_sigma_center() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PoseDataTransformationParameter::set_has_sigma_center() {
  _has_bits_[0] |= 0x00800000u;
}
inline void PoseDataTransformationParameter::clear_has_sigma_center() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void PoseDataTransformationParameter::clear_sigma_center() {
  sigma_center_ = 21;
  clear_has_sigma_center();
}
inline float PoseDataTransformationParameter::sigma_center() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.sigma_center)
  return sigma_center_;
}
inline void PoseDataTransformationParameter::set_sigma_center(float value) {
  set_has_sigma_center();
  sigma_center_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.sigma_center)
}

// optional bool transform_body_joint = 22 [default = true];
inline bool PoseDataTransformationParameter::has_transform_body_joint() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PoseDataTransformationParameter::set_has_transform_body_joint() {
  _has_bits_[0] |= 0x01000000u;
}
inline void PoseDataTransformationParameter::clear_has_transform_body_joint() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void PoseDataTransformationParameter::clear_transform_body_joint() {
  transform_body_joint_ = true;
  clear_has_transform_body_joint();
}
inline bool PoseDataTransformationParameter::transform_body_joint() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.transform_body_joint)
  return transform_body_joint_;
}
inline void PoseDataTransformationParameter::set_transform_body_joint(bool value) {
  set_has_transform_body_joint();
  transform_body_joint_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.transform_body_joint)
}

// optional int32 mode = 23 [default = 5];
inline bool PoseDataTransformationParameter::has_mode() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PoseDataTransformationParameter::set_has_mode() {
  _has_bits_[0] |= 0x02000000u;
}
inline void PoseDataTransformationParameter::clear_has_mode() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void PoseDataTransformationParameter::clear_mode() {
  mode_ = 5;
  clear_has_mode();
}
inline ::google::protobuf::int32 PoseDataTransformationParameter::mode() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.mode)
  return mode_;
}
inline void PoseDataTransformationParameter::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.mode)
}

// optional string save_dir = 24 [default = ""];
inline bool PoseDataTransformationParameter::has_save_dir() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void PoseDataTransformationParameter::set_has_save_dir() {
  _has_bits_[0] |= 0x04000000u;
}
inline void PoseDataTransformationParameter::clear_has_save_dir() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void PoseDataTransformationParameter::clear_save_dir() {
  save_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_save_dir();
}
inline const ::std::string& PoseDataTransformationParameter::save_dir() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.save_dir)
  return save_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PoseDataTransformationParameter::set_save_dir(const ::std::string& value) {
  set_has_save_dir();
  save_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.save_dir)
}
inline void PoseDataTransformationParameter::set_save_dir(const char* value) {
  set_has_save_dir();
  save_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PoseDataTransformationParameter.save_dir)
}
inline void PoseDataTransformationParameter::set_save_dir(const char* value, size_t size) {
  set_has_save_dir();
  save_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PoseDataTransformationParameter.save_dir)
}
inline ::std::string* PoseDataTransformationParameter::mutable_save_dir() {
  set_has_save_dir();
  // @@protoc_insertion_point(field_mutable:caffe.PoseDataTransformationParameter.save_dir)
  return save_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PoseDataTransformationParameter::release_save_dir() {
  // @@protoc_insertion_point(field_release:caffe.PoseDataTransformationParameter.save_dir)
  clear_has_save_dir();
  return save_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PoseDataTransformationParameter::set_allocated_save_dir(::std::string* save_dir) {
  if (save_dir != NULL) {
    set_has_save_dir();
  } else {
    clear_has_save_dir();
  }
  save_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_dir);
  // @@protoc_insertion_point(field_set_allocated:caffe.PoseDataTransformationParameter.save_dir)
}

// optional string root_dir = 25 [default = ""];
inline bool PoseDataTransformationParameter::has_root_dir() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void PoseDataTransformationParameter::set_has_root_dir() {
  _has_bits_[0] |= 0x08000000u;
}
inline void PoseDataTransformationParameter::clear_has_root_dir() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void PoseDataTransformationParameter::clear_root_dir() {
  root_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_dir();
}
inline const ::std::string& PoseDataTransformationParameter::root_dir() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.root_dir)
  return root_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PoseDataTransformationParameter::set_root_dir(const ::std::string& value) {
  set_has_root_dir();
  root_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.root_dir)
}
inline void PoseDataTransformationParameter::set_root_dir(const char* value) {
  set_has_root_dir();
  root_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PoseDataTransformationParameter.root_dir)
}
inline void PoseDataTransformationParameter::set_root_dir(const char* value, size_t size) {
  set_has_root_dir();
  root_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PoseDataTransformationParameter.root_dir)
}
inline ::std::string* PoseDataTransformationParameter::mutable_root_dir() {
  set_has_root_dir();
  // @@protoc_insertion_point(field_mutable:caffe.PoseDataTransformationParameter.root_dir)
  return root_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PoseDataTransformationParameter::release_root_dir() {
  // @@protoc_insertion_point(field_release:caffe.PoseDataTransformationParameter.root_dir)
  clear_has_root_dir();
  return root_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PoseDataTransformationParameter::set_allocated_root_dir(::std::string* root_dir) {
  if (root_dir != NULL) {
    set_has_root_dir();
  } else {
    clear_has_root_dir();
  }
  root_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_dir);
  // @@protoc_insertion_point(field_set_allocated:caffe.PoseDataTransformationParameter.root_dir)
}

// optional int32 resized_width = 26 [default = 416];
inline bool PoseDataTransformationParameter::has_resized_width() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void PoseDataTransformationParameter::set_has_resized_width() {
  _has_bits_[0] |= 0x10000000u;
}
inline void PoseDataTransformationParameter::clear_has_resized_width() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void PoseDataTransformationParameter::clear_resized_width() {
  resized_width_ = 416;
  clear_has_resized_width();
}
inline ::google::protobuf::int32 PoseDataTransformationParameter::resized_width() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.resized_width)
  return resized_width_;
}
inline void PoseDataTransformationParameter::set_resized_width(::google::protobuf::int32 value) {
  set_has_resized_width();
  resized_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.resized_width)
}

// optional int32 resized_height = 27 [default = 416];
inline bool PoseDataTransformationParameter::has_resized_height() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void PoseDataTransformationParameter::set_has_resized_height() {
  _has_bits_[0] |= 0x20000000u;
}
inline void PoseDataTransformationParameter::clear_has_resized_height() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void PoseDataTransformationParameter::clear_resized_height() {
  resized_height_ = 416;
  clear_has_resized_height();
}
inline ::google::protobuf::int32 PoseDataTransformationParameter::resized_height() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.resized_height)
  return resized_height_;
}
inline void PoseDataTransformationParameter::set_resized_height(::google::protobuf::int32 value) {
  set_has_resized_height();
  resized_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.resized_height)
}

// optional bool normalize = 28 [default = true];
inline bool PoseDataTransformationParameter::has_normalize() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void PoseDataTransformationParameter::set_has_normalize() {
  _has_bits_[0] |= 0x40000000u;
}
inline void PoseDataTransformationParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void PoseDataTransformationParameter::clear_normalize() {
  normalize_ = true;
  clear_has_normalize();
}
inline bool PoseDataTransformationParameter::normalize() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.normalize)
  return normalize_;
}
inline void PoseDataTransformationParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.normalize)
}

// optional .caffe.DistortionParameter dis_param = 30;
inline bool PoseDataTransformationParameter::has_dis_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void PoseDataTransformationParameter::set_has_dis_param() {
  _has_bits_[0] |= 0x80000000u;
}
inline void PoseDataTransformationParameter::clear_has_dis_param() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void PoseDataTransformationParameter::clear_dis_param() {
  if (dis_param_ != NULL) dis_param_->::caffe::DistortionParameter::Clear();
  clear_has_dis_param();
}
inline const ::caffe::DistortionParameter& PoseDataTransformationParameter::dis_param() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.dis_param)
  return dis_param_ != NULL ? *dis_param_ : *default_instance_->dis_param_;
}
inline ::caffe::DistortionParameter* PoseDataTransformationParameter::mutable_dis_param() {
  set_has_dis_param();
  if (dis_param_ == NULL) {
    dis_param_ = new ::caffe::DistortionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PoseDataTransformationParameter.dis_param)
  return dis_param_;
}
inline ::caffe::DistortionParameter* PoseDataTransformationParameter::release_dis_param() {
  // @@protoc_insertion_point(field_release:caffe.PoseDataTransformationParameter.dis_param)
  clear_has_dis_param();
  ::caffe::DistortionParameter* temp = dis_param_;
  dis_param_ = NULL;
  return temp;
}
inline void PoseDataTransformationParameter::set_allocated_dis_param(::caffe::DistortionParameter* dis_param) {
  delete dis_param_;
  dis_param_ = dis_param;
  if (dis_param) {
    set_has_dis_param();
  } else {
    clear_has_dis_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PoseDataTransformationParameter.dis_param)
}

// optional string hisi_data_maps = 31;
inline bool PoseDataTransformationParameter::has_hisi_data_maps() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void PoseDataTransformationParameter::set_has_hisi_data_maps() {
  _has_bits_[1] |= 0x00000001u;
}
inline void PoseDataTransformationParameter::clear_has_hisi_data_maps() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void PoseDataTransformationParameter::clear_hisi_data_maps() {
  hisi_data_maps_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hisi_data_maps();
}
inline const ::std::string& PoseDataTransformationParameter::hisi_data_maps() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.hisi_data_maps)
  return hisi_data_maps_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PoseDataTransformationParameter::set_hisi_data_maps(const ::std::string& value) {
  set_has_hisi_data_maps();
  hisi_data_maps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.hisi_data_maps)
}
inline void PoseDataTransformationParameter::set_hisi_data_maps(const char* value) {
  set_has_hisi_data_maps();
  hisi_data_maps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PoseDataTransformationParameter.hisi_data_maps)
}
inline void PoseDataTransformationParameter::set_hisi_data_maps(const char* value, size_t size) {
  set_has_hisi_data_maps();
  hisi_data_maps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PoseDataTransformationParameter.hisi_data_maps)
}
inline ::std::string* PoseDataTransformationParameter::mutable_hisi_data_maps() {
  set_has_hisi_data_maps();
  // @@protoc_insertion_point(field_mutable:caffe.PoseDataTransformationParameter.hisi_data_maps)
  return hisi_data_maps_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PoseDataTransformationParameter::release_hisi_data_maps() {
  // @@protoc_insertion_point(field_release:caffe.PoseDataTransformationParameter.hisi_data_maps)
  clear_has_hisi_data_maps();
  return hisi_data_maps_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PoseDataTransformationParameter::set_allocated_hisi_data_maps(::std::string* hisi_data_maps) {
  if (hisi_data_maps != NULL) {
    set_has_hisi_data_maps();
  } else {
    clear_has_hisi_data_maps();
  }
  hisi_data_maps_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hisi_data_maps);
  // @@protoc_insertion_point(field_set_allocated:caffe.PoseDataTransformationParameter.hisi_data_maps)
}

// optional int32 mode_data = 32 [default = 0];
inline bool PoseDataTransformationParameter::has_mode_data() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void PoseDataTransformationParameter::set_has_mode_data() {
  _has_bits_[1] |= 0x00000002u;
}
inline void PoseDataTransformationParameter::clear_has_mode_data() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void PoseDataTransformationParameter::clear_mode_data() {
  mode_data_ = 0;
  clear_has_mode_data();
}
inline ::google::protobuf::int32 PoseDataTransformationParameter::mode_data() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.mode_data)
  return mode_data_;
}
inline void PoseDataTransformationParameter::set_mode_data(::google::protobuf::int32 value) {
  set_has_mode_data();
  mode_data_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataTransformationParameter.mode_data)
}

// optional .caffe.BGCropParameter bg_crop_param = 50;
inline bool PoseDataTransformationParameter::has_bg_crop_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void PoseDataTransformationParameter::set_has_bg_crop_param() {
  _has_bits_[1] |= 0x00000004u;
}
inline void PoseDataTransformationParameter::clear_has_bg_crop_param() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void PoseDataTransformationParameter::clear_bg_crop_param() {
  if (bg_crop_param_ != NULL) bg_crop_param_->::caffe::BGCropParameter::Clear();
  clear_has_bg_crop_param();
}
inline const ::caffe::BGCropParameter& PoseDataTransformationParameter::bg_crop_param() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataTransformationParameter.bg_crop_param)
  return bg_crop_param_ != NULL ? *bg_crop_param_ : *default_instance_->bg_crop_param_;
}
inline ::caffe::BGCropParameter* PoseDataTransformationParameter::mutable_bg_crop_param() {
  set_has_bg_crop_param();
  if (bg_crop_param_ == NULL) {
    bg_crop_param_ = new ::caffe::BGCropParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PoseDataTransformationParameter.bg_crop_param)
  return bg_crop_param_;
}
inline ::caffe::BGCropParameter* PoseDataTransformationParameter::release_bg_crop_param() {
  // @@protoc_insertion_point(field_release:caffe.PoseDataTransformationParameter.bg_crop_param)
  clear_has_bg_crop_param();
  ::caffe::BGCropParameter* temp = bg_crop_param_;
  bg_crop_param_ = NULL;
  return temp;
}
inline void PoseDataTransformationParameter::set_allocated_bg_crop_param(::caffe::BGCropParameter* bg_crop_param) {
  delete bg_crop_param_;
  bg_crop_param_ = bg_crop_param;
  if (bg_crop_param) {
    set_has_bg_crop_param();
  } else {
    clear_has_bg_crop_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PoseDataTransformationParameter.bg_crop_param)
}

// -------------------------------------------------------------------

// BGCropParameter

// optional float prob = 1 [default = 0];
inline bool BGCropParameter::has_prob() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BGCropParameter::set_has_prob() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BGCropParameter::clear_has_prob() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BGCropParameter::clear_prob() {
  prob_ = 0;
  clear_has_prob();
}
inline float BGCropParameter::prob() const {
  // @@protoc_insertion_point(field_get:caffe.BGCropParameter.prob)
  return prob_;
}
inline void BGCropParameter::set_prob(float value) {
  set_has_prob();
  prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.BGCropParameter.prob)
}

// optional float h_min = 2 [default = 0.2];
inline bool BGCropParameter::has_h_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BGCropParameter::set_has_h_min() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BGCropParameter::clear_has_h_min() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BGCropParameter::clear_h_min() {
  h_min_ = 0.2f;
  clear_has_h_min();
}
inline float BGCropParameter::h_min() const {
  // @@protoc_insertion_point(field_get:caffe.BGCropParameter.h_min)
  return h_min_;
}
inline void BGCropParameter::set_h_min(float value) {
  set_has_h_min();
  h_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.BGCropParameter.h_min)
}

// optional float h_max = 3 [default = 1];
inline bool BGCropParameter::has_h_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BGCropParameter::set_has_h_max() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BGCropParameter::clear_has_h_max() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BGCropParameter::clear_h_max() {
  h_max_ = 1;
  clear_has_h_max();
}
inline float BGCropParameter::h_max() const {
  // @@protoc_insertion_point(field_get:caffe.BGCropParameter.h_max)
  return h_max_;
}
inline void BGCropParameter::set_h_max(float value) {
  set_has_h_max();
  h_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.BGCropParameter.h_max)
}

// optional float w_min = 4 [default = 0.2];
inline bool BGCropParameter::has_w_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BGCropParameter::set_has_w_min() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BGCropParameter::clear_has_w_min() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BGCropParameter::clear_w_min() {
  w_min_ = 0.2f;
  clear_has_w_min();
}
inline float BGCropParameter::w_min() const {
  // @@protoc_insertion_point(field_get:caffe.BGCropParameter.w_min)
  return w_min_;
}
inline void BGCropParameter::set_w_min(float value) {
  set_has_w_min();
  w_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.BGCropParameter.w_min)
}

// optional float w_max = 5 [default = 1];
inline bool BGCropParameter::has_w_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BGCropParameter::set_has_w_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BGCropParameter::clear_has_w_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BGCropParameter::clear_w_max() {
  w_max_ = 1;
  clear_has_w_max();
}
inline float BGCropParameter::w_max() const {
  // @@protoc_insertion_point(field_get:caffe.BGCropParameter.w_max)
  return w_max_;
}
inline void BGCropParameter::set_w_max(float value) {
  set_has_w_max();
  w_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.BGCropParameter.w_max)
}

// -------------------------------------------------------------------

// ReidTransformationParameter

// optional bool mirror = 1 [default = false];
inline bool ReidTransformationParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReidTransformationParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReidTransformationParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReidTransformationParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool ReidTransformationParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.ReidTransformationParameter.mirror)
  return mirror_;
}
inline void ReidTransformationParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReidTransformationParameter.mirror)
}

// repeated float mean_value = 2;
inline int ReidTransformationParameter::mean_value_size() const {
  return mean_value_.size();
}
inline void ReidTransformationParameter::clear_mean_value() {
  mean_value_.Clear();
}
inline float ReidTransformationParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ReidTransformationParameter.mean_value)
  return mean_value_.Get(index);
}
inline void ReidTransformationParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ReidTransformationParameter.mean_value)
}
inline void ReidTransformationParameter::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ReidTransformationParameter.mean_value)
}
inline const ::google::protobuf::RepeatedField< float >&
ReidTransformationParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.ReidTransformationParameter.mean_value)
  return mean_value_;
}
inline ::google::protobuf::RepeatedField< float >*
ReidTransformationParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ReidTransformationParameter.mean_value)
  return &mean_value_;
}

// optional string root_dir = 3 [default = ""];
inline bool ReidTransformationParameter::has_root_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReidTransformationParameter::set_has_root_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReidTransformationParameter::clear_has_root_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReidTransformationParameter::clear_root_dir() {
  root_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_dir();
}
inline const ::std::string& ReidTransformationParameter::root_dir() const {
  // @@protoc_insertion_point(field_get:caffe.ReidTransformationParameter.root_dir)
  return root_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReidTransformationParameter::set_root_dir(const ::std::string& value) {
  set_has_root_dir();
  root_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ReidTransformationParameter.root_dir)
}
inline void ReidTransformationParameter::set_root_dir(const char* value) {
  set_has_root_dir();
  root_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ReidTransformationParameter.root_dir)
}
inline void ReidTransformationParameter::set_root_dir(const char* value, size_t size) {
  set_has_root_dir();
  root_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ReidTransformationParameter.root_dir)
}
inline ::std::string* ReidTransformationParameter::mutable_root_dir() {
  set_has_root_dir();
  // @@protoc_insertion_point(field_mutable:caffe.ReidTransformationParameter.root_dir)
  return root_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReidTransformationParameter::release_root_dir() {
  // @@protoc_insertion_point(field_release:caffe.ReidTransformationParameter.root_dir)
  clear_has_root_dir();
  return root_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReidTransformationParameter::set_allocated_root_dir(::std::string* root_dir) {
  if (root_dir != NULL) {
    set_has_root_dir();
  } else {
    clear_has_root_dir();
  }
  root_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_dir);
  // @@protoc_insertion_point(field_set_allocated:caffe.ReidTransformationParameter.root_dir)
}

// optional int32 resized_width = 4 [default = 416];
inline bool ReidTransformationParameter::has_resized_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReidTransformationParameter::set_has_resized_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReidTransformationParameter::clear_has_resized_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReidTransformationParameter::clear_resized_width() {
  resized_width_ = 416;
  clear_has_resized_width();
}
inline ::google::protobuf::int32 ReidTransformationParameter::resized_width() const {
  // @@protoc_insertion_point(field_get:caffe.ReidTransformationParameter.resized_width)
  return resized_width_;
}
inline void ReidTransformationParameter::set_resized_width(::google::protobuf::int32 value) {
  set_has_resized_width();
  resized_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReidTransformationParameter.resized_width)
}

// optional int32 resized_height = 5 [default = 416];
inline bool ReidTransformationParameter::has_resized_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReidTransformationParameter::set_has_resized_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReidTransformationParameter::clear_has_resized_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReidTransformationParameter::clear_resized_height() {
  resized_height_ = 416;
  clear_has_resized_height();
}
inline ::google::protobuf::int32 ReidTransformationParameter::resized_height() const {
  // @@protoc_insertion_point(field_get:caffe.ReidTransformationParameter.resized_height)
  return resized_height_;
}
inline void ReidTransformationParameter::set_resized_height(::google::protobuf::int32 value) {
  set_has_resized_height();
  resized_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReidTransformationParameter.resized_height)
}

// optional bool normalize = 6 [default = true];
inline bool ReidTransformationParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReidTransformationParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReidTransformationParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReidTransformationParameter::clear_normalize() {
  normalize_ = true;
  clear_has_normalize();
}
inline bool ReidTransformationParameter::normalize() const {
  // @@protoc_insertion_point(field_get:caffe.ReidTransformationParameter.normalize)
  return normalize_;
}
inline void ReidTransformationParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReidTransformationParameter.normalize)
}

// optional bool visual = 7 [default = false];
inline bool ReidTransformationParameter::has_visual() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReidTransformationParameter::set_has_visual() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReidTransformationParameter::clear_has_visual() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReidTransformationParameter::clear_visual() {
  visual_ = false;
  clear_has_visual();
}
inline bool ReidTransformationParameter::visual() const {
  // @@protoc_insertion_point(field_get:caffe.ReidTransformationParameter.visual)
  return visual_;
}
inline void ReidTransformationParameter::set_visual(bool value) {
  set_has_visual();
  visual_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReidTransformationParameter.visual)
}

// optional string save_dir = 8;
inline bool ReidTransformationParameter::has_save_dir() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReidTransformationParameter::set_has_save_dir() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReidTransformationParameter::clear_has_save_dir() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReidTransformationParameter::clear_save_dir() {
  save_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_save_dir();
}
inline const ::std::string& ReidTransformationParameter::save_dir() const {
  // @@protoc_insertion_point(field_get:caffe.ReidTransformationParameter.save_dir)
  return save_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReidTransformationParameter::set_save_dir(const ::std::string& value) {
  set_has_save_dir();
  save_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ReidTransformationParameter.save_dir)
}
inline void ReidTransformationParameter::set_save_dir(const char* value) {
  set_has_save_dir();
  save_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ReidTransformationParameter.save_dir)
}
inline void ReidTransformationParameter::set_save_dir(const char* value, size_t size) {
  set_has_save_dir();
  save_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ReidTransformationParameter.save_dir)
}
inline ::std::string* ReidTransformationParameter::mutable_save_dir() {
  set_has_save_dir();
  // @@protoc_insertion_point(field_mutable:caffe.ReidTransformationParameter.save_dir)
  return save_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReidTransformationParameter::release_save_dir() {
  // @@protoc_insertion_point(field_release:caffe.ReidTransformationParameter.save_dir)
  clear_has_save_dir();
  return save_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReidTransformationParameter::set_allocated_save_dir(::std::string* save_dir) {
  if (save_dir != NULL) {
    set_has_save_dir();
  } else {
    clear_has_save_dir();
  }
  save_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_dir);
  // @@protoc_insertion_point(field_set_allocated:caffe.ReidTransformationParameter.save_dir)
}

// -------------------------------------------------------------------

// UnifiedTransformationParameter

// optional bool sample_sixteennine = 14 [default = true];
inline bool UnifiedTransformationParameter::has_sample_sixteennine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnifiedTransformationParameter::set_has_sample_sixteennine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnifiedTransformationParameter::clear_has_sample_sixteennine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnifiedTransformationParameter::clear_sample_sixteennine() {
  sample_sixteennine_ = true;
  clear_has_sample_sixteennine();
}
inline bool UnifiedTransformationParameter::sample_sixteennine() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.sample_sixteennine)
  return sample_sixteennine_;
}
inline void UnifiedTransformationParameter::set_sample_sixteennine(bool value) {
  set_has_sample_sixteennine();
  sample_sixteennine_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.sample_sixteennine)
}

// optional bool sample_ninesixteen = 31 [default = false];
inline bool UnifiedTransformationParameter::has_sample_ninesixteen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnifiedTransformationParameter::set_has_sample_ninesixteen() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnifiedTransformationParameter::clear_has_sample_ninesixteen() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnifiedTransformationParameter::clear_sample_ninesixteen() {
  sample_ninesixteen_ = false;
  clear_has_sample_ninesixteen();
}
inline bool UnifiedTransformationParameter::sample_ninesixteen() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.sample_ninesixteen)
  return sample_ninesixteen_;
}
inline void UnifiedTransformationParameter::set_sample_ninesixteen(bool value) {
  set_has_sample_ninesixteen();
  sample_ninesixteen_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.sample_ninesixteen)
}

// optional bool sample_sixteennine_one = 15 [default = false];
inline bool UnifiedTransformationParameter::has_sample_sixteennine_one() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnifiedTransformationParameter::set_has_sample_sixteennine_one() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnifiedTransformationParameter::clear_has_sample_sixteennine_one() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnifiedTransformationParameter::clear_sample_sixteennine_one() {
  sample_sixteennine_one_ = false;
  clear_has_sample_sixteennine_one();
}
inline bool UnifiedTransformationParameter::sample_sixteennine_one() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.sample_sixteennine_one)
  return sample_sixteennine_one_;
}
inline void UnifiedTransformationParameter::set_sample_sixteennine_one(bool value) {
  set_has_sample_sixteennine_one();
  sample_sixteennine_one_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.sample_sixteennine_one)
}

// optional bool rand_sixteennineone = 8 [default = false];
inline bool UnifiedTransformationParameter::has_rand_sixteennineone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnifiedTransformationParameter::set_has_rand_sixteennineone() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnifiedTransformationParameter::clear_has_rand_sixteennineone() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnifiedTransformationParameter::clear_rand_sixteennineone() {
  rand_sixteennineone_ = false;
  clear_has_rand_sixteennineone();
}
inline bool UnifiedTransformationParameter::rand_sixteennineone() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.rand_sixteennineone)
  return rand_sixteennineone_;
}
inline void UnifiedTransformationParameter::set_rand_sixteennineone(bool value) {
  set_has_rand_sixteennineone();
  rand_sixteennineone_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.rand_sixteennineone)
}

// repeated float wh_ratio_sixteennineone = 26;
inline int UnifiedTransformationParameter::wh_ratio_sixteennineone_size() const {
  return wh_ratio_sixteennineone_.size();
}
inline void UnifiedTransformationParameter::clear_wh_ratio_sixteennineone() {
  wh_ratio_sixteennineone_.Clear();
}
inline float UnifiedTransformationParameter::wh_ratio_sixteennineone(int index) const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.wh_ratio_sixteennineone)
  return wh_ratio_sixteennineone_.Get(index);
}
inline void UnifiedTransformationParameter::set_wh_ratio_sixteennineone(int index, float value) {
  wh_ratio_sixteennineone_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.wh_ratio_sixteennineone)
}
inline void UnifiedTransformationParameter::add_wh_ratio_sixteennineone(float value) {
  wh_ratio_sixteennineone_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.UnifiedTransformationParameter.wh_ratio_sixteennineone)
}
inline const ::google::protobuf::RepeatedField< float >&
UnifiedTransformationParameter::wh_ratio_sixteennineone() const {
  // @@protoc_insertion_point(field_list:caffe.UnifiedTransformationParameter.wh_ratio_sixteennineone)
  return wh_ratio_sixteennineone_;
}
inline ::google::protobuf::RepeatedField< float >*
UnifiedTransformationParameter::mutable_wh_ratio_sixteennineone() {
  // @@protoc_insertion_point(field_mutable_list:caffe.UnifiedTransformationParameter.wh_ratio_sixteennineone)
  return &wh_ratio_sixteennineone_;
}

// repeated float prob_rand_sixteennineone = 27;
inline int UnifiedTransformationParameter::prob_rand_sixteennineone_size() const {
  return prob_rand_sixteennineone_.size();
}
inline void UnifiedTransformationParameter::clear_prob_rand_sixteennineone() {
  prob_rand_sixteennineone_.Clear();
}
inline float UnifiedTransformationParameter::prob_rand_sixteennineone(int index) const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.prob_rand_sixteennineone)
  return prob_rand_sixteennineone_.Get(index);
}
inline void UnifiedTransformationParameter::set_prob_rand_sixteennineone(int index, float value) {
  prob_rand_sixteennineone_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.prob_rand_sixteennineone)
}
inline void UnifiedTransformationParameter::add_prob_rand_sixteennineone(float value) {
  prob_rand_sixteennineone_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.UnifiedTransformationParameter.prob_rand_sixteennineone)
}
inline const ::google::protobuf::RepeatedField< float >&
UnifiedTransformationParameter::prob_rand_sixteennineone() const {
  // @@protoc_insertion_point(field_list:caffe.UnifiedTransformationParameter.prob_rand_sixteennineone)
  return prob_rand_sixteennineone_;
}
inline ::google::protobuf::RepeatedField< float >*
UnifiedTransformationParameter::mutable_prob_rand_sixteennineone() {
  // @@protoc_insertion_point(field_mutable_list:caffe.UnifiedTransformationParameter.prob_rand_sixteennineone)
  return &prob_rand_sixteennineone_;
}

// optional float emit_coverage_thre = 1 [default = 0.25];
inline bool UnifiedTransformationParameter::has_emit_coverage_thre() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UnifiedTransformationParameter::set_has_emit_coverage_thre() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UnifiedTransformationParameter::clear_has_emit_coverage_thre() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UnifiedTransformationParameter::clear_emit_coverage_thre() {
  emit_coverage_thre_ = 0.25f;
  clear_has_emit_coverage_thre();
}
inline float UnifiedTransformationParameter::emit_coverage_thre() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.emit_coverage_thre)
  return emit_coverage_thre_;
}
inline void UnifiedTransformationParameter::set_emit_coverage_thre(float value) {
  set_has_emit_coverage_thre();
  emit_coverage_thre_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.emit_coverage_thre)
}

// repeated float emit_coverage_thre_multiple = 13;
inline int UnifiedTransformationParameter::emit_coverage_thre_multiple_size() const {
  return emit_coverage_thre_multiple_.size();
}
inline void UnifiedTransformationParameter::clear_emit_coverage_thre_multiple() {
  emit_coverage_thre_multiple_.Clear();
}
inline float UnifiedTransformationParameter::emit_coverage_thre_multiple(int index) const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.emit_coverage_thre_multiple)
  return emit_coverage_thre_multiple_.Get(index);
}
inline void UnifiedTransformationParameter::set_emit_coverage_thre_multiple(int index, float value) {
  emit_coverage_thre_multiple_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.emit_coverage_thre_multiple)
}
inline void UnifiedTransformationParameter::add_emit_coverage_thre_multiple(float value) {
  emit_coverage_thre_multiple_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.UnifiedTransformationParameter.emit_coverage_thre_multiple)
}
inline const ::google::protobuf::RepeatedField< float >&
UnifiedTransformationParameter::emit_coverage_thre_multiple() const {
  // @@protoc_insertion_point(field_list:caffe.UnifiedTransformationParameter.emit_coverage_thre_multiple)
  return emit_coverage_thre_multiple_;
}
inline ::google::protobuf::RepeatedField< float >*
UnifiedTransformationParameter::mutable_emit_coverage_thre_multiple() {
  // @@protoc_insertion_point(field_mutable_list:caffe.UnifiedTransformationParameter.emit_coverage_thre_multiple)
  return &emit_coverage_thre_multiple_;
}

// repeated float emit_area_check = 12;
inline int UnifiedTransformationParameter::emit_area_check_size() const {
  return emit_area_check_.size();
}
inline void UnifiedTransformationParameter::clear_emit_area_check() {
  emit_area_check_.Clear();
}
inline float UnifiedTransformationParameter::emit_area_check(int index) const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.emit_area_check)
  return emit_area_check_.Get(index);
}
inline void UnifiedTransformationParameter::set_emit_area_check(int index, float value) {
  emit_area_check_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.emit_area_check)
}
inline void UnifiedTransformationParameter::add_emit_area_check(float value) {
  emit_area_check_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.UnifiedTransformationParameter.emit_area_check)
}
inline const ::google::protobuf::RepeatedField< float >&
UnifiedTransformationParameter::emit_area_check() const {
  // @@protoc_insertion_point(field_list:caffe.UnifiedTransformationParameter.emit_area_check)
  return emit_area_check_;
}
inline ::google::protobuf::RepeatedField< float >*
UnifiedTransformationParameter::mutable_emit_area_check() {
  // @@protoc_insertion_point(field_mutable_list:caffe.UnifiedTransformationParameter.emit_area_check)
  return &emit_area_check_;
}

// optional int32 kps_min_visible = 2 [default = 4];
inline bool UnifiedTransformationParameter::has_kps_min_visible() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UnifiedTransformationParameter::set_has_kps_min_visible() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UnifiedTransformationParameter::clear_has_kps_min_visible() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UnifiedTransformationParameter::clear_kps_min_visible() {
  kps_min_visible_ = 4;
  clear_has_kps_min_visible();
}
inline ::google::protobuf::int32 UnifiedTransformationParameter::kps_min_visible() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.kps_min_visible)
  return kps_min_visible_;
}
inline void UnifiedTransformationParameter::set_kps_min_visible(::google::protobuf::int32 value) {
  set_has_kps_min_visible();
  kps_min_visible_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.kps_min_visible)
}

// optional float flip_prob = 3 [default = 0.5];
inline bool UnifiedTransformationParameter::has_flip_prob() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UnifiedTransformationParameter::set_has_flip_prob() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UnifiedTransformationParameter::clear_has_flip_prob() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UnifiedTransformationParameter::clear_flip_prob() {
  flip_prob_ = 0.5f;
  clear_has_flip_prob();
}
inline float UnifiedTransformationParameter::flip_prob() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.flip_prob)
  return flip_prob_;
}
inline void UnifiedTransformationParameter::set_flip_prob(float value) {
  set_has_flip_prob();
  flip_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.flip_prob)
}

// optional int32 resized_width = 4 [default = 512];
inline bool UnifiedTransformationParameter::has_resized_width() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UnifiedTransformationParameter::set_has_resized_width() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UnifiedTransformationParameter::clear_has_resized_width() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UnifiedTransformationParameter::clear_resized_width() {
  resized_width_ = 512;
  clear_has_resized_width();
}
inline ::google::protobuf::int32 UnifiedTransformationParameter::resized_width() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.resized_width)
  return resized_width_;
}
inline void UnifiedTransformationParameter::set_resized_width(::google::protobuf::int32 value) {
  set_has_resized_width();
  resized_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.resized_width)
}

// optional int32 resized_height = 5 [default = 288];
inline bool UnifiedTransformationParameter::has_resized_height() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_resized_height() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UnifiedTransformationParameter::clear_has_resized_height() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UnifiedTransformationParameter::clear_resized_height() {
  resized_height_ = 288;
  clear_has_resized_height();
}
inline ::google::protobuf::int32 UnifiedTransformationParameter::resized_height() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.resized_height)
  return resized_height_;
}
inline void UnifiedTransformationParameter::set_resized_height(::google::protobuf::int32 value) {
  set_has_resized_height();
  resized_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.resized_height)
}

// optional bool visualize = 6 [default = false];
inline bool UnifiedTransformationParameter::has_visualize() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_visualize() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UnifiedTransformationParameter::clear_has_visualize() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UnifiedTransformationParameter::clear_visualize() {
  visualize_ = false;
  clear_has_visualize();
}
inline bool UnifiedTransformationParameter::visualize() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.visualize)
  return visualize_;
}
inline void UnifiedTransformationParameter::set_visualize(bool value) {
  set_has_visualize();
  visualize_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.visualize)
}

// optional string save_dir = 7 [default = ""];
inline bool UnifiedTransformationParameter::has_save_dir() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_save_dir() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UnifiedTransformationParameter::clear_has_save_dir() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UnifiedTransformationParameter::clear_save_dir() {
  save_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_save_dir();
}
inline const ::std::string& UnifiedTransformationParameter::save_dir() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.save_dir)
  return save_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnifiedTransformationParameter::set_save_dir(const ::std::string& value) {
  set_has_save_dir();
  save_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.save_dir)
}
inline void UnifiedTransformationParameter::set_save_dir(const char* value) {
  set_has_save_dir();
  save_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.UnifiedTransformationParameter.save_dir)
}
inline void UnifiedTransformationParameter::set_save_dir(const char* value, size_t size) {
  set_has_save_dir();
  save_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.UnifiedTransformationParameter.save_dir)
}
inline ::std::string* UnifiedTransformationParameter::mutable_save_dir() {
  set_has_save_dir();
  // @@protoc_insertion_point(field_mutable:caffe.UnifiedTransformationParameter.save_dir)
  return save_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnifiedTransformationParameter::release_save_dir() {
  // @@protoc_insertion_point(field_release:caffe.UnifiedTransformationParameter.save_dir)
  clear_has_save_dir();
  return save_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnifiedTransformationParameter::set_allocated_save_dir(::std::string* save_dir) {
  if (save_dir != NULL) {
    set_has_save_dir();
  } else {
    clear_has_save_dir();
  }
  save_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_dir);
  // @@protoc_insertion_point(field_set_allocated:caffe.UnifiedTransformationParameter.save_dir)
}

// optional .caffe.DistortionParameter dis_param = 10;
inline bool UnifiedTransformationParameter::has_dis_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_dis_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UnifiedTransformationParameter::clear_has_dis_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UnifiedTransformationParameter::clear_dis_param() {
  if (dis_param_ != NULL) dis_param_->::caffe::DistortionParameter::Clear();
  clear_has_dis_param();
}
inline const ::caffe::DistortionParameter& UnifiedTransformationParameter::dis_param() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.dis_param)
  return dis_param_ != NULL ? *dis_param_ : *default_instance_->dis_param_;
}
inline ::caffe::DistortionParameter* UnifiedTransformationParameter::mutable_dis_param() {
  set_has_dis_param();
  if (dis_param_ == NULL) {
    dis_param_ = new ::caffe::DistortionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.UnifiedTransformationParameter.dis_param)
  return dis_param_;
}
inline ::caffe::DistortionParameter* UnifiedTransformationParameter::release_dis_param() {
  // @@protoc_insertion_point(field_release:caffe.UnifiedTransformationParameter.dis_param)
  clear_has_dis_param();
  ::caffe::DistortionParameter* temp = dis_param_;
  dis_param_ = NULL;
  return temp;
}
inline void UnifiedTransformationParameter::set_allocated_dis_param(::caffe::DistortionParameter* dis_param) {
  delete dis_param_;
  dis_param_ = dis_param;
  if (dis_param) {
    set_has_dis_param();
  } else {
    clear_has_dis_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.UnifiedTransformationParameter.dis_param)
}

// repeated .caffe.BatchSampler batch_sampler = 11;
inline int UnifiedTransformationParameter::batch_sampler_size() const {
  return batch_sampler_.size();
}
inline void UnifiedTransformationParameter::clear_batch_sampler() {
  batch_sampler_.Clear();
}
inline const ::caffe::BatchSampler& UnifiedTransformationParameter::batch_sampler(int index) const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.batch_sampler)
  return batch_sampler_.Get(index);
}
inline ::caffe::BatchSampler* UnifiedTransformationParameter::mutable_batch_sampler(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.UnifiedTransformationParameter.batch_sampler)
  return batch_sampler_.Mutable(index);
}
inline ::caffe::BatchSampler* UnifiedTransformationParameter::add_batch_sampler() {
  // @@protoc_insertion_point(field_add:caffe.UnifiedTransformationParameter.batch_sampler)
  return batch_sampler_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler >*
UnifiedTransformationParameter::mutable_batch_sampler() {
  // @@protoc_insertion_point(field_mutable_list:caffe.UnifiedTransformationParameter.batch_sampler)
  return &batch_sampler_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler >&
UnifiedTransformationParameter::batch_sampler() const {
  // @@protoc_insertion_point(field_list:caffe.UnifiedTransformationParameter.batch_sampler)
  return batch_sampler_;
}

// optional .caffe.ExpansionParameter expand_param = 16;
inline bool UnifiedTransformationParameter::has_expand_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_expand_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UnifiedTransformationParameter::clear_has_expand_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UnifiedTransformationParameter::clear_expand_param() {
  if (expand_param_ != NULL) expand_param_->::caffe::ExpansionParameter::Clear();
  clear_has_expand_param();
}
inline const ::caffe::ExpansionParameter& UnifiedTransformationParameter::expand_param() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.expand_param)
  return expand_param_ != NULL ? *expand_param_ : *default_instance_->expand_param_;
}
inline ::caffe::ExpansionParameter* UnifiedTransformationParameter::mutable_expand_param() {
  set_has_expand_param();
  if (expand_param_ == NULL) {
    expand_param_ = new ::caffe::ExpansionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.UnifiedTransformationParameter.expand_param)
  return expand_param_;
}
inline ::caffe::ExpansionParameter* UnifiedTransformationParameter::release_expand_param() {
  // @@protoc_insertion_point(field_release:caffe.UnifiedTransformationParameter.expand_param)
  clear_has_expand_param();
  ::caffe::ExpansionParameter* temp = expand_param_;
  expand_param_ = NULL;
  return temp;
}
inline void UnifiedTransformationParameter::set_allocated_expand_param(::caffe::ExpansionParameter* expand_param) {
  delete expand_param_;
  expand_param_ = expand_param;
  if (expand_param) {
    set_has_expand_param();
  } else {
    clear_has_expand_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.UnifiedTransformationParameter.expand_param)
}

// optional int32 bboxsample_classid = 17 [default = 0];
inline bool UnifiedTransformationParameter::has_bboxsample_classid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_bboxsample_classid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UnifiedTransformationParameter::clear_has_bboxsample_classid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UnifiedTransformationParameter::clear_bboxsample_classid() {
  bboxsample_classid_ = 0;
  clear_has_bboxsample_classid();
}
inline ::google::protobuf::int32 UnifiedTransformationParameter::bboxsample_classid() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.bboxsample_classid)
  return bboxsample_classid_;
}
inline void UnifiedTransformationParameter::set_bboxsample_classid(::google::protobuf::int32 value) {
  set_has_bboxsample_classid();
  bboxsample_classid_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.bboxsample_classid)
}

// optional bool for_body = 18 [default = true];
inline bool UnifiedTransformationParameter::has_for_body() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_for_body() {
  _has_bits_[0] |= 0x00080000u;
}
inline void UnifiedTransformationParameter::clear_has_for_body() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void UnifiedTransformationParameter::clear_for_body() {
  for_body_ = true;
  clear_has_for_body();
}
inline bool UnifiedTransformationParameter::for_body() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.for_body)
  return for_body_;
}
inline void UnifiedTransformationParameter::set_for_body(bool value) {
  set_has_for_body();
  for_body_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.for_body)
}

// optional bool sample_random = 19 [default = false];
inline bool UnifiedTransformationParameter::has_sample_random() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_sample_random() {
  _has_bits_[0] |= 0x00100000u;
}
inline void UnifiedTransformationParameter::clear_has_sample_random() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void UnifiedTransformationParameter::clear_sample_random() {
  sample_random_ = false;
  clear_has_sample_random();
}
inline bool UnifiedTransformationParameter::sample_random() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.sample_random)
  return sample_random_;
}
inline void UnifiedTransformationParameter::set_sample_random(bool value) {
  set_has_sample_random();
  sample_random_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.sample_random)
}

// optional int32 stride = 20 [default = 8];
inline bool UnifiedTransformationParameter::has_stride() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_stride() {
  _has_bits_[0] |= 0x00200000u;
}
inline void UnifiedTransformationParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void UnifiedTransformationParameter::clear_stride() {
  stride_ = 8;
  clear_has_stride();
}
inline ::google::protobuf::int32 UnifiedTransformationParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.stride)
  return stride_;
}
inline void UnifiedTransformationParameter::set_stride(::google::protobuf::int32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.stride)
}

// optional float sigma = 21 [default = 7];
inline bool UnifiedTransformationParameter::has_sigma() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_sigma() {
  _has_bits_[0] |= 0x00400000u;
}
inline void UnifiedTransformationParameter::clear_has_sigma() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void UnifiedTransformationParameter::clear_sigma() {
  sigma_ = 7;
  clear_has_sigma();
}
inline float UnifiedTransformationParameter::sigma() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.sigma)
  return sigma_;
}
inline void UnifiedTransformationParameter::set_sigma(float value) {
  set_has_sigma();
  sigma_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.sigma)
}

// optional float min_scale = 22 [default = 1.6];
inline bool UnifiedTransformationParameter::has_min_scale() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_min_scale() {
  _has_bits_[0] |= 0x00800000u;
}
inline void UnifiedTransformationParameter::clear_has_min_scale() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void UnifiedTransformationParameter::clear_min_scale() {
  min_scale_ = 1.6f;
  clear_has_min_scale();
}
inline float UnifiedTransformationParameter::min_scale() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.min_scale)
  return min_scale_;
}
inline void UnifiedTransformationParameter::set_min_scale(float value) {
  set_has_min_scale();
  min_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.min_scale)
}

// optional float max_scale = 23 [default = 1.6];
inline bool UnifiedTransformationParameter::has_max_scale() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_max_scale() {
  _has_bits_[0] |= 0x01000000u;
}
inline void UnifiedTransformationParameter::clear_has_max_scale() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void UnifiedTransformationParameter::clear_max_scale() {
  max_scale_ = 1.6f;
  clear_has_max_scale();
}
inline float UnifiedTransformationParameter::max_scale() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.max_scale)
  return max_scale_;
}
inline void UnifiedTransformationParameter::set_max_scale(float value) {
  set_has_max_scale();
  max_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.max_scale)
}

// optional float drift_scalar = 24 [default = 0.1];
inline bool UnifiedTransformationParameter::has_drift_scalar() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_drift_scalar() {
  _has_bits_[0] |= 0x02000000u;
}
inline void UnifiedTransformationParameter::clear_has_drift_scalar() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void UnifiedTransformationParameter::clear_drift_scalar() {
  drift_scalar_ = 0.1f;
  clear_has_drift_scalar();
}
inline float UnifiedTransformationParameter::drift_scalar() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.drift_scalar)
  return drift_scalar_;
}
inline void UnifiedTransformationParameter::set_drift_scalar(float value) {
  set_has_drift_scalar();
  drift_scalar_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.drift_scalar)
}

// optional float max_rotate_degree = 25 [default = 10];
inline bool UnifiedTransformationParameter::has_max_rotate_degree() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_max_rotate_degree() {
  _has_bits_[0] |= 0x04000000u;
}
inline void UnifiedTransformationParameter::clear_has_max_rotate_degree() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void UnifiedTransformationParameter::clear_max_rotate_degree() {
  max_rotate_degree_ = 10;
  clear_has_max_rotate_degree();
}
inline float UnifiedTransformationParameter::max_rotate_degree() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.max_rotate_degree)
  return max_rotate_degree_;
}
inline void UnifiedTransformationParameter::set_max_rotate_degree(float value) {
  set_has_max_rotate_degree();
  max_rotate_degree_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.max_rotate_degree)
}

// optional .caffe.UnifiedTransformationParameter.PutToBlob_mode put_mode = 28 [default = CENTER];
inline bool UnifiedTransformationParameter::has_put_mode() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_put_mode() {
  _has_bits_[0] |= 0x08000000u;
}
inline void UnifiedTransformationParameter::clear_has_put_mode() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void UnifiedTransformationParameter::clear_put_mode() {
  put_mode_ = 2;
  clear_has_put_mode();
}
inline ::caffe::UnifiedTransformationParameter_PutToBlob_mode UnifiedTransformationParameter::put_mode() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.put_mode)
  return static_cast< ::caffe::UnifiedTransformationParameter_PutToBlob_mode >(put_mode_);
}
inline void UnifiedTransformationParameter::set_put_mode(::caffe::UnifiedTransformationParameter_PutToBlob_mode value) {
  assert(::caffe::UnifiedTransformationParameter_PutToBlob_mode_IsValid(value));
  set_has_put_mode();
  put_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.put_mode)
}

// repeated int32 resized_width_repeat = 29;
inline int UnifiedTransformationParameter::resized_width_repeat_size() const {
  return resized_width_repeat_.size();
}
inline void UnifiedTransformationParameter::clear_resized_width_repeat() {
  resized_width_repeat_.Clear();
}
inline ::google::protobuf::int32 UnifiedTransformationParameter::resized_width_repeat(int index) const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.resized_width_repeat)
  return resized_width_repeat_.Get(index);
}
inline void UnifiedTransformationParameter::set_resized_width_repeat(int index, ::google::protobuf::int32 value) {
  resized_width_repeat_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.resized_width_repeat)
}
inline void UnifiedTransformationParameter::add_resized_width_repeat(::google::protobuf::int32 value) {
  resized_width_repeat_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.UnifiedTransformationParameter.resized_width_repeat)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UnifiedTransformationParameter::resized_width_repeat() const {
  // @@protoc_insertion_point(field_list:caffe.UnifiedTransformationParameter.resized_width_repeat)
  return resized_width_repeat_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UnifiedTransformationParameter::mutable_resized_width_repeat() {
  // @@protoc_insertion_point(field_mutable_list:caffe.UnifiedTransformationParameter.resized_width_repeat)
  return &resized_width_repeat_;
}

// repeated int32 resized_height_repeat = 30;
inline int UnifiedTransformationParameter::resized_height_repeat_size() const {
  return resized_height_repeat_.size();
}
inline void UnifiedTransformationParameter::clear_resized_height_repeat() {
  resized_height_repeat_.Clear();
}
inline ::google::protobuf::int32 UnifiedTransformationParameter::resized_height_repeat(int index) const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.resized_height_repeat)
  return resized_height_repeat_.Get(index);
}
inline void UnifiedTransformationParameter::set_resized_height_repeat(int index, ::google::protobuf::int32 value) {
  resized_height_repeat_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.resized_height_repeat)
}
inline void UnifiedTransformationParameter::add_resized_height_repeat(::google::protobuf::int32 value) {
  resized_height_repeat_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.UnifiedTransformationParameter.resized_height_repeat)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UnifiedTransformationParameter::resized_height_repeat() const {
  // @@protoc_insertion_point(field_list:caffe.UnifiedTransformationParameter.resized_height_repeat)
  return resized_height_repeat_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UnifiedTransformationParameter::mutable_resized_height_repeat() {
  // @@protoc_insertion_point(field_mutable_list:caffe.UnifiedTransformationParameter.resized_height_repeat)
  return &resized_height_repeat_;
}

// optional int32 single_person_size = 32 [default = 0];
inline bool UnifiedTransformationParameter::has_single_person_size() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_single_person_size() {
  _has_bits_[0] |= 0x40000000u;
}
inline void UnifiedTransformationParameter::clear_has_single_person_size() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void UnifiedTransformationParameter::clear_single_person_size() {
  single_person_size_ = 0;
  clear_has_single_person_size();
}
inline ::google::protobuf::int32 UnifiedTransformationParameter::single_person_size() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.single_person_size)
  return single_person_size_;
}
inline void UnifiedTransformationParameter::set_single_person_size(::google::protobuf::int32 value) {
  set_has_single_person_size();
  single_person_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.single_person_size)
}

// optional float merge_single_person_prob = 33 [default = 0];
inline bool UnifiedTransformationParameter::has_merge_single_person_prob() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_merge_single_person_prob() {
  _has_bits_[0] |= 0x80000000u;
}
inline void UnifiedTransformationParameter::clear_has_merge_single_person_prob() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void UnifiedTransformationParameter::clear_merge_single_person_prob() {
  merge_single_person_prob_ = 0;
  clear_has_merge_single_person_prob();
}
inline float UnifiedTransformationParameter::merge_single_person_prob() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.merge_single_person_prob)
  return merge_single_person_prob_;
}
inline void UnifiedTransformationParameter::set_merge_single_person_prob(float value) {
  set_has_merge_single_person_prob();
  merge_single_person_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.merge_single_person_prob)
}

// optional float x_closer = 34 [default = 1];
inline bool UnifiedTransformationParameter::has_x_closer() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void UnifiedTransformationParameter::set_has_x_closer() {
  _has_bits_[1] |= 0x00000001u;
}
inline void UnifiedTransformationParameter::clear_has_x_closer() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void UnifiedTransformationParameter::clear_x_closer() {
  x_closer_ = 1;
  clear_has_x_closer();
}
inline float UnifiedTransformationParameter::x_closer() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.x_closer)
  return x_closer_;
}
inline void UnifiedTransformationParameter::set_x_closer(float value) {
  set_has_x_closer();
  x_closer_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.x_closer)
}

// optional float y_closer = 35 [default = 0.2];
inline bool UnifiedTransformationParameter::has_y_closer() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void UnifiedTransformationParameter::set_has_y_closer() {
  _has_bits_[1] |= 0x00000002u;
}
inline void UnifiedTransformationParameter::clear_has_y_closer() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void UnifiedTransformationParameter::clear_y_closer() {
  y_closer_ = 0.2f;
  clear_has_y_closer();
}
inline float UnifiedTransformationParameter::y_closer() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.y_closer)
  return y_closer_;
}
inline void UnifiedTransformationParameter::set_y_closer(float value) {
  set_has_y_closer();
  y_closer_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.y_closer)
}

// optional float size_scale = 36 [default = 0.1];
inline bool UnifiedTransformationParameter::has_size_scale() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void UnifiedTransformationParameter::set_has_size_scale() {
  _has_bits_[1] |= 0x00000004u;
}
inline void UnifiedTransformationParameter::clear_has_size_scale() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void UnifiedTransformationParameter::clear_size_scale() {
  size_scale_ = 0.1f;
  clear_has_size_scale();
}
inline float UnifiedTransformationParameter::size_scale() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.size_scale)
  return size_scale_;
}
inline void UnifiedTransformationParameter::set_size_scale(float value) {
  set_has_size_scale();
  size_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.size_scale)
}

// optional int32 loop = 37 [default = 50];
inline bool UnifiedTransformationParameter::has_loop() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void UnifiedTransformationParameter::set_has_loop() {
  _has_bits_[1] |= 0x00000008u;
}
inline void UnifiedTransformationParameter::clear_has_loop() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void UnifiedTransformationParameter::clear_loop() {
  loop_ = 50;
  clear_has_loop();
}
inline ::google::protobuf::int32 UnifiedTransformationParameter::loop() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.loop)
  return loop_;
}
inline void UnifiedTransformationParameter::set_loop(::google::protobuf::int32 value) {
  set_has_loop();
  loop_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.loop)
}

// optional float add_left = 38 [default = 0.3];
inline bool UnifiedTransformationParameter::has_add_left() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void UnifiedTransformationParameter::set_has_add_left() {
  _has_bits_[1] |= 0x00000010u;
}
inline void UnifiedTransformationParameter::clear_has_add_left() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void UnifiedTransformationParameter::clear_add_left() {
  add_left_ = 0.3f;
  clear_has_add_left();
}
inline float UnifiedTransformationParameter::add_left() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.add_left)
  return add_left_;
}
inline void UnifiedTransformationParameter::set_add_left(float value) {
  set_has_add_left();
  add_left_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.add_left)
}

// optional float add_right = 39 [default = 0.7];
inline bool UnifiedTransformationParameter::has_add_right() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void UnifiedTransformationParameter::set_has_add_right() {
  _has_bits_[1] |= 0x00000020u;
}
inline void UnifiedTransformationParameter::clear_has_add_right() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void UnifiedTransformationParameter::clear_add_right() {
  add_right_ = 0.7f;
  clear_has_add_right();
}
inline float UnifiedTransformationParameter::add_right() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.add_right)
  return add_right_;
}
inline void UnifiedTransformationParameter::set_add_right(float value) {
  set_has_add_right();
  add_right_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.add_right)
}

// optional float dark_prop = 40 [default = 0];
inline bool UnifiedTransformationParameter::has_dark_prop() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void UnifiedTransformationParameter::set_has_dark_prop() {
  _has_bits_[1] |= 0x00000040u;
}
inline void UnifiedTransformationParameter::clear_has_dark_prop() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void UnifiedTransformationParameter::clear_dark_prop() {
  dark_prop_ = 0;
  clear_has_dark_prop();
}
inline float UnifiedTransformationParameter::dark_prop() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.dark_prop)
  return dark_prop_;
}
inline void UnifiedTransformationParameter::set_dark_prop(float value) {
  set_has_dark_prop();
  dark_prop_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.dark_prop)
}

// optional float dark_gamma_min = 41 [default = 0.5];
inline bool UnifiedTransformationParameter::has_dark_gamma_min() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void UnifiedTransformationParameter::set_has_dark_gamma_min() {
  _has_bits_[1] |= 0x00000080u;
}
inline void UnifiedTransformationParameter::clear_has_dark_gamma_min() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void UnifiedTransformationParameter::clear_dark_gamma_min() {
  dark_gamma_min_ = 0.5f;
  clear_has_dark_gamma_min();
}
inline float UnifiedTransformationParameter::dark_gamma_min() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.dark_gamma_min)
  return dark_gamma_min_;
}
inline void UnifiedTransformationParameter::set_dark_gamma_min(float value) {
  set_has_dark_gamma_min();
  dark_gamma_min_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.dark_gamma_min)
}

// optional float dark_gamma_max = 42 [default = 0.8];
inline bool UnifiedTransformationParameter::has_dark_gamma_max() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void UnifiedTransformationParameter::set_has_dark_gamma_max() {
  _has_bits_[1] |= 0x00000100u;
}
inline void UnifiedTransformationParameter::clear_has_dark_gamma_max() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void UnifiedTransformationParameter::clear_dark_gamma_max() {
  dark_gamma_max_ = 0.8f;
  clear_has_dark_gamma_max();
}
inline float UnifiedTransformationParameter::dark_gamma_max() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.dark_gamma_max)
  return dark_gamma_max_;
}
inline void UnifiedTransformationParameter::set_dark_gamma_max(float value) {
  set_has_dark_gamma_max();
  dark_gamma_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.dark_gamma_max)
}

// optional bool crop_around_gt = 43 [default = false];
inline bool UnifiedTransformationParameter::has_crop_around_gt() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void UnifiedTransformationParameter::set_has_crop_around_gt() {
  _has_bits_[1] |= 0x00000200u;
}
inline void UnifiedTransformationParameter::clear_has_crop_around_gt() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void UnifiedTransformationParameter::clear_crop_around_gt() {
  crop_around_gt_ = false;
  clear_has_crop_around_gt();
}
inline bool UnifiedTransformationParameter::crop_around_gt() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.crop_around_gt)
  return crop_around_gt_;
}
inline void UnifiedTransformationParameter::set_crop_around_gt(bool value) {
  set_has_crop_around_gt();
  crop_around_gt_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.crop_around_gt)
}

// optional float backlight_prob = 44;
inline bool UnifiedTransformationParameter::has_backlight_prob() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void UnifiedTransformationParameter::set_has_backlight_prob() {
  _has_bits_[1] |= 0x00000400u;
}
inline void UnifiedTransformationParameter::clear_has_backlight_prob() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void UnifiedTransformationParameter::clear_backlight_prob() {
  backlight_prob_ = 0;
  clear_has_backlight_prob();
}
inline float UnifiedTransformationParameter::backlight_prob() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.backlight_prob)
  return backlight_prob_;
}
inline void UnifiedTransformationParameter::set_backlight_prob(float value) {
  set_has_backlight_prob();
  backlight_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.backlight_prob)
}

// optional float part_prob = 45 [default = 0];
inline bool UnifiedTransformationParameter::has_part_prob() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void UnifiedTransformationParameter::set_has_part_prob() {
  _has_bits_[1] |= 0x00000800u;
}
inline void UnifiedTransformationParameter::clear_has_part_prob() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void UnifiedTransformationParameter::clear_part_prob() {
  part_prob_ = 0;
  clear_has_part_prob();
}
inline float UnifiedTransformationParameter::part_prob() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.part_prob)
  return part_prob_;
}
inline void UnifiedTransformationParameter::set_part_prob(float value) {
  set_has_part_prob();
  part_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.part_prob)
}

// optional bool ytop = 46 [default = false];
inline bool UnifiedTransformationParameter::has_ytop() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_ytop() {
  _has_bits_[1] |= 0x00001000u;
}
inline void UnifiedTransformationParameter::clear_has_ytop() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void UnifiedTransformationParameter::clear_ytop() {
  ytop_ = false;
  clear_has_ytop();
}
inline bool UnifiedTransformationParameter::ytop() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.ytop)
  return ytop_;
}
inline void UnifiedTransformationParameter::set_ytop(bool value) {
  set_has_ytop();
  ytop_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.ytop)
}

// optional bool picninesixteentooneone = 47 [default = false];
inline bool UnifiedTransformationParameter::has_picninesixteentooneone() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_picninesixteentooneone() {
  _has_bits_[1] |= 0x00002000u;
}
inline void UnifiedTransformationParameter::clear_has_picninesixteentooneone() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void UnifiedTransformationParameter::clear_picninesixteentooneone() {
  picninesixteentooneone_ = false;
  clear_has_picninesixteentooneone();
}
inline bool UnifiedTransformationParameter::picninesixteentooneone() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.picninesixteentooneone)
  return picninesixteentooneone_;
}
inline void UnifiedTransformationParameter::set_picninesixteentooneone(bool value) {
  set_has_picninesixteentooneone();
  picninesixteentooneone_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.picninesixteentooneone)
}

// optional bool havehead = 48 [default = false];
inline bool UnifiedTransformationParameter::has_havehead() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_havehead() {
  _has_bits_[1] |= 0x00004000u;
}
inline void UnifiedTransformationParameter::clear_has_havehead() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void UnifiedTransformationParameter::clear_havehead() {
  havehead_ = false;
  clear_has_havehead();
}
inline bool UnifiedTransformationParameter::havehead() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.havehead)
  return havehead_;
}
inline void UnifiedTransformationParameter::set_havehead(bool value) {
  set_has_havehead();
  havehead_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.havehead)
}

// optional float xflip_prob = 49 [default = 0];
inline bool UnifiedTransformationParameter::has_xflip_prob() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_xflip_prob() {
  _has_bits_[1] |= 0x00008000u;
}
inline void UnifiedTransformationParameter::clear_has_xflip_prob() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void UnifiedTransformationParameter::clear_xflip_prob() {
  xflip_prob_ = 0;
  clear_has_xflip_prob();
}
inline float UnifiedTransformationParameter::xflip_prob() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.xflip_prob)
  return xflip_prob_;
}
inline void UnifiedTransformationParameter::set_xflip_prob(float value) {
  set_has_xflip_prob();
  xflip_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.xflip_prob)
}

// optional float transpose_prob = 50 [default = 0];
inline bool UnifiedTransformationParameter::has_transpose_prob() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_transpose_prob() {
  _has_bits_[1] |= 0x00010000u;
}
inline void UnifiedTransformationParameter::clear_has_transpose_prob() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void UnifiedTransformationParameter::clear_transpose_prob() {
  transpose_prob_ = 0;
  clear_has_transpose_prob();
}
inline float UnifiedTransformationParameter::transpose_prob() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.transpose_prob)
  return transpose_prob_;
}
inline void UnifiedTransformationParameter::set_transpose_prob(float value) {
  set_has_transpose_prob();
  transpose_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.transpose_prob)
}

// optional float back_makeborder_prob = 51 [default = 0];
inline bool UnifiedTransformationParameter::has_back_makeborder_prob() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_back_makeborder_prob() {
  _has_bits_[1] |= 0x00020000u;
}
inline void UnifiedTransformationParameter::clear_has_back_makeborder_prob() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void UnifiedTransformationParameter::clear_back_makeborder_prob() {
  back_makeborder_prob_ = 0;
  clear_has_back_makeborder_prob();
}
inline float UnifiedTransformationParameter::back_makeborder_prob() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.back_makeborder_prob)
  return back_makeborder_prob_;
}
inline void UnifiedTransformationParameter::set_back_makeborder_prob(float value) {
  set_has_back_makeborder_prob();
  back_makeborder_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.back_makeborder_prob)
}

// optional float blur_back_prob = 52 [default = 0];
inline bool UnifiedTransformationParameter::has_blur_back_prob() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_blur_back_prob() {
  _has_bits_[1] |= 0x00040000u;
}
inline void UnifiedTransformationParameter::clear_has_blur_back_prob() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void UnifiedTransformationParameter::clear_blur_back_prob() {
  blur_back_prob_ = 0;
  clear_has_blur_back_prob();
}
inline float UnifiedTransformationParameter::blur_back_prob() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.blur_back_prob)
  return blur_back_prob_;
}
inline void UnifiedTransformationParameter::set_blur_back_prob(float value) {
  set_has_blur_back_prob();
  blur_back_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.blur_back_prob)
}

// optional float back_dark_prop = 53 [default = 0];
inline bool UnifiedTransformationParameter::has_back_dark_prop() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_back_dark_prop() {
  _has_bits_[1] |= 0x00080000u;
}
inline void UnifiedTransformationParameter::clear_has_back_dark_prop() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void UnifiedTransformationParameter::clear_back_dark_prop() {
  back_dark_prop_ = 0;
  clear_has_back_dark_prop();
}
inline float UnifiedTransformationParameter::back_dark_prop() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.back_dark_prop)
  return back_dark_prop_;
}
inline void UnifiedTransformationParameter::set_back_dark_prop(float value) {
  set_has_back_dark_prop();
  back_dark_prop_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.back_dark_prop)
}

// optional float torsowithhead_coverage = 54 [default = 0];
inline bool UnifiedTransformationParameter::has_torsowithhead_coverage() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_torsowithhead_coverage() {
  _has_bits_[1] |= 0x00100000u;
}
inline void UnifiedTransformationParameter::clear_has_torsowithhead_coverage() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void UnifiedTransformationParameter::clear_torsowithhead_coverage() {
  torsowithhead_coverage_ = 0;
  clear_has_torsowithhead_coverage();
}
inline float UnifiedTransformationParameter::torsowithhead_coverage() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.torsowithhead_coverage)
  return torsowithhead_coverage_;
}
inline void UnifiedTransformationParameter::set_torsowithhead_coverage(float value) {
  set_has_torsowithhead_coverage();
  torsowithhead_coverage_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.torsowithhead_coverage)
}

// optional float delete_from_scale = 55 [default = 1];
inline bool UnifiedTransformationParameter::has_delete_from_scale() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_delete_from_scale() {
  _has_bits_[1] |= 0x00200000u;
}
inline void UnifiedTransformationParameter::clear_has_delete_from_scale() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void UnifiedTransformationParameter::clear_delete_from_scale() {
  delete_from_scale_ = 1;
  clear_has_delete_from_scale();
}
inline float UnifiedTransformationParameter::delete_from_scale() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.delete_from_scale)
  return delete_from_scale_;
}
inline void UnifiedTransformationParameter::set_delete_from_scale(float value) {
  set_has_delete_from_scale();
  delete_from_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.delete_from_scale)
}

// optional float blur_front_prob = 56 [default = 0];
inline bool UnifiedTransformationParameter::has_blur_front_prob() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_blur_front_prob() {
  _has_bits_[1] |= 0x00400000u;
}
inline void UnifiedTransformationParameter::clear_has_blur_front_prob() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void UnifiedTransformationParameter::clear_blur_front_prob() {
  blur_front_prob_ = 0;
  clear_has_blur_front_prob();
}
inline float UnifiedTransformationParameter::blur_front_prob() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.blur_front_prob)
  return blur_front_prob_;
}
inline void UnifiedTransformationParameter::set_blur_front_prob(float value) {
  set_has_blur_front_prob();
  blur_front_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.blur_front_prob)
}

// optional float blur_front_part_prob = 57 [default = 0];
inline bool UnifiedTransformationParameter::has_blur_front_part_prob() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_blur_front_part_prob() {
  _has_bits_[1] |= 0x00800000u;
}
inline void UnifiedTransformationParameter::clear_has_blur_front_part_prob() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void UnifiedTransformationParameter::clear_blur_front_part_prob() {
  blur_front_part_prob_ = 0;
  clear_has_blur_front_part_prob();
}
inline float UnifiedTransformationParameter::blur_front_part_prob() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.blur_front_part_prob)
  return blur_front_part_prob_;
}
inline void UnifiedTransformationParameter::set_blur_front_part_prob(float value) {
  set_has_blur_front_part_prob();
  blur_front_part_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.blur_front_part_prob)
}

// optional float blur_size_threshold = 58 [default = 1];
inline bool UnifiedTransformationParameter::has_blur_size_threshold() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_blur_size_threshold() {
  _has_bits_[1] |= 0x01000000u;
}
inline void UnifiedTransformationParameter::clear_has_blur_size_threshold() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void UnifiedTransformationParameter::clear_blur_size_threshold() {
  blur_size_threshold_ = 1;
  clear_has_blur_size_threshold();
}
inline float UnifiedTransformationParameter::blur_size_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.blur_size_threshold)
  return blur_size_threshold_;
}
inline void UnifiedTransformationParameter::set_blur_size_threshold(float value) {
  set_has_blur_size_threshold();
  blur_size_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.blur_size_threshold)
}

// optional float perspective_prop = 59 [default = 0];
inline bool UnifiedTransformationParameter::has_perspective_prop() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_perspective_prop() {
  _has_bits_[1] |= 0x02000000u;
}
inline void UnifiedTransformationParameter::clear_has_perspective_prop() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void UnifiedTransformationParameter::clear_perspective_prop() {
  perspective_prop_ = 0;
  clear_has_perspective_prop();
}
inline float UnifiedTransformationParameter::perspective_prop() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.perspective_prop)
  return perspective_prop_;
}
inline void UnifiedTransformationParameter::set_perspective_prop(float value) {
  set_has_perspective_prop();
  perspective_prop_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.perspective_prop)
}

// optional bool make_copy_border = 60 [default = false];
inline bool UnifiedTransformationParameter::has_make_copy_border() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_make_copy_border() {
  _has_bits_[1] |= 0x04000000u;
}
inline void UnifiedTransformationParameter::clear_has_make_copy_border() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void UnifiedTransformationParameter::clear_make_copy_border() {
  make_copy_border_ = false;
  clear_has_make_copy_border();
}
inline bool UnifiedTransformationParameter::make_copy_border() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.make_copy_border)
  return make_copy_border_;
}
inline void UnifiedTransformationParameter::set_make_copy_border(bool value) {
  set_has_make_copy_border();
  make_copy_border_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.make_copy_border)
}

// optional float make_copy_border_prob = 61 [default = 1];
inline bool UnifiedTransformationParameter::has_make_copy_border_prob() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_make_copy_border_prob() {
  _has_bits_[1] |= 0x08000000u;
}
inline void UnifiedTransformationParameter::clear_has_make_copy_border_prob() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void UnifiedTransformationParameter::clear_make_copy_border_prob() {
  make_copy_border_prob_ = 1;
  clear_has_make_copy_border_prob();
}
inline float UnifiedTransformationParameter::make_copy_border_prob() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.make_copy_border_prob)
  return make_copy_border_prob_;
}
inline void UnifiedTransformationParameter::set_make_copy_border_prob(float value) {
  set_has_make_copy_border_prob();
  make_copy_border_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.make_copy_border_prob)
}

// optional float make_copy_border_thred = 62 [default = 1.45];
inline bool UnifiedTransformationParameter::has_make_copy_border_thred() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_make_copy_border_thred() {
  _has_bits_[1] |= 0x10000000u;
}
inline void UnifiedTransformationParameter::clear_has_make_copy_border_thred() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void UnifiedTransformationParameter::clear_make_copy_border_thred() {
  make_copy_border_thred_ = 1.45f;
  clear_has_make_copy_border_thred();
}
inline float UnifiedTransformationParameter::make_copy_border_thred() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.make_copy_border_thred)
  return make_copy_border_thred_;
}
inline void UnifiedTransformationParameter::set_make_copy_border_thred(float value) {
  set_has_make_copy_border_thred();
  make_copy_border_thred_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.make_copy_border_thred)
}

// optional bool make_randomblock = 63 [default = false];
inline bool UnifiedTransformationParameter::has_make_randomblock() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_make_randomblock() {
  _has_bits_[1] |= 0x20000000u;
}
inline void UnifiedTransformationParameter::clear_has_make_randomblock() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void UnifiedTransformationParameter::clear_make_randomblock() {
  make_randomblock_ = false;
  clear_has_make_randomblock();
}
inline bool UnifiedTransformationParameter::make_randomblock() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.make_randomblock)
  return make_randomblock_;
}
inline void UnifiedTransformationParameter::set_make_randomblock(bool value) {
  set_has_make_randomblock();
  make_randomblock_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.make_randomblock)
}

// optional float randomblock_prob = 64 [default = 0.5];
inline bool UnifiedTransformationParameter::has_randomblock_prob() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_randomblock_prob() {
  _has_bits_[1] |= 0x40000000u;
}
inline void UnifiedTransformationParameter::clear_has_randomblock_prob() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void UnifiedTransformationParameter::clear_randomblock_prob() {
  randomblock_prob_ = 0.5f;
  clear_has_randomblock_prob();
}
inline float UnifiedTransformationParameter::randomblock_prob() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.randomblock_prob)
  return randomblock_prob_;
}
inline void UnifiedTransformationParameter::set_randomblock_prob(float value) {
  set_has_randomblock_prob();
  randomblock_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.randomblock_prob)
}

// optional bool speed_up = 65 [default = false];
inline bool UnifiedTransformationParameter::has_speed_up() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void UnifiedTransformationParameter::set_has_speed_up() {
  _has_bits_[1] |= 0x80000000u;
}
inline void UnifiedTransformationParameter::clear_has_speed_up() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void UnifiedTransformationParameter::clear_speed_up() {
  speed_up_ = false;
  clear_has_speed_up();
}
inline bool UnifiedTransformationParameter::speed_up() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.speed_up)
  return speed_up_;
}
inline void UnifiedTransformationParameter::set_speed_up(bool value) {
  set_has_speed_up();
  speed_up_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.speed_up)
}

// optional float make_addadditionhair_prob = 66 [default = 0];
inline bool UnifiedTransformationParameter::has_make_addadditionhair_prob() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void UnifiedTransformationParameter::set_has_make_addadditionhair_prob() {
  _has_bits_[2] |= 0x00000001u;
}
inline void UnifiedTransformationParameter::clear_has_make_addadditionhair_prob() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void UnifiedTransformationParameter::clear_make_addadditionhair_prob() {
  make_addadditionhair_prob_ = 0;
  clear_has_make_addadditionhair_prob();
}
inline float UnifiedTransformationParameter::make_addadditionhair_prob() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.make_addadditionhair_prob)
  return make_addadditionhair_prob_;
}
inline void UnifiedTransformationParameter::set_make_addadditionhair_prob(float value) {
  set_has_make_addadditionhair_prob();
  make_addadditionhair_prob_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.make_addadditionhair_prob)
}

// optional int32 single_hair_size = 67 [default = 11];
inline bool UnifiedTransformationParameter::has_single_hair_size() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void UnifiedTransformationParameter::set_has_single_hair_size() {
  _has_bits_[2] |= 0x00000002u;
}
inline void UnifiedTransformationParameter::clear_has_single_hair_size() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void UnifiedTransformationParameter::clear_single_hair_size() {
  single_hair_size_ = 11;
  clear_has_single_hair_size();
}
inline ::google::protobuf::int32 UnifiedTransformationParameter::single_hair_size() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.single_hair_size)
  return single_hair_size_;
}
inline void UnifiedTransformationParameter::set_single_hair_size(::google::protobuf::int32 value) {
  set_has_single_hair_size();
  single_hair_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.single_hair_size)
}

// optional float hw_ratio = 68;
inline bool UnifiedTransformationParameter::has_hw_ratio() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void UnifiedTransformationParameter::set_has_hw_ratio() {
  _has_bits_[2] |= 0x00000004u;
}
inline void UnifiedTransformationParameter::clear_has_hw_ratio() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void UnifiedTransformationParameter::clear_hw_ratio() {
  hw_ratio_ = 0;
  clear_has_hw_ratio();
}
inline float UnifiedTransformationParameter::hw_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.hw_ratio)
  return hw_ratio_;
}
inline void UnifiedTransformationParameter::set_hw_ratio(float value) {
  set_has_hw_ratio();
  hw_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.hw_ratio)
}

// optional float area_ratio = 69;
inline bool UnifiedTransformationParameter::has_area_ratio() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void UnifiedTransformationParameter::set_has_area_ratio() {
  _has_bits_[2] |= 0x00000008u;
}
inline void UnifiedTransformationParameter::clear_has_area_ratio() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void UnifiedTransformationParameter::clear_area_ratio() {
  area_ratio_ = 0;
  clear_has_area_ratio();
}
inline float UnifiedTransformationParameter::area_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.area_ratio)
  return area_ratio_;
}
inline void UnifiedTransformationParameter::set_area_ratio(float value) {
  set_has_area_ratio();
  area_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.area_ratio)
}

// optional bool do_ignore_gt = 70 [default = false];
inline bool UnifiedTransformationParameter::has_do_ignore_gt() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void UnifiedTransformationParameter::set_has_do_ignore_gt() {
  _has_bits_[2] |= 0x00000010u;
}
inline void UnifiedTransformationParameter::clear_has_do_ignore_gt() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void UnifiedTransformationParameter::clear_do_ignore_gt() {
  do_ignore_gt_ = false;
  clear_has_do_ignore_gt();
}
inline bool UnifiedTransformationParameter::do_ignore_gt() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.do_ignore_gt)
  return do_ignore_gt_;
}
inline void UnifiedTransformationParameter::set_do_ignore_gt(bool value) {
  set_has_do_ignore_gt();
  do_ignore_gt_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.do_ignore_gt)
}

// optional int32 block_color = 71 [default = 0];
inline bool UnifiedTransformationParameter::has_block_color() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void UnifiedTransformationParameter::set_has_block_color() {
  _has_bits_[2] |= 0x00000020u;
}
inline void UnifiedTransformationParameter::clear_has_block_color() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void UnifiedTransformationParameter::clear_block_color() {
  block_color_ = 0;
  clear_has_block_color();
}
inline ::google::protobuf::int32 UnifiedTransformationParameter::block_color() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.block_color)
  return block_color_;
}
inline void UnifiedTransformationParameter::set_block_color(::google::protobuf::int32 value) {
  set_has_block_color();
  block_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.block_color)
}

// optional .caffe.DistortionParameter dis_param_neg = 72;
inline bool UnifiedTransformationParameter::has_dis_param_neg() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void UnifiedTransformationParameter::set_has_dis_param_neg() {
  _has_bits_[2] |= 0x00000040u;
}
inline void UnifiedTransformationParameter::clear_has_dis_param_neg() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void UnifiedTransformationParameter::clear_dis_param_neg() {
  if (dis_param_neg_ != NULL) dis_param_neg_->::caffe::DistortionParameter::Clear();
  clear_has_dis_param_neg();
}
inline const ::caffe::DistortionParameter& UnifiedTransformationParameter::dis_param_neg() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.dis_param_neg)
  return dis_param_neg_ != NULL ? *dis_param_neg_ : *default_instance_->dis_param_neg_;
}
inline ::caffe::DistortionParameter* UnifiedTransformationParameter::mutable_dis_param_neg() {
  set_has_dis_param_neg();
  if (dis_param_neg_ == NULL) {
    dis_param_neg_ = new ::caffe::DistortionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.UnifiedTransformationParameter.dis_param_neg)
  return dis_param_neg_;
}
inline ::caffe::DistortionParameter* UnifiedTransformationParameter::release_dis_param_neg() {
  // @@protoc_insertion_point(field_release:caffe.UnifiedTransformationParameter.dis_param_neg)
  clear_has_dis_param_neg();
  ::caffe::DistortionParameter* temp = dis_param_neg_;
  dis_param_neg_ = NULL;
  return temp;
}
inline void UnifiedTransformationParameter::set_allocated_dis_param_neg(::caffe::DistortionParameter* dis_param_neg) {
  delete dis_param_neg_;
  dis_param_neg_ = dis_param_neg;
  if (dis_param_neg) {
    set_has_dis_param_neg();
  } else {
    clear_has_dis_param_neg();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.UnifiedTransformationParameter.dis_param_neg)
}

// optional float dark_prop_neg = 73 [default = 0];
inline bool UnifiedTransformationParameter::has_dark_prop_neg() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void UnifiedTransformationParameter::set_has_dark_prop_neg() {
  _has_bits_[2] |= 0x00000080u;
}
inline void UnifiedTransformationParameter::clear_has_dark_prop_neg() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void UnifiedTransformationParameter::clear_dark_prop_neg() {
  dark_prop_neg_ = 0;
  clear_has_dark_prop_neg();
}
inline float UnifiedTransformationParameter::dark_prop_neg() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.dark_prop_neg)
  return dark_prop_neg_;
}
inline void UnifiedTransformationParameter::set_dark_prop_neg(float value) {
  set_has_dark_prop_neg();
  dark_prop_neg_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.dark_prop_neg)
}

// optional float dark_gamma_min_neg = 74 [default = 0.5];
inline bool UnifiedTransformationParameter::has_dark_gamma_min_neg() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void UnifiedTransformationParameter::set_has_dark_gamma_min_neg() {
  _has_bits_[2] |= 0x00000100u;
}
inline void UnifiedTransformationParameter::clear_has_dark_gamma_min_neg() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void UnifiedTransformationParameter::clear_dark_gamma_min_neg() {
  dark_gamma_min_neg_ = 0.5f;
  clear_has_dark_gamma_min_neg();
}
inline float UnifiedTransformationParameter::dark_gamma_min_neg() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.dark_gamma_min_neg)
  return dark_gamma_min_neg_;
}
inline void UnifiedTransformationParameter::set_dark_gamma_min_neg(float value) {
  set_has_dark_gamma_min_neg();
  dark_gamma_min_neg_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.dark_gamma_min_neg)
}

// optional float dark_gamma_max_neg = 75 [default = 0.8];
inline bool UnifiedTransformationParameter::has_dark_gamma_max_neg() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void UnifiedTransformationParameter::set_has_dark_gamma_max_neg() {
  _has_bits_[2] |= 0x00000200u;
}
inline void UnifiedTransformationParameter::clear_has_dark_gamma_max_neg() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void UnifiedTransformationParameter::clear_dark_gamma_max_neg() {
  dark_gamma_max_neg_ = 0.8f;
  clear_has_dark_gamma_max_neg();
}
inline float UnifiedTransformationParameter::dark_gamma_max_neg() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.dark_gamma_max_neg)
  return dark_gamma_max_neg_;
}
inline void UnifiedTransformationParameter::set_dark_gamma_max_neg(float value) {
  set_has_dark_gamma_max_neg();
  dark_gamma_max_neg_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.dark_gamma_max_neg)
}

// optional bool neg_more_aug = 76 [default = false];
inline bool UnifiedTransformationParameter::has_neg_more_aug() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void UnifiedTransformationParameter::set_has_neg_more_aug() {
  _has_bits_[2] |= 0x00000400u;
}
inline void UnifiedTransformationParameter::clear_has_neg_more_aug() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void UnifiedTransformationParameter::clear_neg_more_aug() {
  neg_more_aug_ = false;
  clear_has_neg_more_aug();
}
inline bool UnifiedTransformationParameter::neg_more_aug() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedTransformationParameter.neg_more_aug)
  return neg_more_aug_;
}
inline void UnifiedTransformationParameter::set_neg_more_aug(bool value) {
  set_has_neg_more_aug();
  neg_more_aug_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedTransformationParameter.neg_more_aug)
}

// -------------------------------------------------------------------

// TrackerDataLoaderParameter

// repeated string image_list = 1;
inline int TrackerDataLoaderParameter::image_list_size() const {
  return image_list_.size();
}
inline void TrackerDataLoaderParameter::clear_image_list() {
  image_list_.Clear();
}
inline const ::std::string& TrackerDataLoaderParameter::image_list(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TrackerDataLoaderParameter.image_list)
  return image_list_.Get(index);
}
inline ::std::string* TrackerDataLoaderParameter::mutable_image_list(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.TrackerDataLoaderParameter.image_list)
  return image_list_.Mutable(index);
}
inline void TrackerDataLoaderParameter::set_image_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.TrackerDataLoaderParameter.image_list)
  image_list_.Mutable(index)->assign(value);
}
inline void TrackerDataLoaderParameter::set_image_list(int index, const char* value) {
  image_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.TrackerDataLoaderParameter.image_list)
}
inline void TrackerDataLoaderParameter::set_image_list(int index, const char* value, size_t size) {
  image_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.TrackerDataLoaderParameter.image_list)
}
inline ::std::string* TrackerDataLoaderParameter::add_image_list() {
  // @@protoc_insertion_point(field_add_mutable:caffe.TrackerDataLoaderParameter.image_list)
  return image_list_.Add();
}
inline void TrackerDataLoaderParameter::add_image_list(const ::std::string& value) {
  image_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.TrackerDataLoaderParameter.image_list)
}
inline void TrackerDataLoaderParameter::add_image_list(const char* value) {
  image_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.TrackerDataLoaderParameter.image_list)
}
inline void TrackerDataLoaderParameter::add_image_list(const char* value, size_t size) {
  image_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.TrackerDataLoaderParameter.image_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrackerDataLoaderParameter::image_list() const {
  // @@protoc_insertion_point(field_list:caffe.TrackerDataLoaderParameter.image_list)
  return image_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrackerDataLoaderParameter::mutable_image_list() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TrackerDataLoaderParameter.image_list)
  return &image_list_;
}

// repeated string image_folder = 2;
inline int TrackerDataLoaderParameter::image_folder_size() const {
  return image_folder_.size();
}
inline void TrackerDataLoaderParameter::clear_image_folder() {
  image_folder_.Clear();
}
inline const ::std::string& TrackerDataLoaderParameter::image_folder(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TrackerDataLoaderParameter.image_folder)
  return image_folder_.Get(index);
}
inline ::std::string* TrackerDataLoaderParameter::mutable_image_folder(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.TrackerDataLoaderParameter.image_folder)
  return image_folder_.Mutable(index);
}
inline void TrackerDataLoaderParameter::set_image_folder(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.TrackerDataLoaderParameter.image_folder)
  image_folder_.Mutable(index)->assign(value);
}
inline void TrackerDataLoaderParameter::set_image_folder(int index, const char* value) {
  image_folder_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.TrackerDataLoaderParameter.image_folder)
}
inline void TrackerDataLoaderParameter::set_image_folder(int index, const char* value, size_t size) {
  image_folder_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.TrackerDataLoaderParameter.image_folder)
}
inline ::std::string* TrackerDataLoaderParameter::add_image_folder() {
  // @@protoc_insertion_point(field_add_mutable:caffe.TrackerDataLoaderParameter.image_folder)
  return image_folder_.Add();
}
inline void TrackerDataLoaderParameter::add_image_folder(const ::std::string& value) {
  image_folder_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.TrackerDataLoaderParameter.image_folder)
}
inline void TrackerDataLoaderParameter::add_image_folder(const char* value) {
  image_folder_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.TrackerDataLoaderParameter.image_folder)
}
inline void TrackerDataLoaderParameter::add_image_folder(const char* value, size_t size) {
  image_folder_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.TrackerDataLoaderParameter.image_folder)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrackerDataLoaderParameter::image_folder() const {
  // @@protoc_insertion_point(field_list:caffe.TrackerDataLoaderParameter.image_folder)
  return image_folder_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrackerDataLoaderParameter::mutable_image_folder() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TrackerDataLoaderParameter.image_folder)
  return &image_folder_;
}

// repeated string vot_type_folder = 3;
inline int TrackerDataLoaderParameter::vot_type_folder_size() const {
  return vot_type_folder_.size();
}
inline void TrackerDataLoaderParameter::clear_vot_type_folder() {
  vot_type_folder_.Clear();
}
inline const ::std::string& TrackerDataLoaderParameter::vot_type_folder(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TrackerDataLoaderParameter.vot_type_folder)
  return vot_type_folder_.Get(index);
}
inline ::std::string* TrackerDataLoaderParameter::mutable_vot_type_folder(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.TrackerDataLoaderParameter.vot_type_folder)
  return vot_type_folder_.Mutable(index);
}
inline void TrackerDataLoaderParameter::set_vot_type_folder(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.TrackerDataLoaderParameter.vot_type_folder)
  vot_type_folder_.Mutable(index)->assign(value);
}
inline void TrackerDataLoaderParameter::set_vot_type_folder(int index, const char* value) {
  vot_type_folder_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.TrackerDataLoaderParameter.vot_type_folder)
}
inline void TrackerDataLoaderParameter::set_vot_type_folder(int index, const char* value, size_t size) {
  vot_type_folder_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.TrackerDataLoaderParameter.vot_type_folder)
}
inline ::std::string* TrackerDataLoaderParameter::add_vot_type_folder() {
  // @@protoc_insertion_point(field_add_mutable:caffe.TrackerDataLoaderParameter.vot_type_folder)
  return vot_type_folder_.Add();
}
inline void TrackerDataLoaderParameter::add_vot_type_folder(const ::std::string& value) {
  vot_type_folder_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.TrackerDataLoaderParameter.vot_type_folder)
}
inline void TrackerDataLoaderParameter::add_vot_type_folder(const char* value) {
  vot_type_folder_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.TrackerDataLoaderParameter.vot_type_folder)
}
inline void TrackerDataLoaderParameter::add_vot_type_folder(const char* value, size_t size) {
  vot_type_folder_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.TrackerDataLoaderParameter.vot_type_folder)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrackerDataLoaderParameter::vot_type_folder() const {
  // @@protoc_insertion_point(field_list:caffe.TrackerDataLoaderParameter.vot_type_folder)
  return vot_type_folder_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrackerDataLoaderParameter::mutable_vot_type_folder() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TrackerDataLoaderParameter.vot_type_folder)
  return &vot_type_folder_;
}

// repeated string alov_type_image_folder = 4;
inline int TrackerDataLoaderParameter::alov_type_image_folder_size() const {
  return alov_type_image_folder_.size();
}
inline void TrackerDataLoaderParameter::clear_alov_type_image_folder() {
  alov_type_image_folder_.Clear();
}
inline const ::std::string& TrackerDataLoaderParameter::alov_type_image_folder(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TrackerDataLoaderParameter.alov_type_image_folder)
  return alov_type_image_folder_.Get(index);
}
inline ::std::string* TrackerDataLoaderParameter::mutable_alov_type_image_folder(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.TrackerDataLoaderParameter.alov_type_image_folder)
  return alov_type_image_folder_.Mutable(index);
}
inline void TrackerDataLoaderParameter::set_alov_type_image_folder(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.TrackerDataLoaderParameter.alov_type_image_folder)
  alov_type_image_folder_.Mutable(index)->assign(value);
}
inline void TrackerDataLoaderParameter::set_alov_type_image_folder(int index, const char* value) {
  alov_type_image_folder_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.TrackerDataLoaderParameter.alov_type_image_folder)
}
inline void TrackerDataLoaderParameter::set_alov_type_image_folder(int index, const char* value, size_t size) {
  alov_type_image_folder_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.TrackerDataLoaderParameter.alov_type_image_folder)
}
inline ::std::string* TrackerDataLoaderParameter::add_alov_type_image_folder() {
  // @@protoc_insertion_point(field_add_mutable:caffe.TrackerDataLoaderParameter.alov_type_image_folder)
  return alov_type_image_folder_.Add();
}
inline void TrackerDataLoaderParameter::add_alov_type_image_folder(const ::std::string& value) {
  alov_type_image_folder_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.TrackerDataLoaderParameter.alov_type_image_folder)
}
inline void TrackerDataLoaderParameter::add_alov_type_image_folder(const char* value) {
  alov_type_image_folder_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.TrackerDataLoaderParameter.alov_type_image_folder)
}
inline void TrackerDataLoaderParameter::add_alov_type_image_folder(const char* value, size_t size) {
  alov_type_image_folder_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.TrackerDataLoaderParameter.alov_type_image_folder)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrackerDataLoaderParameter::alov_type_image_folder() const {
  // @@protoc_insertion_point(field_list:caffe.TrackerDataLoaderParameter.alov_type_image_folder)
  return alov_type_image_folder_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrackerDataLoaderParameter::mutable_alov_type_image_folder() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TrackerDataLoaderParameter.alov_type_image_folder)
  return &alov_type_image_folder_;
}

// repeated string alov_type_anno_folder = 5;
inline int TrackerDataLoaderParameter::alov_type_anno_folder_size() const {
  return alov_type_anno_folder_.size();
}
inline void TrackerDataLoaderParameter::clear_alov_type_anno_folder() {
  alov_type_anno_folder_.Clear();
}
inline const ::std::string& TrackerDataLoaderParameter::alov_type_anno_folder(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TrackerDataLoaderParameter.alov_type_anno_folder)
  return alov_type_anno_folder_.Get(index);
}
inline ::std::string* TrackerDataLoaderParameter::mutable_alov_type_anno_folder(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.TrackerDataLoaderParameter.alov_type_anno_folder)
  return alov_type_anno_folder_.Mutable(index);
}
inline void TrackerDataLoaderParameter::set_alov_type_anno_folder(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.TrackerDataLoaderParameter.alov_type_anno_folder)
  alov_type_anno_folder_.Mutable(index)->assign(value);
}
inline void TrackerDataLoaderParameter::set_alov_type_anno_folder(int index, const char* value) {
  alov_type_anno_folder_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.TrackerDataLoaderParameter.alov_type_anno_folder)
}
inline void TrackerDataLoaderParameter::set_alov_type_anno_folder(int index, const char* value, size_t size) {
  alov_type_anno_folder_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.TrackerDataLoaderParameter.alov_type_anno_folder)
}
inline ::std::string* TrackerDataLoaderParameter::add_alov_type_anno_folder() {
  // @@protoc_insertion_point(field_add_mutable:caffe.TrackerDataLoaderParameter.alov_type_anno_folder)
  return alov_type_anno_folder_.Add();
}
inline void TrackerDataLoaderParameter::add_alov_type_anno_folder(const ::std::string& value) {
  alov_type_anno_folder_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.TrackerDataLoaderParameter.alov_type_anno_folder)
}
inline void TrackerDataLoaderParameter::add_alov_type_anno_folder(const char* value) {
  alov_type_anno_folder_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.TrackerDataLoaderParameter.alov_type_anno_folder)
}
inline void TrackerDataLoaderParameter::add_alov_type_anno_folder(const char* value, size_t size) {
  alov_type_anno_folder_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.TrackerDataLoaderParameter.alov_type_anno_folder)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrackerDataLoaderParameter::alov_type_anno_folder() const {
  // @@protoc_insertion_point(field_list:caffe.TrackerDataLoaderParameter.alov_type_anno_folder)
  return alov_type_anno_folder_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrackerDataLoaderParameter::mutable_alov_type_anno_folder() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TrackerDataLoaderParameter.alov_type_anno_folder)
  return &alov_type_anno_folder_;
}

// optional float lambda_shift = 6 [default = 5];
inline bool TrackerDataLoaderParameter::has_lambda_shift() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrackerDataLoaderParameter::set_has_lambda_shift() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrackerDataLoaderParameter::clear_has_lambda_shift() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrackerDataLoaderParameter::clear_lambda_shift() {
  lambda_shift_ = 5;
  clear_has_lambda_shift();
}
inline float TrackerDataLoaderParameter::lambda_shift() const {
  // @@protoc_insertion_point(field_get:caffe.TrackerDataLoaderParameter.lambda_shift)
  return lambda_shift_;
}
inline void TrackerDataLoaderParameter::set_lambda_shift(float value) {
  set_has_lambda_shift();
  lambda_shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrackerDataLoaderParameter.lambda_shift)
}

// optional float lambda_scale = 7 [default = 5];
inline bool TrackerDataLoaderParameter::has_lambda_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrackerDataLoaderParameter::set_has_lambda_scale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrackerDataLoaderParameter::clear_has_lambda_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrackerDataLoaderParameter::clear_lambda_scale() {
  lambda_scale_ = 5;
  clear_has_lambda_scale();
}
inline float TrackerDataLoaderParameter::lambda_scale() const {
  // @@protoc_insertion_point(field_get:caffe.TrackerDataLoaderParameter.lambda_scale)
  return lambda_scale_;
}
inline void TrackerDataLoaderParameter::set_lambda_scale(float value) {
  set_has_lambda_scale();
  lambda_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrackerDataLoaderParameter.lambda_scale)
}

// optional float lambda_min_scale = 8 [default = -0.4];
inline bool TrackerDataLoaderParameter::has_lambda_min_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TrackerDataLoaderParameter::set_has_lambda_min_scale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TrackerDataLoaderParameter::clear_has_lambda_min_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TrackerDataLoaderParameter::clear_lambda_min_scale() {
  lambda_min_scale_ = -0.4f;
  clear_has_lambda_min_scale();
}
inline float TrackerDataLoaderParameter::lambda_min_scale() const {
  // @@protoc_insertion_point(field_get:caffe.TrackerDataLoaderParameter.lambda_min_scale)
  return lambda_min_scale_;
}
inline void TrackerDataLoaderParameter::set_lambda_min_scale(float value) {
  set_has_lambda_min_scale();
  lambda_min_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrackerDataLoaderParameter.lambda_min_scale)
}

// optional float lambda_max_scale = 9 [default = 0.4];
inline bool TrackerDataLoaderParameter::has_lambda_max_scale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TrackerDataLoaderParameter::set_has_lambda_max_scale() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TrackerDataLoaderParameter::clear_has_lambda_max_scale() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TrackerDataLoaderParameter::clear_lambda_max_scale() {
  lambda_max_scale_ = 0.4f;
  clear_has_lambda_max_scale();
}
inline float TrackerDataLoaderParameter::lambda_max_scale() const {
  // @@protoc_insertion_point(field_get:caffe.TrackerDataLoaderParameter.lambda_max_scale)
  return lambda_max_scale_;
}
inline void TrackerDataLoaderParameter::set_lambda_max_scale(float value) {
  set_has_lambda_max_scale();
  lambda_max_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrackerDataLoaderParameter.lambda_max_scale)
}

// optional int32 fetch_iters = 10 [default = 3];
inline bool TrackerDataLoaderParameter::has_fetch_iters() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TrackerDataLoaderParameter::set_has_fetch_iters() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TrackerDataLoaderParameter::clear_has_fetch_iters() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TrackerDataLoaderParameter::clear_fetch_iters() {
  fetch_iters_ = 3;
  clear_has_fetch_iters();
}
inline ::google::protobuf::int32 TrackerDataLoaderParameter::fetch_iters() const {
  // @@protoc_insertion_point(field_get:caffe.TrackerDataLoaderParameter.fetch_iters)
  return fetch_iters_;
}
inline void TrackerDataLoaderParameter::set_fetch_iters(::google::protobuf::int32 value) {
  set_has_fetch_iters();
  fetch_iters_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrackerDataLoaderParameter.fetch_iters)
}

// optional int32 generated_examples_per_image = 11 [default = 10];
inline bool TrackerDataLoaderParameter::has_generated_examples_per_image() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TrackerDataLoaderParameter::set_has_generated_examples_per_image() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TrackerDataLoaderParameter::clear_has_generated_examples_per_image() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TrackerDataLoaderParameter::clear_generated_examples_per_image() {
  generated_examples_per_image_ = 10;
  clear_has_generated_examples_per_image();
}
inline ::google::protobuf::int32 TrackerDataLoaderParameter::generated_examples_per_image() const {
  // @@protoc_insertion_point(field_get:caffe.TrackerDataLoaderParameter.generated_examples_per_image)
  return generated_examples_per_image_;
}
inline void TrackerDataLoaderParameter::set_generated_examples_per_image(::google::protobuf::int32 value) {
  set_has_generated_examples_per_image();
  generated_examples_per_image_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrackerDataLoaderParameter.generated_examples_per_image)
}

// optional int32 generated_examples_per_frame = 12 [default = 10];
inline bool TrackerDataLoaderParameter::has_generated_examples_per_frame() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TrackerDataLoaderParameter::set_has_generated_examples_per_frame() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TrackerDataLoaderParameter::clear_has_generated_examples_per_frame() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TrackerDataLoaderParameter::clear_generated_examples_per_frame() {
  generated_examples_per_frame_ = 10;
  clear_has_generated_examples_per_frame();
}
inline ::google::protobuf::int32 TrackerDataLoaderParameter::generated_examples_per_frame() const {
  // @@protoc_insertion_point(field_get:caffe.TrackerDataLoaderParameter.generated_examples_per_frame)
  return generated_examples_per_frame_;
}
inline void TrackerDataLoaderParameter::set_generated_examples_per_frame(::google::protobuf::int32 value) {
  set_has_generated_examples_per_frame();
  generated_examples_per_frame_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrackerDataLoaderParameter.generated_examples_per_frame)
}

// optional int32 batch_size = 13 [default = 60];
inline bool TrackerDataLoaderParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TrackerDataLoaderParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TrackerDataLoaderParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TrackerDataLoaderParameter::clear_batch_size() {
  batch_size_ = 60;
  clear_has_batch_size();
}
inline ::google::protobuf::int32 TrackerDataLoaderParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.TrackerDataLoaderParameter.batch_size)
  return batch_size_;
}
inline void TrackerDataLoaderParameter::set_batch_size(::google::protobuf::int32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrackerDataLoaderParameter.batch_size)
}

// optional int32 resized_width = 14 [default = 227];
inline bool TrackerDataLoaderParameter::has_resized_width() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TrackerDataLoaderParameter::set_has_resized_width() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TrackerDataLoaderParameter::clear_has_resized_width() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TrackerDataLoaderParameter::clear_resized_width() {
  resized_width_ = 227;
  clear_has_resized_width();
}
inline ::google::protobuf::int32 TrackerDataLoaderParameter::resized_width() const {
  // @@protoc_insertion_point(field_get:caffe.TrackerDataLoaderParameter.resized_width)
  return resized_width_;
}
inline void TrackerDataLoaderParameter::set_resized_width(::google::protobuf::int32 value) {
  set_has_resized_width();
  resized_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrackerDataLoaderParameter.resized_width)
}

// optional int32 resized_height = 15 [default = 227];
inline bool TrackerDataLoaderParameter::has_resized_height() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TrackerDataLoaderParameter::set_has_resized_height() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TrackerDataLoaderParameter::clear_has_resized_height() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TrackerDataLoaderParameter::clear_resized_height() {
  resized_height_ = 227;
  clear_has_resized_height();
}
inline ::google::protobuf::int32 TrackerDataLoaderParameter::resized_height() const {
  // @@protoc_insertion_point(field_get:caffe.TrackerDataLoaderParameter.resized_height)
  return resized_height_;
}
inline void TrackerDataLoaderParameter::set_resized_height(::google::protobuf::int32 value) {
  set_has_resized_height();
  resized_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrackerDataLoaderParameter.resized_height)
}

// optional bool normalize = 16 [default = false];
inline bool TrackerDataLoaderParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TrackerDataLoaderParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TrackerDataLoaderParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TrackerDataLoaderParameter::clear_normalize() {
  normalize_ = false;
  clear_has_normalize();
}
inline bool TrackerDataLoaderParameter::normalize() const {
  // @@protoc_insertion_point(field_get:caffe.TrackerDataLoaderParameter.normalize)
  return normalize_;
}
inline void TrackerDataLoaderParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrackerDataLoaderParameter.normalize)
}

// repeated float mean_value = 17;
inline int TrackerDataLoaderParameter::mean_value_size() const {
  return mean_value_.size();
}
inline void TrackerDataLoaderParameter::clear_mean_value() {
  mean_value_.Clear();
}
inline float TrackerDataLoaderParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.TrackerDataLoaderParameter.mean_value)
  return mean_value_.Get(index);
}
inline void TrackerDataLoaderParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.TrackerDataLoaderParameter.mean_value)
}
inline void TrackerDataLoaderParameter::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.TrackerDataLoaderParameter.mean_value)
}
inline const ::google::protobuf::RepeatedField< float >&
TrackerDataLoaderParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.TrackerDataLoaderParameter.mean_value)
  return mean_value_;
}
inline ::google::protobuf::RepeatedField< float >*
TrackerDataLoaderParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.TrackerDataLoaderParameter.mean_value)
  return &mean_value_;
}

// -------------------------------------------------------------------

// FTrackerDataLoaderParameter

// repeated string image_list = 1;
inline int FTrackerDataLoaderParameter::image_list_size() const {
  return image_list_.size();
}
inline void FTrackerDataLoaderParameter::clear_image_list() {
  image_list_.Clear();
}
inline const ::std::string& FTrackerDataLoaderParameter::image_list(int index) const {
  // @@protoc_insertion_point(field_get:caffe.FTrackerDataLoaderParameter.image_list)
  return image_list_.Get(index);
}
inline ::std::string* FTrackerDataLoaderParameter::mutable_image_list(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.FTrackerDataLoaderParameter.image_list)
  return image_list_.Mutable(index);
}
inline void FTrackerDataLoaderParameter::set_image_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.FTrackerDataLoaderParameter.image_list)
  image_list_.Mutable(index)->assign(value);
}
inline void FTrackerDataLoaderParameter::set_image_list(int index, const char* value) {
  image_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.FTrackerDataLoaderParameter.image_list)
}
inline void FTrackerDataLoaderParameter::set_image_list(int index, const char* value, size_t size) {
  image_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.FTrackerDataLoaderParameter.image_list)
}
inline ::std::string* FTrackerDataLoaderParameter::add_image_list() {
  // @@protoc_insertion_point(field_add_mutable:caffe.FTrackerDataLoaderParameter.image_list)
  return image_list_.Add();
}
inline void FTrackerDataLoaderParameter::add_image_list(const ::std::string& value) {
  image_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.FTrackerDataLoaderParameter.image_list)
}
inline void FTrackerDataLoaderParameter::add_image_list(const char* value) {
  image_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.FTrackerDataLoaderParameter.image_list)
}
inline void FTrackerDataLoaderParameter::add_image_list(const char* value, size_t size) {
  image_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.FTrackerDataLoaderParameter.image_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FTrackerDataLoaderParameter::image_list() const {
  // @@protoc_insertion_point(field_list:caffe.FTrackerDataLoaderParameter.image_list)
  return image_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FTrackerDataLoaderParameter::mutable_image_list() {
  // @@protoc_insertion_point(field_mutable_list:caffe.FTrackerDataLoaderParameter.image_list)
  return &image_list_;
}

// repeated string image_folder = 2;
inline int FTrackerDataLoaderParameter::image_folder_size() const {
  return image_folder_.size();
}
inline void FTrackerDataLoaderParameter::clear_image_folder() {
  image_folder_.Clear();
}
inline const ::std::string& FTrackerDataLoaderParameter::image_folder(int index) const {
  // @@protoc_insertion_point(field_get:caffe.FTrackerDataLoaderParameter.image_folder)
  return image_folder_.Get(index);
}
inline ::std::string* FTrackerDataLoaderParameter::mutable_image_folder(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.FTrackerDataLoaderParameter.image_folder)
  return image_folder_.Mutable(index);
}
inline void FTrackerDataLoaderParameter::set_image_folder(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.FTrackerDataLoaderParameter.image_folder)
  image_folder_.Mutable(index)->assign(value);
}
inline void FTrackerDataLoaderParameter::set_image_folder(int index, const char* value) {
  image_folder_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.FTrackerDataLoaderParameter.image_folder)
}
inline void FTrackerDataLoaderParameter::set_image_folder(int index, const char* value, size_t size) {
  image_folder_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.FTrackerDataLoaderParameter.image_folder)
}
inline ::std::string* FTrackerDataLoaderParameter::add_image_folder() {
  // @@protoc_insertion_point(field_add_mutable:caffe.FTrackerDataLoaderParameter.image_folder)
  return image_folder_.Add();
}
inline void FTrackerDataLoaderParameter::add_image_folder(const ::std::string& value) {
  image_folder_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.FTrackerDataLoaderParameter.image_folder)
}
inline void FTrackerDataLoaderParameter::add_image_folder(const char* value) {
  image_folder_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.FTrackerDataLoaderParameter.image_folder)
}
inline void FTrackerDataLoaderParameter::add_image_folder(const char* value, size_t size) {
  image_folder_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.FTrackerDataLoaderParameter.image_folder)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FTrackerDataLoaderParameter::image_folder() const {
  // @@protoc_insertion_point(field_list:caffe.FTrackerDataLoaderParameter.image_folder)
  return image_folder_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FTrackerDataLoaderParameter::mutable_image_folder() {
  // @@protoc_insertion_point(field_mutable_list:caffe.FTrackerDataLoaderParameter.image_folder)
  return &image_folder_;
}

// repeated string vot_type_folder = 3;
inline int FTrackerDataLoaderParameter::vot_type_folder_size() const {
  return vot_type_folder_.size();
}
inline void FTrackerDataLoaderParameter::clear_vot_type_folder() {
  vot_type_folder_.Clear();
}
inline const ::std::string& FTrackerDataLoaderParameter::vot_type_folder(int index) const {
  // @@protoc_insertion_point(field_get:caffe.FTrackerDataLoaderParameter.vot_type_folder)
  return vot_type_folder_.Get(index);
}
inline ::std::string* FTrackerDataLoaderParameter::mutable_vot_type_folder(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.FTrackerDataLoaderParameter.vot_type_folder)
  return vot_type_folder_.Mutable(index);
}
inline void FTrackerDataLoaderParameter::set_vot_type_folder(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.FTrackerDataLoaderParameter.vot_type_folder)
  vot_type_folder_.Mutable(index)->assign(value);
}
inline void FTrackerDataLoaderParameter::set_vot_type_folder(int index, const char* value) {
  vot_type_folder_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.FTrackerDataLoaderParameter.vot_type_folder)
}
inline void FTrackerDataLoaderParameter::set_vot_type_folder(int index, const char* value, size_t size) {
  vot_type_folder_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.FTrackerDataLoaderParameter.vot_type_folder)
}
inline ::std::string* FTrackerDataLoaderParameter::add_vot_type_folder() {
  // @@protoc_insertion_point(field_add_mutable:caffe.FTrackerDataLoaderParameter.vot_type_folder)
  return vot_type_folder_.Add();
}
inline void FTrackerDataLoaderParameter::add_vot_type_folder(const ::std::string& value) {
  vot_type_folder_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.FTrackerDataLoaderParameter.vot_type_folder)
}
inline void FTrackerDataLoaderParameter::add_vot_type_folder(const char* value) {
  vot_type_folder_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.FTrackerDataLoaderParameter.vot_type_folder)
}
inline void FTrackerDataLoaderParameter::add_vot_type_folder(const char* value, size_t size) {
  vot_type_folder_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.FTrackerDataLoaderParameter.vot_type_folder)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FTrackerDataLoaderParameter::vot_type_folder() const {
  // @@protoc_insertion_point(field_list:caffe.FTrackerDataLoaderParameter.vot_type_folder)
  return vot_type_folder_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FTrackerDataLoaderParameter::mutable_vot_type_folder() {
  // @@protoc_insertion_point(field_mutable_list:caffe.FTrackerDataLoaderParameter.vot_type_folder)
  return &vot_type_folder_;
}

// repeated string alov_type_image_folder = 4;
inline int FTrackerDataLoaderParameter::alov_type_image_folder_size() const {
  return alov_type_image_folder_.size();
}
inline void FTrackerDataLoaderParameter::clear_alov_type_image_folder() {
  alov_type_image_folder_.Clear();
}
inline const ::std::string& FTrackerDataLoaderParameter::alov_type_image_folder(int index) const {
  // @@protoc_insertion_point(field_get:caffe.FTrackerDataLoaderParameter.alov_type_image_folder)
  return alov_type_image_folder_.Get(index);
}
inline ::std::string* FTrackerDataLoaderParameter::mutable_alov_type_image_folder(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.FTrackerDataLoaderParameter.alov_type_image_folder)
  return alov_type_image_folder_.Mutable(index);
}
inline void FTrackerDataLoaderParameter::set_alov_type_image_folder(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.FTrackerDataLoaderParameter.alov_type_image_folder)
  alov_type_image_folder_.Mutable(index)->assign(value);
}
inline void FTrackerDataLoaderParameter::set_alov_type_image_folder(int index, const char* value) {
  alov_type_image_folder_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.FTrackerDataLoaderParameter.alov_type_image_folder)
}
inline void FTrackerDataLoaderParameter::set_alov_type_image_folder(int index, const char* value, size_t size) {
  alov_type_image_folder_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.FTrackerDataLoaderParameter.alov_type_image_folder)
}
inline ::std::string* FTrackerDataLoaderParameter::add_alov_type_image_folder() {
  // @@protoc_insertion_point(field_add_mutable:caffe.FTrackerDataLoaderParameter.alov_type_image_folder)
  return alov_type_image_folder_.Add();
}
inline void FTrackerDataLoaderParameter::add_alov_type_image_folder(const ::std::string& value) {
  alov_type_image_folder_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.FTrackerDataLoaderParameter.alov_type_image_folder)
}
inline void FTrackerDataLoaderParameter::add_alov_type_image_folder(const char* value) {
  alov_type_image_folder_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.FTrackerDataLoaderParameter.alov_type_image_folder)
}
inline void FTrackerDataLoaderParameter::add_alov_type_image_folder(const char* value, size_t size) {
  alov_type_image_folder_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.FTrackerDataLoaderParameter.alov_type_image_folder)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FTrackerDataLoaderParameter::alov_type_image_folder() const {
  // @@protoc_insertion_point(field_list:caffe.FTrackerDataLoaderParameter.alov_type_image_folder)
  return alov_type_image_folder_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FTrackerDataLoaderParameter::mutable_alov_type_image_folder() {
  // @@protoc_insertion_point(field_mutable_list:caffe.FTrackerDataLoaderParameter.alov_type_image_folder)
  return &alov_type_image_folder_;
}

// repeated string alov_type_anno_folder = 5;
inline int FTrackerDataLoaderParameter::alov_type_anno_folder_size() const {
  return alov_type_anno_folder_.size();
}
inline void FTrackerDataLoaderParameter::clear_alov_type_anno_folder() {
  alov_type_anno_folder_.Clear();
}
inline const ::std::string& FTrackerDataLoaderParameter::alov_type_anno_folder(int index) const {
  // @@protoc_insertion_point(field_get:caffe.FTrackerDataLoaderParameter.alov_type_anno_folder)
  return alov_type_anno_folder_.Get(index);
}
inline ::std::string* FTrackerDataLoaderParameter::mutable_alov_type_anno_folder(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.FTrackerDataLoaderParameter.alov_type_anno_folder)
  return alov_type_anno_folder_.Mutable(index);
}
inline void FTrackerDataLoaderParameter::set_alov_type_anno_folder(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.FTrackerDataLoaderParameter.alov_type_anno_folder)
  alov_type_anno_folder_.Mutable(index)->assign(value);
}
inline void FTrackerDataLoaderParameter::set_alov_type_anno_folder(int index, const char* value) {
  alov_type_anno_folder_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.FTrackerDataLoaderParameter.alov_type_anno_folder)
}
inline void FTrackerDataLoaderParameter::set_alov_type_anno_folder(int index, const char* value, size_t size) {
  alov_type_anno_folder_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.FTrackerDataLoaderParameter.alov_type_anno_folder)
}
inline ::std::string* FTrackerDataLoaderParameter::add_alov_type_anno_folder() {
  // @@protoc_insertion_point(field_add_mutable:caffe.FTrackerDataLoaderParameter.alov_type_anno_folder)
  return alov_type_anno_folder_.Add();
}
inline void FTrackerDataLoaderParameter::add_alov_type_anno_folder(const ::std::string& value) {
  alov_type_anno_folder_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.FTrackerDataLoaderParameter.alov_type_anno_folder)
}
inline void FTrackerDataLoaderParameter::add_alov_type_anno_folder(const char* value) {
  alov_type_anno_folder_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.FTrackerDataLoaderParameter.alov_type_anno_folder)
}
inline void FTrackerDataLoaderParameter::add_alov_type_anno_folder(const char* value, size_t size) {
  alov_type_anno_folder_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.FTrackerDataLoaderParameter.alov_type_anno_folder)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FTrackerDataLoaderParameter::alov_type_anno_folder() const {
  // @@protoc_insertion_point(field_list:caffe.FTrackerDataLoaderParameter.alov_type_anno_folder)
  return alov_type_anno_folder_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FTrackerDataLoaderParameter::mutable_alov_type_anno_folder() {
  // @@protoc_insertion_point(field_mutable_list:caffe.FTrackerDataLoaderParameter.alov_type_anno_folder)
  return &alov_type_anno_folder_;
}

// optional float lambda_shift = 6 [default = 5];
inline bool FTrackerDataLoaderParameter::has_lambda_shift() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FTrackerDataLoaderParameter::set_has_lambda_shift() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FTrackerDataLoaderParameter::clear_has_lambda_shift() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FTrackerDataLoaderParameter::clear_lambda_shift() {
  lambda_shift_ = 5;
  clear_has_lambda_shift();
}
inline float FTrackerDataLoaderParameter::lambda_shift() const {
  // @@protoc_insertion_point(field_get:caffe.FTrackerDataLoaderParameter.lambda_shift)
  return lambda_shift_;
}
inline void FTrackerDataLoaderParameter::set_lambda_shift(float value) {
  set_has_lambda_shift();
  lambda_shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.FTrackerDataLoaderParameter.lambda_shift)
}

// optional float lambda_scale = 7 [default = 5];
inline bool FTrackerDataLoaderParameter::has_lambda_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FTrackerDataLoaderParameter::set_has_lambda_scale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FTrackerDataLoaderParameter::clear_has_lambda_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FTrackerDataLoaderParameter::clear_lambda_scale() {
  lambda_scale_ = 5;
  clear_has_lambda_scale();
}
inline float FTrackerDataLoaderParameter::lambda_scale() const {
  // @@protoc_insertion_point(field_get:caffe.FTrackerDataLoaderParameter.lambda_scale)
  return lambda_scale_;
}
inline void FTrackerDataLoaderParameter::set_lambda_scale(float value) {
  set_has_lambda_scale();
  lambda_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.FTrackerDataLoaderParameter.lambda_scale)
}

// optional float lambda_min_scale = 8 [default = -0.4];
inline bool FTrackerDataLoaderParameter::has_lambda_min_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FTrackerDataLoaderParameter::set_has_lambda_min_scale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FTrackerDataLoaderParameter::clear_has_lambda_min_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FTrackerDataLoaderParameter::clear_lambda_min_scale() {
  lambda_min_scale_ = -0.4f;
  clear_has_lambda_min_scale();
}
inline float FTrackerDataLoaderParameter::lambda_min_scale() const {
  // @@protoc_insertion_point(field_get:caffe.FTrackerDataLoaderParameter.lambda_min_scale)
  return lambda_min_scale_;
}
inline void FTrackerDataLoaderParameter::set_lambda_min_scale(float value) {
  set_has_lambda_min_scale();
  lambda_min_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.FTrackerDataLoaderParameter.lambda_min_scale)
}

// optional float lambda_max_scale = 9 [default = 0.4];
inline bool FTrackerDataLoaderParameter::has_lambda_max_scale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FTrackerDataLoaderParameter::set_has_lambda_max_scale() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FTrackerDataLoaderParameter::clear_has_lambda_max_scale() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FTrackerDataLoaderParameter::clear_lambda_max_scale() {
  lambda_max_scale_ = 0.4f;
  clear_has_lambda_max_scale();
}
inline float FTrackerDataLoaderParameter::lambda_max_scale() const {
  // @@protoc_insertion_point(field_get:caffe.FTrackerDataLoaderParameter.lambda_max_scale)
  return lambda_max_scale_;
}
inline void FTrackerDataLoaderParameter::set_lambda_max_scale(float value) {
  set_has_lambda_max_scale();
  lambda_max_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.FTrackerDataLoaderParameter.lambda_max_scale)
}

// optional int32 fetch_iters = 10 [default = 3];
inline bool FTrackerDataLoaderParameter::has_fetch_iters() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FTrackerDataLoaderParameter::set_has_fetch_iters() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FTrackerDataLoaderParameter::clear_has_fetch_iters() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FTrackerDataLoaderParameter::clear_fetch_iters() {
  fetch_iters_ = 3;
  clear_has_fetch_iters();
}
inline ::google::protobuf::int32 FTrackerDataLoaderParameter::fetch_iters() const {
  // @@protoc_insertion_point(field_get:caffe.FTrackerDataLoaderParameter.fetch_iters)
  return fetch_iters_;
}
inline void FTrackerDataLoaderParameter::set_fetch_iters(::google::protobuf::int32 value) {
  set_has_fetch_iters();
  fetch_iters_ = value;
  // @@protoc_insertion_point(field_set:caffe.FTrackerDataLoaderParameter.fetch_iters)
}

// optional int32 generated_examples_per_image = 11 [default = 10];
inline bool FTrackerDataLoaderParameter::has_generated_examples_per_image() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FTrackerDataLoaderParameter::set_has_generated_examples_per_image() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FTrackerDataLoaderParameter::clear_has_generated_examples_per_image() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FTrackerDataLoaderParameter::clear_generated_examples_per_image() {
  generated_examples_per_image_ = 10;
  clear_has_generated_examples_per_image();
}
inline ::google::protobuf::int32 FTrackerDataLoaderParameter::generated_examples_per_image() const {
  // @@protoc_insertion_point(field_get:caffe.FTrackerDataLoaderParameter.generated_examples_per_image)
  return generated_examples_per_image_;
}
inline void FTrackerDataLoaderParameter::set_generated_examples_per_image(::google::protobuf::int32 value) {
  set_has_generated_examples_per_image();
  generated_examples_per_image_ = value;
  // @@protoc_insertion_point(field_set:caffe.FTrackerDataLoaderParameter.generated_examples_per_image)
}

// optional int32 generated_examples_per_frame = 12 [default = 10];
inline bool FTrackerDataLoaderParameter::has_generated_examples_per_frame() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FTrackerDataLoaderParameter::set_has_generated_examples_per_frame() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FTrackerDataLoaderParameter::clear_has_generated_examples_per_frame() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FTrackerDataLoaderParameter::clear_generated_examples_per_frame() {
  generated_examples_per_frame_ = 10;
  clear_has_generated_examples_per_frame();
}
inline ::google::protobuf::int32 FTrackerDataLoaderParameter::generated_examples_per_frame() const {
  // @@protoc_insertion_point(field_get:caffe.FTrackerDataLoaderParameter.generated_examples_per_frame)
  return generated_examples_per_frame_;
}
inline void FTrackerDataLoaderParameter::set_generated_examples_per_frame(::google::protobuf::int32 value) {
  set_has_generated_examples_per_frame();
  generated_examples_per_frame_ = value;
  // @@protoc_insertion_point(field_set:caffe.FTrackerDataLoaderParameter.generated_examples_per_frame)
}

// optional int32 batch_size = 13 [default = 60];
inline bool FTrackerDataLoaderParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FTrackerDataLoaderParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FTrackerDataLoaderParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FTrackerDataLoaderParameter::clear_batch_size() {
  batch_size_ = 60;
  clear_has_batch_size();
}
inline ::google::protobuf::int32 FTrackerDataLoaderParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.FTrackerDataLoaderParameter.batch_size)
  return batch_size_;
}
inline void FTrackerDataLoaderParameter::set_batch_size(::google::protobuf::int32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.FTrackerDataLoaderParameter.batch_size)
}

// optional int32 resized_width = 14 [default = 227];
inline bool FTrackerDataLoaderParameter::has_resized_width() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FTrackerDataLoaderParameter::set_has_resized_width() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FTrackerDataLoaderParameter::clear_has_resized_width() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FTrackerDataLoaderParameter::clear_resized_width() {
  resized_width_ = 227;
  clear_has_resized_width();
}
inline ::google::protobuf::int32 FTrackerDataLoaderParameter::resized_width() const {
  // @@protoc_insertion_point(field_get:caffe.FTrackerDataLoaderParameter.resized_width)
  return resized_width_;
}
inline void FTrackerDataLoaderParameter::set_resized_width(::google::protobuf::int32 value) {
  set_has_resized_width();
  resized_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.FTrackerDataLoaderParameter.resized_width)
}

// optional int32 resized_height = 15 [default = 227];
inline bool FTrackerDataLoaderParameter::has_resized_height() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FTrackerDataLoaderParameter::set_has_resized_height() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FTrackerDataLoaderParameter::clear_has_resized_height() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FTrackerDataLoaderParameter::clear_resized_height() {
  resized_height_ = 227;
  clear_has_resized_height();
}
inline ::google::protobuf::int32 FTrackerDataLoaderParameter::resized_height() const {
  // @@protoc_insertion_point(field_get:caffe.FTrackerDataLoaderParameter.resized_height)
  return resized_height_;
}
inline void FTrackerDataLoaderParameter::set_resized_height(::google::protobuf::int32 value) {
  set_has_resized_height();
  resized_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.FTrackerDataLoaderParameter.resized_height)
}

// optional string net_prototxt = 16;
inline bool FTrackerDataLoaderParameter::has_net_prototxt() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FTrackerDataLoaderParameter::set_has_net_prototxt() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FTrackerDataLoaderParameter::clear_has_net_prototxt() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FTrackerDataLoaderParameter::clear_net_prototxt() {
  net_prototxt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net_prototxt();
}
inline const ::std::string& FTrackerDataLoaderParameter::net_prototxt() const {
  // @@protoc_insertion_point(field_get:caffe.FTrackerDataLoaderParameter.net_prototxt)
  return net_prototxt_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FTrackerDataLoaderParameter::set_net_prototxt(const ::std::string& value) {
  set_has_net_prototxt();
  net_prototxt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.FTrackerDataLoaderParameter.net_prototxt)
}
inline void FTrackerDataLoaderParameter::set_net_prototxt(const char* value) {
  set_has_net_prototxt();
  net_prototxt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.FTrackerDataLoaderParameter.net_prototxt)
}
inline void FTrackerDataLoaderParameter::set_net_prototxt(const char* value, size_t size) {
  set_has_net_prototxt();
  net_prototxt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.FTrackerDataLoaderParameter.net_prototxt)
}
inline ::std::string* FTrackerDataLoaderParameter::mutable_net_prototxt() {
  set_has_net_prototxt();
  // @@protoc_insertion_point(field_mutable:caffe.FTrackerDataLoaderParameter.net_prototxt)
  return net_prototxt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FTrackerDataLoaderParameter::release_net_prototxt() {
  // @@protoc_insertion_point(field_release:caffe.FTrackerDataLoaderParameter.net_prototxt)
  clear_has_net_prototxt();
  return net_prototxt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FTrackerDataLoaderParameter::set_allocated_net_prototxt(::std::string* net_prototxt) {
  if (net_prototxt != NULL) {
    set_has_net_prototxt();
  } else {
    clear_has_net_prototxt();
  }
  net_prototxt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net_prototxt);
  // @@protoc_insertion_point(field_set_allocated:caffe.FTrackerDataLoaderParameter.net_prototxt)
}

// optional string net_model = 17;
inline bool FTrackerDataLoaderParameter::has_net_model() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FTrackerDataLoaderParameter::set_has_net_model() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FTrackerDataLoaderParameter::clear_has_net_model() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FTrackerDataLoaderParameter::clear_net_model() {
  net_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net_model();
}
inline const ::std::string& FTrackerDataLoaderParameter::net_model() const {
  // @@protoc_insertion_point(field_get:caffe.FTrackerDataLoaderParameter.net_model)
  return net_model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FTrackerDataLoaderParameter::set_net_model(const ::std::string& value) {
  set_has_net_model();
  net_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.FTrackerDataLoaderParameter.net_model)
}
inline void FTrackerDataLoaderParameter::set_net_model(const char* value) {
  set_has_net_model();
  net_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.FTrackerDataLoaderParameter.net_model)
}
inline void FTrackerDataLoaderParameter::set_net_model(const char* value, size_t size) {
  set_has_net_model();
  net_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.FTrackerDataLoaderParameter.net_model)
}
inline ::std::string* FTrackerDataLoaderParameter::mutable_net_model() {
  set_has_net_model();
  // @@protoc_insertion_point(field_mutable:caffe.FTrackerDataLoaderParameter.net_model)
  return net_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FTrackerDataLoaderParameter::release_net_model() {
  // @@protoc_insertion_point(field_release:caffe.FTrackerDataLoaderParameter.net_model)
  clear_has_net_model();
  return net_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FTrackerDataLoaderParameter::set_allocated_net_model(::std::string* net_model) {
  if (net_model != NULL) {
    set_has_net_model();
  } else {
    clear_has_net_model();
  }
  net_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net_model);
  // @@protoc_insertion_point(field_set_allocated:caffe.FTrackerDataLoaderParameter.net_model)
}

// optional int32 gpu_id = 18 [default = 0];
inline bool FTrackerDataLoaderParameter::has_gpu_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FTrackerDataLoaderParameter::set_has_gpu_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FTrackerDataLoaderParameter::clear_has_gpu_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FTrackerDataLoaderParameter::clear_gpu_id() {
  gpu_id_ = 0;
  clear_has_gpu_id();
}
inline ::google::protobuf::int32 FTrackerDataLoaderParameter::gpu_id() const {
  // @@protoc_insertion_point(field_get:caffe.FTrackerDataLoaderParameter.gpu_id)
  return gpu_id_;
}
inline void FTrackerDataLoaderParameter::set_gpu_id(::google::protobuf::int32 value) {
  set_has_gpu_id();
  gpu_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.FTrackerDataLoaderParameter.gpu_id)
}

// optional string feature_name = 19;
inline bool FTrackerDataLoaderParameter::has_feature_name() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void FTrackerDataLoaderParameter::set_has_feature_name() {
  _has_bits_[0] |= 0x00040000u;
}
inline void FTrackerDataLoaderParameter::clear_has_feature_name() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void FTrackerDataLoaderParameter::clear_feature_name() {
  feature_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_feature_name();
}
inline const ::std::string& FTrackerDataLoaderParameter::feature_name() const {
  // @@protoc_insertion_point(field_get:caffe.FTrackerDataLoaderParameter.feature_name)
  return feature_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FTrackerDataLoaderParameter::set_feature_name(const ::std::string& value) {
  set_has_feature_name();
  feature_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.FTrackerDataLoaderParameter.feature_name)
}
inline void FTrackerDataLoaderParameter::set_feature_name(const char* value) {
  set_has_feature_name();
  feature_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.FTrackerDataLoaderParameter.feature_name)
}
inline void FTrackerDataLoaderParameter::set_feature_name(const char* value, size_t size) {
  set_has_feature_name();
  feature_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.FTrackerDataLoaderParameter.feature_name)
}
inline ::std::string* FTrackerDataLoaderParameter::mutable_feature_name() {
  set_has_feature_name();
  // @@protoc_insertion_point(field_mutable:caffe.FTrackerDataLoaderParameter.feature_name)
  return feature_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FTrackerDataLoaderParameter::release_feature_name() {
  // @@protoc_insertion_point(field_release:caffe.FTrackerDataLoaderParameter.feature_name)
  clear_has_feature_name();
  return feature_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FTrackerDataLoaderParameter::set_allocated_feature_name(::std::string* feature_name) {
  if (feature_name != NULL) {
    set_has_feature_name();
  } else {
    clear_has_feature_name();
  }
  feature_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feature_name);
  // @@protoc_insertion_point(field_set_allocated:caffe.FTrackerDataLoaderParameter.feature_name)
}

// optional int32 fchannels = 20 [default = 256];
inline bool FTrackerDataLoaderParameter::has_fchannels() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void FTrackerDataLoaderParameter::set_has_fchannels() {
  _has_bits_[0] |= 0x00080000u;
}
inline void FTrackerDataLoaderParameter::clear_has_fchannels() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void FTrackerDataLoaderParameter::clear_fchannels() {
  fchannels_ = 256;
  clear_has_fchannels();
}
inline ::google::protobuf::int32 FTrackerDataLoaderParameter::fchannels() const {
  // @@protoc_insertion_point(field_get:caffe.FTrackerDataLoaderParameter.fchannels)
  return fchannels_;
}
inline void FTrackerDataLoaderParameter::set_fchannels(::google::protobuf::int32 value) {
  set_has_fchannels();
  fchannels_ = value;
  // @@protoc_insertion_point(field_set:caffe.FTrackerDataLoaderParameter.fchannels)
}

// -------------------------------------------------------------------

// FTrackerDataParameter

// optional .caffe.FTrackerDataLoaderParameter load_param = 1;
inline bool FTrackerDataParameter::has_load_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FTrackerDataParameter::set_has_load_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FTrackerDataParameter::clear_has_load_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FTrackerDataParameter::clear_load_param() {
  if (load_param_ != NULL) load_param_->::caffe::FTrackerDataLoaderParameter::Clear();
  clear_has_load_param();
}
inline const ::caffe::FTrackerDataLoaderParameter& FTrackerDataParameter::load_param() const {
  // @@protoc_insertion_point(field_get:caffe.FTrackerDataParameter.load_param)
  return load_param_ != NULL ? *load_param_ : *default_instance_->load_param_;
}
inline ::caffe::FTrackerDataLoaderParameter* FTrackerDataParameter::mutable_load_param() {
  set_has_load_param();
  if (load_param_ == NULL) {
    load_param_ = new ::caffe::FTrackerDataLoaderParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.FTrackerDataParameter.load_param)
  return load_param_;
}
inline ::caffe::FTrackerDataLoaderParameter* FTrackerDataParameter::release_load_param() {
  // @@protoc_insertion_point(field_release:caffe.FTrackerDataParameter.load_param)
  clear_has_load_param();
  ::caffe::FTrackerDataLoaderParameter* temp = load_param_;
  load_param_ = NULL;
  return temp;
}
inline void FTrackerDataParameter::set_allocated_load_param(::caffe::FTrackerDataLoaderParameter* load_param) {
  delete load_param_;
  load_param_ = load_param;
  if (load_param) {
    set_has_load_param();
  } else {
    clear_has_load_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.FTrackerDataParameter.load_param)
}

// -------------------------------------------------------------------

// TrackerDataParameter

// optional .caffe.TrackerDataLoaderParameter load_param = 1;
inline bool TrackerDataParameter::has_load_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackerDataParameter::set_has_load_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackerDataParameter::clear_has_load_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackerDataParameter::clear_load_param() {
  if (load_param_ != NULL) load_param_->::caffe::TrackerDataLoaderParameter::Clear();
  clear_has_load_param();
}
inline const ::caffe::TrackerDataLoaderParameter& TrackerDataParameter::load_param() const {
  // @@protoc_insertion_point(field_get:caffe.TrackerDataParameter.load_param)
  return load_param_ != NULL ? *load_param_ : *default_instance_->load_param_;
}
inline ::caffe::TrackerDataLoaderParameter* TrackerDataParameter::mutable_load_param() {
  set_has_load_param();
  if (load_param_ == NULL) {
    load_param_ = new ::caffe::TrackerDataLoaderParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.TrackerDataParameter.load_param)
  return load_param_;
}
inline ::caffe::TrackerDataLoaderParameter* TrackerDataParameter::release_load_param() {
  // @@protoc_insertion_point(field_release:caffe.TrackerDataParameter.load_param)
  clear_has_load_param();
  ::caffe::TrackerDataLoaderParameter* temp = load_param_;
  load_param_ = NULL;
  return temp;
}
inline void TrackerDataParameter::set_allocated_load_param(::caffe::TrackerDataLoaderParameter* load_param) {
  delete load_param_;
  load_param_ = load_param;
  if (load_param) {
    set_has_load_param();
  } else {
    clear_has_load_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.TrackerDataParameter.load_param)
}

// -------------------------------------------------------------------

// TrackerMcLossParameter

// optional float score_scale = 1 [default = 5];
inline bool TrackerMcLossParameter::has_score_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackerMcLossParameter::set_has_score_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackerMcLossParameter::clear_has_score_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackerMcLossParameter::clear_score_scale() {
  score_scale_ = 5;
  clear_has_score_scale();
}
inline float TrackerMcLossParameter::score_scale() const {
  // @@protoc_insertion_point(field_get:caffe.TrackerMcLossParameter.score_scale)
  return score_scale_;
}
inline void TrackerMcLossParameter::set_score_scale(float value) {
  set_has_score_scale();
  score_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrackerMcLossParameter.score_scale)
}

// optional float loc_scale = 2 [default = 1];
inline bool TrackerMcLossParameter::has_loc_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackerMcLossParameter::set_has_loc_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackerMcLossParameter::clear_has_loc_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackerMcLossParameter::clear_loc_scale() {
  loc_scale_ = 1;
  clear_has_loc_scale();
}
inline float TrackerMcLossParameter::loc_scale() const {
  // @@protoc_insertion_point(field_get:caffe.TrackerMcLossParameter.loc_scale)
  return loc_scale_;
}
inline void TrackerMcLossParameter::set_loc_scale(float value) {
  set_has_loc_scale();
  loc_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrackerMcLossParameter.loc_scale)
}

// optional float prior_width = 3 [default = 0.5];
inline bool TrackerMcLossParameter::has_prior_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackerMcLossParameter::set_has_prior_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrackerMcLossParameter::clear_has_prior_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrackerMcLossParameter::clear_prior_width() {
  prior_width_ = 0.5f;
  clear_has_prior_width();
}
inline float TrackerMcLossParameter::prior_width() const {
  // @@protoc_insertion_point(field_get:caffe.TrackerMcLossParameter.prior_width)
  return prior_width_;
}
inline void TrackerMcLossParameter::set_prior_width(float value) {
  set_has_prior_width();
  prior_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrackerMcLossParameter.prior_width)
}

// optional float prior_height = 4 [default = 0.5];
inline bool TrackerMcLossParameter::has_prior_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrackerMcLossParameter::set_has_prior_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrackerMcLossParameter::clear_has_prior_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrackerMcLossParameter::clear_prior_height() {
  prior_height_ = 0.5f;
  clear_has_prior_height();
}
inline float TrackerMcLossParameter::prior_height() const {
  // @@protoc_insertion_point(field_get:caffe.TrackerMcLossParameter.prior_height)
  return prior_height_;
}
inline void TrackerMcLossParameter::set_prior_height(float value) {
  set_has_prior_height();
  prior_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrackerMcLossParameter.prior_height)
}

// optional float overlap_threshold = 5 [default = 0.5];
inline bool TrackerMcLossParameter::has_overlap_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrackerMcLossParameter::set_has_overlap_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrackerMcLossParameter::clear_has_overlap_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrackerMcLossParameter::clear_overlap_threshold() {
  overlap_threshold_ = 0.5f;
  clear_has_overlap_threshold();
}
inline float TrackerMcLossParameter::overlap_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.TrackerMcLossParameter.overlap_threshold)
  return overlap_threshold_;
}
inline void TrackerMcLossParameter::set_overlap_threshold(float value) {
  set_has_overlap_threshold();
  overlap_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrackerMcLossParameter.overlap_threshold)
}

// -------------------------------------------------------------------

// TrackerMcOutParameter

// optional float prior_width = 1 [default = 0.5];
inline bool TrackerMcOutParameter::has_prior_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackerMcOutParameter::set_has_prior_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackerMcOutParameter::clear_has_prior_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackerMcOutParameter::clear_prior_width() {
  prior_width_ = 0.5f;
  clear_has_prior_width();
}
inline float TrackerMcOutParameter::prior_width() const {
  // @@protoc_insertion_point(field_get:caffe.TrackerMcOutParameter.prior_width)
  return prior_width_;
}
inline void TrackerMcOutParameter::set_prior_width(float value) {
  set_has_prior_width();
  prior_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrackerMcOutParameter.prior_width)
}

// optional float prior_height = 2 [default = 0.5];
inline bool TrackerMcOutParameter::has_prior_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackerMcOutParameter::set_has_prior_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackerMcOutParameter::clear_has_prior_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackerMcOutParameter::clear_prior_height() {
  prior_height_ = 0.5f;
  clear_has_prior_height();
}
inline float TrackerMcOutParameter::prior_height() const {
  // @@protoc_insertion_point(field_get:caffe.TrackerMcOutParameter.prior_height)
  return prior_height_;
}
inline void TrackerMcOutParameter::set_prior_height(float value) {
  set_has_prior_height();
  prior_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.TrackerMcOutParameter.prior_height)
}

// -------------------------------------------------------------------

// TrueRoiParameter

// optional string type = 1 [default = "mask"];
inline bool TrueRoiParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrueRoiParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrueRoiParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrueRoiParameter::clear_type() {
  type_.ClearToDefaultNoArena(_default_type_);
  clear_has_type();
}
inline const ::std::string& TrueRoiParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.TrueRoiParameter.type)
  return type_.GetNoArena(_default_type_);
}
inline void TrueRoiParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(_default_type_, value);
  // @@protoc_insertion_point(field_set:caffe.TrueRoiParameter.type)
}
inline void TrueRoiParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(_default_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.TrueRoiParameter.type)
}
inline void TrueRoiParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(_default_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.TrueRoiParameter.type)
}
inline ::std::string* TrueRoiParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.TrueRoiParameter.type)
  return type_.MutableNoArena(_default_type_);
}
inline ::std::string* TrueRoiParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.TrueRoiParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(_default_type_);
}
inline void TrueRoiParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(_default_type_, type);
  // @@protoc_insertion_point(field_set_allocated:caffe.TrueRoiParameter.type)
}

// -------------------------------------------------------------------

// LossParameter

// optional int32 ignore_label = 1;
inline bool LossParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LossParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LossParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LossParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
inline ::google::protobuf::int32 LossParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.ignore_label)
  return ignore_label_;
}
inline void LossParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.ignore_label)
}

// optional .caffe.LossParameter.NormalizationMode normalization = 3 [default = VALID];
inline bool LossParameter::has_normalization() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LossParameter::set_has_normalization() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LossParameter::clear_has_normalization() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LossParameter::clear_normalization() {
  normalization_ = 1;
  clear_has_normalization();
}
inline ::caffe::LossParameter_NormalizationMode LossParameter::normalization() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.normalization)
  return static_cast< ::caffe::LossParameter_NormalizationMode >(normalization_);
}
inline void LossParameter::set_normalization(::caffe::LossParameter_NormalizationMode value) {
  assert(::caffe::LossParameter_NormalizationMode_IsValid(value));
  set_has_normalization();
  normalization_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.normalization)
}

// optional bool normalize = 2;
inline bool LossParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LossParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LossParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LossParameter::clear_normalize() {
  normalize_ = false;
  clear_has_normalize();
}
inline bool LossParameter::normalize() const {
  // @@protoc_insertion_point(field_get:caffe.LossParameter.normalize)
  return normalize_;
}
inline void LossParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.LossParameter.normalize)
}

// -------------------------------------------------------------------

// AccuracyParameter

// optional uint32 top_k = 1 [default = 1];
inline bool AccuracyParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccuracyParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccuracyParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccuracyParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
inline ::google::protobuf::uint32 AccuracyParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.top_k)
  return top_k_;
}
inline void AccuracyParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.top_k)
}

// optional int32 axis = 2 [default = 1];
inline bool AccuracyParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccuracyParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccuracyParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccuracyParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 AccuracyParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.axis)
  return axis_;
}
inline void AccuracyParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.axis)
}

// optional int32 ignore_label = 3;
inline bool AccuracyParameter::has_ignore_label() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccuracyParameter::set_has_ignore_label() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccuracyParameter::clear_has_ignore_label() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccuracyParameter::clear_ignore_label() {
  ignore_label_ = 0;
  clear_has_ignore_label();
}
inline ::google::protobuf::int32 AccuracyParameter::ignore_label() const {
  // @@protoc_insertion_point(field_get:caffe.AccuracyParameter.ignore_label)
  return ignore_label_;
}
inline void AccuracyParameter::set_ignore_label(::google::protobuf::int32 value) {
  set_has_ignore_label();
  ignore_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.AccuracyParameter.ignore_label)
}

// -------------------------------------------------------------------

// AnnotatedDataParameter

// repeated .caffe.BatchSampler batch_sampler = 1;
inline int AnnotatedDataParameter::batch_sampler_size() const {
  return batch_sampler_.size();
}
inline void AnnotatedDataParameter::clear_batch_sampler() {
  batch_sampler_.Clear();
}
inline const ::caffe::BatchSampler& AnnotatedDataParameter::batch_sampler(int index) const {
  // @@protoc_insertion_point(field_get:caffe.AnnotatedDataParameter.batch_sampler)
  return batch_sampler_.Get(index);
}
inline ::caffe::BatchSampler* AnnotatedDataParameter::mutable_batch_sampler(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.AnnotatedDataParameter.batch_sampler)
  return batch_sampler_.Mutable(index);
}
inline ::caffe::BatchSampler* AnnotatedDataParameter::add_batch_sampler() {
  // @@protoc_insertion_point(field_add:caffe.AnnotatedDataParameter.batch_sampler)
  return batch_sampler_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler >*
AnnotatedDataParameter::mutable_batch_sampler() {
  // @@protoc_insertion_point(field_mutable_list:caffe.AnnotatedDataParameter.batch_sampler)
  return &batch_sampler_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler >&
AnnotatedDataParameter::batch_sampler() const {
  // @@protoc_insertion_point(field_list:caffe.AnnotatedDataParameter.batch_sampler)
  return batch_sampler_;
}

// optional string label_map_file = 2;
inline bool AnnotatedDataParameter::has_label_map_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnnotatedDataParameter::set_has_label_map_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnnotatedDataParameter::clear_has_label_map_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnnotatedDataParameter::clear_label_map_file() {
  label_map_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label_map_file();
}
inline const ::std::string& AnnotatedDataParameter::label_map_file() const {
  // @@protoc_insertion_point(field_get:caffe.AnnotatedDataParameter.label_map_file)
  return label_map_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnotatedDataParameter::set_label_map_file(const ::std::string& value) {
  set_has_label_map_file();
  label_map_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.AnnotatedDataParameter.label_map_file)
}
inline void AnnotatedDataParameter::set_label_map_file(const char* value) {
  set_has_label_map_file();
  label_map_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.AnnotatedDataParameter.label_map_file)
}
inline void AnnotatedDataParameter::set_label_map_file(const char* value, size_t size) {
  set_has_label_map_file();
  label_map_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.AnnotatedDataParameter.label_map_file)
}
inline ::std::string* AnnotatedDataParameter::mutable_label_map_file() {
  set_has_label_map_file();
  // @@protoc_insertion_point(field_mutable:caffe.AnnotatedDataParameter.label_map_file)
  return label_map_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnnotatedDataParameter::release_label_map_file() {
  // @@protoc_insertion_point(field_release:caffe.AnnotatedDataParameter.label_map_file)
  clear_has_label_map_file();
  return label_map_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnnotatedDataParameter::set_allocated_label_map_file(::std::string* label_map_file) {
  if (label_map_file != NULL) {
    set_has_label_map_file();
  } else {
    clear_has_label_map_file();
  }
  label_map_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_map_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.AnnotatedDataParameter.label_map_file)
}

// -------------------------------------------------------------------

// ArgMaxParameter

// optional bool out_max_val = 1 [default = false];
inline bool ArgMaxParameter::has_out_max_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArgMaxParameter::set_has_out_max_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArgMaxParameter::clear_has_out_max_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArgMaxParameter::clear_out_max_val() {
  out_max_val_ = false;
  clear_has_out_max_val();
}
inline bool ArgMaxParameter::out_max_val() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.out_max_val)
  return out_max_val_;
}
inline void ArgMaxParameter::set_out_max_val(bool value) {
  set_has_out_max_val();
  out_max_val_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.out_max_val)
}

// optional uint32 top_k = 2 [default = 1];
inline bool ArgMaxParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArgMaxParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArgMaxParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArgMaxParameter::clear_top_k() {
  top_k_ = 1u;
  clear_has_top_k();
}
inline ::google::protobuf::uint32 ArgMaxParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.top_k)
  return top_k_;
}
inline void ArgMaxParameter::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.top_k)
}

// optional int32 axis = 3;
inline bool ArgMaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArgMaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArgMaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArgMaxParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ArgMaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ArgMaxParameter.axis)
  return axis_;
}
inline void ArgMaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ArgMaxParameter.axis)
}

// -------------------------------------------------------------------

// ConcatParameter

// optional int32 axis = 2 [default = 1];
inline bool ConcatParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConcatParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConcatParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConcatParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ConcatParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatParameter.axis)
  return axis_;
}
inline void ConcatParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatParameter.axis)
}

// optional uint32 concat_dim = 1 [default = 1];
inline bool ConcatParameter::has_concat_dim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConcatParameter::set_has_concat_dim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConcatParameter::clear_has_concat_dim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConcatParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
inline ::google::protobuf::uint32 ConcatParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:caffe.ConcatParameter.concat_dim)
  return concat_dim_;
}
inline void ConcatParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConcatParameter.concat_dim)
}

// -------------------------------------------------------------------

// BatchNormParameter

// optional bool use_global_stats = 1;
inline bool BatchNormParameter::has_use_global_stats() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchNormParameter::set_has_use_global_stats() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchNormParameter::clear_has_use_global_stats() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchNormParameter::clear_use_global_stats() {
  use_global_stats_ = false;
  clear_has_use_global_stats();
}
inline bool BatchNormParameter::use_global_stats() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.use_global_stats)
  return use_global_stats_;
}
inline void BatchNormParameter::set_use_global_stats(bool value) {
  set_has_use_global_stats();
  use_global_stats_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.use_global_stats)
}

// optional float moving_average_fraction = 2 [default = 0.999];
inline bool BatchNormParameter::has_moving_average_fraction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchNormParameter::set_has_moving_average_fraction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchNormParameter::clear_has_moving_average_fraction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchNormParameter::clear_moving_average_fraction() {
  moving_average_fraction_ = 0.999f;
  clear_has_moving_average_fraction();
}
inline float BatchNormParameter::moving_average_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.moving_average_fraction)
  return moving_average_fraction_;
}
inline void BatchNormParameter::set_moving_average_fraction(float value) {
  set_has_moving_average_fraction();
  moving_average_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.moving_average_fraction)
}

// optional float eps = 3 [default = 1e-05];
inline bool BatchNormParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatchNormParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BatchNormParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BatchNormParameter::clear_eps() {
  eps_ = 1e-05f;
  clear_has_eps();
}
inline float BatchNormParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.BatchNormParameter.eps)
  return eps_;
}
inline void BatchNormParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.BatchNormParameter.eps)
}

// -------------------------------------------------------------------

// BiasParameter

// optional int32 axis = 1 [default = 1];
inline bool BiasParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BiasParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BiasParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BiasParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 BiasParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.axis)
  return axis_;
}
inline void BiasParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.BiasParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
inline bool BiasParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BiasParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BiasParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BiasParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 BiasParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.num_axes)
  return num_axes_;
}
inline void BiasParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.BiasParameter.num_axes)
}

// optional .caffe.FillerParameter filler = 3;
inline bool BiasParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BiasParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BiasParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BiasParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
inline const ::caffe::FillerParameter& BiasParameter::filler() const {
  // @@protoc_insertion_point(field_get:caffe.BiasParameter.filler)
  return filler_ != NULL ? *filler_ : *default_instance_->filler_;
}
inline ::caffe::FillerParameter* BiasParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.BiasParameter.filler)
  return filler_;
}
inline ::caffe::FillerParameter* BiasParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.BiasParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline void BiasParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.BiasParameter.filler)
}

// -------------------------------------------------------------------

// ContrastiveLossParameter

// optional float margin = 1 [default = 1];
inline bool ContrastiveLossParameter::has_margin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContrastiveLossParameter::set_has_margin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContrastiveLossParameter::clear_has_margin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContrastiveLossParameter::clear_margin() {
  margin_ = 1;
  clear_has_margin();
}
inline float ContrastiveLossParameter::margin() const {
  // @@protoc_insertion_point(field_get:caffe.ContrastiveLossParameter.margin)
  return margin_;
}
inline void ContrastiveLossParameter::set_margin(float value) {
  set_has_margin();
  margin_ = value;
  // @@protoc_insertion_point(field_set:caffe.ContrastiveLossParameter.margin)
}

// optional bool legacy_version = 2 [default = false];
inline bool ContrastiveLossParameter::has_legacy_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContrastiveLossParameter::set_has_legacy_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContrastiveLossParameter::clear_has_legacy_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContrastiveLossParameter::clear_legacy_version() {
  legacy_version_ = false;
  clear_has_legacy_version();
}
inline bool ContrastiveLossParameter::legacy_version() const {
  // @@protoc_insertion_point(field_get:caffe.ContrastiveLossParameter.legacy_version)
  return legacy_version_;
}
inline void ContrastiveLossParameter::set_legacy_version(bool value) {
  set_has_legacy_version();
  legacy_version_ = value;
  // @@protoc_insertion_point(field_set:caffe.ContrastiveLossParameter.legacy_version)
}

// -------------------------------------------------------------------

// ConvolutionParameter

// optional uint32 num_output = 1;
inline bool ConvolutionParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConvolutionParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConvolutionParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConvolutionParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 ConvolutionParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.num_output)
  return num_output_;
}
inline void ConvolutionParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool ConvolutionParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConvolutionParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConvolutionParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConvolutionParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool ConvolutionParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_term)
  return bias_term_;
}
inline void ConvolutionParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.bias_term)
}

// repeated uint32 pad = 3;
inline int ConvolutionParameter::pad_size() const {
  return pad_.size();
}
inline void ConvolutionParameter::clear_pad() {
  pad_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad)
  return pad_.Get(index);
}
inline void ConvolutionParameter::set_pad(int index, ::google::protobuf::uint32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad)
}
inline void ConvolutionParameter::add_pad(::google::protobuf::uint32 value) {
  pad_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.pad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::pad() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.pad)
  return pad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.pad)
  return &pad_;
}

// repeated uint32 kernel_size = 4;
inline int ConvolutionParameter::kernel_size_size() const {
  return kernel_size_.size();
}
inline void ConvolutionParameter::clear_kernel_size() {
  kernel_size_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_size(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_size)
  return kernel_size_.Get(index);
}
inline void ConvolutionParameter::set_kernel_size(int index, ::google::protobuf::uint32 value) {
  kernel_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_size)
}
inline void ConvolutionParameter::add_kernel_size(::google::protobuf::uint32 value) {
  kernel_size_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.kernel_size)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::kernel_size() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.kernel_size)
  return kernel_size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_kernel_size() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.kernel_size)
  return &kernel_size_;
}

// repeated uint32 stride = 6;
inline int ConvolutionParameter::stride_size() const {
  return stride_.size();
}
inline void ConvolutionParameter::clear_stride() {
  stride_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride)
  return stride_.Get(index);
}
inline void ConvolutionParameter::set_stride(int index, ::google::protobuf::uint32 value) {
  stride_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride)
}
inline void ConvolutionParameter::add_stride(::google::protobuf::uint32 value) {
  stride_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.stride)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::stride() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.stride)
  return stride_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_stride() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.stride)
  return &stride_;
}

// repeated uint32 dilation = 18;
inline int ConvolutionParameter::dilation_size() const {
  return dilation_.size();
}
inline void ConvolutionParameter::clear_dilation() {
  dilation_.Clear();
}
inline ::google::protobuf::uint32 ConvolutionParameter::dilation(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.dilation)
  return dilation_.Get(index);
}
inline void ConvolutionParameter::set_dilation(int index, ::google::protobuf::uint32 value) {
  dilation_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.dilation)
}
inline void ConvolutionParameter::add_dilation(::google::protobuf::uint32 value) {
  dilation_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.ConvolutionParameter.dilation)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ConvolutionParameter::dilation() const {
  // @@protoc_insertion_point(field_list:caffe.ConvolutionParameter.dilation)
  return dilation_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ConvolutionParameter::mutable_dilation() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ConvolutionParameter.dilation)
  return &dilation_;
}

// optional uint32 pad_h = 9 [default = 0];
inline bool ConvolutionParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConvolutionParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConvolutionParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConvolutionParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad_h)
  return pad_h_;
}
inline void ConvolutionParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool ConvolutionParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConvolutionParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConvolutionParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConvolutionParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.pad_w)
  return pad_w_;
}
inline void ConvolutionParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.pad_w)
}

// optional uint32 kernel_h = 11;
inline bool ConvolutionParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConvolutionParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConvolutionParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_h)
  return kernel_h_;
}
inline void ConvolutionParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_h)
}

// optional uint32 kernel_w = 12;
inline bool ConvolutionParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConvolutionParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConvolutionParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConvolutionParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.kernel_w)
  return kernel_w_;
}
inline void ConvolutionParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.kernel_w)
}

// optional uint32 stride_h = 13;
inline bool ConvolutionParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConvolutionParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConvolutionParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConvolutionParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride_h)
  return stride_h_;
}
inline void ConvolutionParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride_h)
}

// optional uint32 stride_w = 14;
inline bool ConvolutionParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConvolutionParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConvolutionParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConvolutionParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 ConvolutionParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.stride_w)
  return stride_w_;
}
inline void ConvolutionParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.stride_w)
}

// optional uint32 group = 5 [default = 1];
inline bool ConvolutionParameter::has_group() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConvolutionParameter::set_has_group() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConvolutionParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConvolutionParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 ConvolutionParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.group)
  return group_;
}
inline void ConvolutionParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.group)
}

// optional .caffe.FillerParameter weight_filler = 7;
inline bool ConvolutionParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConvolutionParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConvolutionParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConvolutionParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& ConvolutionParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::caffe::FillerParameter* ConvolutionParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* ConvolutionParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void ConvolutionParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 8;
inline bool ConvolutionParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConvolutionParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConvolutionParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConvolutionParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& ConvolutionParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* ConvolutionParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ConvolutionParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* ConvolutionParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.ConvolutionParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void ConvolutionParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ConvolutionParameter.bias_filler)
}

// optional .caffe.ConvolutionParameter.Engine engine = 15 [default = DEFAULT];
inline bool ConvolutionParameter::has_engine() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConvolutionParameter::set_has_engine() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConvolutionParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConvolutionParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::ConvolutionParameter_Engine ConvolutionParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.engine)
  return static_cast< ::caffe::ConvolutionParameter_Engine >(engine_);
}
inline void ConvolutionParameter::set_engine(::caffe::ConvolutionParameter_Engine value) {
  assert(::caffe::ConvolutionParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.engine)
}

// optional int32 axis = 16 [default = 1];
inline bool ConvolutionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConvolutionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConvolutionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConvolutionParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ConvolutionParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.axis)
  return axis_;
}
inline void ConvolutionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.axis)
}

// optional bool force_nd_im2col = 17 [default = false];
inline bool ConvolutionParameter::has_force_nd_im2col() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ConvolutionParameter::set_has_force_nd_im2col() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ConvolutionParameter::clear_has_force_nd_im2col() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ConvolutionParameter::clear_force_nd_im2col() {
  force_nd_im2col_ = false;
  clear_has_force_nd_im2col();
}
inline bool ConvolutionParameter::force_nd_im2col() const {
  // @@protoc_insertion_point(field_get:caffe.ConvolutionParameter.force_nd_im2col)
  return force_nd_im2col_;
}
inline void ConvolutionParameter::set_force_nd_im2col(bool value) {
  set_has_force_nd_im2col();
  force_nd_im2col_ = value;
  // @@protoc_insertion_point(field_set:caffe.ConvolutionParameter.force_nd_im2col)
}

// -------------------------------------------------------------------

// CropParameter

// optional int32 axis = 1 [default = 2];
inline bool CropParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CropParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CropParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CropParameter::clear_axis() {
  axis_ = 2;
  clear_has_axis();
}
inline ::google::protobuf::int32 CropParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.CropParameter.axis)
  return axis_;
}
inline void CropParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.CropParameter.axis)
}

// repeated uint32 offset = 2;
inline int CropParameter::offset_size() const {
  return offset_.size();
}
inline void CropParameter::clear_offset() {
  offset_.Clear();
}
inline ::google::protobuf::uint32 CropParameter::offset(int index) const {
  // @@protoc_insertion_point(field_get:caffe.CropParameter.offset)
  return offset_.Get(index);
}
inline void CropParameter::set_offset(int index, ::google::protobuf::uint32 value) {
  offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.CropParameter.offset)
}
inline void CropParameter::add_offset(::google::protobuf::uint32 value) {
  offset_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.CropParameter.offset)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CropParameter::offset() const {
  // @@protoc_insertion_point(field_list:caffe.CropParameter.offset)
  return offset_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CropParameter::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:caffe.CropParameter.offset)
  return &offset_;
}

// -------------------------------------------------------------------

// DataParameter

// optional string source = 1;
inline bool DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& DataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.source)
}
inline void DataParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.source)
}
inline void DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.source)
}
inline ::std::string* DataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.DataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.source)
}

// optional uint32 batch_size = 4;
inline bool DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.batch_size)
  return batch_size_;
}
inline void DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool DataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 DataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.rand_skip)
  return rand_skip_;
}
inline void DataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.rand_skip)
}

// optional .caffe.DataParameter.DB backend = 8 [default = LEVELDB];
inline bool DataParameter::has_backend() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataParameter::set_has_backend() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataParameter::clear_has_backend() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataParameter::clear_backend() {
  backend_ = 0;
  clear_has_backend();
}
inline ::caffe::DataParameter_DB DataParameter::backend() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.backend)
  return static_cast< ::caffe::DataParameter_DB >(backend_);
}
inline void DataParameter::set_backend(::caffe::DataParameter_DB value) {
  assert(::caffe::DataParameter_DB_IsValid(value));
  set_has_backend();
  backend_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.backend)
}

// optional float scale = 2 [default = 1];
inline bool DataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float DataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.scale)
  return scale_;
}
inline void DataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.scale)
}

// optional string mean_file = 3;
inline bool DataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& DataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.mean_file)
  return mean_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DataParameter.mean_file)
}
inline void DataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DataParameter.mean_file)
}
inline void DataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DataParameter.mean_file)
}
inline ::std::string* DataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.DataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.DataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.DataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool DataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 DataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.crop_size)
  return crop_size_;
}
inline void DataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool DataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool DataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.mirror)
  return mirror_;
}
inline void DataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.mirror)
}

// optional bool force_encoded_color = 9 [default = false];
inline bool DataParameter::has_force_encoded_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DataParameter::set_has_force_encoded_color() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DataParameter::clear_has_force_encoded_color() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DataParameter::clear_force_encoded_color() {
  force_encoded_color_ = false;
  clear_has_force_encoded_color();
}
inline bool DataParameter::force_encoded_color() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.force_encoded_color)
  return force_encoded_color_;
}
inline void DataParameter::set_force_encoded_color(bool value) {
  set_has_force_encoded_color();
  force_encoded_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.force_encoded_color)
}

// optional uint32 prefetch = 10 [default = 4];
inline bool DataParameter::has_prefetch() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DataParameter::set_has_prefetch() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DataParameter::clear_has_prefetch() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DataParameter::clear_prefetch() {
  prefetch_ = 4u;
  clear_has_prefetch();
}
inline ::google::protobuf::uint32 DataParameter::prefetch() const {
  // @@protoc_insertion_point(field_get:caffe.DataParameter.prefetch)
  return prefetch_;
}
inline void DataParameter::set_prefetch(::google::protobuf::uint32 value) {
  set_has_prefetch();
  prefetch_ = value;
  // @@protoc_insertion_point(field_set:caffe.DataParameter.prefetch)
}

// -------------------------------------------------------------------

// DetectionEvaluateParameter

// optional uint32 num_classes = 1;
inline bool DetectionEvaluateParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetectionEvaluateParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetectionEvaluateParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetectionEvaluateParameter::clear_num_classes() {
  num_classes_ = 0u;
  clear_has_num_classes();
}
inline ::google::protobuf::uint32 DetectionEvaluateParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionEvaluateParameter.num_classes)
  return num_classes_;
}
inline void DetectionEvaluateParameter::set_num_classes(::google::protobuf::uint32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionEvaluateParameter.num_classes)
}

// optional uint32 background_label_id = 2 [default = 0];
inline bool DetectionEvaluateParameter::has_background_label_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetectionEvaluateParameter::set_has_background_label_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetectionEvaluateParameter::clear_has_background_label_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetectionEvaluateParameter::clear_background_label_id() {
  background_label_id_ = 0u;
  clear_has_background_label_id();
}
inline ::google::protobuf::uint32 DetectionEvaluateParameter::background_label_id() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionEvaluateParameter.background_label_id)
  return background_label_id_;
}
inline void DetectionEvaluateParameter::set_background_label_id(::google::protobuf::uint32 value) {
  set_has_background_label_id();
  background_label_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionEvaluateParameter.background_label_id)
}

// optional float overlap_threshold = 3 [default = 0.5];
inline bool DetectionEvaluateParameter::has_overlap_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetectionEvaluateParameter::set_has_overlap_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DetectionEvaluateParameter::clear_has_overlap_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DetectionEvaluateParameter::clear_overlap_threshold() {
  overlap_threshold_ = 0.5f;
  clear_has_overlap_threshold();
}
inline float DetectionEvaluateParameter::overlap_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionEvaluateParameter.overlap_threshold)
  return overlap_threshold_;
}
inline void DetectionEvaluateParameter::set_overlap_threshold(float value) {
  set_has_overlap_threshold();
  overlap_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionEvaluateParameter.overlap_threshold)
}

// optional bool evaluate_difficult_gt = 4 [default = true];
inline bool DetectionEvaluateParameter::has_evaluate_difficult_gt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DetectionEvaluateParameter::set_has_evaluate_difficult_gt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DetectionEvaluateParameter::clear_has_evaluate_difficult_gt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DetectionEvaluateParameter::clear_evaluate_difficult_gt() {
  evaluate_difficult_gt_ = true;
  clear_has_evaluate_difficult_gt();
}
inline bool DetectionEvaluateParameter::evaluate_difficult_gt() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionEvaluateParameter.evaluate_difficult_gt)
  return evaluate_difficult_gt_;
}
inline void DetectionEvaluateParameter::set_evaluate_difficult_gt(bool value) {
  set_has_evaluate_difficult_gt();
  evaluate_difficult_gt_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionEvaluateParameter.evaluate_difficult_gt)
}

// optional string name_size_file = 5;
inline bool DetectionEvaluateParameter::has_name_size_file() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DetectionEvaluateParameter::set_has_name_size_file() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DetectionEvaluateParameter::clear_has_name_size_file() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DetectionEvaluateParameter::clear_name_size_file() {
  name_size_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name_size_file();
}
inline const ::std::string& DetectionEvaluateParameter::name_size_file() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionEvaluateParameter.name_size_file)
  return name_size_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetectionEvaluateParameter::set_name_size_file(const ::std::string& value) {
  set_has_name_size_file();
  name_size_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DetectionEvaluateParameter.name_size_file)
}
inline void DetectionEvaluateParameter::set_name_size_file(const char* value) {
  set_has_name_size_file();
  name_size_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DetectionEvaluateParameter.name_size_file)
}
inline void DetectionEvaluateParameter::set_name_size_file(const char* value, size_t size) {
  set_has_name_size_file();
  name_size_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DetectionEvaluateParameter.name_size_file)
}
inline ::std::string* DetectionEvaluateParameter::mutable_name_size_file() {
  set_has_name_size_file();
  // @@protoc_insertion_point(field_mutable:caffe.DetectionEvaluateParameter.name_size_file)
  return name_size_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DetectionEvaluateParameter::release_name_size_file() {
  // @@protoc_insertion_point(field_release:caffe.DetectionEvaluateParameter.name_size_file)
  clear_has_name_size_file();
  return name_size_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetectionEvaluateParameter::set_allocated_name_size_file(::std::string* name_size_file) {
  if (name_size_file != NULL) {
    set_has_name_size_file();
  } else {
    clear_has_name_size_file();
  }
  name_size_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_size_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionEvaluateParameter.name_size_file)
}

// optional bool pose_stat_enable = 6 [default = true];
inline bool DetectionEvaluateParameter::has_pose_stat_enable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DetectionEvaluateParameter::set_has_pose_stat_enable() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DetectionEvaluateParameter::clear_has_pose_stat_enable() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DetectionEvaluateParameter::clear_pose_stat_enable() {
  pose_stat_enable_ = true;
  clear_has_pose_stat_enable();
}
inline bool DetectionEvaluateParameter::pose_stat_enable() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionEvaluateParameter.pose_stat_enable)
  return pose_stat_enable_;
}
inline void DetectionEvaluateParameter::set_pose_stat_enable(bool value) {
  set_has_pose_stat_enable();
  pose_stat_enable_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionEvaluateParameter.pose_stat_enable)
}

// optional bool head_dir_stat_enable = 7 [default = true];
inline bool DetectionEvaluateParameter::has_head_dir_stat_enable() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DetectionEvaluateParameter::set_has_head_dir_stat_enable() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DetectionEvaluateParameter::clear_has_head_dir_stat_enable() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DetectionEvaluateParameter::clear_head_dir_stat_enable() {
  head_dir_stat_enable_ = true;
  clear_has_head_dir_stat_enable();
}
inline bool DetectionEvaluateParameter::head_dir_stat_enable() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionEvaluateParameter.head_dir_stat_enable)
  return head_dir_stat_enable_;
}
inline void DetectionEvaluateParameter::set_head_dir_stat_enable(bool value) {
  set_has_head_dir_stat_enable();
  head_dir_stat_enable_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionEvaluateParameter.head_dir_stat_enable)
}

// optional bool torso_dir_stat_enable = 8 [default = true];
inline bool DetectionEvaluateParameter::has_torso_dir_stat_enable() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DetectionEvaluateParameter::set_has_torso_dir_stat_enable() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DetectionEvaluateParameter::clear_has_torso_dir_stat_enable() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DetectionEvaluateParameter::clear_torso_dir_stat_enable() {
  torso_dir_stat_enable_ = true;
  clear_has_torso_dir_stat_enable();
}
inline bool DetectionEvaluateParameter::torso_dir_stat_enable() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionEvaluateParameter.torso_dir_stat_enable)
  return torso_dir_stat_enable_;
}
inline void DetectionEvaluateParameter::set_torso_dir_stat_enable(bool value) {
  set_has_torso_dir_stat_enable();
  torso_dir_stat_enable_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionEvaluateParameter.torso_dir_stat_enable)
}

// optional string name_to_label_file = 9;
inline bool DetectionEvaluateParameter::has_name_to_label_file() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DetectionEvaluateParameter::set_has_name_to_label_file() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DetectionEvaluateParameter::clear_has_name_to_label_file() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DetectionEvaluateParameter::clear_name_to_label_file() {
  name_to_label_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name_to_label_file();
}
inline const ::std::string& DetectionEvaluateParameter::name_to_label_file() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionEvaluateParameter.name_to_label_file)
  return name_to_label_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetectionEvaluateParameter::set_name_to_label_file(const ::std::string& value) {
  set_has_name_to_label_file();
  name_to_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DetectionEvaluateParameter.name_to_label_file)
}
inline void DetectionEvaluateParameter::set_name_to_label_file(const char* value) {
  set_has_name_to_label_file();
  name_to_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DetectionEvaluateParameter.name_to_label_file)
}
inline void DetectionEvaluateParameter::set_name_to_label_file(const char* value, size_t size) {
  set_has_name_to_label_file();
  name_to_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DetectionEvaluateParameter.name_to_label_file)
}
inline ::std::string* DetectionEvaluateParameter::mutable_name_to_label_file() {
  set_has_name_to_label_file();
  // @@protoc_insertion_point(field_mutable:caffe.DetectionEvaluateParameter.name_to_label_file)
  return name_to_label_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DetectionEvaluateParameter::release_name_to_label_file() {
  // @@protoc_insertion_point(field_release:caffe.DetectionEvaluateParameter.name_to_label_file)
  clear_has_name_to_label_file();
  return name_to_label_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetectionEvaluateParameter::set_allocated_name_to_label_file(::std::string* name_to_label_file) {
  if (name_to_label_file != NULL) {
    set_has_name_to_label_file();
  } else {
    clear_has_name_to_label_file();
  }
  name_to_label_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_to_label_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionEvaluateParameter.name_to_label_file)
}

// repeated float boxsize_threshold = 10;
inline int DetectionEvaluateParameter::boxsize_threshold_size() const {
  return boxsize_threshold_.size();
}
inline void DetectionEvaluateParameter::clear_boxsize_threshold() {
  boxsize_threshold_.Clear();
}
inline float DetectionEvaluateParameter::boxsize_threshold(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionEvaluateParameter.boxsize_threshold)
  return boxsize_threshold_.Get(index);
}
inline void DetectionEvaluateParameter::set_boxsize_threshold(int index, float value) {
  boxsize_threshold_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionEvaluateParameter.boxsize_threshold)
}
inline void DetectionEvaluateParameter::add_boxsize_threshold(float value) {
  boxsize_threshold_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionEvaluateParameter.boxsize_threshold)
}
inline const ::google::protobuf::RepeatedField< float >&
DetectionEvaluateParameter::boxsize_threshold() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionEvaluateParameter.boxsize_threshold)
  return boxsize_threshold_;
}
inline ::google::protobuf::RepeatedField< float >*
DetectionEvaluateParameter::mutable_boxsize_threshold() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionEvaluateParameter.boxsize_threshold)
  return &boxsize_threshold_;
}

// repeated float iou_threshold = 11;
inline int DetectionEvaluateParameter::iou_threshold_size() const {
  return iou_threshold_.size();
}
inline void DetectionEvaluateParameter::clear_iou_threshold() {
  iou_threshold_.Clear();
}
inline float DetectionEvaluateParameter::iou_threshold(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionEvaluateParameter.iou_threshold)
  return iou_threshold_.Get(index);
}
inline void DetectionEvaluateParameter::set_iou_threshold(int index, float value) {
  iou_threshold_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionEvaluateParameter.iou_threshold)
}
inline void DetectionEvaluateParameter::add_iou_threshold(float value) {
  iou_threshold_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionEvaluateParameter.iou_threshold)
}
inline const ::google::protobuf::RepeatedField< float >&
DetectionEvaluateParameter::iou_threshold() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionEvaluateParameter.iou_threshold)
  return iou_threshold_;
}
inline ::google::protobuf::RepeatedField< float >*
DetectionEvaluateParameter::mutable_iou_threshold() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionEvaluateParameter.iou_threshold)
  return &iou_threshold_;
}

// repeated int32 gt_labels = 12;
inline int DetectionEvaluateParameter::gt_labels_size() const {
  return gt_labels_.size();
}
inline void DetectionEvaluateParameter::clear_gt_labels() {
  gt_labels_.Clear();
}
inline ::google::protobuf::int32 DetectionEvaluateParameter::gt_labels(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionEvaluateParameter.gt_labels)
  return gt_labels_.Get(index);
}
inline void DetectionEvaluateParameter::set_gt_labels(int index, ::google::protobuf::int32 value) {
  gt_labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionEvaluateParameter.gt_labels)
}
inline void DetectionEvaluateParameter::add_gt_labels(::google::protobuf::int32 value) {
  gt_labels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionEvaluateParameter.gt_labels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DetectionEvaluateParameter::gt_labels() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionEvaluateParameter.gt_labels)
  return gt_labels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DetectionEvaluateParameter::mutable_gt_labels() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionEvaluateParameter.gt_labels)
  return &gt_labels_;
}

// -------------------------------------------------------------------

// McBoxLossParameter

// optional int32 num_classes = 1 [default = 1];
inline bool McBoxLossParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void McBoxLossParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void McBoxLossParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void McBoxLossParameter::clear_num_classes() {
  num_classes_ = 1;
  clear_has_num_classes();
}
inline ::google::protobuf::int32 McBoxLossParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:caffe.McBoxLossParameter.num_classes)
  return num_classes_;
}
inline void McBoxLossParameter::set_num_classes(::google::protobuf::int32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:caffe.McBoxLossParameter.num_classes)
}

// optional float overlap_threshold = 2 [default = 0.5];
inline bool McBoxLossParameter::has_overlap_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void McBoxLossParameter::set_has_overlap_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void McBoxLossParameter::clear_has_overlap_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void McBoxLossParameter::clear_overlap_threshold() {
  overlap_threshold_ = 0.5f;
  clear_has_overlap_threshold();
}
inline float McBoxLossParameter::overlap_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.McBoxLossParameter.overlap_threshold)
  return overlap_threshold_;
}
inline void McBoxLossParameter::set_overlap_threshold(float value) {
  set_has_overlap_threshold();
  overlap_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.McBoxLossParameter.overlap_threshold)
}

// optional bool use_prior_for_matching = 3 [default = true];
inline bool McBoxLossParameter::has_use_prior_for_matching() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void McBoxLossParameter::set_has_use_prior_for_matching() {
  _has_bits_[0] |= 0x00000004u;
}
inline void McBoxLossParameter::clear_has_use_prior_for_matching() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void McBoxLossParameter::clear_use_prior_for_matching() {
  use_prior_for_matching_ = true;
  clear_has_use_prior_for_matching();
}
inline bool McBoxLossParameter::use_prior_for_matching() const {
  // @@protoc_insertion_point(field_get:caffe.McBoxLossParameter.use_prior_for_matching)
  return use_prior_for_matching_;
}
inline void McBoxLossParameter::set_use_prior_for_matching(bool value) {
  set_has_use_prior_for_matching();
  use_prior_for_matching_ = value;
  // @@protoc_insertion_point(field_set:caffe.McBoxLossParameter.use_prior_for_matching)
}

// optional bool use_prior_for_init = 19 [default = false];
inline bool McBoxLossParameter::has_use_prior_for_init() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void McBoxLossParameter::set_has_use_prior_for_init() {
  _has_bits_[0] |= 0x00000008u;
}
inline void McBoxLossParameter::clear_has_use_prior_for_init() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void McBoxLossParameter::clear_use_prior_for_init() {
  use_prior_for_init_ = false;
  clear_has_use_prior_for_init();
}
inline bool McBoxLossParameter::use_prior_for_init() const {
  // @@protoc_insertion_point(field_get:caffe.McBoxLossParameter.use_prior_for_init)
  return use_prior_for_init_;
}
inline void McBoxLossParameter::set_use_prior_for_init(bool value) {
  set_has_use_prior_for_init();
  use_prior_for_init_ = value;
  // @@protoc_insertion_point(field_set:caffe.McBoxLossParameter.use_prior_for_init)
}

// optional bool use_difficult_gt = 4 [default = true];
inline bool McBoxLossParameter::has_use_difficult_gt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void McBoxLossParameter::set_has_use_difficult_gt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void McBoxLossParameter::clear_has_use_difficult_gt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void McBoxLossParameter::clear_use_difficult_gt() {
  use_difficult_gt_ = true;
  clear_has_use_difficult_gt();
}
inline bool McBoxLossParameter::use_difficult_gt() const {
  // @@protoc_insertion_point(field_get:caffe.McBoxLossParameter.use_difficult_gt)
  return use_difficult_gt_;
}
inline void McBoxLossParameter::set_use_difficult_gt(bool value) {
  set_has_use_difficult_gt();
  use_difficult_gt_ = value;
  // @@protoc_insertion_point(field_set:caffe.McBoxLossParameter.use_difficult_gt)
}

// optional bool rescore = 5 [default = true];
inline bool McBoxLossParameter::has_rescore() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void McBoxLossParameter::set_has_rescore() {
  _has_bits_[0] |= 0x00000020u;
}
inline void McBoxLossParameter::clear_has_rescore() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void McBoxLossParameter::clear_rescore() {
  rescore_ = true;
  clear_has_rescore();
}
inline bool McBoxLossParameter::rescore() const {
  // @@protoc_insertion_point(field_get:caffe.McBoxLossParameter.rescore)
  return rescore_;
}
inline void McBoxLossParameter::set_rescore(bool value) {
  set_has_rescore();
  rescore_ = value;
  // @@protoc_insertion_point(field_set:caffe.McBoxLossParameter.rescore)
}

// optional .caffe.McBoxLossParameter.CodeLocType code_loc_type = 20 [default = SSD];
inline bool McBoxLossParameter::has_code_loc_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void McBoxLossParameter::set_has_code_loc_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void McBoxLossParameter::clear_has_code_loc_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void McBoxLossParameter::clear_code_loc_type() {
  code_loc_type_ = 1;
  clear_has_code_loc_type();
}
inline ::caffe::McBoxLossParameter_CodeLocType McBoxLossParameter::code_loc_type() const {
  // @@protoc_insertion_point(field_get:caffe.McBoxLossParameter.code_loc_type)
  return static_cast< ::caffe::McBoxLossParameter_CodeLocType >(code_loc_type_);
}
inline void McBoxLossParameter::set_code_loc_type(::caffe::McBoxLossParameter_CodeLocType value) {
  assert(::caffe::McBoxLossParameter_CodeLocType_IsValid(value));
  set_has_code_loc_type();
  code_loc_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.McBoxLossParameter.code_loc_type)
}

// optional int32 iters = 6 [default = 0];
inline bool McBoxLossParameter::has_iters() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void McBoxLossParameter::set_has_iters() {
  _has_bits_[0] |= 0x00000080u;
}
inline void McBoxLossParameter::clear_has_iters() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void McBoxLossParameter::clear_iters() {
  iters_ = 0;
  clear_has_iters();
}
inline ::google::protobuf::int32 McBoxLossParameter::iters() const {
  // @@protoc_insertion_point(field_get:caffe.McBoxLossParameter.iters)
  return iters_;
}
inline void McBoxLossParameter::set_iters(::google::protobuf::int32 value) {
  set_has_iters();
  iters_ = value;
  // @@protoc_insertion_point(field_set:caffe.McBoxLossParameter.iters)
}

// optional int32 iter_using_bgboxes = 7 [default = 10000];
inline bool McBoxLossParameter::has_iter_using_bgboxes() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void McBoxLossParameter::set_has_iter_using_bgboxes() {
  _has_bits_[0] |= 0x00000100u;
}
inline void McBoxLossParameter::clear_has_iter_using_bgboxes() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void McBoxLossParameter::clear_iter_using_bgboxes() {
  iter_using_bgboxes_ = 10000;
  clear_has_iter_using_bgboxes();
}
inline ::google::protobuf::int32 McBoxLossParameter::iter_using_bgboxes() const {
  // @@protoc_insertion_point(field_get:caffe.McBoxLossParameter.iter_using_bgboxes)
  return iter_using_bgboxes_;
}
inline void McBoxLossParameter::set_iter_using_bgboxes(::google::protobuf::int32 value) {
  set_has_iter_using_bgboxes();
  iter_using_bgboxes_ = value;
  // @@protoc_insertion_point(field_set:caffe.McBoxLossParameter.iter_using_bgboxes)
}

// optional float background_box_loc_scale = 8 [default = 0.01];
inline bool McBoxLossParameter::has_background_box_loc_scale() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void McBoxLossParameter::set_has_background_box_loc_scale() {
  _has_bits_[0] |= 0x00000200u;
}
inline void McBoxLossParameter::clear_has_background_box_loc_scale() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void McBoxLossParameter::clear_background_box_loc_scale() {
  background_box_loc_scale_ = 0.01f;
  clear_has_background_box_loc_scale();
}
inline float McBoxLossParameter::background_box_loc_scale() const {
  // @@protoc_insertion_point(field_get:caffe.McBoxLossParameter.background_box_loc_scale)
  return background_box_loc_scale_;
}
inline void McBoxLossParameter::set_background_box_loc_scale(float value) {
  set_has_background_box_loc_scale();
  background_box_loc_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.McBoxLossParameter.background_box_loc_scale)
}

// optional float object_scale = 9 [default = 1];
inline bool McBoxLossParameter::has_object_scale() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void McBoxLossParameter::set_has_object_scale() {
  _has_bits_[0] |= 0x00000400u;
}
inline void McBoxLossParameter::clear_has_object_scale() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void McBoxLossParameter::clear_object_scale() {
  object_scale_ = 1;
  clear_has_object_scale();
}
inline float McBoxLossParameter::object_scale() const {
  // @@protoc_insertion_point(field_get:caffe.McBoxLossParameter.object_scale)
  return object_scale_;
}
inline void McBoxLossParameter::set_object_scale(float value) {
  set_has_object_scale();
  object_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.McBoxLossParameter.object_scale)
}

// optional float noobject_scale = 10 [default = 1];
inline bool McBoxLossParameter::has_noobject_scale() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void McBoxLossParameter::set_has_noobject_scale() {
  _has_bits_[0] |= 0x00000800u;
}
inline void McBoxLossParameter::clear_has_noobject_scale() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void McBoxLossParameter::clear_noobject_scale() {
  noobject_scale_ = 1;
  clear_has_noobject_scale();
}
inline float McBoxLossParameter::noobject_scale() const {
  // @@protoc_insertion_point(field_get:caffe.McBoxLossParameter.noobject_scale)
  return noobject_scale_;
}
inline void McBoxLossParameter::set_noobject_scale(float value) {
  set_has_noobject_scale();
  noobject_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.McBoxLossParameter.noobject_scale)
}

// optional float class_scale = 11 [default = 1];
inline bool McBoxLossParameter::has_class_scale() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void McBoxLossParameter::set_has_class_scale() {
  _has_bits_[0] |= 0x00001000u;
}
inline void McBoxLossParameter::clear_has_class_scale() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void McBoxLossParameter::clear_class_scale() {
  class_scale_ = 1;
  clear_has_class_scale();
}
inline float McBoxLossParameter::class_scale() const {
  // @@protoc_insertion_point(field_get:caffe.McBoxLossParameter.class_scale)
  return class_scale_;
}
inline void McBoxLossParameter::set_class_scale(float value) {
  set_has_class_scale();
  class_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.McBoxLossParameter.class_scale)
}

// optional float loc_scale = 12 [default = 1];
inline bool McBoxLossParameter::has_loc_scale() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void McBoxLossParameter::set_has_loc_scale() {
  _has_bits_[0] |= 0x00002000u;
}
inline void McBoxLossParameter::clear_has_loc_scale() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void McBoxLossParameter::clear_loc_scale() {
  loc_scale_ = 1;
  clear_has_loc_scale();
}
inline float McBoxLossParameter::loc_scale() const {
  // @@protoc_insertion_point(field_get:caffe.McBoxLossParameter.loc_scale)
  return loc_scale_;
}
inline void McBoxLossParameter::set_loc_scale(float value) {
  set_has_loc_scale();
  loc_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.McBoxLossParameter.loc_scale)
}

// repeated float boxsize = 13;
inline int McBoxLossParameter::boxsize_size() const {
  return boxsize_.size();
}
inline void McBoxLossParameter::clear_boxsize() {
  boxsize_.Clear();
}
inline float McBoxLossParameter::boxsize(int index) const {
  // @@protoc_insertion_point(field_get:caffe.McBoxLossParameter.boxsize)
  return boxsize_.Get(index);
}
inline void McBoxLossParameter::set_boxsize(int index, float value) {
  boxsize_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.McBoxLossParameter.boxsize)
}
inline void McBoxLossParameter::add_boxsize(float value) {
  boxsize_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.McBoxLossParameter.boxsize)
}
inline const ::google::protobuf::RepeatedField< float >&
McBoxLossParameter::boxsize() const {
  // @@protoc_insertion_point(field_list:caffe.McBoxLossParameter.boxsize)
  return boxsize_;
}
inline ::google::protobuf::RepeatedField< float >*
McBoxLossParameter::mutable_boxsize() {
  // @@protoc_insertion_point(field_mutable_list:caffe.McBoxLossParameter.boxsize)
  return &boxsize_;
}

// repeated float aspect_ratio = 14;
inline int McBoxLossParameter::aspect_ratio_size() const {
  return aspect_ratio_.size();
}
inline void McBoxLossParameter::clear_aspect_ratio() {
  aspect_ratio_.Clear();
}
inline float McBoxLossParameter::aspect_ratio(int index) const {
  // @@protoc_insertion_point(field_get:caffe.McBoxLossParameter.aspect_ratio)
  return aspect_ratio_.Get(index);
}
inline void McBoxLossParameter::set_aspect_ratio(int index, float value) {
  aspect_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.McBoxLossParameter.aspect_ratio)
}
inline void McBoxLossParameter::add_aspect_ratio(float value) {
  aspect_ratio_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.McBoxLossParameter.aspect_ratio)
}
inline const ::google::protobuf::RepeatedField< float >&
McBoxLossParameter::aspect_ratio() const {
  // @@protoc_insertion_point(field_list:caffe.McBoxLossParameter.aspect_ratio)
  return aspect_ratio_;
}
inline ::google::protobuf::RepeatedField< float >*
McBoxLossParameter::mutable_aspect_ratio() {
  // @@protoc_insertion_point(field_mutable_list:caffe.McBoxLossParameter.aspect_ratio)
  return &aspect_ratio_;
}

// repeated float pwidth = 15;
inline int McBoxLossParameter::pwidth_size() const {
  return pwidth_.size();
}
inline void McBoxLossParameter::clear_pwidth() {
  pwidth_.Clear();
}
inline float McBoxLossParameter::pwidth(int index) const {
  // @@protoc_insertion_point(field_get:caffe.McBoxLossParameter.pwidth)
  return pwidth_.Get(index);
}
inline void McBoxLossParameter::set_pwidth(int index, float value) {
  pwidth_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.McBoxLossParameter.pwidth)
}
inline void McBoxLossParameter::add_pwidth(float value) {
  pwidth_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.McBoxLossParameter.pwidth)
}
inline const ::google::protobuf::RepeatedField< float >&
McBoxLossParameter::pwidth() const {
  // @@protoc_insertion_point(field_list:caffe.McBoxLossParameter.pwidth)
  return pwidth_;
}
inline ::google::protobuf::RepeatedField< float >*
McBoxLossParameter::mutable_pwidth() {
  // @@protoc_insertion_point(field_mutable_list:caffe.McBoxLossParameter.pwidth)
  return &pwidth_;
}

// repeated float pheight = 16;
inline int McBoxLossParameter::pheight_size() const {
  return pheight_.size();
}
inline void McBoxLossParameter::clear_pheight() {
  pheight_.Clear();
}
inline float McBoxLossParameter::pheight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.McBoxLossParameter.pheight)
  return pheight_.Get(index);
}
inline void McBoxLossParameter::set_pheight(int index, float value) {
  pheight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.McBoxLossParameter.pheight)
}
inline void McBoxLossParameter::add_pheight(float value) {
  pheight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.McBoxLossParameter.pheight)
}
inline const ::google::protobuf::RepeatedField< float >&
McBoxLossParameter::pheight() const {
  // @@protoc_insertion_point(field_list:caffe.McBoxLossParameter.pheight)
  return pheight_;
}
inline ::google::protobuf::RepeatedField< float >*
McBoxLossParameter::mutable_pheight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.McBoxLossParameter.pheight)
  return &pheight_;
}

// optional bool clip = 18 [default = true];
inline bool McBoxLossParameter::has_clip() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void McBoxLossParameter::set_has_clip() {
  _has_bits_[0] |= 0x00040000u;
}
inline void McBoxLossParameter::clear_has_clip() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void McBoxLossParameter::clear_clip() {
  clip_ = true;
  clear_has_clip();
}
inline bool McBoxLossParameter::clip() const {
  // @@protoc_insertion_point(field_get:caffe.McBoxLossParameter.clip)
  return clip_;
}
inline void McBoxLossParameter::set_clip(bool value) {
  set_has_clip();
  clip_ = value;
  // @@protoc_insertion_point(field_set:caffe.McBoxLossParameter.clip)
}

// optional int32 background_label_id = 17 [default = 0];
inline bool McBoxLossParameter::has_background_label_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void McBoxLossParameter::set_has_background_label_id() {
  _has_bits_[0] |= 0x00080000u;
}
inline void McBoxLossParameter::clear_has_background_label_id() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void McBoxLossParameter::clear_background_label_id() {
  background_label_id_ = 0;
  clear_has_background_label_id();
}
inline ::google::protobuf::int32 McBoxLossParameter::background_label_id() const {
  // @@protoc_insertion_point(field_get:caffe.McBoxLossParameter.background_label_id)
  return background_label_id_;
}
inline void McBoxLossParameter::set_background_label_id(::google::protobuf::int32 value) {
  set_has_background_label_id();
  background_label_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.McBoxLossParameter.background_label_id)
}

// -------------------------------------------------------------------

// NonMaximumSuppressionParameter

// optional float nms_threshold = 1 [default = 0.3];
inline bool NonMaximumSuppressionParameter::has_nms_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NonMaximumSuppressionParameter::set_has_nms_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NonMaximumSuppressionParameter::clear_has_nms_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NonMaximumSuppressionParameter::clear_nms_threshold() {
  nms_threshold_ = 0.3f;
  clear_has_nms_threshold();
}
inline float NonMaximumSuppressionParameter::nms_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.NonMaximumSuppressionParameter.nms_threshold)
  return nms_threshold_;
}
inline void NonMaximumSuppressionParameter::set_nms_threshold(float value) {
  set_has_nms_threshold();
  nms_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.NonMaximumSuppressionParameter.nms_threshold)
}

// optional int32 top_k = 2;
inline bool NonMaximumSuppressionParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NonMaximumSuppressionParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NonMaximumSuppressionParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NonMaximumSuppressionParameter::clear_top_k() {
  top_k_ = 0;
  clear_has_top_k();
}
inline ::google::protobuf::int32 NonMaximumSuppressionParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.NonMaximumSuppressionParameter.top_k)
  return top_k_;
}
inline void NonMaximumSuppressionParameter::set_top_k(::google::protobuf::int32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.NonMaximumSuppressionParameter.top_k)
}

// -------------------------------------------------------------------

// SaveOutputParameter

// optional string output_directory = 1;
inline bool SaveOutputParameter::has_output_directory() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveOutputParameter::set_has_output_directory() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaveOutputParameter::clear_has_output_directory() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaveOutputParameter::clear_output_directory() {
  output_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_directory();
}
inline const ::std::string& SaveOutputParameter::output_directory() const {
  // @@protoc_insertion_point(field_get:caffe.SaveOutputParameter.output_directory)
  return output_directory_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveOutputParameter::set_output_directory(const ::std::string& value) {
  set_has_output_directory();
  output_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SaveOutputParameter.output_directory)
}
inline void SaveOutputParameter::set_output_directory(const char* value) {
  set_has_output_directory();
  output_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SaveOutputParameter.output_directory)
}
inline void SaveOutputParameter::set_output_directory(const char* value, size_t size) {
  set_has_output_directory();
  output_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SaveOutputParameter.output_directory)
}
inline ::std::string* SaveOutputParameter::mutable_output_directory() {
  set_has_output_directory();
  // @@protoc_insertion_point(field_mutable:caffe.SaveOutputParameter.output_directory)
  return output_directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveOutputParameter::release_output_directory() {
  // @@protoc_insertion_point(field_release:caffe.SaveOutputParameter.output_directory)
  clear_has_output_directory();
  return output_directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveOutputParameter::set_allocated_output_directory(::std::string* output_directory) {
  if (output_directory != NULL) {
    set_has_output_directory();
  } else {
    clear_has_output_directory();
  }
  output_directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_directory);
  // @@protoc_insertion_point(field_set_allocated:caffe.SaveOutputParameter.output_directory)
}

// optional string output_name_prefix = 2;
inline bool SaveOutputParameter::has_output_name_prefix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaveOutputParameter::set_has_output_name_prefix() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SaveOutputParameter::clear_has_output_name_prefix() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SaveOutputParameter::clear_output_name_prefix() {
  output_name_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_name_prefix();
}
inline const ::std::string& SaveOutputParameter::output_name_prefix() const {
  // @@protoc_insertion_point(field_get:caffe.SaveOutputParameter.output_name_prefix)
  return output_name_prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveOutputParameter::set_output_name_prefix(const ::std::string& value) {
  set_has_output_name_prefix();
  output_name_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SaveOutputParameter.output_name_prefix)
}
inline void SaveOutputParameter::set_output_name_prefix(const char* value) {
  set_has_output_name_prefix();
  output_name_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SaveOutputParameter.output_name_prefix)
}
inline void SaveOutputParameter::set_output_name_prefix(const char* value, size_t size) {
  set_has_output_name_prefix();
  output_name_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SaveOutputParameter.output_name_prefix)
}
inline ::std::string* SaveOutputParameter::mutable_output_name_prefix() {
  set_has_output_name_prefix();
  // @@protoc_insertion_point(field_mutable:caffe.SaveOutputParameter.output_name_prefix)
  return output_name_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveOutputParameter::release_output_name_prefix() {
  // @@protoc_insertion_point(field_release:caffe.SaveOutputParameter.output_name_prefix)
  clear_has_output_name_prefix();
  return output_name_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveOutputParameter::set_allocated_output_name_prefix(::std::string* output_name_prefix) {
  if (output_name_prefix != NULL) {
    set_has_output_name_prefix();
  } else {
    clear_has_output_name_prefix();
  }
  output_name_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_name_prefix);
  // @@protoc_insertion_point(field_set_allocated:caffe.SaveOutputParameter.output_name_prefix)
}

// optional string output_format = 3;
inline bool SaveOutputParameter::has_output_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SaveOutputParameter::set_has_output_format() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SaveOutputParameter::clear_has_output_format() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SaveOutputParameter::clear_output_format() {
  output_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_format();
}
inline const ::std::string& SaveOutputParameter::output_format() const {
  // @@protoc_insertion_point(field_get:caffe.SaveOutputParameter.output_format)
  return output_format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveOutputParameter::set_output_format(const ::std::string& value) {
  set_has_output_format();
  output_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SaveOutputParameter.output_format)
}
inline void SaveOutputParameter::set_output_format(const char* value) {
  set_has_output_format();
  output_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SaveOutputParameter.output_format)
}
inline void SaveOutputParameter::set_output_format(const char* value, size_t size) {
  set_has_output_format();
  output_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SaveOutputParameter.output_format)
}
inline ::std::string* SaveOutputParameter::mutable_output_format() {
  set_has_output_format();
  // @@protoc_insertion_point(field_mutable:caffe.SaveOutputParameter.output_format)
  return output_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveOutputParameter::release_output_format() {
  // @@protoc_insertion_point(field_release:caffe.SaveOutputParameter.output_format)
  clear_has_output_format();
  return output_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveOutputParameter::set_allocated_output_format(::std::string* output_format) {
  if (output_format != NULL) {
    set_has_output_format();
  } else {
    clear_has_output_format();
  }
  output_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_format);
  // @@protoc_insertion_point(field_set_allocated:caffe.SaveOutputParameter.output_format)
}

// optional string label_map_file = 4;
inline bool SaveOutputParameter::has_label_map_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SaveOutputParameter::set_has_label_map_file() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SaveOutputParameter::clear_has_label_map_file() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SaveOutputParameter::clear_label_map_file() {
  label_map_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label_map_file();
}
inline const ::std::string& SaveOutputParameter::label_map_file() const {
  // @@protoc_insertion_point(field_get:caffe.SaveOutputParameter.label_map_file)
  return label_map_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveOutputParameter::set_label_map_file(const ::std::string& value) {
  set_has_label_map_file();
  label_map_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SaveOutputParameter.label_map_file)
}
inline void SaveOutputParameter::set_label_map_file(const char* value) {
  set_has_label_map_file();
  label_map_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SaveOutputParameter.label_map_file)
}
inline void SaveOutputParameter::set_label_map_file(const char* value, size_t size) {
  set_has_label_map_file();
  label_map_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SaveOutputParameter.label_map_file)
}
inline ::std::string* SaveOutputParameter::mutable_label_map_file() {
  set_has_label_map_file();
  // @@protoc_insertion_point(field_mutable:caffe.SaveOutputParameter.label_map_file)
  return label_map_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveOutputParameter::release_label_map_file() {
  // @@protoc_insertion_point(field_release:caffe.SaveOutputParameter.label_map_file)
  clear_has_label_map_file();
  return label_map_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveOutputParameter::set_allocated_label_map_file(::std::string* label_map_file) {
  if (label_map_file != NULL) {
    set_has_label_map_file();
  } else {
    clear_has_label_map_file();
  }
  label_map_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_map_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.SaveOutputParameter.label_map_file)
}

// optional string name_size_file = 5;
inline bool SaveOutputParameter::has_name_size_file() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SaveOutputParameter::set_has_name_size_file() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SaveOutputParameter::clear_has_name_size_file() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SaveOutputParameter::clear_name_size_file() {
  name_size_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name_size_file();
}
inline const ::std::string& SaveOutputParameter::name_size_file() const {
  // @@protoc_insertion_point(field_get:caffe.SaveOutputParameter.name_size_file)
  return name_size_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveOutputParameter::set_name_size_file(const ::std::string& value) {
  set_has_name_size_file();
  name_size_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.SaveOutputParameter.name_size_file)
}
inline void SaveOutputParameter::set_name_size_file(const char* value) {
  set_has_name_size_file();
  name_size_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.SaveOutputParameter.name_size_file)
}
inline void SaveOutputParameter::set_name_size_file(const char* value, size_t size) {
  set_has_name_size_file();
  name_size_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.SaveOutputParameter.name_size_file)
}
inline ::std::string* SaveOutputParameter::mutable_name_size_file() {
  set_has_name_size_file();
  // @@protoc_insertion_point(field_mutable:caffe.SaveOutputParameter.name_size_file)
  return name_size_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SaveOutputParameter::release_name_size_file() {
  // @@protoc_insertion_point(field_release:caffe.SaveOutputParameter.name_size_file)
  clear_has_name_size_file();
  return name_size_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SaveOutputParameter::set_allocated_name_size_file(::std::string* name_size_file) {
  if (name_size_file != NULL) {
    set_has_name_size_file();
  } else {
    clear_has_name_size_file();
  }
  name_size_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_size_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.SaveOutputParameter.name_size_file)
}

// optional uint32 num_test_image = 6;
inline bool SaveOutputParameter::has_num_test_image() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SaveOutputParameter::set_has_num_test_image() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SaveOutputParameter::clear_has_num_test_image() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SaveOutputParameter::clear_num_test_image() {
  num_test_image_ = 0u;
  clear_has_num_test_image();
}
inline ::google::protobuf::uint32 SaveOutputParameter::num_test_image() const {
  // @@protoc_insertion_point(field_get:caffe.SaveOutputParameter.num_test_image)
  return num_test_image_;
}
inline void SaveOutputParameter::set_num_test_image(::google::protobuf::uint32 value) {
  set_has_num_test_image();
  num_test_image_ = value;
  // @@protoc_insertion_point(field_set:caffe.SaveOutputParameter.num_test_image)
}

// -------------------------------------------------------------------

// DetectionOutputParameter

// optional uint32 num_classes = 1;
inline bool DetectionOutputParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetectionOutputParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetectionOutputParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetectionOutputParameter::clear_num_classes() {
  num_classes_ = 0u;
  clear_has_num_classes();
}
inline ::google::protobuf::uint32 DetectionOutputParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.num_classes)
  return num_classes_;
}
inline void DetectionOutputParameter::set_num_classes(::google::protobuf::uint32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.num_classes)
}

// optional bool share_location = 2 [default = true];
inline bool DetectionOutputParameter::has_share_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetectionOutputParameter::set_has_share_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetectionOutputParameter::clear_has_share_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetectionOutputParameter::clear_share_location() {
  share_location_ = true;
  clear_has_share_location();
}
inline bool DetectionOutputParameter::share_location() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.share_location)
  return share_location_;
}
inline void DetectionOutputParameter::set_share_location(bool value) {
  set_has_share_location();
  share_location_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.share_location)
}

// optional int32 background_label_id = 3 [default = 0];
inline bool DetectionOutputParameter::has_background_label_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetectionOutputParameter::set_has_background_label_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DetectionOutputParameter::clear_has_background_label_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DetectionOutputParameter::clear_background_label_id() {
  background_label_id_ = 0;
  clear_has_background_label_id();
}
inline ::google::protobuf::int32 DetectionOutputParameter::background_label_id() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.background_label_id)
  return background_label_id_;
}
inline void DetectionOutputParameter::set_background_label_id(::google::protobuf::int32 value) {
  set_has_background_label_id();
  background_label_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.background_label_id)
}

// optional .caffe.NonMaximumSuppressionParameter nms_param = 4;
inline bool DetectionOutputParameter::has_nms_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DetectionOutputParameter::set_has_nms_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DetectionOutputParameter::clear_has_nms_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DetectionOutputParameter::clear_nms_param() {
  if (nms_param_ != NULL) nms_param_->::caffe::NonMaximumSuppressionParameter::Clear();
  clear_has_nms_param();
}
inline const ::caffe::NonMaximumSuppressionParameter& DetectionOutputParameter::nms_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.nms_param)
  return nms_param_ != NULL ? *nms_param_ : *default_instance_->nms_param_;
}
inline ::caffe::NonMaximumSuppressionParameter* DetectionOutputParameter::mutable_nms_param() {
  set_has_nms_param();
  if (nms_param_ == NULL) {
    nms_param_ = new ::caffe::NonMaximumSuppressionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputParameter.nms_param)
  return nms_param_;
}
inline ::caffe::NonMaximumSuppressionParameter* DetectionOutputParameter::release_nms_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionOutputParameter.nms_param)
  clear_has_nms_param();
  ::caffe::NonMaximumSuppressionParameter* temp = nms_param_;
  nms_param_ = NULL;
  return temp;
}
inline void DetectionOutputParameter::set_allocated_nms_param(::caffe::NonMaximumSuppressionParameter* nms_param) {
  delete nms_param_;
  nms_param_ = nms_param;
  if (nms_param) {
    set_has_nms_param();
  } else {
    clear_has_nms_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionOutputParameter.nms_param)
}

// optional .caffe.SaveOutputParameter save_output_param = 5;
inline bool DetectionOutputParameter::has_save_output_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DetectionOutputParameter::set_has_save_output_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DetectionOutputParameter::clear_has_save_output_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DetectionOutputParameter::clear_save_output_param() {
  if (save_output_param_ != NULL) save_output_param_->::caffe::SaveOutputParameter::Clear();
  clear_has_save_output_param();
}
inline const ::caffe::SaveOutputParameter& DetectionOutputParameter::save_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.save_output_param)
  return save_output_param_ != NULL ? *save_output_param_ : *default_instance_->save_output_param_;
}
inline ::caffe::SaveOutputParameter* DetectionOutputParameter::mutable_save_output_param() {
  set_has_save_output_param();
  if (save_output_param_ == NULL) {
    save_output_param_ = new ::caffe::SaveOutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputParameter.save_output_param)
  return save_output_param_;
}
inline ::caffe::SaveOutputParameter* DetectionOutputParameter::release_save_output_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionOutputParameter.save_output_param)
  clear_has_save_output_param();
  ::caffe::SaveOutputParameter* temp = save_output_param_;
  save_output_param_ = NULL;
  return temp;
}
inline void DetectionOutputParameter::set_allocated_save_output_param(::caffe::SaveOutputParameter* save_output_param) {
  delete save_output_param_;
  save_output_param_ = save_output_param;
  if (save_output_param) {
    set_has_save_output_param();
  } else {
    clear_has_save_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionOutputParameter.save_output_param)
}

// optional .caffe.PriorBoxParameter.CodeType code_type = 6 [default = CORNER];
inline bool DetectionOutputParameter::has_code_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DetectionOutputParameter::set_has_code_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DetectionOutputParameter::clear_has_code_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DetectionOutputParameter::clear_code_type() {
  code_type_ = 1;
  clear_has_code_type();
}
inline ::caffe::PriorBoxParameter_CodeType DetectionOutputParameter::code_type() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.code_type)
  return static_cast< ::caffe::PriorBoxParameter_CodeType >(code_type_);
}
inline void DetectionOutputParameter::set_code_type(::caffe::PriorBoxParameter_CodeType value) {
  assert(::caffe::PriorBoxParameter_CodeType_IsValid(value));
  set_has_code_type();
  code_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.code_type)
}

// optional bool variance_encoded_in_target = 8 [default = false];
inline bool DetectionOutputParameter::has_variance_encoded_in_target() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DetectionOutputParameter::set_has_variance_encoded_in_target() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DetectionOutputParameter::clear_has_variance_encoded_in_target() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DetectionOutputParameter::clear_variance_encoded_in_target() {
  variance_encoded_in_target_ = false;
  clear_has_variance_encoded_in_target();
}
inline bool DetectionOutputParameter::variance_encoded_in_target() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.variance_encoded_in_target)
  return variance_encoded_in_target_;
}
inline void DetectionOutputParameter::set_variance_encoded_in_target(bool value) {
  set_has_variance_encoded_in_target();
  variance_encoded_in_target_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.variance_encoded_in_target)
}

// optional int32 keep_top_k = 7 [default = -1];
inline bool DetectionOutputParameter::has_keep_top_k() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DetectionOutputParameter::set_has_keep_top_k() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DetectionOutputParameter::clear_has_keep_top_k() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DetectionOutputParameter::clear_keep_top_k() {
  keep_top_k_ = -1;
  clear_has_keep_top_k();
}
inline ::google::protobuf::int32 DetectionOutputParameter::keep_top_k() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.keep_top_k)
  return keep_top_k_;
}
inline void DetectionOutputParameter::set_keep_top_k(::google::protobuf::int32 value) {
  set_has_keep_top_k();
  keep_top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.keep_top_k)
}

// optional float confidence_threshold = 9;
inline bool DetectionOutputParameter::has_confidence_threshold() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DetectionOutputParameter::set_has_confidence_threshold() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DetectionOutputParameter::clear_has_confidence_threshold() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DetectionOutputParameter::clear_confidence_threshold() {
  confidence_threshold_ = 0;
  clear_has_confidence_threshold();
}
inline float DetectionOutputParameter::confidence_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.confidence_threshold)
  return confidence_threshold_;
}
inline void DetectionOutputParameter::set_confidence_threshold(float value) {
  set_has_confidence_threshold();
  confidence_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.confidence_threshold)
}

// optional bool visualize = 10 [default = false];
inline bool DetectionOutputParameter::has_visualize() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DetectionOutputParameter::set_has_visualize() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DetectionOutputParameter::clear_has_visualize() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DetectionOutputParameter::clear_visualize() {
  visualize_ = false;
  clear_has_visualize();
}
inline bool DetectionOutputParameter::visualize() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.visualize)
  return visualize_;
}
inline void DetectionOutputParameter::set_visualize(bool value) {
  set_has_visualize();
  visualize_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.visualize)
}

// optional float visualize_threshold = 11;
inline bool DetectionOutputParameter::has_visualize_threshold() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DetectionOutputParameter::set_has_visualize_threshold() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DetectionOutputParameter::clear_has_visualize_threshold() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DetectionOutputParameter::clear_visualize_threshold() {
  visualize_threshold_ = 0;
  clear_has_visualize_threshold();
}
inline float DetectionOutputParameter::visualize_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.visualize_threshold)
  return visualize_threshold_;
}
inline void DetectionOutputParameter::set_visualize_threshold(float value) {
  set_has_visualize_threshold();
  visualize_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.visualize_threshold)
}

// optional .caffe.VisualizeParameter visual_param = 12;
inline bool DetectionOutputParameter::has_visual_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DetectionOutputParameter::set_has_visual_param() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DetectionOutputParameter::clear_has_visual_param() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DetectionOutputParameter::clear_visual_param() {
  if (visual_param_ != NULL) visual_param_->::caffe::VisualizeParameter::Clear();
  clear_has_visual_param();
}
inline const ::caffe::VisualizeParameter& DetectionOutputParameter::visual_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.visual_param)
  return visual_param_ != NULL ? *visual_param_ : *default_instance_->visual_param_;
}
inline ::caffe::VisualizeParameter* DetectionOutputParameter::mutable_visual_param() {
  set_has_visual_param();
  if (visual_param_ == NULL) {
    visual_param_ = new ::caffe::VisualizeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputParameter.visual_param)
  return visual_param_;
}
inline ::caffe::VisualizeParameter* DetectionOutputParameter::release_visual_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionOutputParameter.visual_param)
  clear_has_visual_param();
  ::caffe::VisualizeParameter* temp = visual_param_;
  visual_param_ = NULL;
  return temp;
}
inline void DetectionOutputParameter::set_allocated_visual_param(::caffe::VisualizeParameter* visual_param) {
  delete visual_param_;
  visual_param_ = visual_param;
  if (visual_param) {
    set_has_visual_param();
  } else {
    clear_has_visual_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionOutputParameter.visual_param)
}

// optional float conf_threshold = 13;
inline bool DetectionOutputParameter::has_conf_threshold() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DetectionOutputParameter::set_has_conf_threshold() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DetectionOutputParameter::clear_has_conf_threshold() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DetectionOutputParameter::clear_conf_threshold() {
  conf_threshold_ = 0;
  clear_has_conf_threshold();
}
inline float DetectionOutputParameter::conf_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.conf_threshold)
  return conf_threshold_;
}
inline void DetectionOutputParameter::set_conf_threshold(float value) {
  set_has_conf_threshold();
  conf_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.conf_threshold)
}

// optional float nms_threshold = 14;
inline bool DetectionOutputParameter::has_nms_threshold() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DetectionOutputParameter::set_has_nms_threshold() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DetectionOutputParameter::clear_has_nms_threshold() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DetectionOutputParameter::clear_nms_threshold() {
  nms_threshold_ = 0;
  clear_has_nms_threshold();
}
inline float DetectionOutputParameter::nms_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.nms_threshold)
  return nms_threshold_;
}
inline void DetectionOutputParameter::set_nms_threshold(float value) {
  set_has_nms_threshold();
  nms_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.nms_threshold)
}

// optional float size_threshold = 15;
inline bool DetectionOutputParameter::has_size_threshold() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DetectionOutputParameter::set_has_size_threshold() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DetectionOutputParameter::clear_has_size_threshold() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DetectionOutputParameter::clear_size_threshold() {
  size_threshold_ = 0;
  clear_has_size_threshold();
}
inline float DetectionOutputParameter::size_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.size_threshold)
  return size_threshold_;
}
inline void DetectionOutputParameter::set_size_threshold(float value) {
  set_has_size_threshold();
  size_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.size_threshold)
}

// optional int32 top_k = 16 [default = 200];
inline bool DetectionOutputParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DetectionOutputParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DetectionOutputParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DetectionOutputParameter::clear_top_k() {
  top_k_ = 200;
  clear_has_top_k();
}
inline ::google::protobuf::int32 DetectionOutputParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.top_k)
  return top_k_;
}
inline void DetectionOutputParameter::set_top_k(::google::protobuf::int32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.top_k)
}

// optional int32 alias_id = 17 [default = 0];
inline bool DetectionOutputParameter::has_alias_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DetectionOutputParameter::set_has_alias_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DetectionOutputParameter::clear_has_alias_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DetectionOutputParameter::clear_alias_id() {
  alias_id_ = 0;
  clear_has_alias_id();
}
inline ::google::protobuf::int32 DetectionOutputParameter::alias_id() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.alias_id)
  return alias_id_;
}
inline void DetectionOutputParameter::set_alias_id(::google::protobuf::int32 value) {
  set_has_alias_id();
  alias_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.alias_id)
}

// optional string name_to_label_file = 18;
inline bool DetectionOutputParameter::has_name_to_label_file() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DetectionOutputParameter::set_has_name_to_label_file() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DetectionOutputParameter::clear_has_name_to_label_file() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DetectionOutputParameter::clear_name_to_label_file() {
  name_to_label_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name_to_label_file();
}
inline const ::std::string& DetectionOutputParameter::name_to_label_file() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.name_to_label_file)
  return name_to_label_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetectionOutputParameter::set_name_to_label_file(const ::std::string& value) {
  set_has_name_to_label_file();
  name_to_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.name_to_label_file)
}
inline void DetectionOutputParameter::set_name_to_label_file(const char* value) {
  set_has_name_to_label_file();
  name_to_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DetectionOutputParameter.name_to_label_file)
}
inline void DetectionOutputParameter::set_name_to_label_file(const char* value, size_t size) {
  set_has_name_to_label_file();
  name_to_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DetectionOutputParameter.name_to_label_file)
}
inline ::std::string* DetectionOutputParameter::mutable_name_to_label_file() {
  set_has_name_to_label_file();
  // @@protoc_insertion_point(field_mutable:caffe.DetectionOutputParameter.name_to_label_file)
  return name_to_label_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DetectionOutputParameter::release_name_to_label_file() {
  // @@protoc_insertion_point(field_release:caffe.DetectionOutputParameter.name_to_label_file)
  clear_has_name_to_label_file();
  return name_to_label_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetectionOutputParameter::set_allocated_name_to_label_file(::std::string* name_to_label_file) {
  if (name_to_label_file != NULL) {
    set_has_name_to_label_file();
  } else {
    clear_has_name_to_label_file();
  }
  name_to_label_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_to_label_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionOutputParameter.name_to_label_file)
}

// repeated int32 target_labels = 19;
inline int DetectionOutputParameter::target_labels_size() const {
  return target_labels_.size();
}
inline void DetectionOutputParameter::clear_target_labels() {
  target_labels_.Clear();
}
inline ::google::protobuf::int32 DetectionOutputParameter::target_labels(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.target_labels)
  return target_labels_.Get(index);
}
inline void DetectionOutputParameter::set_target_labels(int index, ::google::protobuf::int32 value) {
  target_labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.target_labels)
}
inline void DetectionOutputParameter::add_target_labels(::google::protobuf::int32 value) {
  target_labels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.target_labels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DetectionOutputParameter::target_labels() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.target_labels)
  return target_labels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DetectionOutputParameter::mutable_target_labels() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.target_labels)
  return &target_labels_;
}

// optional .caffe.MultiBoxLossParameter.ConfLossType conf_loss_type = 300;
inline bool DetectionOutputParameter::has_conf_loss_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DetectionOutputParameter::set_has_conf_loss_type() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DetectionOutputParameter::clear_has_conf_loss_type() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DetectionOutputParameter::clear_conf_loss_type() {
  conf_loss_type_ = 0;
  clear_has_conf_loss_type();
}
inline ::caffe::MultiBoxLossParameter_ConfLossType DetectionOutputParameter::conf_loss_type() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.conf_loss_type)
  return static_cast< ::caffe::MultiBoxLossParameter_ConfLossType >(conf_loss_type_);
}
inline void DetectionOutputParameter::set_conf_loss_type(::caffe::MultiBoxLossParameter_ConfLossType value) {
  assert(::caffe::MultiBoxLossParameter_ConfLossType_IsValid(value));
  set_has_conf_loss_type();
  conf_loss_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.conf_loss_type)
}

// optional .caffe.MultiBoxLossParameter.MatchType match_type = 301;
inline bool DetectionOutputParameter::has_match_type() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DetectionOutputParameter::set_has_match_type() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DetectionOutputParameter::clear_has_match_type() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DetectionOutputParameter::clear_match_type() {
  match_type_ = 0;
  clear_has_match_type();
}
inline ::caffe::MultiBoxLossParameter_MatchType DetectionOutputParameter::match_type() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.match_type)
  return static_cast< ::caffe::MultiBoxLossParameter_MatchType >(match_type_);
}
inline void DetectionOutputParameter::set_match_type(::caffe::MultiBoxLossParameter_MatchType value) {
  assert(::caffe::MultiBoxLossParameter_MatchType_IsValid(value));
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.match_type)
}

// optional bool flag_noperson = 302 [default = false];
inline bool DetectionOutputParameter::has_flag_noperson() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DetectionOutputParameter::set_has_flag_noperson() {
  _has_bits_[0] |= 0x00200000u;
}
inline void DetectionOutputParameter::clear_has_flag_noperson() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void DetectionOutputParameter::clear_flag_noperson() {
  flag_noperson_ = false;
  clear_has_flag_noperson();
}
inline bool DetectionOutputParameter::flag_noperson() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.flag_noperson)
  return flag_noperson_;
}
inline void DetectionOutputParameter::set_flag_noperson(bool value) {
  set_has_flag_noperson();
  flag_noperson_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.flag_noperson)
}

// repeated int32 gt_labels = 303;
inline int DetectionOutputParameter::gt_labels_size() const {
  return gt_labels_.size();
}
inline void DetectionOutputParameter::clear_gt_labels() {
  gt_labels_.Clear();
}
inline ::google::protobuf::int32 DetectionOutputParameter::gt_labels(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.gt_labels)
  return gt_labels_.Get(index);
}
inline void DetectionOutputParameter::set_gt_labels(int index, ::google::protobuf::int32 value) {
  gt_labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.gt_labels)
}
inline void DetectionOutputParameter::add_gt_labels(::google::protobuf::int32 value) {
  gt_labels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionOutputParameter.gt_labels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DetectionOutputParameter::gt_labels() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionOutputParameter.gt_labels)
  return gt_labels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DetectionOutputParameter::mutable_gt_labels() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionOutputParameter.gt_labels)
  return &gt_labels_;
}

// optional float overlap_threshold = 304 [default = 0.5];
inline bool DetectionOutputParameter::has_overlap_threshold() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void DetectionOutputParameter::set_has_overlap_threshold() {
  _has_bits_[0] |= 0x00800000u;
}
inline void DetectionOutputParameter::clear_has_overlap_threshold() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void DetectionOutputParameter::clear_overlap_threshold() {
  overlap_threshold_ = 0.5f;
  clear_has_overlap_threshold();
}
inline float DetectionOutputParameter::overlap_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.overlap_threshold)
  return overlap_threshold_;
}
inline void DetectionOutputParameter::set_overlap_threshold(float value) {
  set_has_overlap_threshold();
  overlap_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.overlap_threshold)
}

// optional float neg_pos_ratio = 305 [default = 3];
inline bool DetectionOutputParameter::has_neg_pos_ratio() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void DetectionOutputParameter::set_has_neg_pos_ratio() {
  _has_bits_[0] |= 0x01000000u;
}
inline void DetectionOutputParameter::clear_has_neg_pos_ratio() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void DetectionOutputParameter::clear_neg_pos_ratio() {
  neg_pos_ratio_ = 3;
  clear_has_neg_pos_ratio();
}
inline float DetectionOutputParameter::neg_pos_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.neg_pos_ratio)
  return neg_pos_ratio_;
}
inline void DetectionOutputParameter::set_neg_pos_ratio(float value) {
  set_has_neg_pos_ratio();
  neg_pos_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.neg_pos_ratio)
}

// optional float neg_overlap = 306 [default = 0.5];
inline bool DetectionOutputParameter::has_neg_overlap() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void DetectionOutputParameter::set_has_neg_overlap() {
  _has_bits_[0] |= 0x02000000u;
}
inline void DetectionOutputParameter::clear_has_neg_overlap() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void DetectionOutputParameter::clear_neg_overlap() {
  neg_overlap_ = 0.5f;
  clear_has_neg_overlap();
}
inline float DetectionOutputParameter::neg_overlap() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.neg_overlap)
  return neg_overlap_;
}
inline void DetectionOutputParameter::set_neg_overlap(float value) {
  set_has_neg_overlap();
  neg_overlap_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.neg_overlap)
}

// optional int32 img_w = 307;
inline bool DetectionOutputParameter::has_img_w() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void DetectionOutputParameter::set_has_img_w() {
  _has_bits_[0] |= 0x04000000u;
}
inline void DetectionOutputParameter::clear_has_img_w() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void DetectionOutputParameter::clear_img_w() {
  img_w_ = 0;
  clear_has_img_w();
}
inline ::google::protobuf::int32 DetectionOutputParameter::img_w() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.img_w)
  return img_w_;
}
inline void DetectionOutputParameter::set_img_w(::google::protobuf::int32 value) {
  set_has_img_w();
  img_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.img_w)
}

// optional int32 img_h = 308;
inline bool DetectionOutputParameter::has_img_h() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void DetectionOutputParameter::set_has_img_h() {
  _has_bits_[0] |= 0x08000000u;
}
inline void DetectionOutputParameter::clear_has_img_h() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void DetectionOutputParameter::clear_img_h() {
  img_h_ = 0;
  clear_has_img_h();
}
inline ::google::protobuf::int32 DetectionOutputParameter::img_h() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.img_h)
  return img_h_;
}
inline void DetectionOutputParameter::set_img_h(::google::protobuf::int32 value) {
  set_has_img_h();
  img_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.img_h)
}

// optional bool use_difficult_gt = 309 [default = false];
inline bool DetectionOutputParameter::has_use_difficult_gt() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void DetectionOutputParameter::set_has_use_difficult_gt() {
  _has_bits_[0] |= 0x10000000u;
}
inline void DetectionOutputParameter::clear_has_use_difficult_gt() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void DetectionOutputParameter::clear_use_difficult_gt() {
  use_difficult_gt_ = false;
  clear_has_use_difficult_gt();
}
inline bool DetectionOutputParameter::use_difficult_gt() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.use_difficult_gt)
  return use_difficult_gt_;
}
inline void DetectionOutputParameter::set_use_difficult_gt(bool value) {
  set_has_use_difficult_gt();
  use_difficult_gt_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.use_difficult_gt)
}

// optional .caffe.MultiBoxLossParameter.ConfLossType out_label_type = 310;
inline bool DetectionOutputParameter::has_out_label_type() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void DetectionOutputParameter::set_has_out_label_type() {
  _has_bits_[0] |= 0x20000000u;
}
inline void DetectionOutputParameter::clear_has_out_label_type() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void DetectionOutputParameter::clear_out_label_type() {
  out_label_type_ = 0;
  clear_has_out_label_type();
}
inline ::caffe::MultiBoxLossParameter_ConfLossType DetectionOutputParameter::out_label_type() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.out_label_type)
  return static_cast< ::caffe::MultiBoxLossParameter_ConfLossType >(out_label_type_);
}
inline void DetectionOutputParameter::set_out_label_type(::caffe::MultiBoxLossParameter_ConfLossType value) {
  assert(::caffe::MultiBoxLossParameter_ConfLossType_IsValid(value));
  set_has_out_label_type();
  out_label_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.out_label_type)
}

// optional int32 num_positive_max = 311 [default = 128];
inline bool DetectionOutputParameter::has_num_positive_max() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void DetectionOutputParameter::set_has_num_positive_max() {
  _has_bits_[0] |= 0x40000000u;
}
inline void DetectionOutputParameter::clear_has_num_positive_max() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void DetectionOutputParameter::clear_num_positive_max() {
  num_positive_max_ = 128;
  clear_has_num_positive_max();
}
inline ::google::protobuf::int32 DetectionOutputParameter::num_positive_max() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.num_positive_max)
  return num_positive_max_;
}
inline void DetectionOutputParameter::set_num_positive_max(::google::protobuf::int32 value) {
  set_has_num_positive_max();
  num_positive_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.num_positive_max)
}

// optional int32 ndim_detout = 312 [default = 7];
inline bool DetectionOutputParameter::has_ndim_detout() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void DetectionOutputParameter::set_has_ndim_detout() {
  _has_bits_[0] |= 0x80000000u;
}
inline void DetectionOutputParameter::clear_has_ndim_detout() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void DetectionOutputParameter::clear_ndim_detout() {
  ndim_detout_ = 7;
  clear_has_ndim_detout();
}
inline ::google::protobuf::int32 DetectionOutputParameter::ndim_detout() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.ndim_detout)
  return ndim_detout_;
}
inline void DetectionOutputParameter::set_ndim_detout(::google::protobuf::int32 value) {
  set_has_ndim_detout();
  ndim_detout_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.ndim_detout)
}

// optional .caffe.DetectionOutputParameter.NmsType vote_or_not = 313 [default = FastVote];
inline bool DetectionOutputParameter::has_vote_or_not() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void DetectionOutputParameter::set_has_vote_or_not() {
  _has_bits_[1] |= 0x00000001u;
}
inline void DetectionOutputParameter::clear_has_vote_or_not() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void DetectionOutputParameter::clear_vote_or_not() {
  vote_or_not_ = 2;
  clear_has_vote_or_not();
}
inline ::caffe::DetectionOutputParameter_NmsType DetectionOutputParameter::vote_or_not() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.vote_or_not)
  return static_cast< ::caffe::DetectionOutputParameter_NmsType >(vote_or_not_);
}
inline void DetectionOutputParameter::set_vote_or_not(::caffe::DetectionOutputParameter_NmsType value) {
  assert(::caffe::DetectionOutputParameter_NmsType_IsValid(value));
  set_has_vote_or_not();
  vote_or_not_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.vote_or_not)
}

// optional .caffe.DetectionOutputParameter.SoftType soft_type = 314;
inline bool DetectionOutputParameter::has_soft_type() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void DetectionOutputParameter::set_has_soft_type() {
  _has_bits_[1] |= 0x00000002u;
}
inline void DetectionOutputParameter::clear_has_soft_type() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void DetectionOutputParameter::clear_soft_type() {
  soft_type_ = 0;
  clear_has_soft_type();
}
inline ::caffe::DetectionOutputParameter_SoftType DetectionOutputParameter::soft_type() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.soft_type)
  return static_cast< ::caffe::DetectionOutputParameter_SoftType >(soft_type_);
}
inline void DetectionOutputParameter::set_soft_type(::caffe::DetectionOutputParameter_SoftType value) {
  assert(::caffe::DetectionOutputParameter_SoftType_IsValid(value));
  set_has_soft_type();
  soft_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.soft_type)
}

// optional float objectness_score = 315 [default = 0.99];
inline bool DetectionOutputParameter::has_objectness_score() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void DetectionOutputParameter::set_has_objectness_score() {
  _has_bits_[1] |= 0x00000004u;
}
inline void DetectionOutputParameter::clear_has_objectness_score() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void DetectionOutputParameter::clear_objectness_score() {
  objectness_score_ = 0.99f;
  clear_has_objectness_score();
}
inline float DetectionOutputParameter::objectness_score() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionOutputParameter.objectness_score)
  return objectness_score_;
}
inline void DetectionOutputParameter::set_objectness_score(float value) {
  set_has_objectness_score();
  objectness_score_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionOutputParameter.objectness_score)
}

// -------------------------------------------------------------------

// DetectionMultiMcOutputParameter

// optional uint32 num_classes = 1;
inline bool DetectionMultiMcOutputParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetectionMultiMcOutputParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetectionMultiMcOutputParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetectionMultiMcOutputParameter::clear_num_classes() {
  num_classes_ = 0u;
  clear_has_num_classes();
}
inline ::google::protobuf::uint32 DetectionMultiMcOutputParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMultiMcOutputParameter.num_classes)
  return num_classes_;
}
inline void DetectionMultiMcOutputParameter::set_num_classes(::google::protobuf::uint32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionMultiMcOutputParameter.num_classes)
}

// optional bool share_location = 2 [default = true];
inline bool DetectionMultiMcOutputParameter::has_share_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetectionMultiMcOutputParameter::set_has_share_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetectionMultiMcOutputParameter::clear_has_share_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetectionMultiMcOutputParameter::clear_share_location() {
  share_location_ = true;
  clear_has_share_location();
}
inline bool DetectionMultiMcOutputParameter::share_location() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMultiMcOutputParameter.share_location)
  return share_location_;
}
inline void DetectionMultiMcOutputParameter::set_share_location(bool value) {
  set_has_share_location();
  share_location_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionMultiMcOutputParameter.share_location)
}

// optional int32 background_label_id = 3 [default = 0];
inline bool DetectionMultiMcOutputParameter::has_background_label_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetectionMultiMcOutputParameter::set_has_background_label_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DetectionMultiMcOutputParameter::clear_has_background_label_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DetectionMultiMcOutputParameter::clear_background_label_id() {
  background_label_id_ = 0;
  clear_has_background_label_id();
}
inline ::google::protobuf::int32 DetectionMultiMcOutputParameter::background_label_id() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMultiMcOutputParameter.background_label_id)
  return background_label_id_;
}
inline void DetectionMultiMcOutputParameter::set_background_label_id(::google::protobuf::int32 value) {
  set_has_background_label_id();
  background_label_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionMultiMcOutputParameter.background_label_id)
}

// optional .caffe.NonMaximumSuppressionParameter nms_param = 4;
inline bool DetectionMultiMcOutputParameter::has_nms_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DetectionMultiMcOutputParameter::set_has_nms_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DetectionMultiMcOutputParameter::clear_has_nms_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DetectionMultiMcOutputParameter::clear_nms_param() {
  if (nms_param_ != NULL) nms_param_->::caffe::NonMaximumSuppressionParameter::Clear();
  clear_has_nms_param();
}
inline const ::caffe::NonMaximumSuppressionParameter& DetectionMultiMcOutputParameter::nms_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMultiMcOutputParameter.nms_param)
  return nms_param_ != NULL ? *nms_param_ : *default_instance_->nms_param_;
}
inline ::caffe::NonMaximumSuppressionParameter* DetectionMultiMcOutputParameter::mutable_nms_param() {
  set_has_nms_param();
  if (nms_param_ == NULL) {
    nms_param_ = new ::caffe::NonMaximumSuppressionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionMultiMcOutputParameter.nms_param)
  return nms_param_;
}
inline ::caffe::NonMaximumSuppressionParameter* DetectionMultiMcOutputParameter::release_nms_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionMultiMcOutputParameter.nms_param)
  clear_has_nms_param();
  ::caffe::NonMaximumSuppressionParameter* temp = nms_param_;
  nms_param_ = NULL;
  return temp;
}
inline void DetectionMultiMcOutputParameter::set_allocated_nms_param(::caffe::NonMaximumSuppressionParameter* nms_param) {
  delete nms_param_;
  nms_param_ = nms_param;
  if (nms_param) {
    set_has_nms_param();
  } else {
    clear_has_nms_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionMultiMcOutputParameter.nms_param)
}

// optional .caffe.SaveOutputParameter save_output_param = 5;
inline bool DetectionMultiMcOutputParameter::has_save_output_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DetectionMultiMcOutputParameter::set_has_save_output_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DetectionMultiMcOutputParameter::clear_has_save_output_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DetectionMultiMcOutputParameter::clear_save_output_param() {
  if (save_output_param_ != NULL) save_output_param_->::caffe::SaveOutputParameter::Clear();
  clear_has_save_output_param();
}
inline const ::caffe::SaveOutputParameter& DetectionMultiMcOutputParameter::save_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMultiMcOutputParameter.save_output_param)
  return save_output_param_ != NULL ? *save_output_param_ : *default_instance_->save_output_param_;
}
inline ::caffe::SaveOutputParameter* DetectionMultiMcOutputParameter::mutable_save_output_param() {
  set_has_save_output_param();
  if (save_output_param_ == NULL) {
    save_output_param_ = new ::caffe::SaveOutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionMultiMcOutputParameter.save_output_param)
  return save_output_param_;
}
inline ::caffe::SaveOutputParameter* DetectionMultiMcOutputParameter::release_save_output_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionMultiMcOutputParameter.save_output_param)
  clear_has_save_output_param();
  ::caffe::SaveOutputParameter* temp = save_output_param_;
  save_output_param_ = NULL;
  return temp;
}
inline void DetectionMultiMcOutputParameter::set_allocated_save_output_param(::caffe::SaveOutputParameter* save_output_param) {
  delete save_output_param_;
  save_output_param_ = save_output_param;
  if (save_output_param) {
    set_has_save_output_param();
  } else {
    clear_has_save_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionMultiMcOutputParameter.save_output_param)
}

// optional .caffe.PriorBoxParameter.CodeType code_type = 6 [default = CORNER];
inline bool DetectionMultiMcOutputParameter::has_code_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DetectionMultiMcOutputParameter::set_has_code_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DetectionMultiMcOutputParameter::clear_has_code_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DetectionMultiMcOutputParameter::clear_code_type() {
  code_type_ = 1;
  clear_has_code_type();
}
inline ::caffe::PriorBoxParameter_CodeType DetectionMultiMcOutputParameter::code_type() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMultiMcOutputParameter.code_type)
  return static_cast< ::caffe::PriorBoxParameter_CodeType >(code_type_);
}
inline void DetectionMultiMcOutputParameter::set_code_type(::caffe::PriorBoxParameter_CodeType value) {
  assert(::caffe::PriorBoxParameter_CodeType_IsValid(value));
  set_has_code_type();
  code_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionMultiMcOutputParameter.code_type)
}

// optional bool variance_encoded_in_target = 8 [default = false];
inline bool DetectionMultiMcOutputParameter::has_variance_encoded_in_target() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DetectionMultiMcOutputParameter::set_has_variance_encoded_in_target() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DetectionMultiMcOutputParameter::clear_has_variance_encoded_in_target() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DetectionMultiMcOutputParameter::clear_variance_encoded_in_target() {
  variance_encoded_in_target_ = false;
  clear_has_variance_encoded_in_target();
}
inline bool DetectionMultiMcOutputParameter::variance_encoded_in_target() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMultiMcOutputParameter.variance_encoded_in_target)
  return variance_encoded_in_target_;
}
inline void DetectionMultiMcOutputParameter::set_variance_encoded_in_target(bool value) {
  set_has_variance_encoded_in_target();
  variance_encoded_in_target_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionMultiMcOutputParameter.variance_encoded_in_target)
}

// optional int32 keep_top_k = 7 [default = -1];
inline bool DetectionMultiMcOutputParameter::has_keep_top_k() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DetectionMultiMcOutputParameter::set_has_keep_top_k() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DetectionMultiMcOutputParameter::clear_has_keep_top_k() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DetectionMultiMcOutputParameter::clear_keep_top_k() {
  keep_top_k_ = -1;
  clear_has_keep_top_k();
}
inline ::google::protobuf::int32 DetectionMultiMcOutputParameter::keep_top_k() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMultiMcOutputParameter.keep_top_k)
  return keep_top_k_;
}
inline void DetectionMultiMcOutputParameter::set_keep_top_k(::google::protobuf::int32 value) {
  set_has_keep_top_k();
  keep_top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionMultiMcOutputParameter.keep_top_k)
}

// optional float confidence_threshold = 9;
inline bool DetectionMultiMcOutputParameter::has_confidence_threshold() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DetectionMultiMcOutputParameter::set_has_confidence_threshold() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DetectionMultiMcOutputParameter::clear_has_confidence_threshold() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DetectionMultiMcOutputParameter::clear_confidence_threshold() {
  confidence_threshold_ = 0;
  clear_has_confidence_threshold();
}
inline float DetectionMultiMcOutputParameter::confidence_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMultiMcOutputParameter.confidence_threshold)
  return confidence_threshold_;
}
inline void DetectionMultiMcOutputParameter::set_confidence_threshold(float value) {
  set_has_confidence_threshold();
  confidence_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionMultiMcOutputParameter.confidence_threshold)
}

// optional bool visualize = 10 [default = false];
inline bool DetectionMultiMcOutputParameter::has_visualize() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DetectionMultiMcOutputParameter::set_has_visualize() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DetectionMultiMcOutputParameter::clear_has_visualize() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DetectionMultiMcOutputParameter::clear_visualize() {
  visualize_ = false;
  clear_has_visualize();
}
inline bool DetectionMultiMcOutputParameter::visualize() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMultiMcOutputParameter.visualize)
  return visualize_;
}
inline void DetectionMultiMcOutputParameter::set_visualize(bool value) {
  set_has_visualize();
  visualize_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionMultiMcOutputParameter.visualize)
}

// optional float visualize_threshold = 11;
inline bool DetectionMultiMcOutputParameter::has_visualize_threshold() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DetectionMultiMcOutputParameter::set_has_visualize_threshold() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DetectionMultiMcOutputParameter::clear_has_visualize_threshold() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DetectionMultiMcOutputParameter::clear_visualize_threshold() {
  visualize_threshold_ = 0;
  clear_has_visualize_threshold();
}
inline float DetectionMultiMcOutputParameter::visualize_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMultiMcOutputParameter.visualize_threshold)
  return visualize_threshold_;
}
inline void DetectionMultiMcOutputParameter::set_visualize_threshold(float value) {
  set_has_visualize_threshold();
  visualize_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionMultiMcOutputParameter.visualize_threshold)
}

// optional .caffe.VisualizeParameter visual_param = 12;
inline bool DetectionMultiMcOutputParameter::has_visual_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DetectionMultiMcOutputParameter::set_has_visual_param() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DetectionMultiMcOutputParameter::clear_has_visual_param() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DetectionMultiMcOutputParameter::clear_visual_param() {
  if (visual_param_ != NULL) visual_param_->::caffe::VisualizeParameter::Clear();
  clear_has_visual_param();
}
inline const ::caffe::VisualizeParameter& DetectionMultiMcOutputParameter::visual_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMultiMcOutputParameter.visual_param)
  return visual_param_ != NULL ? *visual_param_ : *default_instance_->visual_param_;
}
inline ::caffe::VisualizeParameter* DetectionMultiMcOutputParameter::mutable_visual_param() {
  set_has_visual_param();
  if (visual_param_ == NULL) {
    visual_param_ = new ::caffe::VisualizeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionMultiMcOutputParameter.visual_param)
  return visual_param_;
}
inline ::caffe::VisualizeParameter* DetectionMultiMcOutputParameter::release_visual_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionMultiMcOutputParameter.visual_param)
  clear_has_visual_param();
  ::caffe::VisualizeParameter* temp = visual_param_;
  visual_param_ = NULL;
  return temp;
}
inline void DetectionMultiMcOutputParameter::set_allocated_visual_param(::caffe::VisualizeParameter* visual_param) {
  delete visual_param_;
  visual_param_ = visual_param;
  if (visual_param) {
    set_has_visual_param();
  } else {
    clear_has_visual_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionMultiMcOutputParameter.visual_param)
}

// optional float conf_threshold = 22;
inline bool DetectionMultiMcOutputParameter::has_conf_threshold() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DetectionMultiMcOutputParameter::set_has_conf_threshold() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DetectionMultiMcOutputParameter::clear_has_conf_threshold() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DetectionMultiMcOutputParameter::clear_conf_threshold() {
  conf_threshold_ = 0;
  clear_has_conf_threshold();
}
inline float DetectionMultiMcOutputParameter::conf_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMultiMcOutputParameter.conf_threshold)
  return conf_threshold_;
}
inline void DetectionMultiMcOutputParameter::set_conf_threshold(float value) {
  set_has_conf_threshold();
  conf_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionMultiMcOutputParameter.conf_threshold)
}

// optional float nms_threshold = 23;
inline bool DetectionMultiMcOutputParameter::has_nms_threshold() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DetectionMultiMcOutputParameter::set_has_nms_threshold() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DetectionMultiMcOutputParameter::clear_has_nms_threshold() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DetectionMultiMcOutputParameter::clear_nms_threshold() {
  nms_threshold_ = 0;
  clear_has_nms_threshold();
}
inline float DetectionMultiMcOutputParameter::nms_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMultiMcOutputParameter.nms_threshold)
  return nms_threshold_;
}
inline void DetectionMultiMcOutputParameter::set_nms_threshold(float value) {
  set_has_nms_threshold();
  nms_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionMultiMcOutputParameter.nms_threshold)
}

// optional float size_threshold = 24;
inline bool DetectionMultiMcOutputParameter::has_size_threshold() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DetectionMultiMcOutputParameter::set_has_size_threshold() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DetectionMultiMcOutputParameter::clear_has_size_threshold() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DetectionMultiMcOutputParameter::clear_size_threshold() {
  size_threshold_ = 0;
  clear_has_size_threshold();
}
inline float DetectionMultiMcOutputParameter::size_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMultiMcOutputParameter.size_threshold)
  return size_threshold_;
}
inline void DetectionMultiMcOutputParameter::set_size_threshold(float value) {
  set_has_size_threshold();
  size_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionMultiMcOutputParameter.size_threshold)
}

// optional int32 top_k = 43 [default = 25];
inline bool DetectionMultiMcOutputParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DetectionMultiMcOutputParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DetectionMultiMcOutputParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DetectionMultiMcOutputParameter::clear_top_k() {
  top_k_ = 25;
  clear_has_top_k();
}
inline ::google::protobuf::int32 DetectionMultiMcOutputParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMultiMcOutputParameter.top_k)
  return top_k_;
}
inline void DetectionMultiMcOutputParameter::set_top_k(::google::protobuf::int32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionMultiMcOutputParameter.top_k)
}

// optional string name_to_label_file = 26;
inline bool DetectionMultiMcOutputParameter::has_name_to_label_file() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DetectionMultiMcOutputParameter::set_has_name_to_label_file() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DetectionMultiMcOutputParameter::clear_has_name_to_label_file() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DetectionMultiMcOutputParameter::clear_name_to_label_file() {
  name_to_label_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name_to_label_file();
}
inline const ::std::string& DetectionMultiMcOutputParameter::name_to_label_file() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMultiMcOutputParameter.name_to_label_file)
  return name_to_label_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetectionMultiMcOutputParameter::set_name_to_label_file(const ::std::string& value) {
  set_has_name_to_label_file();
  name_to_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.DetectionMultiMcOutputParameter.name_to_label_file)
}
inline void DetectionMultiMcOutputParameter::set_name_to_label_file(const char* value) {
  set_has_name_to_label_file();
  name_to_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.DetectionMultiMcOutputParameter.name_to_label_file)
}
inline void DetectionMultiMcOutputParameter::set_name_to_label_file(const char* value, size_t size) {
  set_has_name_to_label_file();
  name_to_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.DetectionMultiMcOutputParameter.name_to_label_file)
}
inline ::std::string* DetectionMultiMcOutputParameter::mutable_name_to_label_file() {
  set_has_name_to_label_file();
  // @@protoc_insertion_point(field_mutable:caffe.DetectionMultiMcOutputParameter.name_to_label_file)
  return name_to_label_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DetectionMultiMcOutputParameter::release_name_to_label_file() {
  // @@protoc_insertion_point(field_release:caffe.DetectionMultiMcOutputParameter.name_to_label_file)
  clear_has_name_to_label_file();
  return name_to_label_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetectionMultiMcOutputParameter::set_allocated_name_to_label_file(::std::string* name_to_label_file) {
  if (name_to_label_file != NULL) {
    set_has_name_to_label_file();
  } else {
    clear_has_name_to_label_file();
  }
  name_to_label_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_to_label_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionMultiMcOutputParameter.name_to_label_file)
}

// -------------------------------------------------------------------

// DetectionMcOutputParameter

// optional int32 num_classes = 1 [default = 1];
inline bool DetectionMcOutputParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetectionMcOutputParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetectionMcOutputParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetectionMcOutputParameter::clear_num_classes() {
  num_classes_ = 1;
  clear_has_num_classes();
}
inline ::google::protobuf::int32 DetectionMcOutputParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMcOutputParameter.num_classes)
  return num_classes_;
}
inline void DetectionMcOutputParameter::set_num_classes(::google::protobuf::int32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionMcOutputParameter.num_classes)
}

// optional float conf_threshold = 2 [default = 0.5];
inline bool DetectionMcOutputParameter::has_conf_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetectionMcOutputParameter::set_has_conf_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetectionMcOutputParameter::clear_has_conf_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetectionMcOutputParameter::clear_conf_threshold() {
  conf_threshold_ = 0.5f;
  clear_has_conf_threshold();
}
inline float DetectionMcOutputParameter::conf_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMcOutputParameter.conf_threshold)
  return conf_threshold_;
}
inline void DetectionMcOutputParameter::set_conf_threshold(float value) {
  set_has_conf_threshold();
  conf_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionMcOutputParameter.conf_threshold)
}

// optional float nms_threshold = 3 [default = 0.4];
inline bool DetectionMcOutputParameter::has_nms_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetectionMcOutputParameter::set_has_nms_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DetectionMcOutputParameter::clear_has_nms_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DetectionMcOutputParameter::clear_nms_threshold() {
  nms_threshold_ = 0.4f;
  clear_has_nms_threshold();
}
inline float DetectionMcOutputParameter::nms_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMcOutputParameter.nms_threshold)
  return nms_threshold_;
}
inline void DetectionMcOutputParameter::set_nms_threshold(float value) {
  set_has_nms_threshold();
  nms_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionMcOutputParameter.nms_threshold)
}

// optional float boxsize_threshold = 4 [default = 0];
inline bool DetectionMcOutputParameter::has_boxsize_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DetectionMcOutputParameter::set_has_boxsize_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DetectionMcOutputParameter::clear_has_boxsize_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DetectionMcOutputParameter::clear_boxsize_threshold() {
  boxsize_threshold_ = 0;
  clear_has_boxsize_threshold();
}
inline float DetectionMcOutputParameter::boxsize_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMcOutputParameter.boxsize_threshold)
  return boxsize_threshold_;
}
inline void DetectionMcOutputParameter::set_boxsize_threshold(float value) {
  set_has_boxsize_threshold();
  boxsize_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionMcOutputParameter.boxsize_threshold)
}

// optional int32 top_k = 5 [default = 100];
inline bool DetectionMcOutputParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DetectionMcOutputParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DetectionMcOutputParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DetectionMcOutputParameter::clear_top_k() {
  top_k_ = 100;
  clear_has_top_k();
}
inline ::google::protobuf::int32 DetectionMcOutputParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMcOutputParameter.top_k)
  return top_k_;
}
inline void DetectionMcOutputParameter::set_top_k(::google::protobuf::int32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionMcOutputParameter.top_k)
}

// repeated float boxsize = 6;
inline int DetectionMcOutputParameter::boxsize_size() const {
  return boxsize_.size();
}
inline void DetectionMcOutputParameter::clear_boxsize() {
  boxsize_.Clear();
}
inline float DetectionMcOutputParameter::boxsize(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMcOutputParameter.boxsize)
  return boxsize_.Get(index);
}
inline void DetectionMcOutputParameter::set_boxsize(int index, float value) {
  boxsize_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionMcOutputParameter.boxsize)
}
inline void DetectionMcOutputParameter::add_boxsize(float value) {
  boxsize_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionMcOutputParameter.boxsize)
}
inline const ::google::protobuf::RepeatedField< float >&
DetectionMcOutputParameter::boxsize() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionMcOutputParameter.boxsize)
  return boxsize_;
}
inline ::google::protobuf::RepeatedField< float >*
DetectionMcOutputParameter::mutable_boxsize() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionMcOutputParameter.boxsize)
  return &boxsize_;
}

// repeated float aspect_ratio = 7;
inline int DetectionMcOutputParameter::aspect_ratio_size() const {
  return aspect_ratio_.size();
}
inline void DetectionMcOutputParameter::clear_aspect_ratio() {
  aspect_ratio_.Clear();
}
inline float DetectionMcOutputParameter::aspect_ratio(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMcOutputParameter.aspect_ratio)
  return aspect_ratio_.Get(index);
}
inline void DetectionMcOutputParameter::set_aspect_ratio(int index, float value) {
  aspect_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionMcOutputParameter.aspect_ratio)
}
inline void DetectionMcOutputParameter::add_aspect_ratio(float value) {
  aspect_ratio_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionMcOutputParameter.aspect_ratio)
}
inline const ::google::protobuf::RepeatedField< float >&
DetectionMcOutputParameter::aspect_ratio() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionMcOutputParameter.aspect_ratio)
  return aspect_ratio_;
}
inline ::google::protobuf::RepeatedField< float >*
DetectionMcOutputParameter::mutable_aspect_ratio() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionMcOutputParameter.aspect_ratio)
  return &aspect_ratio_;
}

// repeated float pwidth = 8;
inline int DetectionMcOutputParameter::pwidth_size() const {
  return pwidth_.size();
}
inline void DetectionMcOutputParameter::clear_pwidth() {
  pwidth_.Clear();
}
inline float DetectionMcOutputParameter::pwidth(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMcOutputParameter.pwidth)
  return pwidth_.Get(index);
}
inline void DetectionMcOutputParameter::set_pwidth(int index, float value) {
  pwidth_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionMcOutputParameter.pwidth)
}
inline void DetectionMcOutputParameter::add_pwidth(float value) {
  pwidth_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionMcOutputParameter.pwidth)
}
inline const ::google::protobuf::RepeatedField< float >&
DetectionMcOutputParameter::pwidth() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionMcOutputParameter.pwidth)
  return pwidth_;
}
inline ::google::protobuf::RepeatedField< float >*
DetectionMcOutputParameter::mutable_pwidth() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionMcOutputParameter.pwidth)
  return &pwidth_;
}

// repeated float pheight = 9;
inline int DetectionMcOutputParameter::pheight_size() const {
  return pheight_.size();
}
inline void DetectionMcOutputParameter::clear_pheight() {
  pheight_.Clear();
}
inline float DetectionMcOutputParameter::pheight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMcOutputParameter.pheight)
  return pheight_.Get(index);
}
inline void DetectionMcOutputParameter::set_pheight(int index, float value) {
  pheight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DetectionMcOutputParameter.pheight)
}
inline void DetectionMcOutputParameter::add_pheight(float value) {
  pheight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DetectionMcOutputParameter.pheight)
}
inline const ::google::protobuf::RepeatedField< float >&
DetectionMcOutputParameter::pheight() const {
  // @@protoc_insertion_point(field_list:caffe.DetectionMcOutputParameter.pheight)
  return pheight_;
}
inline ::google::protobuf::RepeatedField< float >*
DetectionMcOutputParameter::mutable_pheight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DetectionMcOutputParameter.pheight)
  return &pheight_;
}

// optional .caffe.McBoxLossParameter.CodeLocType code_loc_type = 13 [default = SSD];
inline bool DetectionMcOutputParameter::has_code_loc_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DetectionMcOutputParameter::set_has_code_loc_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DetectionMcOutputParameter::clear_has_code_loc_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DetectionMcOutputParameter::clear_code_loc_type() {
  code_loc_type_ = 1;
  clear_has_code_loc_type();
}
inline ::caffe::McBoxLossParameter_CodeLocType DetectionMcOutputParameter::code_loc_type() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMcOutputParameter.code_loc_type)
  return static_cast< ::caffe::McBoxLossParameter_CodeLocType >(code_loc_type_);
}
inline void DetectionMcOutputParameter::set_code_loc_type(::caffe::McBoxLossParameter_CodeLocType value) {
  assert(::caffe::McBoxLossParameter_CodeLocType_IsValid(value));
  set_has_code_loc_type();
  code_loc_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionMcOutputParameter.code_loc_type)
}

// optional bool clip = 12 [default = true];
inline bool DetectionMcOutputParameter::has_clip() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DetectionMcOutputParameter::set_has_clip() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DetectionMcOutputParameter::clear_has_clip() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DetectionMcOutputParameter::clear_clip() {
  clip_ = true;
  clear_has_clip();
}
inline bool DetectionMcOutputParameter::clip() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMcOutputParameter.clip)
  return clip_;
}
inline void DetectionMcOutputParameter::set_clip(bool value) {
  set_has_clip();
  clip_ = value;
  // @@protoc_insertion_point(field_set:caffe.DetectionMcOutputParameter.clip)
}

// optional .caffe.VisualizeParameter visual_param = 10;
inline bool DetectionMcOutputParameter::has_visual_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DetectionMcOutputParameter::set_has_visual_param() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DetectionMcOutputParameter::clear_has_visual_param() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DetectionMcOutputParameter::clear_visual_param() {
  if (visual_param_ != NULL) visual_param_->::caffe::VisualizeParameter::Clear();
  clear_has_visual_param();
}
inline const ::caffe::VisualizeParameter& DetectionMcOutputParameter::visual_param() const {
  // @@protoc_insertion_point(field_get:caffe.DetectionMcOutputParameter.visual_param)
  return visual_param_ != NULL ? *visual_param_ : *default_instance_->visual_param_;
}
inline ::caffe::VisualizeParameter* DetectionMcOutputParameter::mutable_visual_param() {
  set_has_visual_param();
  if (visual_param_ == NULL) {
    visual_param_ = new ::caffe::VisualizeParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.DetectionMcOutputParameter.visual_param)
  return visual_param_;
}
inline ::caffe::VisualizeParameter* DetectionMcOutputParameter::release_visual_param() {
  // @@protoc_insertion_point(field_release:caffe.DetectionMcOutputParameter.visual_param)
  clear_has_visual_param();
  ::caffe::VisualizeParameter* temp = visual_param_;
  visual_param_ = NULL;
  return temp;
}
inline void DetectionMcOutputParameter::set_allocated_visual_param(::caffe::VisualizeParameter* visual_param) {
  delete visual_param_;
  visual_param_ = visual_param;
  if (visual_param) {
    set_has_visual_param();
  } else {
    clear_has_visual_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.DetectionMcOutputParameter.visual_param)
}

// -------------------------------------------------------------------

// DropoutParameter

// optional float dropout_ratio = 1 [default = 0.5];
inline bool DropoutParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropoutParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropoutParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropoutParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
inline float DropoutParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.DropoutParameter.dropout_ratio)
  return dropout_ratio_;
}
inline void DropoutParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.DropoutParameter.dropout_ratio)
}

// -------------------------------------------------------------------

// DummyDataParameter

// repeated .caffe.FillerParameter data_filler = 1;
inline int DummyDataParameter::data_filler_size() const {
  return data_filler_.size();
}
inline void DummyDataParameter::clear_data_filler() {
  data_filler_.Clear();
}
inline const ::caffe::FillerParameter& DummyDataParameter::data_filler(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.data_filler)
  return data_filler_.Get(index);
}
inline ::caffe::FillerParameter* DummyDataParameter::mutable_data_filler(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DummyDataParameter.data_filler)
  return data_filler_.Mutable(index);
}
inline ::caffe::FillerParameter* DummyDataParameter::add_data_filler() {
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.data_filler)
  return data_filler_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >*
DummyDataParameter::mutable_data_filler() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.data_filler)
  return &data_filler_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::FillerParameter >&
DummyDataParameter::data_filler() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.data_filler)
  return data_filler_;
}

// repeated .caffe.BlobShape shape = 6;
inline int DummyDataParameter::shape_size() const {
  return shape_.size();
}
inline void DummyDataParameter::clear_shape() {
  shape_.Clear();
}
inline const ::caffe::BlobShape& DummyDataParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.shape)
  return shape_.Get(index);
}
inline ::caffe::BlobShape* DummyDataParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.DummyDataParameter.shape)
  return shape_.Mutable(index);
}
inline ::caffe::BlobShape* DummyDataParameter::add_shape() {
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.shape)
  return shape_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
DummyDataParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.shape)
  return &shape_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
DummyDataParameter::shape() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.shape)
  return shape_;
}

// repeated uint32 num = 2;
inline int DummyDataParameter::num_size() const {
  return num_.size();
}
inline void DummyDataParameter::clear_num() {
  num_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::num(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.num)
  return num_.Get(index);
}
inline void DummyDataParameter::set_num(int index, ::google::protobuf::uint32 value) {
  num_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.num)
}
inline void DummyDataParameter::add_num(::google::protobuf::uint32 value) {
  num_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.num)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::num() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.num)
  return num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_num() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.num)
  return &num_;
}

// repeated uint32 channels = 3;
inline int DummyDataParameter::channels_size() const {
  return channels_.size();
}
inline void DummyDataParameter::clear_channels() {
  channels_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::channels(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.channels)
  return channels_.Get(index);
}
inline void DummyDataParameter::set_channels(int index, ::google::protobuf::uint32 value) {
  channels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.channels)
}
inline void DummyDataParameter::add_channels(::google::protobuf::uint32 value) {
  channels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.channels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::channels() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.channels)
  return channels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.channels)
  return &channels_;
}

// repeated uint32 height = 4;
inline int DummyDataParameter::height_size() const {
  return height_.size();
}
inline void DummyDataParameter::clear_height() {
  height_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::height(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.height)
  return height_.Get(index);
}
inline void DummyDataParameter::set_height(int index, ::google::protobuf::uint32 value) {
  height_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.height)
}
inline void DummyDataParameter::add_height(::google::protobuf::uint32 value) {
  height_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.height)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::height() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.height)
  return height_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_height() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.height)
  return &height_;
}

// repeated uint32 width = 5;
inline int DummyDataParameter::width_size() const {
  return width_.size();
}
inline void DummyDataParameter::clear_width() {
  width_.Clear();
}
inline ::google::protobuf::uint32 DummyDataParameter::width(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DummyDataParameter.width)
  return width_.Get(index);
}
inline void DummyDataParameter::set_width(int index, ::google::protobuf::uint32 value) {
  width_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DummyDataParameter.width)
}
inline void DummyDataParameter::add_width(::google::protobuf::uint32 value) {
  width_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DummyDataParameter.width)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DummyDataParameter::width() const {
  // @@protoc_insertion_point(field_list:caffe.DummyDataParameter.width)
  return width_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DummyDataParameter::mutable_width() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DummyDataParameter.width)
  return &width_;
}

// -------------------------------------------------------------------

// EltwiseParameter

// optional .caffe.EltwiseParameter.EltwiseOp operation = 1 [default = SUM];
inline bool EltwiseParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EltwiseParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EltwiseParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EltwiseParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::caffe::EltwiseParameter_EltwiseOp EltwiseParameter::operation() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.operation)
  return static_cast< ::caffe::EltwiseParameter_EltwiseOp >(operation_);
}
inline void EltwiseParameter::set_operation(::caffe::EltwiseParameter_EltwiseOp value) {
  assert(::caffe::EltwiseParameter_EltwiseOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.operation)
}

// repeated float coeff = 2;
inline int EltwiseParameter::coeff_size() const {
  return coeff_.size();
}
inline void EltwiseParameter::clear_coeff() {
  coeff_.Clear();
}
inline float EltwiseParameter::coeff(int index) const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.coeff)
  return coeff_.Get(index);
}
inline void EltwiseParameter::set_coeff(int index, float value) {
  coeff_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.coeff)
}
inline void EltwiseParameter::add_coeff(float value) {
  coeff_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.EltwiseParameter.coeff)
}
inline const ::google::protobuf::RepeatedField< float >&
EltwiseParameter::coeff() const {
  // @@protoc_insertion_point(field_list:caffe.EltwiseParameter.coeff)
  return coeff_;
}
inline ::google::protobuf::RepeatedField< float >*
EltwiseParameter::mutable_coeff() {
  // @@protoc_insertion_point(field_mutable_list:caffe.EltwiseParameter.coeff)
  return &coeff_;
}

// optional bool stable_prod_grad = 3 [default = true];
inline bool EltwiseParameter::has_stable_prod_grad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EltwiseParameter::set_has_stable_prod_grad() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EltwiseParameter::clear_has_stable_prod_grad() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EltwiseParameter::clear_stable_prod_grad() {
  stable_prod_grad_ = true;
  clear_has_stable_prod_grad();
}
inline bool EltwiseParameter::stable_prod_grad() const {
  // @@protoc_insertion_point(field_get:caffe.EltwiseParameter.stable_prod_grad)
  return stable_prod_grad_;
}
inline void EltwiseParameter::set_stable_prod_grad(bool value) {
  set_has_stable_prod_grad();
  stable_prod_grad_ = value;
  // @@protoc_insertion_point(field_set:caffe.EltwiseParameter.stable_prod_grad)
}

// -------------------------------------------------------------------

// ELUParameter

// optional float alpha = 1 [default = 1];
inline bool ELUParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ELUParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ELUParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ELUParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float ELUParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.ELUParameter.alpha)
  return alpha_;
}
inline void ELUParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.ELUParameter.alpha)
}

// -------------------------------------------------------------------

// EmbedParameter

// optional uint32 num_output = 1;
inline bool EmbedParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmbedParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmbedParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmbedParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 EmbedParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.num_output)
  return num_output_;
}
inline void EmbedParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.num_output)
}

// optional uint32 input_dim = 2;
inline bool EmbedParameter::has_input_dim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmbedParameter::set_has_input_dim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmbedParameter::clear_has_input_dim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmbedParameter::clear_input_dim() {
  input_dim_ = 0u;
  clear_has_input_dim();
}
inline ::google::protobuf::uint32 EmbedParameter::input_dim() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.input_dim)
  return input_dim_;
}
inline void EmbedParameter::set_input_dim(::google::protobuf::uint32 value) {
  set_has_input_dim();
  input_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.input_dim)
}

// optional bool bias_term = 3 [default = true];
inline bool EmbedParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmbedParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmbedParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmbedParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool EmbedParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.bias_term)
  return bias_term_;
}
inline void EmbedParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.EmbedParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 4;
inline bool EmbedParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EmbedParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EmbedParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EmbedParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& EmbedParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::caffe::FillerParameter* EmbedParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.EmbedParameter.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* EmbedParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.EmbedParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void EmbedParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.EmbedParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 5;
inline bool EmbedParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EmbedParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EmbedParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EmbedParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& EmbedParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.EmbedParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* EmbedParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.EmbedParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* EmbedParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.EmbedParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void EmbedParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.EmbedParameter.bias_filler)
}

// -------------------------------------------------------------------

// ExpParameter

// optional float base = 1 [default = -1];
inline bool ExpParameter::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExpParameter::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExpParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExpParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
inline float ExpParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.base)
  return base_;
}
inline void ExpParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.base)
}

// optional float scale = 2 [default = 1];
inline bool ExpParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExpParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExpParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExpParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float ExpParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.scale)
  return scale_;
}
inline void ExpParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool ExpParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExpParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExpParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExpParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float ExpParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.ExpParameter.shift)
  return shift_;
}
inline void ExpParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.ExpParameter.shift)
}

// -------------------------------------------------------------------

// EasymatchParameter

// optional float match_iou_thre = 1 [default = 0.5];
inline bool EasymatchParameter::has_match_iou_thre() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EasymatchParameter::set_has_match_iou_thre() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EasymatchParameter::clear_has_match_iou_thre() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EasymatchParameter::clear_match_iou_thre() {
  match_iou_thre_ = 0.5f;
  clear_has_match_iou_thre();
}
inline float EasymatchParameter::match_iou_thre() const {
  // @@protoc_insertion_point(field_get:caffe.EasymatchParameter.match_iou_thre)
  return match_iou_thre_;
}
inline void EasymatchParameter::set_match_iou_thre(float value) {
  set_has_match_iou_thre();
  match_iou_thre_ = value;
  // @@protoc_insertion_point(field_set:caffe.EasymatchParameter.match_iou_thre)
}

// optional float edge_gap = 2 [default = 0.01];
inline bool EasymatchParameter::has_edge_gap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EasymatchParameter::set_has_edge_gap() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EasymatchParameter::clear_has_edge_gap() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EasymatchParameter::clear_edge_gap() {
  edge_gap_ = 0.01f;
  clear_has_edge_gap();
}
inline float EasymatchParameter::edge_gap() const {
  // @@protoc_insertion_point(field_get:caffe.EasymatchParameter.edge_gap)
  return edge_gap_;
}
inline void EasymatchParameter::set_edge_gap(float value) {
  set_has_edge_gap();
  edge_gap_ = value;
  // @@protoc_insertion_point(field_set:caffe.EasymatchParameter.edge_gap)
}

// -------------------------------------------------------------------

// MatchParameter

// optional float momentum = 1 [default = 0.5];
inline bool MatchParameter::has_momentum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchParameter::set_has_momentum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchParameter::clear_has_momentum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchParameter::clear_momentum() {
  momentum_ = 0.5f;
  clear_has_momentum();
}
inline float MatchParameter::momentum() const {
  // @@protoc_insertion_point(field_get:caffe.MatchParameter.momentum)
  return momentum_;
}
inline void MatchParameter::set_momentum(float value) {
  set_has_momentum();
  momentum_ = value;
  // @@protoc_insertion_point(field_set:caffe.MatchParameter.momentum)
}

// -------------------------------------------------------------------

// FlattenParameter

// optional int32 axis = 1 [default = 1];
inline bool FlattenParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlattenParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlattenParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlattenParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 FlattenParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.FlattenParameter.axis)
  return axis_;
}
inline void FlattenParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.FlattenParameter.axis)
}

// optional int32 end_axis = 2 [default = -1];
inline bool FlattenParameter::has_end_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlattenParameter::set_has_end_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlattenParameter::clear_has_end_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlattenParameter::clear_end_axis() {
  end_axis_ = -1;
  clear_has_end_axis();
}
inline ::google::protobuf::int32 FlattenParameter::end_axis() const {
  // @@protoc_insertion_point(field_get:caffe.FlattenParameter.end_axis)
  return end_axis_;
}
inline void FlattenParameter::set_end_axis(::google::protobuf::int32 value) {
  set_has_end_axis();
  end_axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.FlattenParameter.end_axis)
}

// -------------------------------------------------------------------

// GradClipParameter

// optional float scale = 1 [default = 1];
inline bool GradClipParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GradClipParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GradClipParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GradClipParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float GradClipParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.GradClipParameter.scale)
  return scale_;
}
inline void GradClipParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.GradClipParameter.scale)
}

// -------------------------------------------------------------------

// HDF5DataParameter

// optional string source = 1;
inline bool HDF5DataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HDF5DataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HDF5DataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HDF5DataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& HDF5DataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDF5DataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.source)
}
inline void HDF5DataParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HDF5DataParameter.source)
}
inline void HDF5DataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HDF5DataParameter.source)
}
inline ::std::string* HDF5DataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.HDF5DataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDF5DataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.HDF5DataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDF5DataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.HDF5DataParameter.source)
}

// optional uint32 batch_size = 2;
inline bool HDF5DataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HDF5DataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HDF5DataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HDF5DataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 HDF5DataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.batch_size)
  return batch_size_;
}
inline void HDF5DataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.batch_size)
}

// optional bool shuffle = 3 [default = false];
inline bool HDF5DataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HDF5DataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HDF5DataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HDF5DataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool HDF5DataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5DataParameter.shuffle)
  return shuffle_;
}
inline void HDF5DataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.HDF5DataParameter.shuffle)
}

// -------------------------------------------------------------------

// HDF5OutputParameter

// optional string file_name = 1;
inline bool HDF5OutputParameter::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HDF5OutputParameter::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HDF5OutputParameter::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HDF5OutputParameter::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
inline const ::std::string& HDF5OutputParameter::file_name() const {
  // @@protoc_insertion_point(field_get:caffe.HDF5OutputParameter.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDF5OutputParameter::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.HDF5OutputParameter.file_name)
}
inline void HDF5OutputParameter::set_file_name(const char* value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.HDF5OutputParameter.file_name)
}
inline void HDF5OutputParameter::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.HDF5OutputParameter.file_name)
}
inline ::std::string* HDF5OutputParameter::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:caffe.HDF5OutputParameter.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDF5OutputParameter::release_file_name() {
  // @@protoc_insertion_point(field_release:caffe.HDF5OutputParameter.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDF5OutputParameter::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:caffe.HDF5OutputParameter.file_name)
}

// -------------------------------------------------------------------

// HingeLossParameter

// optional .caffe.HingeLossParameter.Norm norm = 1 [default = L1];
inline bool HingeLossParameter::has_norm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HingeLossParameter::set_has_norm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HingeLossParameter::clear_has_norm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HingeLossParameter::clear_norm() {
  norm_ = 1;
  clear_has_norm();
}
inline ::caffe::HingeLossParameter_Norm HingeLossParameter::norm() const {
  // @@protoc_insertion_point(field_get:caffe.HingeLossParameter.norm)
  return static_cast< ::caffe::HingeLossParameter_Norm >(norm_);
}
inline void HingeLossParameter::set_norm(::caffe::HingeLossParameter_Norm value) {
  assert(::caffe::HingeLossParameter_Norm_IsValid(value));
  set_has_norm();
  norm_ = value;
  // @@protoc_insertion_point(field_set:caffe.HingeLossParameter.norm)
}

// -------------------------------------------------------------------

// FocusLossParameter

// optional float gama = 1 [default = 0];
inline bool FocusLossParameter::has_gama() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FocusLossParameter::set_has_gama() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FocusLossParameter::clear_has_gama() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FocusLossParameter::clear_gama() {
  gama_ = 0;
  clear_has_gama();
}
inline float FocusLossParameter::gama() const {
  // @@protoc_insertion_point(field_get:caffe.FocusLossParameter.gama)
  return gama_;
}
inline void FocusLossParameter::set_gama(float value) {
  set_has_gama();
  gama_ = value;
  // @@protoc_insertion_point(field_set:caffe.FocusLossParameter.gama)
}

// optional float alpha = 2 [default = 0.5];
inline bool FocusLossParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FocusLossParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FocusLossParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FocusLossParameter::clear_alpha() {
  alpha_ = 0.5f;
  clear_has_alpha();
}
inline float FocusLossParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.FocusLossParameter.alpha)
  return alpha_;
}
inline void FocusLossParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.FocusLossParameter.alpha)
}

// -------------------------------------------------------------------

// ImageDataParameter

// optional string source = 1;
inline bool ImageDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& ImageDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.source)
}
inline void ImageDataParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.source)
}
inline void ImageDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.source)
}
inline ::std::string* ImageDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.source)
}

// optional uint32 batch_size = 4 [default = 1];
inline bool ImageDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageDataParameter::clear_batch_size() {
  batch_size_ = 1u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 ImageDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.batch_size)
  return batch_size_;
}
inline void ImageDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.batch_size)
}

// optional uint32 rand_skip = 7 [default = 0];
inline bool ImageDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageDataParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 ImageDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.rand_skip)
  return rand_skip_;
}
inline void ImageDataParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.rand_skip)
}

// optional bool shuffle = 8 [default = false];
inline bool ImageDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageDataParameter::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool ImageDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.shuffle)
  return shuffle_;
}
inline void ImageDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.shuffle)
}

// optional uint32 new_height = 9 [default = 0];
inline bool ImageDataParameter::has_new_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageDataParameter::set_has_new_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageDataParameter::clear_has_new_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageDataParameter::clear_new_height() {
  new_height_ = 0u;
  clear_has_new_height();
}
inline ::google::protobuf::uint32 ImageDataParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_height)
  return new_height_;
}
inline void ImageDataParameter::set_new_height(::google::protobuf::uint32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_height)
}

// optional uint32 new_width = 10 [default = 0];
inline bool ImageDataParameter::has_new_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageDataParameter::set_has_new_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageDataParameter::clear_has_new_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageDataParameter::clear_new_width() {
  new_width_ = 0u;
  clear_has_new_width();
}
inline ::google::protobuf::uint32 ImageDataParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.new_width)
  return new_width_;
}
inline void ImageDataParameter::set_new_width(::google::protobuf::uint32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.new_width)
}

// optional bool is_color = 11 [default = true];
inline bool ImageDataParameter::has_is_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImageDataParameter::set_has_is_color() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImageDataParameter::clear_has_is_color() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImageDataParameter::clear_is_color() {
  is_color_ = true;
  clear_has_is_color();
}
inline bool ImageDataParameter::is_color() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.is_color)
  return is_color_;
}
inline void ImageDataParameter::set_is_color(bool value) {
  set_has_is_color();
  is_color_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.is_color)
}

// optional float scale = 2 [default = 1];
inline bool ImageDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ImageDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ImageDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ImageDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float ImageDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.scale)
  return scale_;
}
inline void ImageDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.scale)
}

// optional string mean_file = 3;
inline bool ImageDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ImageDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ImageDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ImageDataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& ImageDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mean_file)
  return mean_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mean_file)
}
inline void ImageDataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.mean_file)
}
inline void ImageDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.mean_file)
}
inline ::std::string* ImageDataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.mean_file)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool ImageDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ImageDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ImageDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ImageDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 ImageDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.crop_size)
  return crop_size_;
}
inline void ImageDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool ImageDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ImageDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ImageDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ImageDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool ImageDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.mirror)
  return mirror_;
}
inline void ImageDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.mirror)
}

// optional string root_folder = 12 [default = ""];
inline bool ImageDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ImageDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ImageDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ImageDataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
inline const ::std::string& ImageDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.root_folder)
  return root_folder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.root_folder)
}
inline void ImageDataParameter::set_root_folder(const char* value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.root_folder)
}
inline void ImageDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.root_folder)
}
inline ::std::string* ImageDataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.root_folder)
  clear_has_root_folder();
  return root_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.root_folder)
}

// optional string label_map_file = 13 [default = ""];
inline bool ImageDataParameter::has_label_map_file() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ImageDataParameter::set_has_label_map_file() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ImageDataParameter::clear_has_label_map_file() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ImageDataParameter::clear_label_map_file() {
  label_map_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label_map_file();
}
inline const ::std::string& ImageDataParameter::label_map_file() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.label_map_file)
  return label_map_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_label_map_file(const ::std::string& value) {
  set_has_label_map_file();
  label_map_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.label_map_file)
}
inline void ImageDataParameter::set_label_map_file(const char* value) {
  set_has_label_map_file();
  label_map_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.label_map_file)
}
inline void ImageDataParameter::set_label_map_file(const char* value, size_t size) {
  set_has_label_map_file();
  label_map_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.label_map_file)
}
inline ::std::string* ImageDataParameter::mutable_label_map_file() {
  set_has_label_map_file();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.label_map_file)
  return label_map_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataParameter::release_label_map_file() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.label_map_file)
  clear_has_label_map_file();
  return label_map_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_allocated_label_map_file(::std::string* label_map_file) {
  if (label_map_file != NULL) {
    set_has_label_map_file();
  } else {
    clear_has_label_map_file();
  }
  label_map_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_map_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.label_map_file)
}

// repeated .caffe.BatchSampler batch_sampler = 14;
inline int ImageDataParameter::batch_sampler_size() const {
  return batch_sampler_.size();
}
inline void ImageDataParameter::clear_batch_sampler() {
  batch_sampler_.Clear();
}
inline const ::caffe::BatchSampler& ImageDataParameter::batch_sampler(int index) const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.batch_sampler)
  return batch_sampler_.Get(index);
}
inline ::caffe::BatchSampler* ImageDataParameter::mutable_batch_sampler(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.batch_sampler)
  return batch_sampler_.Mutable(index);
}
inline ::caffe::BatchSampler* ImageDataParameter::add_batch_sampler() {
  // @@protoc_insertion_point(field_add:caffe.ImageDataParameter.batch_sampler)
  return batch_sampler_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler >*
ImageDataParameter::mutable_batch_sampler() {
  // @@protoc_insertion_point(field_mutable_list:caffe.ImageDataParameter.batch_sampler)
  return &batch_sampler_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BatchSampler >&
ImageDataParameter::batch_sampler() const {
  // @@protoc_insertion_point(field_list:caffe.ImageDataParameter.batch_sampler)
  return batch_sampler_;
}

// optional string part_name_label_file = 15 [default = ""];
inline bool ImageDataParameter::has_part_name_label_file() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ImageDataParameter::set_has_part_name_label_file() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ImageDataParameter::clear_has_part_name_label_file() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ImageDataParameter::clear_part_name_label_file() {
  part_name_label_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_part_name_label_file();
}
inline const ::std::string& ImageDataParameter::part_name_label_file() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.part_name_label_file)
  return part_name_label_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_part_name_label_file(const ::std::string& value) {
  set_has_part_name_label_file();
  part_name_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.part_name_label_file)
}
inline void ImageDataParameter::set_part_name_label_file(const char* value) {
  set_has_part_name_label_file();
  part_name_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.part_name_label_file)
}
inline void ImageDataParameter::set_part_name_label_file(const char* value, size_t size) {
  set_has_part_name_label_file();
  part_name_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.part_name_label_file)
}
inline ::std::string* ImageDataParameter::mutable_part_name_label_file() {
  set_has_part_name_label_file();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.part_name_label_file)
  return part_name_label_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataParameter::release_part_name_label_file() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.part_name_label_file)
  clear_has_part_name_label_file();
  return part_name_label_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_allocated_part_name_label_file(::std::string* part_name_label_file) {
  if (part_name_label_file != NULL) {
    set_has_part_name_label_file();
  } else {
    clear_has_part_name_label_file();
  }
  part_name_label_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), part_name_label_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.part_name_label_file)
}

// optional string pose_name_label_file = 16 [default = ""];
inline bool ImageDataParameter::has_pose_name_label_file() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ImageDataParameter::set_has_pose_name_label_file() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ImageDataParameter::clear_has_pose_name_label_file() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ImageDataParameter::clear_pose_name_label_file() {
  pose_name_label_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pose_name_label_file();
}
inline const ::std::string& ImageDataParameter::pose_name_label_file() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.pose_name_label_file)
  return pose_name_label_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_pose_name_label_file(const ::std::string& value) {
  set_has_pose_name_label_file();
  pose_name_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.pose_name_label_file)
}
inline void ImageDataParameter::set_pose_name_label_file(const char* value) {
  set_has_pose_name_label_file();
  pose_name_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.pose_name_label_file)
}
inline void ImageDataParameter::set_pose_name_label_file(const char* value, size_t size) {
  set_has_pose_name_label_file();
  pose_name_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.pose_name_label_file)
}
inline ::std::string* ImageDataParameter::mutable_pose_name_label_file() {
  set_has_pose_name_label_file();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.pose_name_label_file)
  return pose_name_label_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataParameter::release_pose_name_label_file() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.pose_name_label_file)
  clear_has_pose_name_label_file();
  return pose_name_label_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_allocated_pose_name_label_file(::std::string* pose_name_label_file) {
  if (pose_name_label_file != NULL) {
    set_has_pose_name_label_file();
  } else {
    clear_has_pose_name_label_file();
  }
  pose_name_label_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pose_name_label_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.pose_name_label_file)
}

// optional string dir_name_label_file = 17 [default = ""];
inline bool ImageDataParameter::has_dir_name_label_file() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ImageDataParameter::set_has_dir_name_label_file() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ImageDataParameter::clear_has_dir_name_label_file() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ImageDataParameter::clear_dir_name_label_file() {
  dir_name_label_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dir_name_label_file();
}
inline const ::std::string& ImageDataParameter::dir_name_label_file() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.dir_name_label_file)
  return dir_name_label_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_dir_name_label_file(const ::std::string& value) {
  set_has_dir_name_label_file();
  dir_name_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.dir_name_label_file)
}
inline void ImageDataParameter::set_dir_name_label_file(const char* value) {
  set_has_dir_name_label_file();
  dir_name_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ImageDataParameter.dir_name_label_file)
}
inline void ImageDataParameter::set_dir_name_label_file(const char* value, size_t size) {
  set_has_dir_name_label_file();
  dir_name_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ImageDataParameter.dir_name_label_file)
}
inline ::std::string* ImageDataParameter::mutable_dir_name_label_file() {
  set_has_dir_name_label_file();
  // @@protoc_insertion_point(field_mutable:caffe.ImageDataParameter.dir_name_label_file)
  return dir_name_label_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDataParameter::release_dir_name_label_file() {
  // @@protoc_insertion_point(field_release:caffe.ImageDataParameter.dir_name_label_file)
  clear_has_dir_name_label_file();
  return dir_name_label_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDataParameter::set_allocated_dir_name_label_file(::std::string* dir_name_label_file) {
  if (dir_name_label_file != NULL) {
    set_has_dir_name_label_file();
  } else {
    clear_has_dir_name_label_file();
  }
  dir_name_label_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dir_name_label_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.ImageDataParameter.dir_name_label_file)
}

// optional float body_boxsize_threshold = 18 [default = 0];
inline bool ImageDataParameter::has_body_boxsize_threshold() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ImageDataParameter::set_has_body_boxsize_threshold() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ImageDataParameter::clear_has_body_boxsize_threshold() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ImageDataParameter::clear_body_boxsize_threshold() {
  body_boxsize_threshold_ = 0;
  clear_has_body_boxsize_threshold();
}
inline float ImageDataParameter::body_boxsize_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.ImageDataParameter.body_boxsize_threshold)
  return body_boxsize_threshold_;
}
inline void ImageDataParameter::set_body_boxsize_threshold(float value) {
  set_has_body_boxsize_threshold();
  body_boxsize_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImageDataParameter.body_boxsize_threshold)
}

// -------------------------------------------------------------------

// ImResizeParameter

// optional int32 target_spatial_width = 1 [default = 300];
inline bool ImResizeParameter::has_target_spatial_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImResizeParameter::set_has_target_spatial_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImResizeParameter::clear_has_target_spatial_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImResizeParameter::clear_target_spatial_width() {
  target_spatial_width_ = 300;
  clear_has_target_spatial_width();
}
inline ::google::protobuf::int32 ImResizeParameter::target_spatial_width() const {
  // @@protoc_insertion_point(field_get:caffe.ImResizeParameter.target_spatial_width)
  return target_spatial_width_;
}
inline void ImResizeParameter::set_target_spatial_width(::google::protobuf::int32 value) {
  set_has_target_spatial_width();
  target_spatial_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImResizeParameter.target_spatial_width)
}

// optional int32 target_spatial_height = 2 [default = 300];
inline bool ImResizeParameter::has_target_spatial_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImResizeParameter::set_has_target_spatial_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImResizeParameter::clear_has_target_spatial_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImResizeParameter::clear_target_spatial_height() {
  target_spatial_height_ = 300;
  clear_has_target_spatial_height();
}
inline ::google::protobuf::int32 ImResizeParameter::target_spatial_height() const {
  // @@protoc_insertion_point(field_get:caffe.ImResizeParameter.target_spatial_height)
  return target_spatial_height_;
}
inline void ImResizeParameter::set_target_spatial_height(::google::protobuf::int32 value) {
  set_has_target_spatial_height();
  target_spatial_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImResizeParameter.target_spatial_height)
}

// optional float start_scale = 3 [default = 1];
inline bool ImResizeParameter::has_start_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImResizeParameter::set_has_start_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImResizeParameter::clear_has_start_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImResizeParameter::clear_start_scale() {
  start_scale_ = 1;
  clear_has_start_scale();
}
inline float ImResizeParameter::start_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ImResizeParameter.start_scale)
  return start_scale_;
}
inline void ImResizeParameter::set_start_scale(float value) {
  set_has_start_scale();
  start_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImResizeParameter.start_scale)
}

// optional float scale_gap = 4 [default = 0.3];
inline bool ImResizeParameter::has_scale_gap() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImResizeParameter::set_has_scale_gap() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImResizeParameter::clear_has_scale_gap() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImResizeParameter::clear_scale_gap() {
  scale_gap_ = 0.3f;
  clear_has_scale_gap();
}
inline float ImResizeParameter::scale_gap() const {
  // @@protoc_insertion_point(field_get:caffe.ImResizeParameter.scale_gap)
  return scale_gap_;
}
inline void ImResizeParameter::set_scale_gap(float value) {
  set_has_scale_gap();
  scale_gap_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImResizeParameter.scale_gap)
}

// optional float factor = 5 [default = 4];
inline bool ImResizeParameter::has_factor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImResizeParameter::set_has_factor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImResizeParameter::clear_has_factor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImResizeParameter::clear_factor() {
  factor_ = 4;
  clear_has_factor();
}
inline float ImResizeParameter::factor() const {
  // @@protoc_insertion_point(field_get:caffe.ImResizeParameter.factor)
  return factor_;
}
inline void ImResizeParameter::set_factor(float value) {
  set_has_factor();
  factor_ = value;
  // @@protoc_insertion_point(field_set:caffe.ImResizeParameter.factor)
}

// -------------------------------------------------------------------

// InfogainLossParameter

// optional string source = 1;
inline bool InfogainLossParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InfogainLossParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InfogainLossParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InfogainLossParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& InfogainLossParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.InfogainLossParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfogainLossParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.InfogainLossParameter.source)
}
inline void InfogainLossParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.InfogainLossParameter.source)
}
inline void InfogainLossParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.InfogainLossParameter.source)
}
inline ::std::string* InfogainLossParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.InfogainLossParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InfogainLossParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.InfogainLossParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InfogainLossParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.InfogainLossParameter.source)
}

// -------------------------------------------------------------------

// InnerProductParameter

// optional uint32 num_output = 1;
inline bool InnerProductParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerProductParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InnerProductParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InnerProductParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 InnerProductParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.num_output)
  return num_output_;
}
inline void InnerProductParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.num_output)
}

// optional bool bias_term = 2 [default = true];
inline bool InnerProductParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InnerProductParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InnerProductParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InnerProductParameter::clear_bias_term() {
  bias_term_ = true;
  clear_has_bias_term();
}
inline bool InnerProductParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_term)
  return bias_term_;
}
inline void InnerProductParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.bias_term)
}

// optional .caffe.FillerParameter weight_filler = 3;
inline bool InnerProductParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InnerProductParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InnerProductParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InnerProductParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& InnerProductParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::caffe::FillerParameter* InnerProductParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* InnerProductParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void InnerProductParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 4;
inline bool InnerProductParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InnerProductParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InnerProductParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InnerProductParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& InnerProductParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* InnerProductParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.InnerProductParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* InnerProductParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.InnerProductParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void InnerProductParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.InnerProductParameter.bias_filler)
}

// optional int32 axis = 5 [default = 1];
inline bool InnerProductParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InnerProductParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InnerProductParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InnerProductParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 InnerProductParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.axis)
  return axis_;
}
inline void InnerProductParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.axis)
}

// optional bool transpose = 6 [default = false];
inline bool InnerProductParameter::has_transpose() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InnerProductParameter::set_has_transpose() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InnerProductParameter::clear_has_transpose() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InnerProductParameter::clear_transpose() {
  transpose_ = false;
  clear_has_transpose();
}
inline bool InnerProductParameter::transpose() const {
  // @@protoc_insertion_point(field_get:caffe.InnerProductParameter.transpose)
  return transpose_;
}
inline void InnerProductParameter::set_transpose(bool value) {
  set_has_transpose();
  transpose_ = value;
  // @@protoc_insertion_point(field_set:caffe.InnerProductParameter.transpose)
}

// -------------------------------------------------------------------

// InputParameter

// repeated .caffe.BlobShape shape = 1;
inline int InputParameter::shape_size() const {
  return shape_.size();
}
inline void InputParameter::clear_shape() {
  shape_.Clear();
}
inline const ::caffe::BlobShape& InputParameter::shape(int index) const {
  // @@protoc_insertion_point(field_get:caffe.InputParameter.shape)
  return shape_.Get(index);
}
inline ::caffe::BlobShape* InputParameter::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.InputParameter.shape)
  return shape_.Mutable(index);
}
inline ::caffe::BlobShape* InputParameter::add_shape() {
  // @@protoc_insertion_point(field_add:caffe.InputParameter.shape)
  return shape_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >*
InputParameter::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:caffe.InputParameter.shape)
  return &shape_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobShape >&
InputParameter::shape() const {
  // @@protoc_insertion_point(field_list:caffe.InputParameter.shape)
  return shape_;
}

// -------------------------------------------------------------------

// LogParameter

// optional float base = 1 [default = -1];
inline bool LogParameter::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogParameter::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogParameter::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogParameter::clear_base() {
  base_ = -1;
  clear_has_base();
}
inline float LogParameter::base() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.base)
  return base_;
}
inline void LogParameter::set_base(float value) {
  set_has_base();
  base_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.base)
}

// optional float scale = 2 [default = 1];
inline bool LogParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float LogParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.scale)
  return scale_;
}
inline void LogParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool LogParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float LogParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.LogParameter.shift)
  return shift_;
}
inline void LogParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.LogParameter.shift)
}

// -------------------------------------------------------------------

// ReorgParameter

// optional .caffe.ReorgParameter.SampleType up_down = 1 [default = DOWN];
inline bool ReorgParameter::has_up_down() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReorgParameter::set_has_up_down() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReorgParameter::clear_has_up_down() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReorgParameter::clear_up_down() {
  up_down_ = 0;
  clear_has_up_down();
}
inline ::caffe::ReorgParameter_SampleType ReorgParameter::up_down() const {
  // @@protoc_insertion_point(field_get:caffe.ReorgParameter.up_down)
  return static_cast< ::caffe::ReorgParameter_SampleType >(up_down_);
}
inline void ReorgParameter::set_up_down(::caffe::ReorgParameter_SampleType value) {
  assert(::caffe::ReorgParameter_SampleType_IsValid(value));
  set_has_up_down();
  up_down_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReorgParameter.up_down)
}

// optional int32 stride = 2 [default = 2];
inline bool ReorgParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReorgParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReorgParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReorgParameter::clear_stride() {
  stride_ = 2;
  clear_has_stride();
}
inline ::google::protobuf::int32 ReorgParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.ReorgParameter.stride)
  return stride_;
}
inline void ReorgParameter::set_stride(::google::protobuf::int32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReorgParameter.stride)
}

// -------------------------------------------------------------------

// LRNParameter

// optional uint32 local_size = 1 [default = 5];
inline bool LRNParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LRNParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LRNParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LRNParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 LRNParameter::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.local_size)
  return local_size_;
}
inline void LRNParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.local_size)
}

// optional float alpha = 2 [default = 1];
inline bool LRNParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LRNParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LRNParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LRNParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float LRNParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.alpha)
  return alpha_;
}
inline void LRNParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.alpha)
}

// optional float beta = 3 [default = 0.75];
inline bool LRNParameter::has_beta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LRNParameter::set_has_beta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LRNParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LRNParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float LRNParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.beta)
  return beta_;
}
inline void LRNParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.beta)
}

// optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];
inline bool LRNParameter::has_norm_region() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LRNParameter::set_has_norm_region() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LRNParameter::clear_has_norm_region() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LRNParameter::clear_norm_region() {
  norm_region_ = 0;
  clear_has_norm_region();
}
inline ::caffe::LRNParameter_NormRegion LRNParameter::norm_region() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.norm_region)
  return static_cast< ::caffe::LRNParameter_NormRegion >(norm_region_);
}
inline void LRNParameter::set_norm_region(::caffe::LRNParameter_NormRegion value) {
  assert(::caffe::LRNParameter_NormRegion_IsValid(value));
  set_has_norm_region();
  norm_region_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.norm_region)
}

// optional float k = 5 [default = 1];
inline bool LRNParameter::has_k() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LRNParameter::set_has_k() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LRNParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LRNParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
inline float LRNParameter::k() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.k)
  return k_;
}
inline void LRNParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.k)
}

// optional .caffe.LRNParameter.Engine engine = 6 [default = DEFAULT];
inline bool LRNParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LRNParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LRNParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LRNParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::LRNParameter_Engine LRNParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.LRNParameter.engine)
  return static_cast< ::caffe::LRNParameter_Engine >(engine_);
}
inline void LRNParameter::set_engine(::caffe::LRNParameter_Engine value) {
  assert(::caffe::LRNParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.LRNParameter.engine)
}

// -------------------------------------------------------------------

// MemoryDataParameter

// optional uint32 batch_size = 1;
inline bool MemoryDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemoryDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemoryDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemoryDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 MemoryDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.batch_size)
  return batch_size_;
}
inline void MemoryDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.batch_size)
}

// optional uint32 channels = 2;
inline bool MemoryDataParameter::has_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemoryDataParameter::set_has_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemoryDataParameter::clear_has_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemoryDataParameter::clear_channels() {
  channels_ = 0u;
  clear_has_channels();
}
inline ::google::protobuf::uint32 MemoryDataParameter::channels() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.channels)
  return channels_;
}
inline void MemoryDataParameter::set_channels(::google::protobuf::uint32 value) {
  set_has_channels();
  channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.channels)
}

// optional uint32 height = 3;
inline bool MemoryDataParameter::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemoryDataParameter::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MemoryDataParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MemoryDataParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 MemoryDataParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.height)
  return height_;
}
inline void MemoryDataParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.height)
}

// optional uint32 width = 4;
inline bool MemoryDataParameter::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemoryDataParameter::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MemoryDataParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MemoryDataParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 MemoryDataParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.MemoryDataParameter.width)
  return width_;
}
inline void MemoryDataParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.MemoryDataParameter.width)
}

// -------------------------------------------------------------------

// MaskGenParameter

// optional int32 height = 1;
inline bool MaskGenParameter::has_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaskGenParameter::set_has_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaskGenParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaskGenParameter::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 MaskGenParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.MaskGenParameter.height)
  return height_;
}
inline void MaskGenParameter::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.MaskGenParameter.height)
}

// optional int32 width = 2;
inline bool MaskGenParameter::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaskGenParameter::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MaskGenParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MaskGenParameter::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 MaskGenParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.MaskGenParameter.width)
  return width_;
}
inline void MaskGenParameter::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.MaskGenParameter.width)
}

// optional int32 resized_height = 3;
inline bool MaskGenParameter::has_resized_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MaskGenParameter::set_has_resized_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MaskGenParameter::clear_has_resized_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MaskGenParameter::clear_resized_height() {
  resized_height_ = 0;
  clear_has_resized_height();
}
inline ::google::protobuf::int32 MaskGenParameter::resized_height() const {
  // @@protoc_insertion_point(field_get:caffe.MaskGenParameter.resized_height)
  return resized_height_;
}
inline void MaskGenParameter::set_resized_height(::google::protobuf::int32 value) {
  set_has_resized_height();
  resized_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.MaskGenParameter.resized_height)
}

// optional int32 resized_width = 4;
inline bool MaskGenParameter::has_resized_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MaskGenParameter::set_has_resized_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MaskGenParameter::clear_has_resized_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MaskGenParameter::clear_resized_width() {
  resized_width_ = 0;
  clear_has_resized_width();
}
inline ::google::protobuf::int32 MaskGenParameter::resized_width() const {
  // @@protoc_insertion_point(field_get:caffe.MaskGenParameter.resized_width)
  return resized_width_;
}
inline void MaskGenParameter::set_resized_width(::google::protobuf::int32 value) {
  set_has_resized_width();
  resized_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.MaskGenParameter.resized_width)
}

// -------------------------------------------------------------------

// KpsGenParameter

// optional int32 resized_height = 1;
inline bool KpsGenParameter::has_resized_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KpsGenParameter::set_has_resized_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KpsGenParameter::clear_has_resized_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KpsGenParameter::clear_resized_height() {
  resized_height_ = 0;
  clear_has_resized_height();
}
inline ::google::protobuf::int32 KpsGenParameter::resized_height() const {
  // @@protoc_insertion_point(field_get:caffe.KpsGenParameter.resized_height)
  return resized_height_;
}
inline void KpsGenParameter::set_resized_height(::google::protobuf::int32 value) {
  set_has_resized_height();
  resized_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.KpsGenParameter.resized_height)
}

// optional int32 resized_width = 2;
inline bool KpsGenParameter::has_resized_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KpsGenParameter::set_has_resized_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KpsGenParameter::clear_has_resized_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KpsGenParameter::clear_resized_width() {
  resized_width_ = 0;
  clear_has_resized_width();
}
inline ::google::protobuf::int32 KpsGenParameter::resized_width() const {
  // @@protoc_insertion_point(field_get:caffe.KpsGenParameter.resized_width)
  return resized_width_;
}
inline void KpsGenParameter::set_resized_width(::google::protobuf::int32 value) {
  set_has_resized_width();
  resized_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.KpsGenParameter.resized_width)
}

// optional bool use_softmax = 3 [default = false];
inline bool KpsGenParameter::has_use_softmax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KpsGenParameter::set_has_use_softmax() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KpsGenParameter::clear_has_use_softmax() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KpsGenParameter::clear_use_softmax() {
  use_softmax_ = false;
  clear_has_use_softmax();
}
inline bool KpsGenParameter::use_softmax() const {
  // @@protoc_insertion_point(field_get:caffe.KpsGenParameter.use_softmax)
  return use_softmax_;
}
inline void KpsGenParameter::set_use_softmax(bool value) {
  set_has_use_softmax();
  use_softmax_ = value;
  // @@protoc_insertion_point(field_set:caffe.KpsGenParameter.use_softmax)
}

// -------------------------------------------------------------------

// KpsEvalParameter

// optional float conf_thre = 1 [default = 0.1];
inline bool KpsEvalParameter::has_conf_thre() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KpsEvalParameter::set_has_conf_thre() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KpsEvalParameter::clear_has_conf_thre() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KpsEvalParameter::clear_conf_thre() {
  conf_thre_ = 0.1f;
  clear_has_conf_thre();
}
inline float KpsEvalParameter::conf_thre() const {
  // @@protoc_insertion_point(field_get:caffe.KpsEvalParameter.conf_thre)
  return conf_thre_;
}
inline void KpsEvalParameter::set_conf_thre(float value) {
  set_has_conf_thre();
  conf_thre_ = value;
  // @@protoc_insertion_point(field_set:caffe.KpsEvalParameter.conf_thre)
}

// optional float distance_thre = 2 [default = 0.05];
inline bool KpsEvalParameter::has_distance_thre() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KpsEvalParameter::set_has_distance_thre() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KpsEvalParameter::clear_has_distance_thre() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KpsEvalParameter::clear_distance_thre() {
  distance_thre_ = 0.05f;
  clear_has_distance_thre();
}
inline float KpsEvalParameter::distance_thre() const {
  // @@protoc_insertion_point(field_get:caffe.KpsEvalParameter.distance_thre)
  return distance_thre_;
}
inline void KpsEvalParameter::set_distance_thre(float value) {
  set_has_distance_thre();
  distance_thre_ = value;
  // @@protoc_insertion_point(field_set:caffe.KpsEvalParameter.distance_thre)
}

// -------------------------------------------------------------------

// MultiBoxLossParameter

// optional .caffe.MultiBoxLossParameter.LocLossType loc_loss_type = 1 [default = SMOOTH_L1];
inline bool MultiBoxLossParameter::has_loc_loss_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MultiBoxLossParameter::set_has_loc_loss_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MultiBoxLossParameter::clear_has_loc_loss_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MultiBoxLossParameter::clear_loc_loss_type() {
  loc_loss_type_ = 1;
  clear_has_loc_loss_type();
}
inline ::caffe::MultiBoxLossParameter_LocLossType MultiBoxLossParameter::loc_loss_type() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.loc_loss_type)
  return static_cast< ::caffe::MultiBoxLossParameter_LocLossType >(loc_loss_type_);
}
inline void MultiBoxLossParameter::set_loc_loss_type(::caffe::MultiBoxLossParameter_LocLossType value) {
  assert(::caffe::MultiBoxLossParameter_LocLossType_IsValid(value));
  set_has_loc_loss_type();
  loc_loss_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.loc_loss_type)
}

// optional .caffe.MultiBoxLossParameter.ConfLossType conf_loss_type = 2 [default = SOFTMAX];
inline bool MultiBoxLossParameter::has_conf_loss_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MultiBoxLossParameter::set_has_conf_loss_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MultiBoxLossParameter::clear_has_conf_loss_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MultiBoxLossParameter::clear_conf_loss_type() {
  conf_loss_type_ = 0;
  clear_has_conf_loss_type();
}
inline ::caffe::MultiBoxLossParameter_ConfLossType MultiBoxLossParameter::conf_loss_type() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.conf_loss_type)
  return static_cast< ::caffe::MultiBoxLossParameter_ConfLossType >(conf_loss_type_);
}
inline void MultiBoxLossParameter::set_conf_loss_type(::caffe::MultiBoxLossParameter_ConfLossType value) {
  assert(::caffe::MultiBoxLossParameter_ConfLossType_IsValid(value));
  set_has_conf_loss_type();
  conf_loss_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.conf_loss_type)
}

// optional float loc_weight = 3 [default = 1];
inline bool MultiBoxLossParameter::has_loc_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MultiBoxLossParameter::set_has_loc_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MultiBoxLossParameter::clear_has_loc_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MultiBoxLossParameter::clear_loc_weight() {
  loc_weight_ = 1;
  clear_has_loc_weight();
}
inline float MultiBoxLossParameter::loc_weight() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.loc_weight)
  return loc_weight_;
}
inline void MultiBoxLossParameter::set_loc_weight(float value) {
  set_has_loc_weight();
  loc_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.loc_weight)
}

// optional uint32 num_classes = 4;
inline bool MultiBoxLossParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MultiBoxLossParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MultiBoxLossParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MultiBoxLossParameter::clear_num_classes() {
  num_classes_ = 0u;
  clear_has_num_classes();
}
inline ::google::protobuf::uint32 MultiBoxLossParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.num_classes)
  return num_classes_;
}
inline void MultiBoxLossParameter::set_num_classes(::google::protobuf::uint32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.num_classes)
}

// optional bool share_location = 5 [default = true];
inline bool MultiBoxLossParameter::has_share_location() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MultiBoxLossParameter::set_has_share_location() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MultiBoxLossParameter::clear_has_share_location() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MultiBoxLossParameter::clear_share_location() {
  share_location_ = true;
  clear_has_share_location();
}
inline bool MultiBoxLossParameter::share_location() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.share_location)
  return share_location_;
}
inline void MultiBoxLossParameter::set_share_location(bool value) {
  set_has_share_location();
  share_location_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.share_location)
}

// optional .caffe.MultiBoxLossParameter.MatchType match_type = 6 [default = PER_PREDICTION];
inline bool MultiBoxLossParameter::has_match_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MultiBoxLossParameter::set_has_match_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MultiBoxLossParameter::clear_has_match_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MultiBoxLossParameter::clear_match_type() {
  match_type_ = 1;
  clear_has_match_type();
}
inline ::caffe::MultiBoxLossParameter_MatchType MultiBoxLossParameter::match_type() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.match_type)
  return static_cast< ::caffe::MultiBoxLossParameter_MatchType >(match_type_);
}
inline void MultiBoxLossParameter::set_match_type(::caffe::MultiBoxLossParameter_MatchType value) {
  assert(::caffe::MultiBoxLossParameter_MatchType_IsValid(value));
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.match_type)
}

// optional float overlap_threshold = 7 [default = 0.5];
inline bool MultiBoxLossParameter::has_overlap_threshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MultiBoxLossParameter::set_has_overlap_threshold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MultiBoxLossParameter::clear_has_overlap_threshold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MultiBoxLossParameter::clear_overlap_threshold() {
  overlap_threshold_ = 0.5f;
  clear_has_overlap_threshold();
}
inline float MultiBoxLossParameter::overlap_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.overlap_threshold)
  return overlap_threshold_;
}
inline void MultiBoxLossParameter::set_overlap_threshold(float value) {
  set_has_overlap_threshold();
  overlap_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.overlap_threshold)
}

// optional bool use_prior_for_matching = 8 [default = true];
inline bool MultiBoxLossParameter::has_use_prior_for_matching() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MultiBoxLossParameter::set_has_use_prior_for_matching() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MultiBoxLossParameter::clear_has_use_prior_for_matching() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MultiBoxLossParameter::clear_use_prior_for_matching() {
  use_prior_for_matching_ = true;
  clear_has_use_prior_for_matching();
}
inline bool MultiBoxLossParameter::use_prior_for_matching() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.use_prior_for_matching)
  return use_prior_for_matching_;
}
inline void MultiBoxLossParameter::set_use_prior_for_matching(bool value) {
  set_has_use_prior_for_matching();
  use_prior_for_matching_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.use_prior_for_matching)
}

// optional uint32 background_label_id = 9 [default = 0];
inline bool MultiBoxLossParameter::has_background_label_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MultiBoxLossParameter::set_has_background_label_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MultiBoxLossParameter::clear_has_background_label_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MultiBoxLossParameter::clear_background_label_id() {
  background_label_id_ = 0u;
  clear_has_background_label_id();
}
inline ::google::protobuf::uint32 MultiBoxLossParameter::background_label_id() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.background_label_id)
  return background_label_id_;
}
inline void MultiBoxLossParameter::set_background_label_id(::google::protobuf::uint32 value) {
  set_has_background_label_id();
  background_label_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.background_label_id)
}

// optional bool use_difficult_gt = 10 [default = true];
inline bool MultiBoxLossParameter::has_use_difficult_gt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MultiBoxLossParameter::set_has_use_difficult_gt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MultiBoxLossParameter::clear_has_use_difficult_gt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MultiBoxLossParameter::clear_use_difficult_gt() {
  use_difficult_gt_ = true;
  clear_has_use_difficult_gt();
}
inline bool MultiBoxLossParameter::use_difficult_gt() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.use_difficult_gt)
  return use_difficult_gt_;
}
inline void MultiBoxLossParameter::set_use_difficult_gt(bool value) {
  set_has_use_difficult_gt();
  use_difficult_gt_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.use_difficult_gt)
}

// optional bool do_neg_mining = 11 [default = true];
inline bool MultiBoxLossParameter::has_do_neg_mining() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MultiBoxLossParameter::set_has_do_neg_mining() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MultiBoxLossParameter::clear_has_do_neg_mining() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MultiBoxLossParameter::clear_do_neg_mining() {
  do_neg_mining_ = true;
  clear_has_do_neg_mining();
}
inline bool MultiBoxLossParameter::do_neg_mining() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.do_neg_mining)
  return do_neg_mining_;
}
inline void MultiBoxLossParameter::set_do_neg_mining(bool value) {
  set_has_do_neg_mining();
  do_neg_mining_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.do_neg_mining)
}

// optional float neg_pos_ratio = 12 [default = 3];
inline bool MultiBoxLossParameter::has_neg_pos_ratio() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MultiBoxLossParameter::set_has_neg_pos_ratio() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MultiBoxLossParameter::clear_has_neg_pos_ratio() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MultiBoxLossParameter::clear_neg_pos_ratio() {
  neg_pos_ratio_ = 3;
  clear_has_neg_pos_ratio();
}
inline float MultiBoxLossParameter::neg_pos_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.neg_pos_ratio)
  return neg_pos_ratio_;
}
inline void MultiBoxLossParameter::set_neg_pos_ratio(float value) {
  set_has_neg_pos_ratio();
  neg_pos_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.neg_pos_ratio)
}

// optional float neg_overlap = 13 [default = 0.5];
inline bool MultiBoxLossParameter::has_neg_overlap() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MultiBoxLossParameter::set_has_neg_overlap() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MultiBoxLossParameter::clear_has_neg_overlap() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MultiBoxLossParameter::clear_neg_overlap() {
  neg_overlap_ = 0.5f;
  clear_has_neg_overlap();
}
inline float MultiBoxLossParameter::neg_overlap() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.neg_overlap)
  return neg_overlap_;
}
inline void MultiBoxLossParameter::set_neg_overlap(float value) {
  set_has_neg_overlap();
  neg_overlap_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.neg_overlap)
}

// optional .caffe.PriorBoxParameter.CodeType code_type = 14 [default = CORNER];
inline bool MultiBoxLossParameter::has_code_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MultiBoxLossParameter::set_has_code_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MultiBoxLossParameter::clear_has_code_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MultiBoxLossParameter::clear_code_type() {
  code_type_ = 1;
  clear_has_code_type();
}
inline ::caffe::PriorBoxParameter_CodeType MultiBoxLossParameter::code_type() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.code_type)
  return static_cast< ::caffe::PriorBoxParameter_CodeType >(code_type_);
}
inline void MultiBoxLossParameter::set_code_type(::caffe::PriorBoxParameter_CodeType value) {
  assert(::caffe::PriorBoxParameter_CodeType_IsValid(value));
  set_has_code_type();
  code_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.code_type)
}

// optional bool encode_variance_in_target = 16 [default = false];
inline bool MultiBoxLossParameter::has_encode_variance_in_target() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MultiBoxLossParameter::set_has_encode_variance_in_target() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MultiBoxLossParameter::clear_has_encode_variance_in_target() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MultiBoxLossParameter::clear_encode_variance_in_target() {
  encode_variance_in_target_ = false;
  clear_has_encode_variance_in_target();
}
inline bool MultiBoxLossParameter::encode_variance_in_target() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.encode_variance_in_target)
  return encode_variance_in_target_;
}
inline void MultiBoxLossParameter::set_encode_variance_in_target(bool value) {
  set_has_encode_variance_in_target();
  encode_variance_in_target_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.encode_variance_in_target)
}

// optional bool map_object_to_agnostic = 17 [default = false];
inline bool MultiBoxLossParameter::has_map_object_to_agnostic() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MultiBoxLossParameter::set_has_map_object_to_agnostic() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MultiBoxLossParameter::clear_has_map_object_to_agnostic() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MultiBoxLossParameter::clear_map_object_to_agnostic() {
  map_object_to_agnostic_ = false;
  clear_has_map_object_to_agnostic();
}
inline bool MultiBoxLossParameter::map_object_to_agnostic() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.map_object_to_agnostic)
  return map_object_to_agnostic_;
}
inline void MultiBoxLossParameter::set_map_object_to_agnostic(bool value) {
  set_has_map_object_to_agnostic();
  map_object_to_agnostic_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.map_object_to_agnostic)
}

// optional int32 loc_class = 24 [default = 1];
inline bool MultiBoxLossParameter::has_loc_class() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MultiBoxLossParameter::set_has_loc_class() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MultiBoxLossParameter::clear_has_loc_class() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MultiBoxLossParameter::clear_loc_class() {
  loc_class_ = 1;
  clear_has_loc_class();
}
inline ::google::protobuf::int32 MultiBoxLossParameter::loc_class() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.loc_class)
  return loc_class_;
}
inline void MultiBoxLossParameter::set_loc_class(::google::protobuf::int32 value) {
  set_has_loc_class();
  loc_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.loc_class)
}

// optional float conf_weight = 25 [default = 1];
inline bool MultiBoxLossParameter::has_conf_weight() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MultiBoxLossParameter::set_has_conf_weight() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MultiBoxLossParameter::clear_has_conf_weight() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MultiBoxLossParameter::clear_conf_weight() {
  conf_weight_ = 1;
  clear_has_conf_weight();
}
inline float MultiBoxLossParameter::conf_weight() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.conf_weight)
  return conf_weight_;
}
inline void MultiBoxLossParameter::set_conf_weight(float value) {
  set_has_conf_weight();
  conf_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.conf_weight)
}

// optional string name_to_label_file = 47;
inline bool MultiBoxLossParameter::has_name_to_label_file() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MultiBoxLossParameter::set_has_name_to_label_file() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MultiBoxLossParameter::clear_has_name_to_label_file() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MultiBoxLossParameter::clear_name_to_label_file() {
  name_to_label_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name_to_label_file();
}
inline const ::std::string& MultiBoxLossParameter::name_to_label_file() const {
  // @@protoc_insertion_point(field_get:caffe.MultiBoxLossParameter.name_to_label_file)
  return name_to_label_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiBoxLossParameter::set_name_to_label_file(const ::std::string& value) {
  set_has_name_to_label_file();
  name_to_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MultiBoxLossParameter.name_to_label_file)
}
inline void MultiBoxLossParameter::set_name_to_label_file(const char* value) {
  set_has_name_to_label_file();
  name_to_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MultiBoxLossParameter.name_to_label_file)
}
inline void MultiBoxLossParameter::set_name_to_label_file(const char* value, size_t size) {
  set_has_name_to_label_file();
  name_to_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MultiBoxLossParameter.name_to_label_file)
}
inline ::std::string* MultiBoxLossParameter::mutable_name_to_label_file() {
  set_has_name_to_label_file();
  // @@protoc_insertion_point(field_mutable:caffe.MultiBoxLossParameter.name_to_label_file)
  return name_to_label_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultiBoxLossParameter::release_name_to_label_file() {
  // @@protoc_insertion_point(field_release:caffe.MultiBoxLossParameter.name_to_label_file)
  clear_has_name_to_label_file();
  return name_to_label_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiBoxLossParameter::set_allocated_name_to_label_file(::std::string* name_to_label_file) {
  if (name_to_label_file != NULL) {
    set_has_name_to_label_file();
  } else {
    clear_has_name_to_label_file();
  }
  name_to_label_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_to_label_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.MultiBoxLossParameter.name_to_label_file)
}

// -------------------------------------------------------------------

// BBoxLossParameter

// optional .caffe.MultiBoxLossParameter.LocLossType loc_loss_type = 1;
inline bool BBoxLossParameter::has_loc_loss_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BBoxLossParameter::set_has_loc_loss_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BBoxLossParameter::clear_has_loc_loss_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BBoxLossParameter::clear_loc_loss_type() {
  loc_loss_type_ = 0;
  clear_has_loc_loss_type();
}
inline ::caffe::MultiBoxLossParameter_LocLossType BBoxLossParameter::loc_loss_type() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.loc_loss_type)
  return static_cast< ::caffe::MultiBoxLossParameter_LocLossType >(loc_loss_type_);
}
inline void BBoxLossParameter::set_loc_loss_type(::caffe::MultiBoxLossParameter_LocLossType value) {
  assert(::caffe::MultiBoxLossParameter_LocLossType_IsValid(value));
  set_has_loc_loss_type();
  loc_loss_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.loc_loss_type)
}

// optional .caffe.MultiBoxLossParameter.ConfLossType conf_loss_type = 2;
inline bool BBoxLossParameter::has_conf_loss_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BBoxLossParameter::set_has_conf_loss_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BBoxLossParameter::clear_has_conf_loss_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BBoxLossParameter::clear_conf_loss_type() {
  conf_loss_type_ = 0;
  clear_has_conf_loss_type();
}
inline ::caffe::MultiBoxLossParameter_ConfLossType BBoxLossParameter::conf_loss_type() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.conf_loss_type)
  return static_cast< ::caffe::MultiBoxLossParameter_ConfLossType >(conf_loss_type_);
}
inline void BBoxLossParameter::set_conf_loss_type(::caffe::MultiBoxLossParameter_ConfLossType value) {
  assert(::caffe::MultiBoxLossParameter_ConfLossType_IsValid(value));
  set_has_conf_loss_type();
  conf_loss_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.conf_loss_type)
}

// optional float loc_weight = 3 [default = 1];
inline bool BBoxLossParameter::has_loc_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BBoxLossParameter::set_has_loc_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BBoxLossParameter::clear_has_loc_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BBoxLossParameter::clear_loc_weight() {
  loc_weight_ = 1;
  clear_has_loc_weight();
}
inline float BBoxLossParameter::loc_weight() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.loc_weight)
  return loc_weight_;
}
inline void BBoxLossParameter::set_loc_weight(float value) {
  set_has_loc_weight();
  loc_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.loc_weight)
}

// optional uint32 num_classes = 4 [default = 2];
inline bool BBoxLossParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BBoxLossParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BBoxLossParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BBoxLossParameter::clear_num_classes() {
  num_classes_ = 2u;
  clear_has_num_classes();
}
inline ::google::protobuf::uint32 BBoxLossParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.num_classes)
  return num_classes_;
}
inline void BBoxLossParameter::set_num_classes(::google::protobuf::uint32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.num_classes)
}

// optional bool share_location = 5 [default = true];
inline bool BBoxLossParameter::has_share_location() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BBoxLossParameter::set_has_share_location() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BBoxLossParameter::clear_has_share_location() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BBoxLossParameter::clear_share_location() {
  share_location_ = true;
  clear_has_share_location();
}
inline bool BBoxLossParameter::share_location() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.share_location)
  return share_location_;
}
inline void BBoxLossParameter::set_share_location(bool value) {
  set_has_share_location();
  share_location_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.share_location)
}

// optional .caffe.MultiBoxLossParameter.MatchType match_type = 6;
inline bool BBoxLossParameter::has_match_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BBoxLossParameter::set_has_match_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BBoxLossParameter::clear_has_match_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BBoxLossParameter::clear_match_type() {
  match_type_ = 0;
  clear_has_match_type();
}
inline ::caffe::MultiBoxLossParameter_MatchType BBoxLossParameter::match_type() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.match_type)
  return static_cast< ::caffe::MultiBoxLossParameter_MatchType >(match_type_);
}
inline void BBoxLossParameter::set_match_type(::caffe::MultiBoxLossParameter_MatchType value) {
  assert(::caffe::MultiBoxLossParameter_MatchType_IsValid(value));
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.match_type)
}

// optional float overlap_threshold = 7 [default = 0.5];
inline bool BBoxLossParameter::has_overlap_threshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BBoxLossParameter::set_has_overlap_threshold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BBoxLossParameter::clear_has_overlap_threshold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BBoxLossParameter::clear_overlap_threshold() {
  overlap_threshold_ = 0.5f;
  clear_has_overlap_threshold();
}
inline float BBoxLossParameter::overlap_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.overlap_threshold)
  return overlap_threshold_;
}
inline void BBoxLossParameter::set_overlap_threshold(float value) {
  set_has_overlap_threshold();
  overlap_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.overlap_threshold)
}

// optional bool use_prior_for_matching = 8 [default = true];
inline bool BBoxLossParameter::has_use_prior_for_matching() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BBoxLossParameter::set_has_use_prior_for_matching() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BBoxLossParameter::clear_has_use_prior_for_matching() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BBoxLossParameter::clear_use_prior_for_matching() {
  use_prior_for_matching_ = true;
  clear_has_use_prior_for_matching();
}
inline bool BBoxLossParameter::use_prior_for_matching() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.use_prior_for_matching)
  return use_prior_for_matching_;
}
inline void BBoxLossParameter::set_use_prior_for_matching(bool value) {
  set_has_use_prior_for_matching();
  use_prior_for_matching_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.use_prior_for_matching)
}

// optional uint32 background_label_id = 9 [default = 0];
inline bool BBoxLossParameter::has_background_label_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BBoxLossParameter::set_has_background_label_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BBoxLossParameter::clear_has_background_label_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BBoxLossParameter::clear_background_label_id() {
  background_label_id_ = 0u;
  clear_has_background_label_id();
}
inline ::google::protobuf::uint32 BBoxLossParameter::background_label_id() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.background_label_id)
  return background_label_id_;
}
inline void BBoxLossParameter::set_background_label_id(::google::protobuf::uint32 value) {
  set_has_background_label_id();
  background_label_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.background_label_id)
}

// optional bool use_difficult_gt = 10 [default = false];
inline bool BBoxLossParameter::has_use_difficult_gt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BBoxLossParameter::set_has_use_difficult_gt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BBoxLossParameter::clear_has_use_difficult_gt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BBoxLossParameter::clear_use_difficult_gt() {
  use_difficult_gt_ = false;
  clear_has_use_difficult_gt();
}
inline bool BBoxLossParameter::use_difficult_gt() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.use_difficult_gt)
  return use_difficult_gt_;
}
inline void BBoxLossParameter::set_use_difficult_gt(bool value) {
  set_has_use_difficult_gt();
  use_difficult_gt_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.use_difficult_gt)
}

// optional bool do_neg_mining = 11 [default = true];
inline bool BBoxLossParameter::has_do_neg_mining() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BBoxLossParameter::set_has_do_neg_mining() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BBoxLossParameter::clear_has_do_neg_mining() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BBoxLossParameter::clear_do_neg_mining() {
  do_neg_mining_ = true;
  clear_has_do_neg_mining();
}
inline bool BBoxLossParameter::do_neg_mining() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.do_neg_mining)
  return do_neg_mining_;
}
inline void BBoxLossParameter::set_do_neg_mining(bool value) {
  set_has_do_neg_mining();
  do_neg_mining_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.do_neg_mining)
}

// optional float neg_pos_ratio = 12 [default = 3];
inline bool BBoxLossParameter::has_neg_pos_ratio() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BBoxLossParameter::set_has_neg_pos_ratio() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BBoxLossParameter::clear_has_neg_pos_ratio() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BBoxLossParameter::clear_neg_pos_ratio() {
  neg_pos_ratio_ = 3;
  clear_has_neg_pos_ratio();
}
inline float BBoxLossParameter::neg_pos_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.neg_pos_ratio)
  return neg_pos_ratio_;
}
inline void BBoxLossParameter::set_neg_pos_ratio(float value) {
  set_has_neg_pos_ratio();
  neg_pos_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.neg_pos_ratio)
}

// optional float neg_overlap = 13 [default = 0.5];
inline bool BBoxLossParameter::has_neg_overlap() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BBoxLossParameter::set_has_neg_overlap() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BBoxLossParameter::clear_has_neg_overlap() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BBoxLossParameter::clear_neg_overlap() {
  neg_overlap_ = 0.5f;
  clear_has_neg_overlap();
}
inline float BBoxLossParameter::neg_overlap() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.neg_overlap)
  return neg_overlap_;
}
inline void BBoxLossParameter::set_neg_overlap(float value) {
  set_has_neg_overlap();
  neg_overlap_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.neg_overlap)
}

// optional .caffe.PriorBoxParameter.CodeType code_type = 14;
inline bool BBoxLossParameter::has_code_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BBoxLossParameter::set_has_code_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BBoxLossParameter::clear_has_code_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BBoxLossParameter::clear_code_type() {
  code_type_ = 1;
  clear_has_code_type();
}
inline ::caffe::PriorBoxParameter_CodeType BBoxLossParameter::code_type() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.code_type)
  return static_cast< ::caffe::PriorBoxParameter_CodeType >(code_type_);
}
inline void BBoxLossParameter::set_code_type(::caffe::PriorBoxParameter_CodeType value) {
  assert(::caffe::PriorBoxParameter_CodeType_IsValid(value));
  set_has_code_type();
  code_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.code_type)
}

// optional bool encode_variance_in_target = 15 [default = false];
inline bool BBoxLossParameter::has_encode_variance_in_target() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BBoxLossParameter::set_has_encode_variance_in_target() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BBoxLossParameter::clear_has_encode_variance_in_target() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BBoxLossParameter::clear_encode_variance_in_target() {
  encode_variance_in_target_ = false;
  clear_has_encode_variance_in_target();
}
inline bool BBoxLossParameter::encode_variance_in_target() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.encode_variance_in_target)
  return encode_variance_in_target_;
}
inline void BBoxLossParameter::set_encode_variance_in_target(bool value) {
  set_has_encode_variance_in_target();
  encode_variance_in_target_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.encode_variance_in_target)
}

// optional bool map_object_to_agnostic = 16 [default = false];
inline bool BBoxLossParameter::has_map_object_to_agnostic() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BBoxLossParameter::set_has_map_object_to_agnostic() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BBoxLossParameter::clear_has_map_object_to_agnostic() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BBoxLossParameter::clear_map_object_to_agnostic() {
  map_object_to_agnostic_ = false;
  clear_has_map_object_to_agnostic();
}
inline bool BBoxLossParameter::map_object_to_agnostic() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.map_object_to_agnostic)
  return map_object_to_agnostic_;
}
inline void BBoxLossParameter::set_map_object_to_agnostic(bool value) {
  set_has_map_object_to_agnostic();
  map_object_to_agnostic_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.map_object_to_agnostic)
}

// optional int32 loc_class = 17 [default = 1];
inline bool BBoxLossParameter::has_loc_class() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BBoxLossParameter::set_has_loc_class() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BBoxLossParameter::clear_has_loc_class() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BBoxLossParameter::clear_loc_class() {
  loc_class_ = 1;
  clear_has_loc_class();
}
inline ::google::protobuf::int32 BBoxLossParameter::loc_class() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.loc_class)
  return loc_class_;
}
inline void BBoxLossParameter::set_loc_class(::google::protobuf::int32 value) {
  set_has_loc_class();
  loc_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.loc_class)
}

// optional float conf_weight = 18 [default = 1];
inline bool BBoxLossParameter::has_conf_weight() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BBoxLossParameter::set_has_conf_weight() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BBoxLossParameter::clear_has_conf_weight() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BBoxLossParameter::clear_conf_weight() {
  conf_weight_ = 1;
  clear_has_conf_weight();
}
inline float BBoxLossParameter::conf_weight() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.conf_weight)
  return conf_weight_;
}
inline void BBoxLossParameter::set_conf_weight(float value) {
  set_has_conf_weight();
  conf_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.conf_weight)
}

// optional float size_threshold = 19 [default = 0.001];
inline bool BBoxLossParameter::has_size_threshold() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BBoxLossParameter::set_has_size_threshold() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BBoxLossParameter::clear_has_size_threshold() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BBoxLossParameter::clear_size_threshold() {
  size_threshold_ = 0.001f;
  clear_has_size_threshold();
}
inline float BBoxLossParameter::size_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.size_threshold)
  return size_threshold_;
}
inline void BBoxLossParameter::set_size_threshold(float value) {
  set_has_size_threshold();
  size_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.size_threshold)
}

// optional int32 alias_id = 20 [default = 0];
inline bool BBoxLossParameter::has_alias_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BBoxLossParameter::set_has_alias_id() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BBoxLossParameter::clear_has_alias_id() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BBoxLossParameter::clear_alias_id() {
  alias_id_ = 0;
  clear_has_alias_id();
}
inline ::google::protobuf::int32 BBoxLossParameter::alias_id() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.alias_id)
  return alias_id_;
}
inline void BBoxLossParameter::set_alias_id(::google::protobuf::int32 value) {
  set_has_alias_id();
  alias_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.alias_id)
}

// optional bool using_focus_loss = 21 [default = false];
inline bool BBoxLossParameter::has_using_focus_loss() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BBoxLossParameter::set_has_using_focus_loss() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BBoxLossParameter::clear_has_using_focus_loss() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BBoxLossParameter::clear_using_focus_loss() {
  using_focus_loss_ = false;
  clear_has_using_focus_loss();
}
inline bool BBoxLossParameter::using_focus_loss() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.using_focus_loss)
  return using_focus_loss_;
}
inline void BBoxLossParameter::set_using_focus_loss(bool value) {
  set_has_using_focus_loss();
  using_focus_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.using_focus_loss)
}

// optional float gama = 22 [default = 2];
inline bool BBoxLossParameter::has_gama() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BBoxLossParameter::set_has_gama() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BBoxLossParameter::clear_has_gama() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BBoxLossParameter::clear_gama() {
  gama_ = 2;
  clear_has_gama();
}
inline float BBoxLossParameter::gama() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.gama)
  return gama_;
}
inline void BBoxLossParameter::set_gama(float value) {
  set_has_gama();
  gama_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.gama)
}

// optional float alpha = 36 [default = 1];
inline bool BBoxLossParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void BBoxLossParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00400000u;
}
inline void BBoxLossParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void BBoxLossParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float BBoxLossParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.alpha)
  return alpha_;
}
inline void BBoxLossParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.alpha)
}

// repeated int32 gt_labels = 23;
inline int BBoxLossParameter::gt_labels_size() const {
  return gt_labels_.size();
}
inline void BBoxLossParameter::clear_gt_labels() {
  gt_labels_.Clear();
}
inline ::google::protobuf::int32 BBoxLossParameter::gt_labels(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.gt_labels)
  return gt_labels_.Get(index);
}
inline void BBoxLossParameter::set_gt_labels(int index, ::google::protobuf::int32 value) {
  gt_labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.gt_labels)
}
inline void BBoxLossParameter::add_gt_labels(::google::protobuf::int32 value) {
  gt_labels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BBoxLossParameter.gt_labels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BBoxLossParameter::gt_labels() const {
  // @@protoc_insertion_point(field_list:caffe.BBoxLossParameter.gt_labels)
  return gt_labels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BBoxLossParameter::mutable_gt_labels() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BBoxLossParameter.gt_labels)
  return &gt_labels_;
}

// repeated int32 target_labels = 24;
inline int BBoxLossParameter::target_labels_size() const {
  return target_labels_.size();
}
inline void BBoxLossParameter::clear_target_labels() {
  target_labels_.Clear();
}
inline ::google::protobuf::int32 BBoxLossParameter::target_labels(int index) const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.target_labels)
  return target_labels_.Get(index);
}
inline void BBoxLossParameter::set_target_labels(int index, ::google::protobuf::int32 value) {
  target_labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.target_labels)
}
inline void BBoxLossParameter::add_target_labels(::google::protobuf::int32 value) {
  target_labels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.BBoxLossParameter.target_labels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BBoxLossParameter::target_labels() const {
  // @@protoc_insertion_point(field_list:caffe.BBoxLossParameter.target_labels)
  return target_labels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BBoxLossParameter::mutable_target_labels() {
  // @@protoc_insertion_point(field_mutable_list:caffe.BBoxLossParameter.target_labels)
  return &target_labels_;
}

// optional bool flag_noperson = 25 [default = false];
inline bool BBoxLossParameter::has_flag_noperson() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void BBoxLossParameter::set_has_flag_noperson() {
  _has_bits_[0] |= 0x02000000u;
}
inline void BBoxLossParameter::clear_has_flag_noperson() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void BBoxLossParameter::clear_flag_noperson() {
  flag_noperson_ = false;
  clear_has_flag_noperson();
}
inline bool BBoxLossParameter::flag_noperson() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.flag_noperson)
  return flag_noperson_;
}
inline void BBoxLossParameter::set_flag_noperson(bool value) {
  set_has_flag_noperson();
  flag_noperson_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.flag_noperson)
}

// optional bool flag_checkanchor = 26 [default = false];
inline bool BBoxLossParameter::has_flag_checkanchor() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void BBoxLossParameter::set_has_flag_checkanchor() {
  _has_bits_[0] |= 0x04000000u;
}
inline void BBoxLossParameter::clear_has_flag_checkanchor() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void BBoxLossParameter::clear_flag_checkanchor() {
  flag_checkanchor_ = false;
  clear_has_flag_checkanchor();
}
inline bool BBoxLossParameter::flag_checkanchor() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.flag_checkanchor)
  return flag_checkanchor_;
}
inline void BBoxLossParameter::set_flag_checkanchor(bool value) {
  set_has_flag_checkanchor();
  flag_checkanchor_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.flag_checkanchor)
}

// optional .caffe.BBoxLossParameter.EffectiveMode check_effectmode = 27 [default = BOTTOMSIZE];
inline bool BBoxLossParameter::has_check_effectmode() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void BBoxLossParameter::set_has_check_effectmode() {
  _has_bits_[0] |= 0x08000000u;
}
inline void BBoxLossParameter::clear_has_check_effectmode() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void BBoxLossParameter::clear_check_effectmode() {
  check_effectmode_ = 1;
  clear_has_check_effectmode();
}
inline ::caffe::BBoxLossParameter_EffectiveMode BBoxLossParameter::check_effectmode() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.check_effectmode)
  return static_cast< ::caffe::BBoxLossParameter_EffectiveMode >(check_effectmode_);
}
inline void BBoxLossParameter::set_check_effectmode(::caffe::BBoxLossParameter_EffectiveMode value) {
  assert(::caffe::BBoxLossParameter_EffectiveMode_IsValid(value));
  set_has_check_effectmode();
  check_effectmode_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.check_effectmode)
}

// optional bool flag_mtanchorgt_allneg = 28 [default = false];
inline bool BBoxLossParameter::has_flag_mtanchorgt_allneg() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void BBoxLossParameter::set_has_flag_mtanchorgt_allneg() {
  _has_bits_[0] |= 0x10000000u;
}
inline void BBoxLossParameter::clear_has_flag_mtanchorgt_allneg() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void BBoxLossParameter::clear_flag_mtanchorgt_allneg() {
  flag_mtanchorgt_allneg_ = false;
  clear_has_flag_mtanchorgt_allneg();
}
inline bool BBoxLossParameter::flag_mtanchorgt_allneg() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.flag_mtanchorgt_allneg)
  return flag_mtanchorgt_allneg_;
}
inline void BBoxLossParameter::set_flag_mtanchorgt_allneg(bool value) {
  set_has_flag_mtanchorgt_allneg();
  flag_mtanchorgt_allneg_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.flag_mtanchorgt_allneg)
}

// optional .caffe.BBoxLossParameter.MatchTypeAnchorGT matchtype_anchorgt = 29 [default = WEIGHTIOU];
inline bool BBoxLossParameter::has_matchtype_anchorgt() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void BBoxLossParameter::set_has_matchtype_anchorgt() {
  _has_bits_[0] |= 0x20000000u;
}
inline void BBoxLossParameter::clear_has_matchtype_anchorgt() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void BBoxLossParameter::clear_matchtype_anchorgt() {
  matchtype_anchorgt_ = 1;
  clear_has_matchtype_anchorgt();
}
inline ::caffe::BBoxLossParameter_MatchTypeAnchorGT BBoxLossParameter::matchtype_anchorgt() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.matchtype_anchorgt)
  return static_cast< ::caffe::BBoxLossParameter_MatchTypeAnchorGT >(matchtype_anchorgt_);
}
inline void BBoxLossParameter::set_matchtype_anchorgt(::caffe::BBoxLossParameter_MatchTypeAnchorGT value) {
  assert(::caffe::BBoxLossParameter_MatchTypeAnchorGT_IsValid(value));
  set_has_matchtype_anchorgt();
  matchtype_anchorgt_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.matchtype_anchorgt)
}

// optional float sigma_angtdist = 30 [default = 0.2];
inline bool BBoxLossParameter::has_sigma_angtdist() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void BBoxLossParameter::set_has_sigma_angtdist() {
  _has_bits_[0] |= 0x40000000u;
}
inline void BBoxLossParameter::clear_has_sigma_angtdist() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void BBoxLossParameter::clear_sigma_angtdist() {
  sigma_angtdist_ = 0.2f;
  clear_has_sigma_angtdist();
}
inline float BBoxLossParameter::sigma_angtdist() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.sigma_angtdist)
  return sigma_angtdist_;
}
inline void BBoxLossParameter::set_sigma_angtdist(float value) {
  set_has_sigma_angtdist();
  sigma_angtdist_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.sigma_angtdist)
}

// optional float cover_extracheck = 31 [default = 0.7];
inline bool BBoxLossParameter::has_cover_extracheck() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void BBoxLossParameter::set_has_cover_extracheck() {
  _has_bits_[0] |= 0x80000000u;
}
inline void BBoxLossParameter::clear_has_cover_extracheck() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void BBoxLossParameter::clear_cover_extracheck() {
  cover_extracheck_ = 0.7f;
  clear_has_cover_extracheck();
}
inline float BBoxLossParameter::cover_extracheck() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.cover_extracheck)
  return cover_extracheck_;
}
inline void BBoxLossParameter::set_cover_extracheck(float value) {
  set_has_cover_extracheck();
  cover_extracheck_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.cover_extracheck)
}

// optional float margin_ratio = 32 [default = 0.25];
inline bool BBoxLossParameter::has_margin_ratio() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void BBoxLossParameter::set_has_margin_ratio() {
  _has_bits_[1] |= 0x00000001u;
}
inline void BBoxLossParameter::clear_has_margin_ratio() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void BBoxLossParameter::clear_margin_ratio() {
  margin_ratio_ = 0.25f;
  clear_has_margin_ratio();
}
inline float BBoxLossParameter::margin_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.margin_ratio)
  return margin_ratio_;
}
inline void BBoxLossParameter::set_margin_ratio(float value) {
  set_has_margin_ratio();
  margin_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.margin_ratio)
}

// optional int32 ndim_label = 33 [default = 9];
inline bool BBoxLossParameter::has_ndim_label() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void BBoxLossParameter::set_has_ndim_label() {
  _has_bits_[1] |= 0x00000002u;
}
inline void BBoxLossParameter::clear_has_ndim_label() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void BBoxLossParameter::clear_ndim_label() {
  ndim_label_ = 9;
  clear_has_ndim_label();
}
inline ::google::protobuf::int32 BBoxLossParameter::ndim_label() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.ndim_label)
  return ndim_label_;
}
inline void BBoxLossParameter::set_ndim_label(::google::protobuf::int32 value) {
  set_has_ndim_label();
  ndim_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.ndim_label)
}

// optional float margin_ratio_h = 38 [default = 0.25];
inline bool BBoxLossParameter::has_margin_ratio_h() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void BBoxLossParameter::set_has_margin_ratio_h() {
  _has_bits_[1] |= 0x00000004u;
}
inline void BBoxLossParameter::clear_has_margin_ratio_h() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void BBoxLossParameter::clear_margin_ratio_h() {
  margin_ratio_h_ = 0.25f;
  clear_has_margin_ratio_h();
}
inline float BBoxLossParameter::margin_ratio_h() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.margin_ratio_h)
  return margin_ratio_h_;
}
inline void BBoxLossParameter::set_margin_ratio_h(float value) {
  set_has_margin_ratio_h();
  margin_ratio_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.margin_ratio_h)
}

// optional bool only_w = 34 [default = false];
inline bool BBoxLossParameter::has_only_w() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void BBoxLossParameter::set_has_only_w() {
  _has_bits_[1] |= 0x00000008u;
}
inline void BBoxLossParameter::clear_has_only_w() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void BBoxLossParameter::clear_only_w() {
  only_w_ = false;
  clear_has_only_w();
}
inline bool BBoxLossParameter::only_w() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.only_w)
  return only_w_;
}
inline void BBoxLossParameter::set_only_w(bool value) {
  set_has_only_w();
  only_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.only_w)
}

// optional bool showanchornumvsscale = 35 [default = false];
inline bool BBoxLossParameter::has_showanchornumvsscale() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void BBoxLossParameter::set_has_showanchornumvsscale() {
  _has_bits_[1] |= 0x00000010u;
}
inline void BBoxLossParameter::clear_has_showanchornumvsscale() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void BBoxLossParameter::clear_showanchornumvsscale() {
  showanchornumvsscale_ = false;
  clear_has_showanchornumvsscale();
}
inline bool BBoxLossParameter::showanchornumvsscale() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.showanchornumvsscale)
  return showanchornumvsscale_;
}
inline void BBoxLossParameter::set_showanchornumvsscale(bool value) {
  set_has_showanchornumvsscale();
  showanchornumvsscale_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.showanchornumvsscale)
}

// optional bool conf_norm_pos = 37 [default = false];
inline bool BBoxLossParameter::has_conf_norm_pos() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void BBoxLossParameter::set_has_conf_norm_pos() {
  _has_bits_[1] |= 0x00000020u;
}
inline void BBoxLossParameter::clear_has_conf_norm_pos() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void BBoxLossParameter::clear_conf_norm_pos() {
  conf_norm_pos_ = false;
  clear_has_conf_norm_pos();
}
inline bool BBoxLossParameter::conf_norm_pos() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.conf_norm_pos)
  return conf_norm_pos_;
}
inline void BBoxLossParameter::set_conf_norm_pos(bool value) {
  set_has_conf_norm_pos();
  conf_norm_pos_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.conf_norm_pos)
}

// optional bool using_gmhc_loss = 39 [default = false];
inline bool BBoxLossParameter::has_using_gmhc_loss() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void BBoxLossParameter::set_has_using_gmhc_loss() {
  _has_bits_[1] |= 0x00000040u;
}
inline void BBoxLossParameter::clear_has_using_gmhc_loss() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void BBoxLossParameter::clear_using_gmhc_loss() {
  using_gmhc_loss_ = false;
  clear_has_using_gmhc_loss();
}
inline bool BBoxLossParameter::using_gmhc_loss() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.using_gmhc_loss)
  return using_gmhc_loss_;
}
inline void BBoxLossParameter::set_using_gmhc_loss(bool value) {
  set_has_using_gmhc_loss();
  using_gmhc_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.using_gmhc_loss)
}

// optional int32 mbins = 40 [default = 50];
inline bool BBoxLossParameter::has_mbins() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void BBoxLossParameter::set_has_mbins() {
  _has_bits_[1] |= 0x00000080u;
}
inline void BBoxLossParameter::clear_has_mbins() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void BBoxLossParameter::clear_mbins() {
  mbins_ = 50;
  clear_has_mbins();
}
inline ::google::protobuf::int32 BBoxLossParameter::mbins() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.mbins)
  return mbins_;
}
inline void BBoxLossParameter::set_mbins(::google::protobuf::int32 value) {
  set_has_mbins();
  mbins_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.mbins)
}

// optional bool using_twoclassbalance_loss = 41 [default = false];
inline bool BBoxLossParameter::has_using_twoclassbalance_loss() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void BBoxLossParameter::set_has_using_twoclassbalance_loss() {
  _has_bits_[1] |= 0x00000100u;
}
inline void BBoxLossParameter::clear_has_using_twoclassbalance_loss() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void BBoxLossParameter::clear_using_twoclassbalance_loss() {
  using_twoclassbalance_loss_ = false;
  clear_has_using_twoclassbalance_loss();
}
inline bool BBoxLossParameter::using_twoclassbalance_loss() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.using_twoclassbalance_loss)
  return using_twoclassbalance_loss_;
}
inline void BBoxLossParameter::set_using_twoclassbalance_loss(bool value) {
  set_has_using_twoclassbalance_loss();
  using_twoclassbalance_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.using_twoclassbalance_loss)
}

// optional bool only_pos = 42 [default = false];
inline bool BBoxLossParameter::has_only_pos() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void BBoxLossParameter::set_has_only_pos() {
  _has_bits_[1] |= 0x00000200u;
}
inline void BBoxLossParameter::clear_has_only_pos() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void BBoxLossParameter::clear_only_pos() {
  only_pos_ = false;
  clear_has_only_pos();
}
inline bool BBoxLossParameter::only_pos() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.only_pos)
  return only_pos_;
}
inline void BBoxLossParameter::set_only_pos(bool value) {
  set_has_only_pos();
  only_pos_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.only_pos)
}

// optional int32 neg_max_value = 43 [default = 0];
inline bool BBoxLossParameter::has_neg_max_value() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void BBoxLossParameter::set_has_neg_max_value() {
  _has_bits_[1] |= 0x00000400u;
}
inline void BBoxLossParameter::clear_has_neg_max_value() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void BBoxLossParameter::clear_neg_max_value() {
  neg_max_value_ = 0;
  clear_has_neg_max_value();
}
inline ::google::protobuf::int32 BBoxLossParameter::neg_max_value() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.neg_max_value)
  return neg_max_value_;
}
inline void BBoxLossParameter::set_neg_max_value(::google::protobuf::int32 value) {
  set_has_neg_max_value();
  neg_max_value_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.neg_max_value)
}

// optional float objectness_score = 44 [default = 0.99];
inline bool BBoxLossParameter::has_objectness_score() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void BBoxLossParameter::set_has_objectness_score() {
  _has_bits_[1] |= 0x00000800u;
}
inline void BBoxLossParameter::clear_has_objectness_score() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void BBoxLossParameter::clear_objectness_score() {
  objectness_score_ = 0.99f;
  clear_has_objectness_score();
}
inline float BBoxLossParameter::objectness_score() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.objectness_score)
  return objectness_score_;
}
inline void BBoxLossParameter::set_objectness_score(float value) {
  set_has_objectness_score();
  objectness_score_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.objectness_score)
}

// optional float weight = 45 [default = 1];
inline bool BBoxLossParameter::has_weight() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void BBoxLossParameter::set_has_weight() {
  _has_bits_[1] |= 0x00001000u;
}
inline void BBoxLossParameter::clear_has_weight() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void BBoxLossParameter::clear_weight() {
  weight_ = 1;
  clear_has_weight();
}
inline float BBoxLossParameter::weight() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.weight)
  return weight_;
}
inline void BBoxLossParameter::set_weight(float value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.weight)
}

// optional string weight_type = 46 [default = "index"];
inline bool BBoxLossParameter::has_weight_type() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void BBoxLossParameter::set_has_weight_type() {
  _has_bits_[1] |= 0x00002000u;
}
inline void BBoxLossParameter::clear_has_weight_type() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void BBoxLossParameter::clear_weight_type() {
  weight_type_.ClearToDefaultNoArena(_default_weight_type_);
  clear_has_weight_type();
}
inline const ::std::string& BBoxLossParameter::weight_type() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.weight_type)
  return weight_type_.GetNoArena(_default_weight_type_);
}
inline void BBoxLossParameter::set_weight_type(const ::std::string& value) {
  set_has_weight_type();
  weight_type_.SetNoArena(_default_weight_type_, value);
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.weight_type)
}
inline void BBoxLossParameter::set_weight_type(const char* value) {
  set_has_weight_type();
  weight_type_.SetNoArena(_default_weight_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.BBoxLossParameter.weight_type)
}
inline void BBoxLossParameter::set_weight_type(const char* value, size_t size) {
  set_has_weight_type();
  weight_type_.SetNoArena(_default_weight_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.BBoxLossParameter.weight_type)
}
inline ::std::string* BBoxLossParameter::mutable_weight_type() {
  set_has_weight_type();
  // @@protoc_insertion_point(field_mutable:caffe.BBoxLossParameter.weight_type)
  return weight_type_.MutableNoArena(_default_weight_type_);
}
inline ::std::string* BBoxLossParameter::release_weight_type() {
  // @@protoc_insertion_point(field_release:caffe.BBoxLossParameter.weight_type)
  clear_has_weight_type();
  return weight_type_.ReleaseNoArena(_default_weight_type_);
}
inline void BBoxLossParameter::set_allocated_weight_type(::std::string* weight_type) {
  if (weight_type != NULL) {
    set_has_weight_type();
  } else {
    clear_has_weight_type();
  }
  weight_type_.SetAllocatedNoArena(_default_weight_type_, weight_type);
  // @@protoc_insertion_point(field_set_allocated:caffe.BBoxLossParameter.weight_type)
}

// optional bool use_group = 47 [default = false];
inline bool BBoxLossParameter::has_use_group() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void BBoxLossParameter::set_has_use_group() {
  _has_bits_[1] |= 0x00004000u;
}
inline void BBoxLossParameter::clear_has_use_group() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void BBoxLossParameter::clear_use_group() {
  use_group_ = false;
  clear_has_use_group();
}
inline bool BBoxLossParameter::use_group() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.use_group)
  return use_group_;
}
inline void BBoxLossParameter::set_use_group(bool value) {
  set_has_use_group();
  use_group_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.use_group)
}

// optional float k1 = 48 [default = 1];
inline bool BBoxLossParameter::has_k1() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void BBoxLossParameter::set_has_k1() {
  _has_bits_[1] |= 0x00008000u;
}
inline void BBoxLossParameter::clear_has_k1() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void BBoxLossParameter::clear_k1() {
  k1_ = 1;
  clear_has_k1();
}
inline float BBoxLossParameter::k1() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.k1)
  return k1_;
}
inline void BBoxLossParameter::set_k1(float value) {
  set_has_k1();
  k1_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.k1)
}

// optional float k2 = 49 [default = 1];
inline bool BBoxLossParameter::has_k2() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void BBoxLossParameter::set_has_k2() {
  _has_bits_[1] |= 0x00010000u;
}
inline void BBoxLossParameter::clear_has_k2() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void BBoxLossParameter::clear_k2() {
  k2_ = 1;
  clear_has_k2();
}
inline float BBoxLossParameter::k2() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.k2)
  return k2_;
}
inline void BBoxLossParameter::set_k2(float value) {
  set_has_k2();
  k2_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.k2)
}

// optional float b1 = 50 [default = 0];
inline bool BBoxLossParameter::has_b1() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void BBoxLossParameter::set_has_b1() {
  _has_bits_[1] |= 0x00020000u;
}
inline void BBoxLossParameter::clear_has_b1() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void BBoxLossParameter::clear_b1() {
  b1_ = 0;
  clear_has_b1();
}
inline float BBoxLossParameter::b1() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.b1)
  return b1_;
}
inline void BBoxLossParameter::set_b1(float value) {
  set_has_b1();
  b1_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.b1)
}

// optional float b2 = 51 [default = 0];
inline bool BBoxLossParameter::has_b2() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void BBoxLossParameter::set_has_b2() {
  _has_bits_[1] |= 0x00040000u;
}
inline void BBoxLossParameter::clear_has_b2() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void BBoxLossParameter::clear_b2() {
  b2_ = 0;
  clear_has_b2();
}
inline float BBoxLossParameter::b2() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.b2)
  return b2_;
}
inline void BBoxLossParameter::set_b2(float value) {
  set_has_b2();
  b2_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.b2)
}

// optional float diff_thred = 52 [default = 0.05];
inline bool BBoxLossParameter::has_diff_thred() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void BBoxLossParameter::set_has_diff_thred() {
  _has_bits_[1] |= 0x00080000u;
}
inline void BBoxLossParameter::clear_has_diff_thred() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void BBoxLossParameter::clear_diff_thred() {
  diff_thred_ = 0.05f;
  clear_has_diff_thred();
}
inline float BBoxLossParameter::diff_thred() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.diff_thred)
  return diff_thred_;
}
inline void BBoxLossParameter::set_diff_thred(float value) {
  set_has_diff_thred();
  diff_thred_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.diff_thred)
}

// optional float power = 53 [default = 1];
inline bool BBoxLossParameter::has_power() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void BBoxLossParameter::set_has_power() {
  _has_bits_[1] |= 0x00100000u;
}
inline void BBoxLossParameter::clear_has_power() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void BBoxLossParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
inline float BBoxLossParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.power)
  return power_;
}
inline void BBoxLossParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.power)
}

// optional float pos_objectness_score = 55 [default = 0.99];
inline bool BBoxLossParameter::has_pos_objectness_score() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void BBoxLossParameter::set_has_pos_objectness_score() {
  _has_bits_[1] |= 0x00200000u;
}
inline void BBoxLossParameter::clear_has_pos_objectness_score() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void BBoxLossParameter::clear_pos_objectness_score() {
  pos_objectness_score_ = 0.99f;
  clear_has_pos_objectness_score();
}
inline float BBoxLossParameter::pos_objectness_score() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.pos_objectness_score)
  return pos_objectness_score_;
}
inline void BBoxLossParameter::set_pos_objectness_score(float value) {
  set_has_pos_objectness_score();
  pos_objectness_score_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.pos_objectness_score)
}

// optional bool do_pos_mining = 54 [default = false];
inline bool BBoxLossParameter::has_do_pos_mining() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void BBoxLossParameter::set_has_do_pos_mining() {
  _has_bits_[1] |= 0x00400000u;
}
inline void BBoxLossParameter::clear_has_do_pos_mining() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void BBoxLossParameter::clear_do_pos_mining() {
  do_pos_mining_ = false;
  clear_has_do_pos_mining();
}
inline bool BBoxLossParameter::do_pos_mining() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.do_pos_mining)
  return do_pos_mining_;
}
inline void BBoxLossParameter::set_do_pos_mining(bool value) {
  set_has_do_pos_mining();
  do_pos_mining_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.do_pos_mining)
}

// optional int32 weight_mode = 56 [default = 0];
inline bool BBoxLossParameter::has_weight_mode() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void BBoxLossParameter::set_has_weight_mode() {
  _has_bits_[1] |= 0x00800000u;
}
inline void BBoxLossParameter::clear_has_weight_mode() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void BBoxLossParameter::clear_weight_mode() {
  weight_mode_ = 0;
  clear_has_weight_mode();
}
inline ::google::protobuf::int32 BBoxLossParameter::weight_mode() const {
  // @@protoc_insertion_point(field_get:caffe.BBoxLossParameter.weight_mode)
  return weight_mode_;
}
inline void BBoxLossParameter::set_weight_mode(::google::protobuf::int32 value) {
  set_has_weight_mode();
  weight_mode_ = value;
  // @@protoc_insertion_point(field_set:caffe.BBoxLossParameter.weight_mode)
}

// -------------------------------------------------------------------

// DenseBBoxLossParameter

// optional .caffe.MultiBoxLossParameter.LocLossType loc_loss_type = 1;
inline bool DenseBBoxLossParameter::has_loc_loss_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DenseBBoxLossParameter::set_has_loc_loss_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DenseBBoxLossParameter::clear_has_loc_loss_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DenseBBoxLossParameter::clear_loc_loss_type() {
  loc_loss_type_ = 0;
  clear_has_loc_loss_type();
}
inline ::caffe::MultiBoxLossParameter_LocLossType DenseBBoxLossParameter::loc_loss_type() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.loc_loss_type)
  return static_cast< ::caffe::MultiBoxLossParameter_LocLossType >(loc_loss_type_);
}
inline void DenseBBoxLossParameter::set_loc_loss_type(::caffe::MultiBoxLossParameter_LocLossType value) {
  assert(::caffe::MultiBoxLossParameter_LocLossType_IsValid(value));
  set_has_loc_loss_type();
  loc_loss_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.loc_loss_type)
}

// optional .caffe.MultiBoxLossParameter.ConfLossType conf_loss_type = 2;
inline bool DenseBBoxLossParameter::has_conf_loss_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DenseBBoxLossParameter::set_has_conf_loss_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DenseBBoxLossParameter::clear_has_conf_loss_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DenseBBoxLossParameter::clear_conf_loss_type() {
  conf_loss_type_ = 0;
  clear_has_conf_loss_type();
}
inline ::caffe::MultiBoxLossParameter_ConfLossType DenseBBoxLossParameter::conf_loss_type() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.conf_loss_type)
  return static_cast< ::caffe::MultiBoxLossParameter_ConfLossType >(conf_loss_type_);
}
inline void DenseBBoxLossParameter::set_conf_loss_type(::caffe::MultiBoxLossParameter_ConfLossType value) {
  assert(::caffe::MultiBoxLossParameter_ConfLossType_IsValid(value));
  set_has_conf_loss_type();
  conf_loss_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.conf_loss_type)
}

// optional float loc_weight = 3 [default = 1];
inline bool DenseBBoxLossParameter::has_loc_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DenseBBoxLossParameter::set_has_loc_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DenseBBoxLossParameter::clear_has_loc_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DenseBBoxLossParameter::clear_loc_weight() {
  loc_weight_ = 1;
  clear_has_loc_weight();
}
inline float DenseBBoxLossParameter::loc_weight() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.loc_weight)
  return loc_weight_;
}
inline void DenseBBoxLossParameter::set_loc_weight(float value) {
  set_has_loc_weight();
  loc_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.loc_weight)
}

// optional uint32 num_classes = 4 [default = 2];
inline bool DenseBBoxLossParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DenseBBoxLossParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DenseBBoxLossParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DenseBBoxLossParameter::clear_num_classes() {
  num_classes_ = 2u;
  clear_has_num_classes();
}
inline ::google::protobuf::uint32 DenseBBoxLossParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.num_classes)
  return num_classes_;
}
inline void DenseBBoxLossParameter::set_num_classes(::google::protobuf::uint32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.num_classes)
}

// optional float overlap_threshold = 5 [default = 0.5];
inline bool DenseBBoxLossParameter::has_overlap_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DenseBBoxLossParameter::set_has_overlap_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DenseBBoxLossParameter::clear_has_overlap_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DenseBBoxLossParameter::clear_overlap_threshold() {
  overlap_threshold_ = 0.5f;
  clear_has_overlap_threshold();
}
inline float DenseBBoxLossParameter::overlap_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.overlap_threshold)
  return overlap_threshold_;
}
inline void DenseBBoxLossParameter::set_overlap_threshold(float value) {
  set_has_overlap_threshold();
  overlap_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.overlap_threshold)
}

// optional bool use_prior_for_matching = 6 [default = true];
inline bool DenseBBoxLossParameter::has_use_prior_for_matching() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DenseBBoxLossParameter::set_has_use_prior_for_matching() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DenseBBoxLossParameter::clear_has_use_prior_for_matching() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DenseBBoxLossParameter::clear_use_prior_for_matching() {
  use_prior_for_matching_ = true;
  clear_has_use_prior_for_matching();
}
inline bool DenseBBoxLossParameter::use_prior_for_matching() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.use_prior_for_matching)
  return use_prior_for_matching_;
}
inline void DenseBBoxLossParameter::set_use_prior_for_matching(bool value) {
  set_has_use_prior_for_matching();
  use_prior_for_matching_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.use_prior_for_matching)
}

// optional bool use_difficult_gt = 7 [default = false];
inline bool DenseBBoxLossParameter::has_use_difficult_gt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DenseBBoxLossParameter::set_has_use_difficult_gt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DenseBBoxLossParameter::clear_has_use_difficult_gt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DenseBBoxLossParameter::clear_use_difficult_gt() {
  use_difficult_gt_ = false;
  clear_has_use_difficult_gt();
}
inline bool DenseBBoxLossParameter::use_difficult_gt() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.use_difficult_gt)
  return use_difficult_gt_;
}
inline void DenseBBoxLossParameter::set_use_difficult_gt(bool value) {
  set_has_use_difficult_gt();
  use_difficult_gt_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.use_difficult_gt)
}

// optional bool do_neg_mining = 8 [default = true];
inline bool DenseBBoxLossParameter::has_do_neg_mining() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DenseBBoxLossParameter::set_has_do_neg_mining() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DenseBBoxLossParameter::clear_has_do_neg_mining() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DenseBBoxLossParameter::clear_do_neg_mining() {
  do_neg_mining_ = true;
  clear_has_do_neg_mining();
}
inline bool DenseBBoxLossParameter::do_neg_mining() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.do_neg_mining)
  return do_neg_mining_;
}
inline void DenseBBoxLossParameter::set_do_neg_mining(bool value) {
  set_has_do_neg_mining();
  do_neg_mining_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.do_neg_mining)
}

// optional float neg_pos_ratio = 9 [default = 3];
inline bool DenseBBoxLossParameter::has_neg_pos_ratio() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DenseBBoxLossParameter::set_has_neg_pos_ratio() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DenseBBoxLossParameter::clear_has_neg_pos_ratio() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DenseBBoxLossParameter::clear_neg_pos_ratio() {
  neg_pos_ratio_ = 3;
  clear_has_neg_pos_ratio();
}
inline float DenseBBoxLossParameter::neg_pos_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.neg_pos_ratio)
  return neg_pos_ratio_;
}
inline void DenseBBoxLossParameter::set_neg_pos_ratio(float value) {
  set_has_neg_pos_ratio();
  neg_pos_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.neg_pos_ratio)
}

// optional float neg_overlap = 10 [default = 0.5];
inline bool DenseBBoxLossParameter::has_neg_overlap() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DenseBBoxLossParameter::set_has_neg_overlap() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DenseBBoxLossParameter::clear_has_neg_overlap() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DenseBBoxLossParameter::clear_neg_overlap() {
  neg_overlap_ = 0.5f;
  clear_has_neg_overlap();
}
inline float DenseBBoxLossParameter::neg_overlap() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.neg_overlap)
  return neg_overlap_;
}
inline void DenseBBoxLossParameter::set_neg_overlap(float value) {
  set_has_neg_overlap();
  neg_overlap_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.neg_overlap)
}

// optional .caffe.PriorBoxParameter.CodeType code_type = 11;
inline bool DenseBBoxLossParameter::has_code_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DenseBBoxLossParameter::set_has_code_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DenseBBoxLossParameter::clear_has_code_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DenseBBoxLossParameter::clear_code_type() {
  code_type_ = 1;
  clear_has_code_type();
}
inline ::caffe::PriorBoxParameter_CodeType DenseBBoxLossParameter::code_type() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.code_type)
  return static_cast< ::caffe::PriorBoxParameter_CodeType >(code_type_);
}
inline void DenseBBoxLossParameter::set_code_type(::caffe::PriorBoxParameter_CodeType value) {
  assert(::caffe::PriorBoxParameter_CodeType_IsValid(value));
  set_has_code_type();
  code_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.code_type)
}

// optional bool encode_variance_in_target = 12 [default = false];
inline bool DenseBBoxLossParameter::has_encode_variance_in_target() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DenseBBoxLossParameter::set_has_encode_variance_in_target() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DenseBBoxLossParameter::clear_has_encode_variance_in_target() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DenseBBoxLossParameter::clear_encode_variance_in_target() {
  encode_variance_in_target_ = false;
  clear_has_encode_variance_in_target();
}
inline bool DenseBBoxLossParameter::encode_variance_in_target() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.encode_variance_in_target)
  return encode_variance_in_target_;
}
inline void DenseBBoxLossParameter::set_encode_variance_in_target(bool value) {
  set_has_encode_variance_in_target();
  encode_variance_in_target_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.encode_variance_in_target)
}

// optional float conf_weight = 13 [default = 1];
inline bool DenseBBoxLossParameter::has_conf_weight() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DenseBBoxLossParameter::set_has_conf_weight() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DenseBBoxLossParameter::clear_has_conf_weight() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DenseBBoxLossParameter::clear_conf_weight() {
  conf_weight_ = 1;
  clear_has_conf_weight();
}
inline float DenseBBoxLossParameter::conf_weight() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.conf_weight)
  return conf_weight_;
}
inline void DenseBBoxLossParameter::set_conf_weight(float value) {
  set_has_conf_weight();
  conf_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.conf_weight)
}

// optional float size_threshold = 14 [default = 0.001];
inline bool DenseBBoxLossParameter::has_size_threshold() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DenseBBoxLossParameter::set_has_size_threshold() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DenseBBoxLossParameter::clear_has_size_threshold() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DenseBBoxLossParameter::clear_size_threshold() {
  size_threshold_ = 0.001f;
  clear_has_size_threshold();
}
inline float DenseBBoxLossParameter::size_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.size_threshold)
  return size_threshold_;
}
inline void DenseBBoxLossParameter::set_size_threshold(float value) {
  set_has_size_threshold();
  size_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.size_threshold)
}

// optional int32 alias_id = 15 [default = 0];
inline bool DenseBBoxLossParameter::has_alias_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DenseBBoxLossParameter::set_has_alias_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DenseBBoxLossParameter::clear_has_alias_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DenseBBoxLossParameter::clear_alias_id() {
  alias_id_ = 0;
  clear_has_alias_id();
}
inline ::google::protobuf::int32 DenseBBoxLossParameter::alias_id() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.alias_id)
  return alias_id_;
}
inline void DenseBBoxLossParameter::set_alias_id(::google::protobuf::int32 value) {
  set_has_alias_id();
  alias_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.alias_id)
}

// optional bool using_focus_loss = 16 [default = false];
inline bool DenseBBoxLossParameter::has_using_focus_loss() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DenseBBoxLossParameter::set_has_using_focus_loss() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DenseBBoxLossParameter::clear_has_using_focus_loss() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DenseBBoxLossParameter::clear_using_focus_loss() {
  using_focus_loss_ = false;
  clear_has_using_focus_loss();
}
inline bool DenseBBoxLossParameter::using_focus_loss() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.using_focus_loss)
  return using_focus_loss_;
}
inline void DenseBBoxLossParameter::set_using_focus_loss(bool value) {
  set_has_using_focus_loss();
  using_focus_loss_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.using_focus_loss)
}

// optional float gama = 17 [default = 2];
inline bool DenseBBoxLossParameter::has_gama() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DenseBBoxLossParameter::set_has_gama() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DenseBBoxLossParameter::clear_has_gama() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DenseBBoxLossParameter::clear_gama() {
  gama_ = 2;
  clear_has_gama();
}
inline float DenseBBoxLossParameter::gama() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.gama)
  return gama_;
}
inline void DenseBBoxLossParameter::set_gama(float value) {
  set_has_gama();
  gama_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.gama)
}

// optional float alpha = 25 [default = 1];
inline bool DenseBBoxLossParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DenseBBoxLossParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DenseBBoxLossParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DenseBBoxLossParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float DenseBBoxLossParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.alpha)
  return alpha_;
}
inline void DenseBBoxLossParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.alpha)
}

// repeated int32 gt_labels = 18;
inline int DenseBBoxLossParameter::gt_labels_size() const {
  return gt_labels_.size();
}
inline void DenseBBoxLossParameter::clear_gt_labels() {
  gt_labels_.Clear();
}
inline ::google::protobuf::int32 DenseBBoxLossParameter::gt_labels(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.gt_labels)
  return gt_labels_.Get(index);
}
inline void DenseBBoxLossParameter::set_gt_labels(int index, ::google::protobuf::int32 value) {
  gt_labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.gt_labels)
}
inline void DenseBBoxLossParameter::add_gt_labels(::google::protobuf::int32 value) {
  gt_labels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DenseBBoxLossParameter.gt_labels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DenseBBoxLossParameter::gt_labels() const {
  // @@protoc_insertion_point(field_list:caffe.DenseBBoxLossParameter.gt_labels)
  return gt_labels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DenseBBoxLossParameter::mutable_gt_labels() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DenseBBoxLossParameter.gt_labels)
  return &gt_labels_;
}

// repeated int32 target_labels = 19;
inline int DenseBBoxLossParameter::target_labels_size() const {
  return target_labels_.size();
}
inline void DenseBBoxLossParameter::clear_target_labels() {
  target_labels_.Clear();
}
inline ::google::protobuf::int32 DenseBBoxLossParameter::target_labels(int index) const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.target_labels)
  return target_labels_.Get(index);
}
inline void DenseBBoxLossParameter::set_target_labels(int index, ::google::protobuf::int32 value) {
  target_labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.target_labels)
}
inline void DenseBBoxLossParameter::add_target_labels(::google::protobuf::int32 value) {
  target_labels_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.DenseBBoxLossParameter.target_labels)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DenseBBoxLossParameter::target_labels() const {
  // @@protoc_insertion_point(field_list:caffe.DenseBBoxLossParameter.target_labels)
  return target_labels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DenseBBoxLossParameter::mutable_target_labels() {
  // @@protoc_insertion_point(field_mutable_list:caffe.DenseBBoxLossParameter.target_labels)
  return &target_labels_;
}

// optional bool flag_noperson = 20 [default = false];
inline bool DenseBBoxLossParameter::has_flag_noperson() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DenseBBoxLossParameter::set_has_flag_noperson() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DenseBBoxLossParameter::clear_has_flag_noperson() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DenseBBoxLossParameter::clear_flag_noperson() {
  flag_noperson_ = false;
  clear_has_flag_noperson();
}
inline bool DenseBBoxLossParameter::flag_noperson() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.flag_noperson)
  return flag_noperson_;
}
inline void DenseBBoxLossParameter::set_flag_noperson(bool value) {
  set_has_flag_noperson();
  flag_noperson_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.flag_noperson)
}

// optional float size_threshold_max = 21 [default = 10];
inline bool DenseBBoxLossParameter::has_size_threshold_max() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DenseBBoxLossParameter::set_has_size_threshold_max() {
  _has_bits_[0] |= 0x00200000u;
}
inline void DenseBBoxLossParameter::clear_has_size_threshold_max() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void DenseBBoxLossParameter::clear_size_threshold_max() {
  size_threshold_max_ = 10;
  clear_has_size_threshold_max();
}
inline float DenseBBoxLossParameter::size_threshold_max() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.size_threshold_max)
  return size_threshold_max_;
}
inline void DenseBBoxLossParameter::set_size_threshold_max(float value) {
  set_has_size_threshold_max();
  size_threshold_max_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.size_threshold_max)
}

// optional bool flag_showdebug = 22 [default = false];
inline bool DenseBBoxLossParameter::has_flag_showdebug() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void DenseBBoxLossParameter::set_has_flag_showdebug() {
  _has_bits_[0] |= 0x00400000u;
}
inline void DenseBBoxLossParameter::clear_has_flag_showdebug() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void DenseBBoxLossParameter::clear_flag_showdebug() {
  flag_showdebug_ = false;
  clear_has_flag_showdebug();
}
inline bool DenseBBoxLossParameter::flag_showdebug() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.flag_showdebug)
  return flag_showdebug_;
}
inline void DenseBBoxLossParameter::set_flag_showdebug(bool value) {
  set_has_flag_showdebug();
  flag_showdebug_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.flag_showdebug)
}

// optional bool flag_forcematchallgt = 23 [default = false];
inline bool DenseBBoxLossParameter::has_flag_forcematchallgt() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void DenseBBoxLossParameter::set_has_flag_forcematchallgt() {
  _has_bits_[0] |= 0x00800000u;
}
inline void DenseBBoxLossParameter::clear_has_flag_forcematchallgt() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void DenseBBoxLossParameter::clear_flag_forcematchallgt() {
  flag_forcematchallgt_ = false;
  clear_has_flag_forcematchallgt();
}
inline bool DenseBBoxLossParameter::flag_forcematchallgt() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.flag_forcematchallgt)
  return flag_forcematchallgt_;
}
inline void DenseBBoxLossParameter::set_flag_forcematchallgt(bool value) {
  set_has_flag_forcematchallgt();
  flag_forcematchallgt_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.flag_forcematchallgt)
}

// optional bool flag_areamaxcheckinmatch = 24 [default = true];
inline bool DenseBBoxLossParameter::has_flag_areamaxcheckinmatch() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void DenseBBoxLossParameter::set_has_flag_areamaxcheckinmatch() {
  _has_bits_[0] |= 0x01000000u;
}
inline void DenseBBoxLossParameter::clear_has_flag_areamaxcheckinmatch() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void DenseBBoxLossParameter::clear_flag_areamaxcheckinmatch() {
  flag_areamaxcheckinmatch_ = true;
  clear_has_flag_areamaxcheckinmatch();
}
inline bool DenseBBoxLossParameter::flag_areamaxcheckinmatch() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.flag_areamaxcheckinmatch)
  return flag_areamaxcheckinmatch_;
}
inline void DenseBBoxLossParameter::set_flag_areamaxcheckinmatch(bool value) {
  set_has_flag_areamaxcheckinmatch();
  flag_areamaxcheckinmatch_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.flag_areamaxcheckinmatch)
}

// optional bool flag_checkanchor = 26 [default = false];
inline bool DenseBBoxLossParameter::has_flag_checkanchor() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void DenseBBoxLossParameter::set_has_flag_checkanchor() {
  _has_bits_[0] |= 0x02000000u;
}
inline void DenseBBoxLossParameter::clear_has_flag_checkanchor() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void DenseBBoxLossParameter::clear_flag_checkanchor() {
  flag_checkanchor_ = false;
  clear_has_flag_checkanchor();
}
inline bool DenseBBoxLossParameter::flag_checkanchor() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.flag_checkanchor)
  return flag_checkanchor_;
}
inline void DenseBBoxLossParameter::set_flag_checkanchor(bool value) {
  set_has_flag_checkanchor();
  flag_checkanchor_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.flag_checkanchor)
}

// optional .caffe.DenseBBoxLossParameter.EffectiveMode check_effectmode = 27 [default = BOTTOMSIZE];
inline bool DenseBBoxLossParameter::has_check_effectmode() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void DenseBBoxLossParameter::set_has_check_effectmode() {
  _has_bits_[0] |= 0x04000000u;
}
inline void DenseBBoxLossParameter::clear_has_check_effectmode() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void DenseBBoxLossParameter::clear_check_effectmode() {
  check_effectmode_ = 1;
  clear_has_check_effectmode();
}
inline ::caffe::DenseBBoxLossParameter_EffectiveMode DenseBBoxLossParameter::check_effectmode() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.check_effectmode)
  return static_cast< ::caffe::DenseBBoxLossParameter_EffectiveMode >(check_effectmode_);
}
inline void DenseBBoxLossParameter::set_check_effectmode(::caffe::DenseBBoxLossParameter_EffectiveMode value) {
  assert(::caffe::DenseBBoxLossParameter_EffectiveMode_IsValid(value));
  set_has_check_effectmode();
  check_effectmode_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.check_effectmode)
}

// optional int32 ndim_label = 33 [default = 9];
inline bool DenseBBoxLossParameter::has_ndim_label() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void DenseBBoxLossParameter::set_has_ndim_label() {
  _has_bits_[0] |= 0x08000000u;
}
inline void DenseBBoxLossParameter::clear_has_ndim_label() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void DenseBBoxLossParameter::clear_ndim_label() {
  ndim_label_ = 9;
  clear_has_ndim_label();
}
inline ::google::protobuf::int32 DenseBBoxLossParameter::ndim_label() const {
  // @@protoc_insertion_point(field_get:caffe.DenseBBoxLossParameter.ndim_label)
  return ndim_label_;
}
inline void DenseBBoxLossParameter::set_ndim_label(::google::protobuf::int32 value) {
  set_has_ndim_label();
  ndim_label_ = value;
  // @@protoc_insertion_point(field_set:caffe.DenseBBoxLossParameter.ndim_label)
}

// -------------------------------------------------------------------

// MultiMcBoxLossParameter

// optional .caffe.MultiBoxLossParameter.LocLossType loc_loss_type = 1 [default = SMOOTH_L1];
inline bool MultiMcBoxLossParameter::has_loc_loss_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_loc_loss_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MultiMcBoxLossParameter::clear_has_loc_loss_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MultiMcBoxLossParameter::clear_loc_loss_type() {
  loc_loss_type_ = 1;
  clear_has_loc_loss_type();
}
inline ::caffe::MultiBoxLossParameter_LocLossType MultiMcBoxLossParameter::loc_loss_type() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.loc_loss_type)
  return static_cast< ::caffe::MultiBoxLossParameter_LocLossType >(loc_loss_type_);
}
inline void MultiMcBoxLossParameter::set_loc_loss_type(::caffe::MultiBoxLossParameter_LocLossType value) {
  assert(::caffe::MultiBoxLossParameter_LocLossType_IsValid(value));
  set_has_loc_loss_type();
  loc_loss_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.loc_loss_type)
}

// optional .caffe.MultiMcBoxLossParameter.ConfLossType conf_loss_type = 2 [default = SOFTMAX];
inline bool MultiMcBoxLossParameter::has_conf_loss_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_conf_loss_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MultiMcBoxLossParameter::clear_has_conf_loss_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MultiMcBoxLossParameter::clear_conf_loss_type() {
  conf_loss_type_ = 0;
  clear_has_conf_loss_type();
}
inline ::caffe::MultiMcBoxLossParameter_ConfLossType MultiMcBoxLossParameter::conf_loss_type() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.conf_loss_type)
  return static_cast< ::caffe::MultiMcBoxLossParameter_ConfLossType >(conf_loss_type_);
}
inline void MultiMcBoxLossParameter::set_conf_loss_type(::caffe::MultiMcBoxLossParameter_ConfLossType value) {
  assert(::caffe::MultiMcBoxLossParameter_ConfLossType_IsValid(value));
  set_has_conf_loss_type();
  conf_loss_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.conf_loss_type)
}

// optional float loc_weight = 3 [default = 1];
inline bool MultiMcBoxLossParameter::has_loc_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_loc_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MultiMcBoxLossParameter::clear_has_loc_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MultiMcBoxLossParameter::clear_loc_weight() {
  loc_weight_ = 1;
  clear_has_loc_weight();
}
inline float MultiMcBoxLossParameter::loc_weight() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.loc_weight)
  return loc_weight_;
}
inline void MultiMcBoxLossParameter::set_loc_weight(float value) {
  set_has_loc_weight();
  loc_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.loc_weight)
}

// optional uint32 num_classes = 4;
inline bool MultiMcBoxLossParameter::has_num_classes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_num_classes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MultiMcBoxLossParameter::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MultiMcBoxLossParameter::clear_num_classes() {
  num_classes_ = 0u;
  clear_has_num_classes();
}
inline ::google::protobuf::uint32 MultiMcBoxLossParameter::num_classes() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.num_classes)
  return num_classes_;
}
inline void MultiMcBoxLossParameter::set_num_classes(::google::protobuf::uint32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.num_classes)
}

// optional bool share_location = 5 [default = true];
inline bool MultiMcBoxLossParameter::has_share_location() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_share_location() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MultiMcBoxLossParameter::clear_has_share_location() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MultiMcBoxLossParameter::clear_share_location() {
  share_location_ = true;
  clear_has_share_location();
}
inline bool MultiMcBoxLossParameter::share_location() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.share_location)
  return share_location_;
}
inline void MultiMcBoxLossParameter::set_share_location(bool value) {
  set_has_share_location();
  share_location_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.share_location)
}

// optional .caffe.MultiBoxLossParameter.MatchType match_type = 6 [default = PER_PREDICTION];
inline bool MultiMcBoxLossParameter::has_match_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_match_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MultiMcBoxLossParameter::clear_has_match_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MultiMcBoxLossParameter::clear_match_type() {
  match_type_ = 1;
  clear_has_match_type();
}
inline ::caffe::MultiBoxLossParameter_MatchType MultiMcBoxLossParameter::match_type() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.match_type)
  return static_cast< ::caffe::MultiBoxLossParameter_MatchType >(match_type_);
}
inline void MultiMcBoxLossParameter::set_match_type(::caffe::MultiBoxLossParameter_MatchType value) {
  assert(::caffe::MultiBoxLossParameter_MatchType_IsValid(value));
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.match_type)
}

// optional float overlap_threshold = 7 [default = 0.5];
inline bool MultiMcBoxLossParameter::has_overlap_threshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_overlap_threshold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MultiMcBoxLossParameter::clear_has_overlap_threshold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MultiMcBoxLossParameter::clear_overlap_threshold() {
  overlap_threshold_ = 0.5f;
  clear_has_overlap_threshold();
}
inline float MultiMcBoxLossParameter::overlap_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.overlap_threshold)
  return overlap_threshold_;
}
inline void MultiMcBoxLossParameter::set_overlap_threshold(float value) {
  set_has_overlap_threshold();
  overlap_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.overlap_threshold)
}

// optional bool use_prior_for_matching = 8 [default = true];
inline bool MultiMcBoxLossParameter::has_use_prior_for_matching() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_use_prior_for_matching() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MultiMcBoxLossParameter::clear_has_use_prior_for_matching() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MultiMcBoxLossParameter::clear_use_prior_for_matching() {
  use_prior_for_matching_ = true;
  clear_has_use_prior_for_matching();
}
inline bool MultiMcBoxLossParameter::use_prior_for_matching() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.use_prior_for_matching)
  return use_prior_for_matching_;
}
inline void MultiMcBoxLossParameter::set_use_prior_for_matching(bool value) {
  set_has_use_prior_for_matching();
  use_prior_for_matching_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.use_prior_for_matching)
}

// optional uint32 background_label_id = 9 [default = 0];
inline bool MultiMcBoxLossParameter::has_background_label_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_background_label_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MultiMcBoxLossParameter::clear_has_background_label_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MultiMcBoxLossParameter::clear_background_label_id() {
  background_label_id_ = 0u;
  clear_has_background_label_id();
}
inline ::google::protobuf::uint32 MultiMcBoxLossParameter::background_label_id() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.background_label_id)
  return background_label_id_;
}
inline void MultiMcBoxLossParameter::set_background_label_id(::google::protobuf::uint32 value) {
  set_has_background_label_id();
  background_label_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.background_label_id)
}

// optional bool use_difficult_gt = 10 [default = true];
inline bool MultiMcBoxLossParameter::has_use_difficult_gt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_use_difficult_gt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MultiMcBoxLossParameter::clear_has_use_difficult_gt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MultiMcBoxLossParameter::clear_use_difficult_gt() {
  use_difficult_gt_ = true;
  clear_has_use_difficult_gt();
}
inline bool MultiMcBoxLossParameter::use_difficult_gt() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.use_difficult_gt)
  return use_difficult_gt_;
}
inline void MultiMcBoxLossParameter::set_use_difficult_gt(bool value) {
  set_has_use_difficult_gt();
  use_difficult_gt_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.use_difficult_gt)
}

// optional bool do_neg_mining = 11 [default = true];
inline bool MultiMcBoxLossParameter::has_do_neg_mining() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_do_neg_mining() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MultiMcBoxLossParameter::clear_has_do_neg_mining() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MultiMcBoxLossParameter::clear_do_neg_mining() {
  do_neg_mining_ = true;
  clear_has_do_neg_mining();
}
inline bool MultiMcBoxLossParameter::do_neg_mining() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.do_neg_mining)
  return do_neg_mining_;
}
inline void MultiMcBoxLossParameter::set_do_neg_mining(bool value) {
  set_has_do_neg_mining();
  do_neg_mining_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.do_neg_mining)
}

// optional float neg_pos_ratio = 12 [default = 3];
inline bool MultiMcBoxLossParameter::has_neg_pos_ratio() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_neg_pos_ratio() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MultiMcBoxLossParameter::clear_has_neg_pos_ratio() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MultiMcBoxLossParameter::clear_neg_pos_ratio() {
  neg_pos_ratio_ = 3;
  clear_has_neg_pos_ratio();
}
inline float MultiMcBoxLossParameter::neg_pos_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.neg_pos_ratio)
  return neg_pos_ratio_;
}
inline void MultiMcBoxLossParameter::set_neg_pos_ratio(float value) {
  set_has_neg_pos_ratio();
  neg_pos_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.neg_pos_ratio)
}

// optional float neg_overlap = 13 [default = 0.5];
inline bool MultiMcBoxLossParameter::has_neg_overlap() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_neg_overlap() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MultiMcBoxLossParameter::clear_has_neg_overlap() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MultiMcBoxLossParameter::clear_neg_overlap() {
  neg_overlap_ = 0.5f;
  clear_has_neg_overlap();
}
inline float MultiMcBoxLossParameter::neg_overlap() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.neg_overlap)
  return neg_overlap_;
}
inline void MultiMcBoxLossParameter::set_neg_overlap(float value) {
  set_has_neg_overlap();
  neg_overlap_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.neg_overlap)
}

// optional .caffe.PriorBoxParameter.CodeType code_type = 14 [default = CORNER];
inline bool MultiMcBoxLossParameter::has_code_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_code_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MultiMcBoxLossParameter::clear_has_code_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MultiMcBoxLossParameter::clear_code_type() {
  code_type_ = 1;
  clear_has_code_type();
}
inline ::caffe::PriorBoxParameter_CodeType MultiMcBoxLossParameter::code_type() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.code_type)
  return static_cast< ::caffe::PriorBoxParameter_CodeType >(code_type_);
}
inline void MultiMcBoxLossParameter::set_code_type(::caffe::PriorBoxParameter_CodeType value) {
  assert(::caffe::PriorBoxParameter_CodeType_IsValid(value));
  set_has_code_type();
  code_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.code_type)
}

// optional bool encode_variance_in_target = 16 [default = false];
inline bool MultiMcBoxLossParameter::has_encode_variance_in_target() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_encode_variance_in_target() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MultiMcBoxLossParameter::clear_has_encode_variance_in_target() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MultiMcBoxLossParameter::clear_encode_variance_in_target() {
  encode_variance_in_target_ = false;
  clear_has_encode_variance_in_target();
}
inline bool MultiMcBoxLossParameter::encode_variance_in_target() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.encode_variance_in_target)
  return encode_variance_in_target_;
}
inline void MultiMcBoxLossParameter::set_encode_variance_in_target(bool value) {
  set_has_encode_variance_in_target();
  encode_variance_in_target_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.encode_variance_in_target)
}

// optional bool map_object_to_agnostic = 17 [default = false];
inline bool MultiMcBoxLossParameter::has_map_object_to_agnostic() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_map_object_to_agnostic() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MultiMcBoxLossParameter::clear_has_map_object_to_agnostic() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MultiMcBoxLossParameter::clear_map_object_to_agnostic() {
  map_object_to_agnostic_ = false;
  clear_has_map_object_to_agnostic();
}
inline bool MultiMcBoxLossParameter::map_object_to_agnostic() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.map_object_to_agnostic)
  return map_object_to_agnostic_;
}
inline void MultiMcBoxLossParameter::set_map_object_to_agnostic(bool value) {
  set_has_map_object_to_agnostic();
  map_object_to_agnostic_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.map_object_to_agnostic)
}

// optional int32 loc_class = 24 [default = 1];
inline bool MultiMcBoxLossParameter::has_loc_class() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_loc_class() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MultiMcBoxLossParameter::clear_has_loc_class() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MultiMcBoxLossParameter::clear_loc_class() {
  loc_class_ = 1;
  clear_has_loc_class();
}
inline ::google::protobuf::int32 MultiMcBoxLossParameter::loc_class() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.loc_class)
  return loc_class_;
}
inline void MultiMcBoxLossParameter::set_loc_class(::google::protobuf::int32 value) {
  set_has_loc_class();
  loc_class_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.loc_class)
}

// optional float conf_weight = 25 [default = 1];
inline bool MultiMcBoxLossParameter::has_conf_weight() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_conf_weight() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MultiMcBoxLossParameter::clear_has_conf_weight() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MultiMcBoxLossParameter::clear_conf_weight() {
  conf_weight_ = 1;
  clear_has_conf_weight();
}
inline float MultiMcBoxLossParameter::conf_weight() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.conf_weight)
  return conf_weight_;
}
inline void MultiMcBoxLossParameter::set_conf_weight(float value) {
  set_has_conf_weight();
  conf_weight_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.conf_weight)
}

// optional string name_to_label_file = 47;
inline bool MultiMcBoxLossParameter::has_name_to_label_file() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_name_to_label_file() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MultiMcBoxLossParameter::clear_has_name_to_label_file() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MultiMcBoxLossParameter::clear_name_to_label_file() {
  name_to_label_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name_to_label_file();
}
inline const ::std::string& MultiMcBoxLossParameter::name_to_label_file() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.name_to_label_file)
  return name_to_label_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiMcBoxLossParameter::set_name_to_label_file(const ::std::string& value) {
  set_has_name_to_label_file();
  name_to_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.name_to_label_file)
}
inline void MultiMcBoxLossParameter::set_name_to_label_file(const char* value) {
  set_has_name_to_label_file();
  name_to_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.MultiMcBoxLossParameter.name_to_label_file)
}
inline void MultiMcBoxLossParameter::set_name_to_label_file(const char* value, size_t size) {
  set_has_name_to_label_file();
  name_to_label_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.MultiMcBoxLossParameter.name_to_label_file)
}
inline ::std::string* MultiMcBoxLossParameter::mutable_name_to_label_file() {
  set_has_name_to_label_file();
  // @@protoc_insertion_point(field_mutable:caffe.MultiMcBoxLossParameter.name_to_label_file)
  return name_to_label_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultiMcBoxLossParameter::release_name_to_label_file() {
  // @@protoc_insertion_point(field_release:caffe.MultiMcBoxLossParameter.name_to_label_file)
  clear_has_name_to_label_file();
  return name_to_label_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiMcBoxLossParameter::set_allocated_name_to_label_file(::std::string* name_to_label_file) {
  if (name_to_label_file != NULL) {
    set_has_name_to_label_file();
  } else {
    clear_has_name_to_label_file();
  }
  name_to_label_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name_to_label_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.MultiMcBoxLossParameter.name_to_label_file)
}

// optional bool rescore = 48 [default = true];
inline bool MultiMcBoxLossParameter::has_rescore() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_rescore() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MultiMcBoxLossParameter::clear_has_rescore() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MultiMcBoxLossParameter::clear_rescore() {
  rescore_ = true;
  clear_has_rescore();
}
inline bool MultiMcBoxLossParameter::rescore() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.rescore)
  return rescore_;
}
inline void MultiMcBoxLossParameter::set_rescore(bool value) {
  set_has_rescore();
  rescore_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.rescore)
}

// optional float object_scale = 49 [default = 1];
inline bool MultiMcBoxLossParameter::has_object_scale() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_object_scale() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MultiMcBoxLossParameter::clear_has_object_scale() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MultiMcBoxLossParameter::clear_object_scale() {
  object_scale_ = 1;
  clear_has_object_scale();
}
inline float MultiMcBoxLossParameter::object_scale() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.object_scale)
  return object_scale_;
}
inline void MultiMcBoxLossParameter::set_object_scale(float value) {
  set_has_object_scale();
  object_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.object_scale)
}

// optional float noobject_scale = 50 [default = 1];
inline bool MultiMcBoxLossParameter::has_noobject_scale() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_noobject_scale() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MultiMcBoxLossParameter::clear_has_noobject_scale() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MultiMcBoxLossParameter::clear_noobject_scale() {
  noobject_scale_ = 1;
  clear_has_noobject_scale();
}
inline float MultiMcBoxLossParameter::noobject_scale() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.noobject_scale)
  return noobject_scale_;
}
inline void MultiMcBoxLossParameter::set_noobject_scale(float value) {
  set_has_noobject_scale();
  noobject_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.noobject_scale)
}

// optional float class_scale = 51 [default = 1];
inline bool MultiMcBoxLossParameter::has_class_scale() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_class_scale() {
  _has_bits_[0] |= 0x00400000u;
}
inline void MultiMcBoxLossParameter::clear_has_class_scale() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void MultiMcBoxLossParameter::clear_class_scale() {
  class_scale_ = 1;
  clear_has_class_scale();
}
inline float MultiMcBoxLossParameter::class_scale() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.class_scale)
  return class_scale_;
}
inline void MultiMcBoxLossParameter::set_class_scale(float value) {
  set_has_class_scale();
  class_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.class_scale)
}

// optional float loc_scale = 52 [default = 1];
inline bool MultiMcBoxLossParameter::has_loc_scale() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void MultiMcBoxLossParameter::set_has_loc_scale() {
  _has_bits_[0] |= 0x00800000u;
}
inline void MultiMcBoxLossParameter::clear_has_loc_scale() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void MultiMcBoxLossParameter::clear_loc_scale() {
  loc_scale_ = 1;
  clear_has_loc_scale();
}
inline float MultiMcBoxLossParameter::loc_scale() const {
  // @@protoc_insertion_point(field_get:caffe.MultiMcBoxLossParameter.loc_scale)
  return loc_scale_;
}
inline void MultiMcBoxLossParameter::set_loc_scale(float value) {
  set_has_loc_scale();
  loc_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.MultiMcBoxLossParameter.loc_scale)
}

// -------------------------------------------------------------------

// MVNParameter

// optional bool normalize_variance = 1 [default = true];
inline bool MVNParameter::has_normalize_variance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MVNParameter::set_has_normalize_variance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MVNParameter::clear_has_normalize_variance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MVNParameter::clear_normalize_variance() {
  normalize_variance_ = true;
  clear_has_normalize_variance();
}
inline bool MVNParameter::normalize_variance() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.normalize_variance)
  return normalize_variance_;
}
inline void MVNParameter::set_normalize_variance(bool value) {
  set_has_normalize_variance();
  normalize_variance_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.normalize_variance)
}

// optional bool across_channels = 2 [default = false];
inline bool MVNParameter::has_across_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MVNParameter::set_has_across_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MVNParameter::clear_has_across_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MVNParameter::clear_across_channels() {
  across_channels_ = false;
  clear_has_across_channels();
}
inline bool MVNParameter::across_channels() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.across_channels)
  return across_channels_;
}
inline void MVNParameter::set_across_channels(bool value) {
  set_has_across_channels();
  across_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.across_channels)
}

// optional float eps = 3 [default = 1e-09];
inline bool MVNParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MVNParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MVNParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MVNParameter::clear_eps() {
  eps_ = 1e-09f;
  clear_has_eps();
}
inline float MVNParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.MVNParameter.eps)
  return eps_;
}
inline void MVNParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.MVNParameter.eps)
}

// -------------------------------------------------------------------

// MaskLossParameter

// optional float scale = 1 [default = 1];
inline bool MaskLossParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaskLossParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaskLossParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaskLossParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float MaskLossParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.MaskLossParameter.scale)
  return scale_;
}
inline void MaskLossParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.MaskLossParameter.scale)
}

// -------------------------------------------------------------------

// NormalizeParameter

// optional bool across_spatial = 1 [default = true];
inline bool NormalizeParameter::has_across_spatial() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NormalizeParameter::set_has_across_spatial() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NormalizeParameter::clear_has_across_spatial() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NormalizeParameter::clear_across_spatial() {
  across_spatial_ = true;
  clear_has_across_spatial();
}
inline bool NormalizeParameter::across_spatial() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizeParameter.across_spatial)
  return across_spatial_;
}
inline void NormalizeParameter::set_across_spatial(bool value) {
  set_has_across_spatial();
  across_spatial_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizeParameter.across_spatial)
}

// optional .caffe.FillerParameter scale_filler = 2;
inline bool NormalizeParameter::has_scale_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NormalizeParameter::set_has_scale_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NormalizeParameter::clear_has_scale_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NormalizeParameter::clear_scale_filler() {
  if (scale_filler_ != NULL) scale_filler_->::caffe::FillerParameter::Clear();
  clear_has_scale_filler();
}
inline const ::caffe::FillerParameter& NormalizeParameter::scale_filler() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizeParameter.scale_filler)
  return scale_filler_ != NULL ? *scale_filler_ : *default_instance_->scale_filler_;
}
inline ::caffe::FillerParameter* NormalizeParameter::mutable_scale_filler() {
  set_has_scale_filler();
  if (scale_filler_ == NULL) {
    scale_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.NormalizeParameter.scale_filler)
  return scale_filler_;
}
inline ::caffe::FillerParameter* NormalizeParameter::release_scale_filler() {
  // @@protoc_insertion_point(field_release:caffe.NormalizeParameter.scale_filler)
  clear_has_scale_filler();
  ::caffe::FillerParameter* temp = scale_filler_;
  scale_filler_ = NULL;
  return temp;
}
inline void NormalizeParameter::set_allocated_scale_filler(::caffe::FillerParameter* scale_filler) {
  delete scale_filler_;
  scale_filler_ = scale_filler;
  if (scale_filler) {
    set_has_scale_filler();
  } else {
    clear_has_scale_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.NormalizeParameter.scale_filler)
}

// optional bool channel_shared = 3 [default = true];
inline bool NormalizeParameter::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NormalizeParameter::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NormalizeParameter::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NormalizeParameter::clear_channel_shared() {
  channel_shared_ = true;
  clear_has_channel_shared();
}
inline bool NormalizeParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizeParameter.channel_shared)
  return channel_shared_;
}
inline void NormalizeParameter::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizeParameter.channel_shared)
}

// optional float eps = 4 [default = 1e-10];
inline bool NormalizeParameter::has_eps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NormalizeParameter::set_has_eps() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NormalizeParameter::clear_has_eps() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NormalizeParameter::clear_eps() {
  eps_ = 1e-10f;
  clear_has_eps();
}
inline float NormalizeParameter::eps() const {
  // @@protoc_insertion_point(field_get:caffe.NormalizeParameter.eps)
  return eps_;
}
inline void NormalizeParameter::set_eps(float value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:caffe.NormalizeParameter.eps)
}

// -------------------------------------------------------------------

// NmsParameter

// optional float threshold = 1 [default = 0.05];
inline bool NmsParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NmsParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NmsParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NmsParameter::clear_threshold() {
  threshold_ = 0.05f;
  clear_has_threshold();
}
inline float NmsParameter::threshold() const {
  // @@protoc_insertion_point(field_get:caffe.NmsParameter.threshold)
  return threshold_;
}
inline void NmsParameter::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.NmsParameter.threshold)
}

// optional int32 num_parts = 2 [default = 15];
inline bool NmsParameter::has_num_parts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NmsParameter::set_has_num_parts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NmsParameter::clear_has_num_parts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NmsParameter::clear_num_parts() {
  num_parts_ = 15;
  clear_has_num_parts();
}
inline ::google::protobuf::int32 NmsParameter::num_parts() const {
  // @@protoc_insertion_point(field_get:caffe.NmsParameter.num_parts)
  return num_parts_;
}
inline void NmsParameter::set_num_parts(::google::protobuf::int32 value) {
  set_has_num_parts();
  num_parts_ = value;
  // @@protoc_insertion_point(field_set:caffe.NmsParameter.num_parts)
}

// optional int32 max_peaks = 3 [default = 36];
inline bool NmsParameter::has_max_peaks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NmsParameter::set_has_max_peaks() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NmsParameter::clear_has_max_peaks() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NmsParameter::clear_max_peaks() {
  max_peaks_ = 36;
  clear_has_max_peaks();
}
inline ::google::protobuf::int32 NmsParameter::max_peaks() const {
  // @@protoc_insertion_point(field_get:caffe.NmsParameter.max_peaks)
  return max_peaks_;
}
inline void NmsParameter::set_max_peaks(::google::protobuf::int32 value) {
  set_has_max_peaks();
  max_peaks_ = value;
  // @@protoc_insertion_point(field_set:caffe.NmsParameter.max_peaks)
}

// -------------------------------------------------------------------

// ParameterParameter

// optional .caffe.BlobShape shape = 1;
inline bool ParameterParameter::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParameterParameter::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParameterParameter::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParameterParameter::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
inline const ::caffe::BlobShape& ParameterParameter::shape() const {
  // @@protoc_insertion_point(field_get:caffe.ParameterParameter.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::caffe::BlobShape* ParameterParameter::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ParameterParameter.shape)
  return shape_;
}
inline ::caffe::BlobShape* ParameterParameter::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.ParameterParameter.shape)
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void ParameterParameter::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ParameterParameter.shape)
}

// -------------------------------------------------------------------

// PermuteParameter

// repeated uint32 order = 1;
inline int PermuteParameter::order_size() const {
  return order_.size();
}
inline void PermuteParameter::clear_order() {
  order_.Clear();
}
inline ::google::protobuf::uint32 PermuteParameter::order(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PermuteParameter.order)
  return order_.Get(index);
}
inline void PermuteParameter::set_order(int index, ::google::protobuf::uint32 value) {
  order_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PermuteParameter.order)
}
inline void PermuteParameter::add_order(::google::protobuf::uint32 value) {
  order_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PermuteParameter.order)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PermuteParameter::order() const {
  // @@protoc_insertion_point(field_list:caffe.PermuteParameter.order)
  return order_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PermuteParameter::mutable_order() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PermuteParameter.order)
  return &order_;
}

// -------------------------------------------------------------------

// PoolingParameter

// optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];
inline bool PoolingParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoolingParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoolingParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoolingParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::caffe::PoolingParameter_PoolMethod PoolingParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pool)
  return static_cast< ::caffe::PoolingParameter_PoolMethod >(pool_);
}
inline void PoolingParameter::set_pool(::caffe::PoolingParameter_PoolMethod value) {
  assert(::caffe::PoolingParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pool)
}

// optional uint32 pad = 4 [default = 0];
inline bool PoolingParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoolingParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoolingParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoolingParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 PoolingParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad)
  return pad_;
}
inline void PoolingParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad)
}

// optional uint32 pad_h = 9 [default = 0];
inline bool PoolingParameter::has_pad_h() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoolingParameter::set_has_pad_h() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoolingParameter::clear_has_pad_h() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoolingParameter::clear_pad_h() {
  pad_h_ = 0u;
  clear_has_pad_h();
}
inline ::google::protobuf::uint32 PoolingParameter::pad_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad_h)
  return pad_h_;
}
inline void PoolingParameter::set_pad_h(::google::protobuf::uint32 value) {
  set_has_pad_h();
  pad_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad_h)
}

// optional uint32 pad_w = 10 [default = 0];
inline bool PoolingParameter::has_pad_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PoolingParameter::set_has_pad_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PoolingParameter::clear_has_pad_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PoolingParameter::clear_pad_w() {
  pad_w_ = 0u;
  clear_has_pad_w();
}
inline ::google::protobuf::uint32 PoolingParameter::pad_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.pad_w)
  return pad_w_;
}
inline void PoolingParameter::set_pad_w(::google::protobuf::uint32 value) {
  set_has_pad_w();
  pad_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.pad_w)
}

// optional uint32 kernel_size = 2;
inline bool PoolingParameter::has_kernel_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PoolingParameter::set_has_kernel_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PoolingParameter::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PoolingParameter::clear_kernel_size() {
  kernel_size_ = 0u;
  clear_has_kernel_size();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_size() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_size)
  return kernel_size_;
}
inline void PoolingParameter::set_kernel_size(::google::protobuf::uint32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_size)
}

// optional uint32 kernel_h = 5;
inline bool PoolingParameter::has_kernel_h() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PoolingParameter::set_has_kernel_h() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PoolingParameter::clear_has_kernel_h() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PoolingParameter::clear_kernel_h() {
  kernel_h_ = 0u;
  clear_has_kernel_h();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_h)
  return kernel_h_;
}
inline void PoolingParameter::set_kernel_h(::google::protobuf::uint32 value) {
  set_has_kernel_h();
  kernel_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_h)
}

// optional uint32 kernel_w = 6;
inline bool PoolingParameter::has_kernel_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PoolingParameter::set_has_kernel_w() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PoolingParameter::clear_has_kernel_w() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PoolingParameter::clear_kernel_w() {
  kernel_w_ = 0u;
  clear_has_kernel_w();
}
inline ::google::protobuf::uint32 PoolingParameter::kernel_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.kernel_w)
  return kernel_w_;
}
inline void PoolingParameter::set_kernel_w(::google::protobuf::uint32 value) {
  set_has_kernel_w();
  kernel_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.kernel_w)
}

// optional uint32 stride = 3 [default = 1];
inline bool PoolingParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PoolingParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PoolingParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PoolingParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 PoolingParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride)
  return stride_;
}
inline void PoolingParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride)
}

// optional uint32 stride_h = 7;
inline bool PoolingParameter::has_stride_h() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PoolingParameter::set_has_stride_h() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PoolingParameter::clear_has_stride_h() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PoolingParameter::clear_stride_h() {
  stride_h_ = 0u;
  clear_has_stride_h();
}
inline ::google::protobuf::uint32 PoolingParameter::stride_h() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride_h)
  return stride_h_;
}
inline void PoolingParameter::set_stride_h(::google::protobuf::uint32 value) {
  set_has_stride_h();
  stride_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride_h)
}

// optional uint32 stride_w = 8;
inline bool PoolingParameter::has_stride_w() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PoolingParameter::set_has_stride_w() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PoolingParameter::clear_has_stride_w() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PoolingParameter::clear_stride_w() {
  stride_w_ = 0u;
  clear_has_stride_w();
}
inline ::google::protobuf::uint32 PoolingParameter::stride_w() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.stride_w)
  return stride_w_;
}
inline void PoolingParameter::set_stride_w(::google::protobuf::uint32 value) {
  set_has_stride_w();
  stride_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.stride_w)
}

// optional .caffe.PoolingParameter.Engine engine = 11 [default = DEFAULT];
inline bool PoolingParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PoolingParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PoolingParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PoolingParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::PoolingParameter_Engine PoolingParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.engine)
  return static_cast< ::caffe::PoolingParameter_Engine >(engine_);
}
inline void PoolingParameter::set_engine(::caffe::PoolingParameter_Engine value) {
  assert(::caffe::PoolingParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.engine)
}

// optional bool global_pooling = 12 [default = false];
inline bool PoolingParameter::has_global_pooling() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PoolingParameter::set_has_global_pooling() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PoolingParameter::clear_has_global_pooling() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PoolingParameter::clear_global_pooling() {
  global_pooling_ = false;
  clear_has_global_pooling();
}
inline bool PoolingParameter::global_pooling() const {
  // @@protoc_insertion_point(field_get:caffe.PoolingParameter.global_pooling)
  return global_pooling_;
}
inline void PoolingParameter::set_global_pooling(bool value) {
  set_has_global_pooling();
  global_pooling_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoolingParameter.global_pooling)
}

// -------------------------------------------------------------------

// PowerParameter

// optional float power = 1 [default = 1];
inline bool PowerParameter::has_power() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerParameter::set_has_power() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PowerParameter::clear_has_power() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PowerParameter::clear_power() {
  power_ = 1;
  clear_has_power();
}
inline float PowerParameter::power() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.power)
  return power_;
}
inline void PowerParameter::set_power(float value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.power)
}

// optional float scale = 2 [default = 1];
inline bool PowerParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PowerParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PowerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PowerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float PowerParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.scale)
  return scale_;
}
inline void PowerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.scale)
}

// optional float shift = 3 [default = 0];
inline bool PowerParameter::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PowerParameter::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PowerParameter::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PowerParameter::clear_shift() {
  shift_ = 0;
  clear_has_shift();
}
inline float PowerParameter::shift() const {
  // @@protoc_insertion_point(field_get:caffe.PowerParameter.shift)
  return shift_;
}
inline void PowerParameter::set_shift(float value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:caffe.PowerParameter.shift)
}

// -------------------------------------------------------------------

// PoseDataParameter

// optional string xml_list = 1 [default = ""];
inline bool PoseDataParameter::has_xml_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoseDataParameter::set_has_xml_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoseDataParameter::clear_has_xml_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoseDataParameter::clear_xml_list() {
  xml_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_xml_list();
}
inline const ::std::string& PoseDataParameter::xml_list() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataParameter.xml_list)
  return xml_list_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PoseDataParameter::set_xml_list(const ::std::string& value) {
  set_has_xml_list();
  xml_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PoseDataParameter.xml_list)
}
inline void PoseDataParameter::set_xml_list(const char* value) {
  set_has_xml_list();
  xml_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PoseDataParameter.xml_list)
}
inline void PoseDataParameter::set_xml_list(const char* value, size_t size) {
  set_has_xml_list();
  xml_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PoseDataParameter.xml_list)
}
inline ::std::string* PoseDataParameter::mutable_xml_list() {
  set_has_xml_list();
  // @@protoc_insertion_point(field_mutable:caffe.PoseDataParameter.xml_list)
  return xml_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PoseDataParameter::release_xml_list() {
  // @@protoc_insertion_point(field_release:caffe.PoseDataParameter.xml_list)
  clear_has_xml_list();
  return xml_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PoseDataParameter::set_allocated_xml_list(::std::string* xml_list) {
  if (xml_list != NULL) {
    set_has_xml_list();
  } else {
    clear_has_xml_list();
  }
  xml_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xml_list);
  // @@protoc_insertion_point(field_set_allocated:caffe.PoseDataParameter.xml_list)
}

// optional string xml_root = 2 [default = ""];
inline bool PoseDataParameter::has_xml_root() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoseDataParameter::set_has_xml_root() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoseDataParameter::clear_has_xml_root() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoseDataParameter::clear_xml_root() {
  xml_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_xml_root();
}
inline const ::std::string& PoseDataParameter::xml_root() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataParameter.xml_root)
  return xml_root_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PoseDataParameter::set_xml_root(const ::std::string& value) {
  set_has_xml_root();
  xml_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PoseDataParameter.xml_root)
}
inline void PoseDataParameter::set_xml_root(const char* value) {
  set_has_xml_root();
  xml_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PoseDataParameter.xml_root)
}
inline void PoseDataParameter::set_xml_root(const char* value, size_t size) {
  set_has_xml_root();
  xml_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PoseDataParameter.xml_root)
}
inline ::std::string* PoseDataParameter::mutable_xml_root() {
  set_has_xml_root();
  // @@protoc_insertion_point(field_mutable:caffe.PoseDataParameter.xml_root)
  return xml_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PoseDataParameter::release_xml_root() {
  // @@protoc_insertion_point(field_release:caffe.PoseDataParameter.xml_root)
  clear_has_xml_root();
  return xml_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PoseDataParameter::set_allocated_xml_root(::std::string* xml_root) {
  if (xml_root != NULL) {
    set_has_xml_root();
  } else {
    clear_has_xml_root();
  }
  xml_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xml_root);
  // @@protoc_insertion_point(field_set_allocated:caffe.PoseDataParameter.xml_root)
}

// optional bool shuffle = 3 [default = true];
inline bool PoseDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoseDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoseDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoseDataParameter::clear_shuffle() {
  shuffle_ = true;
  clear_has_shuffle();
}
inline bool PoseDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataParameter.shuffle)
  return shuffle_;
}
inline void PoseDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataParameter.shuffle)
}

// optional int32 rand_skip = 4 [default = 0];
inline bool PoseDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PoseDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PoseDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PoseDataParameter::clear_rand_skip() {
  rand_skip_ = 0;
  clear_has_rand_skip();
}
inline ::google::protobuf::int32 PoseDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataParameter.rand_skip)
  return rand_skip_;
}
inline void PoseDataParameter::set_rand_skip(::google::protobuf::int32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataParameter.rand_skip)
}

// optional int32 batch_size = 5 [default = 16];
inline bool PoseDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PoseDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PoseDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PoseDataParameter::clear_batch_size() {
  batch_size_ = 16;
  clear_has_batch_size();
}
inline ::google::protobuf::int32 PoseDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataParameter.batch_size)
  return batch_size_;
}
inline void PoseDataParameter::set_batch_size(::google::protobuf::int32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataParameter.batch_size)
}

// optional bool out_kps = 6 [default = false];
inline bool PoseDataParameter::has_out_kps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PoseDataParameter::set_has_out_kps() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PoseDataParameter::clear_has_out_kps() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PoseDataParameter::clear_out_kps() {
  out_kps_ = false;
  clear_has_out_kps();
}
inline bool PoseDataParameter::out_kps() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDataParameter.out_kps)
  return out_kps_;
}
inline void PoseDataParameter::set_out_kps(bool value) {
  set_has_out_kps();
  out_kps_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDataParameter.out_kps)
}

// -------------------------------------------------------------------

// ReidDataParameter

// optional string xml_list = 1 [default = ""];
inline bool ReidDataParameter::has_xml_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReidDataParameter::set_has_xml_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReidDataParameter::clear_has_xml_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReidDataParameter::clear_xml_list() {
  xml_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_xml_list();
}
inline const ::std::string& ReidDataParameter::xml_list() const {
  // @@protoc_insertion_point(field_get:caffe.ReidDataParameter.xml_list)
  return xml_list_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReidDataParameter::set_xml_list(const ::std::string& value) {
  set_has_xml_list();
  xml_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ReidDataParameter.xml_list)
}
inline void ReidDataParameter::set_xml_list(const char* value) {
  set_has_xml_list();
  xml_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ReidDataParameter.xml_list)
}
inline void ReidDataParameter::set_xml_list(const char* value, size_t size) {
  set_has_xml_list();
  xml_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ReidDataParameter.xml_list)
}
inline ::std::string* ReidDataParameter::mutable_xml_list() {
  set_has_xml_list();
  // @@protoc_insertion_point(field_mutable:caffe.ReidDataParameter.xml_list)
  return xml_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReidDataParameter::release_xml_list() {
  // @@protoc_insertion_point(field_release:caffe.ReidDataParameter.xml_list)
  clear_has_xml_list();
  return xml_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReidDataParameter::set_allocated_xml_list(::std::string* xml_list) {
  if (xml_list != NULL) {
    set_has_xml_list();
  } else {
    clear_has_xml_list();
  }
  xml_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xml_list);
  // @@protoc_insertion_point(field_set_allocated:caffe.ReidDataParameter.xml_list)
}

// optional string xml_root = 2 [default = ""];
inline bool ReidDataParameter::has_xml_root() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReidDataParameter::set_has_xml_root() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReidDataParameter::clear_has_xml_root() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReidDataParameter::clear_xml_root() {
  xml_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_xml_root();
}
inline const ::std::string& ReidDataParameter::xml_root() const {
  // @@protoc_insertion_point(field_get:caffe.ReidDataParameter.xml_root)
  return xml_root_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReidDataParameter::set_xml_root(const ::std::string& value) {
  set_has_xml_root();
  xml_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.ReidDataParameter.xml_root)
}
inline void ReidDataParameter::set_xml_root(const char* value) {
  set_has_xml_root();
  xml_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.ReidDataParameter.xml_root)
}
inline void ReidDataParameter::set_xml_root(const char* value, size_t size) {
  set_has_xml_root();
  xml_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.ReidDataParameter.xml_root)
}
inline ::std::string* ReidDataParameter::mutable_xml_root() {
  set_has_xml_root();
  // @@protoc_insertion_point(field_mutable:caffe.ReidDataParameter.xml_root)
  return xml_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReidDataParameter::release_xml_root() {
  // @@protoc_insertion_point(field_release:caffe.ReidDataParameter.xml_root)
  clear_has_xml_root();
  return xml_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReidDataParameter::set_allocated_xml_root(::std::string* xml_root) {
  if (xml_root != NULL) {
    set_has_xml_root();
  } else {
    clear_has_xml_root();
  }
  xml_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xml_root);
  // @@protoc_insertion_point(field_set_allocated:caffe.ReidDataParameter.xml_root)
}

// optional bool shuffle = 3 [default = true];
inline bool ReidDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReidDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReidDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReidDataParameter::clear_shuffle() {
  shuffle_ = true;
  clear_has_shuffle();
}
inline bool ReidDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.ReidDataParameter.shuffle)
  return shuffle_;
}
inline void ReidDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReidDataParameter.shuffle)
}

// optional int32 rand_skip = 4 [default = 0];
inline bool ReidDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReidDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReidDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReidDataParameter::clear_rand_skip() {
  rand_skip_ = 0;
  clear_has_rand_skip();
}
inline ::google::protobuf::int32 ReidDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.ReidDataParameter.rand_skip)
  return rand_skip_;
}
inline void ReidDataParameter::set_rand_skip(::google::protobuf::int32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReidDataParameter.rand_skip)
}

// optional int32 batch_size = 5 [default = 16];
inline bool ReidDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReidDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReidDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReidDataParameter::clear_batch_size() {
  batch_size_ = 16;
  clear_has_batch_size();
}
inline ::google::protobuf::int32 ReidDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.ReidDataParameter.batch_size)
  return batch_size_;
}
inline void ReidDataParameter::set_batch_size(::google::protobuf::int32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReidDataParameter.batch_size)
}

// -------------------------------------------------------------------

// PoseEvalParameter

// optional int32 stride = 1 [default = 8];
inline bool PoseEvalParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoseEvalParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoseEvalParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoseEvalParameter::clear_stride() {
  stride_ = 8;
  clear_has_stride();
}
inline ::google::protobuf::int32 PoseEvalParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.PoseEvalParameter.stride)
  return stride_;
}
inline void PoseEvalParameter::set_stride(::google::protobuf::int32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseEvalParameter.stride)
}

// optional float area_thre = 2 [default = 1000];
inline bool PoseEvalParameter::has_area_thre() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoseEvalParameter::set_has_area_thre() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoseEvalParameter::clear_has_area_thre() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoseEvalParameter::clear_area_thre() {
  area_thre_ = 1000;
  clear_has_area_thre();
}
inline float PoseEvalParameter::area_thre() const {
  // @@protoc_insertion_point(field_get:caffe.PoseEvalParameter.area_thre)
  return area_thre_;
}
inline void PoseEvalParameter::set_area_thre(float value) {
  set_has_area_thre();
  area_thre_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseEvalParameter.area_thre)
}

// repeated float oks_thre = 3;
inline int PoseEvalParameter::oks_thre_size() const {
  return oks_thre_.size();
}
inline void PoseEvalParameter::clear_oks_thre() {
  oks_thre_.Clear();
}
inline float PoseEvalParameter::oks_thre(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PoseEvalParameter.oks_thre)
  return oks_thre_.Get(index);
}
inline void PoseEvalParameter::set_oks_thre(int index, float value) {
  oks_thre_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PoseEvalParameter.oks_thre)
}
inline void PoseEvalParameter::add_oks_thre(float value) {
  oks_thre_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PoseEvalParameter.oks_thre)
}
inline const ::google::protobuf::RepeatedField< float >&
PoseEvalParameter::oks_thre() const {
  // @@protoc_insertion_point(field_list:caffe.PoseEvalParameter.oks_thre)
  return oks_thre_;
}
inline ::google::protobuf::RepeatedField< float >*
PoseEvalParameter::mutable_oks_thre() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PoseEvalParameter.oks_thre)
  return &oks_thre_;
}

// -------------------------------------------------------------------

// PoseDetParameter

// optional bool is_type_coco = 1 [default = true];
inline bool PoseDetParameter::has_is_type_coco() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PoseDetParameter::set_has_is_type_coco() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PoseDetParameter::clear_has_is_type_coco() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PoseDetParameter::clear_is_type_coco() {
  is_type_coco_ = true;
  clear_has_is_type_coco();
}
inline bool PoseDetParameter::is_type_coco() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDetParameter.is_type_coco)
  return is_type_coco_;
}
inline void PoseDetParameter::set_is_type_coco(bool value) {
  set_has_is_type_coco();
  is_type_coco_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDetParameter.is_type_coco)
}

// optional float coverage_thre = 2 [default = 0.5];
inline bool PoseDetParameter::has_coverage_thre() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PoseDetParameter::set_has_coverage_thre() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PoseDetParameter::clear_has_coverage_thre() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PoseDetParameter::clear_coverage_thre() {
  coverage_thre_ = 0.5f;
  clear_has_coverage_thre();
}
inline float PoseDetParameter::coverage_thre() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDetParameter.coverage_thre)
  return coverage_thre_;
}
inline void PoseDetParameter::set_coverage_thre(float value) {
  set_has_coverage_thre();
  coverage_thre_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDetParameter.coverage_thre)
}

// optional float score_pose_ebox = 3 [default = 0.8];
inline bool PoseDetParameter::has_score_pose_ebox() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PoseDetParameter::set_has_score_pose_ebox() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PoseDetParameter::clear_has_score_pose_ebox() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PoseDetParameter::clear_score_pose_ebox() {
  score_pose_ebox_ = 0.8f;
  clear_has_score_pose_ebox();
}
inline float PoseDetParameter::score_pose_ebox() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDetParameter.score_pose_ebox)
  return score_pose_ebox_;
}
inline void PoseDetParameter::set_score_pose_ebox(float value) {
  set_has_score_pose_ebox();
  score_pose_ebox_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDetParameter.score_pose_ebox)
}

// optional float keep_det_box_thre = 4 [default = 0.9];
inline bool PoseDetParameter::has_keep_det_box_thre() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PoseDetParameter::set_has_keep_det_box_thre() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PoseDetParameter::clear_has_keep_det_box_thre() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PoseDetParameter::clear_keep_det_box_thre() {
  keep_det_box_thre_ = 0.9f;
  clear_has_keep_det_box_thre();
}
inline float PoseDetParameter::keep_det_box_thre() const {
  // @@protoc_insertion_point(field_get:caffe.PoseDetParameter.keep_det_box_thre)
  return keep_det_box_thre_;
}
inline void PoseDetParameter::set_keep_det_box_thre(float value) {
  set_has_keep_det_box_thre();
  keep_det_box_thre_ = value;
  // @@protoc_insertion_point(field_set:caffe.PoseDetParameter.keep_det_box_thre)
}

// -------------------------------------------------------------------

// PeaksFindParameter

// optional int32 height = 1;
inline bool PeaksFindParameter::has_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PeaksFindParameter::set_has_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PeaksFindParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PeaksFindParameter::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 PeaksFindParameter::height() const {
  // @@protoc_insertion_point(field_get:caffe.PeaksFindParameter.height)
  return height_;
}
inline void PeaksFindParameter::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:caffe.PeaksFindParameter.height)
}

// optional int32 width = 2;
inline bool PeaksFindParameter::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PeaksFindParameter::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PeaksFindParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PeaksFindParameter::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 PeaksFindParameter::width() const {
  // @@protoc_insertion_point(field_get:caffe.PeaksFindParameter.width)
  return width_;
}
inline void PeaksFindParameter::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:caffe.PeaksFindParameter.width)
}

// -------------------------------------------------------------------

// PriorBoxParameter

// repeated float min_size = 1;
inline int PriorBoxParameter::min_size_size() const {
  return min_size_.size();
}
inline void PriorBoxParameter::clear_min_size() {
  min_size_.Clear();
}
inline float PriorBoxParameter::min_size(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PriorBoxParameter.min_size)
  return min_size_.Get(index);
}
inline void PriorBoxParameter::set_min_size(int index, float value) {
  min_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PriorBoxParameter.min_size)
}
inline void PriorBoxParameter::add_min_size(float value) {
  min_size_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PriorBoxParameter.min_size)
}
inline const ::google::protobuf::RepeatedField< float >&
PriorBoxParameter::min_size() const {
  // @@protoc_insertion_point(field_list:caffe.PriorBoxParameter.min_size)
  return min_size_;
}
inline ::google::protobuf::RepeatedField< float >*
PriorBoxParameter::mutable_min_size() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PriorBoxParameter.min_size)
  return &min_size_;
}

// repeated float max_size = 2;
inline int PriorBoxParameter::max_size_size() const {
  return max_size_.size();
}
inline void PriorBoxParameter::clear_max_size() {
  max_size_.Clear();
}
inline float PriorBoxParameter::max_size(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PriorBoxParameter.max_size)
  return max_size_.Get(index);
}
inline void PriorBoxParameter::set_max_size(int index, float value) {
  max_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PriorBoxParameter.max_size)
}
inline void PriorBoxParameter::add_max_size(float value) {
  max_size_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PriorBoxParameter.max_size)
}
inline const ::google::protobuf::RepeatedField< float >&
PriorBoxParameter::max_size() const {
  // @@protoc_insertion_point(field_list:caffe.PriorBoxParameter.max_size)
  return max_size_;
}
inline ::google::protobuf::RepeatedField< float >*
PriorBoxParameter::mutable_max_size() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PriorBoxParameter.max_size)
  return &max_size_;
}

// repeated float aspect_ratio = 3;
inline int PriorBoxParameter::aspect_ratio_size() const {
  return aspect_ratio_.size();
}
inline void PriorBoxParameter::clear_aspect_ratio() {
  aspect_ratio_.Clear();
}
inline float PriorBoxParameter::aspect_ratio(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PriorBoxParameter.aspect_ratio)
  return aspect_ratio_.Get(index);
}
inline void PriorBoxParameter::set_aspect_ratio(int index, float value) {
  aspect_ratio_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PriorBoxParameter.aspect_ratio)
}
inline void PriorBoxParameter::add_aspect_ratio(float value) {
  aspect_ratio_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PriorBoxParameter.aspect_ratio)
}
inline const ::google::protobuf::RepeatedField< float >&
PriorBoxParameter::aspect_ratio() const {
  // @@protoc_insertion_point(field_list:caffe.PriorBoxParameter.aspect_ratio)
  return aspect_ratio_;
}
inline ::google::protobuf::RepeatedField< float >*
PriorBoxParameter::mutable_aspect_ratio() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PriorBoxParameter.aspect_ratio)
  return &aspect_ratio_;
}

// optional bool flip = 4 [default = true];
inline bool PriorBoxParameter::has_flip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PriorBoxParameter::set_has_flip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PriorBoxParameter::clear_has_flip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PriorBoxParameter::clear_flip() {
  flip_ = true;
  clear_has_flip();
}
inline bool PriorBoxParameter::flip() const {
  // @@protoc_insertion_point(field_get:caffe.PriorBoxParameter.flip)
  return flip_;
}
inline void PriorBoxParameter::set_flip(bool value) {
  set_has_flip();
  flip_ = value;
  // @@protoc_insertion_point(field_set:caffe.PriorBoxParameter.flip)
}

// optional bool clip = 5 [default = false];
inline bool PriorBoxParameter::has_clip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PriorBoxParameter::set_has_clip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PriorBoxParameter::clear_has_clip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PriorBoxParameter::clear_clip() {
  clip_ = false;
  clear_has_clip();
}
inline bool PriorBoxParameter::clip() const {
  // @@protoc_insertion_point(field_get:caffe.PriorBoxParameter.clip)
  return clip_;
}
inline void PriorBoxParameter::set_clip(bool value) {
  set_has_clip();
  clip_ = value;
  // @@protoc_insertion_point(field_set:caffe.PriorBoxParameter.clip)
}

// repeated float variance = 6;
inline int PriorBoxParameter::variance_size() const {
  return variance_.size();
}
inline void PriorBoxParameter::clear_variance() {
  variance_.Clear();
}
inline float PriorBoxParameter::variance(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PriorBoxParameter.variance)
  return variance_.Get(index);
}
inline void PriorBoxParameter::set_variance(int index, float value) {
  variance_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PriorBoxParameter.variance)
}
inline void PriorBoxParameter::add_variance(float value) {
  variance_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PriorBoxParameter.variance)
}
inline const ::google::protobuf::RepeatedField< float >&
PriorBoxParameter::variance() const {
  // @@protoc_insertion_point(field_list:caffe.PriorBoxParameter.variance)
  return variance_;
}
inline ::google::protobuf::RepeatedField< float >*
PriorBoxParameter::mutable_variance() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PriorBoxParameter.variance)
  return &variance_;
}

// repeated float pro_width = 7;
inline int PriorBoxParameter::pro_width_size() const {
  return pro_width_.size();
}
inline void PriorBoxParameter::clear_pro_width() {
  pro_width_.Clear();
}
inline float PriorBoxParameter::pro_width(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PriorBoxParameter.pro_width)
  return pro_width_.Get(index);
}
inline void PriorBoxParameter::set_pro_width(int index, float value) {
  pro_width_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PriorBoxParameter.pro_width)
}
inline void PriorBoxParameter::add_pro_width(float value) {
  pro_width_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PriorBoxParameter.pro_width)
}
inline const ::google::protobuf::RepeatedField< float >&
PriorBoxParameter::pro_width() const {
  // @@protoc_insertion_point(field_list:caffe.PriorBoxParameter.pro_width)
  return pro_width_;
}
inline ::google::protobuf::RepeatedField< float >*
PriorBoxParameter::mutable_pro_width() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PriorBoxParameter.pro_width)
  return &pro_width_;
}

// repeated float pro_height = 8;
inline int PriorBoxParameter::pro_height_size() const {
  return pro_height_.size();
}
inline void PriorBoxParameter::clear_pro_height() {
  pro_height_.Clear();
}
inline float PriorBoxParameter::pro_height(int index) const {
  // @@protoc_insertion_point(field_get:caffe.PriorBoxParameter.pro_height)
  return pro_height_.Get(index);
}
inline void PriorBoxParameter::set_pro_height(int index, float value) {
  pro_height_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.PriorBoxParameter.pro_height)
}
inline void PriorBoxParameter::add_pro_height(float value) {
  pro_height_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.PriorBoxParameter.pro_height)
}
inline const ::google::protobuf::RepeatedField< float >&
PriorBoxParameter::pro_height() const {
  // @@protoc_insertion_point(field_list:caffe.PriorBoxParameter.pro_height)
  return pro_height_;
}
inline ::google::protobuf::RepeatedField< float >*
PriorBoxParameter::mutable_pro_height() {
  // @@protoc_insertion_point(field_mutable_list:caffe.PriorBoxParameter.pro_height)
  return &pro_height_;
}

// optional int32 stride = 9 [default = 1];
inline bool PriorBoxParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PriorBoxParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PriorBoxParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PriorBoxParameter::clear_stride() {
  stride_ = 1;
  clear_has_stride();
}
inline ::google::protobuf::int32 PriorBoxParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.PriorBoxParameter.stride)
  return stride_;
}
inline void PriorBoxParameter::set_stride(::google::protobuf::int32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.PriorBoxParameter.stride)
}

// -------------------------------------------------------------------

// PythonParameter

// optional string module = 1;
inline bool PythonParameter::has_module() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PythonParameter::set_has_module() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PythonParameter::clear_has_module() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PythonParameter::clear_module() {
  module_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_module();
}
inline const ::std::string& PythonParameter::module() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.module)
  return module_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PythonParameter::set_module(const ::std::string& value) {
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.module)
}
inline void PythonParameter::set_module(const char* value) {
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.module)
}
inline void PythonParameter::set_module(const char* value, size_t size) {
  set_has_module();
  module_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.module)
}
inline ::std::string* PythonParameter::mutable_module() {
  set_has_module();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.module)
  return module_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PythonParameter::release_module() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.module)
  clear_has_module();
  return module_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PythonParameter::set_allocated_module(::std::string* module) {
  if (module != NULL) {
    set_has_module();
  } else {
    clear_has_module();
  }
  module_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), module);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.module)
}

// optional string layer = 2;
inline bool PythonParameter::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PythonParameter::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PythonParameter::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PythonParameter::clear_layer() {
  layer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layer();
}
inline const ::std::string& PythonParameter::layer() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.layer)
  return layer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PythonParameter::set_layer(const ::std::string& value) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.layer)
}
inline void PythonParameter::set_layer(const char* value) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.layer)
}
inline void PythonParameter::set_layer(const char* value, size_t size) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.layer)
}
inline ::std::string* PythonParameter::mutable_layer() {
  set_has_layer();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.layer)
  return layer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PythonParameter::release_layer() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.layer)
  clear_has_layer();
  return layer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PythonParameter::set_allocated_layer(::std::string* layer) {
  if (layer != NULL) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
  layer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layer);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.layer)
}

// optional string param_str = 3 [default = ""];
inline bool PythonParameter::has_param_str() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PythonParameter::set_has_param_str() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PythonParameter::clear_has_param_str() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PythonParameter::clear_param_str() {
  param_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param_str();
}
inline const ::std::string& PythonParameter::param_str() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.param_str)
  return param_str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PythonParameter::set_param_str(const ::std::string& value) {
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.param_str)
}
inline void PythonParameter::set_param_str(const char* value) {
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.PythonParameter.param_str)
}
inline void PythonParameter::set_param_str(const char* value, size_t size) {
  set_has_param_str();
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.PythonParameter.param_str)
}
inline ::std::string* PythonParameter::mutable_param_str() {
  set_has_param_str();
  // @@protoc_insertion_point(field_mutable:caffe.PythonParameter.param_str)
  return param_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PythonParameter::release_param_str() {
  // @@protoc_insertion_point(field_release:caffe.PythonParameter.param_str)
  clear_has_param_str();
  return param_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PythonParameter::set_allocated_param_str(::std::string* param_str) {
  if (param_str != NULL) {
    set_has_param_str();
  } else {
    clear_has_param_str();
  }
  param_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param_str);
  // @@protoc_insertion_point(field_set_allocated:caffe.PythonParameter.param_str)
}

// optional bool share_in_parallel = 4 [default = false];
inline bool PythonParameter::has_share_in_parallel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PythonParameter::set_has_share_in_parallel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PythonParameter::clear_has_share_in_parallel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PythonParameter::clear_share_in_parallel() {
  share_in_parallel_ = false;
  clear_has_share_in_parallel();
}
inline bool PythonParameter::share_in_parallel() const {
  // @@protoc_insertion_point(field_get:caffe.PythonParameter.share_in_parallel)
  return share_in_parallel_;
}
inline void PythonParameter::set_share_in_parallel(bool value) {
  set_has_share_in_parallel();
  share_in_parallel_ = value;
  // @@protoc_insertion_point(field_set:caffe.PythonParameter.share_in_parallel)
}

// -------------------------------------------------------------------

// RecurrentParameter

// optional uint32 num_output = 1 [default = 0];
inline bool RecurrentParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecurrentParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecurrentParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecurrentParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 RecurrentParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.num_output)
  return num_output_;
}
inline void RecurrentParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.RecurrentParameter.num_output)
}

// optional .caffe.FillerParameter weight_filler = 2;
inline bool RecurrentParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecurrentParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecurrentParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecurrentParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& RecurrentParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::caffe::FillerParameter* RecurrentParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.RecurrentParameter.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* RecurrentParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.RecurrentParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void RecurrentParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.RecurrentParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 3;
inline bool RecurrentParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecurrentParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecurrentParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecurrentParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& RecurrentParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* RecurrentParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.RecurrentParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* RecurrentParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.RecurrentParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void RecurrentParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.RecurrentParameter.bias_filler)
}

// optional bool debug_info = 4 [default = false];
inline bool RecurrentParameter::has_debug_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecurrentParameter::set_has_debug_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecurrentParameter::clear_has_debug_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecurrentParameter::clear_debug_info() {
  debug_info_ = false;
  clear_has_debug_info();
}
inline bool RecurrentParameter::debug_info() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.debug_info)
  return debug_info_;
}
inline void RecurrentParameter::set_debug_info(bool value) {
  set_has_debug_info();
  debug_info_ = value;
  // @@protoc_insertion_point(field_set:caffe.RecurrentParameter.debug_info)
}

// optional bool expose_hidden = 5 [default = false];
inline bool RecurrentParameter::has_expose_hidden() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecurrentParameter::set_has_expose_hidden() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecurrentParameter::clear_has_expose_hidden() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecurrentParameter::clear_expose_hidden() {
  expose_hidden_ = false;
  clear_has_expose_hidden();
}
inline bool RecurrentParameter::expose_hidden() const {
  // @@protoc_insertion_point(field_get:caffe.RecurrentParameter.expose_hidden)
  return expose_hidden_;
}
inline void RecurrentParameter::set_expose_hidden(bool value) {
  set_has_expose_hidden();
  expose_hidden_ = value;
  // @@protoc_insertion_point(field_set:caffe.RecurrentParameter.expose_hidden)
}

// -------------------------------------------------------------------

// ReductionParameter

// optional .caffe.ReductionParameter.ReductionOp operation = 1 [default = SUM];
inline bool ReductionParameter::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReductionParameter::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReductionParameter::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReductionParameter::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
inline ::caffe::ReductionParameter_ReductionOp ReductionParameter::operation() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.operation)
  return static_cast< ::caffe::ReductionParameter_ReductionOp >(operation_);
}
inline void ReductionParameter::set_operation(::caffe::ReductionParameter_ReductionOp value) {
  assert(::caffe::ReductionParameter_ReductionOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.operation)
}

// optional int32 axis = 2 [default = 0];
inline bool ReductionParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReductionParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReductionParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReductionParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ReductionParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.axis)
  return axis_;
}
inline void ReductionParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.axis)
}

// optional float coeff = 3 [default = 1];
inline bool ReductionParameter::has_coeff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReductionParameter::set_has_coeff() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReductionParameter::clear_has_coeff() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReductionParameter::clear_coeff() {
  coeff_ = 1;
  clear_has_coeff();
}
inline float ReductionParameter::coeff() const {
  // @@protoc_insertion_point(field_get:caffe.ReductionParameter.coeff)
  return coeff_;
}
inline void ReductionParameter::set_coeff(float value) {
  set_has_coeff();
  coeff_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReductionParameter.coeff)
}

// -------------------------------------------------------------------

// ReLUParameter

// optional float negative_slope = 1 [default = 0];
inline bool ReLUParameter::has_negative_slope() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReLUParameter::set_has_negative_slope() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReLUParameter::clear_has_negative_slope() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReLUParameter::clear_negative_slope() {
  negative_slope_ = 0;
  clear_has_negative_slope();
}
inline float ReLUParameter::negative_slope() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.negative_slope)
  return negative_slope_;
}
inline void ReLUParameter::set_negative_slope(float value) {
  set_has_negative_slope();
  negative_slope_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.negative_slope)
}

// optional .caffe.ReLUParameter.Engine engine = 2 [default = DEFAULT];
inline bool ReLUParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReLUParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReLUParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReLUParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::ReLUParameter_Engine ReLUParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.ReLUParameter.engine)
  return static_cast< ::caffe::ReLUParameter_Engine >(engine_);
}
inline void ReLUParameter::set_engine(::caffe::ReLUParameter_Engine value) {
  assert(::caffe::ReLUParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReLUParameter.engine)
}

// -------------------------------------------------------------------

// ResizeBlobParameter

// optional int32 target_spatial_width = 1 [default = 48];
inline bool ResizeBlobParameter::has_target_spatial_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResizeBlobParameter::set_has_target_spatial_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResizeBlobParameter::clear_has_target_spatial_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResizeBlobParameter::clear_target_spatial_width() {
  target_spatial_width_ = 48;
  clear_has_target_spatial_width();
}
inline ::google::protobuf::int32 ResizeBlobParameter::target_spatial_width() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeBlobParameter.target_spatial_width)
  return target_spatial_width_;
}
inline void ResizeBlobParameter::set_target_spatial_width(::google::protobuf::int32 value) {
  set_has_target_spatial_width();
  target_spatial_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeBlobParameter.target_spatial_width)
}

// optional int32 target_spatial_height = 2 [default = 48];
inline bool ResizeBlobParameter::has_target_spatial_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResizeBlobParameter::set_has_target_spatial_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResizeBlobParameter::clear_has_target_spatial_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResizeBlobParameter::clear_target_spatial_height() {
  target_spatial_height_ = 48;
  clear_has_target_spatial_height();
}
inline ::google::protobuf::int32 ResizeBlobParameter::target_spatial_height() const {
  // @@protoc_insertion_point(field_get:caffe.ResizeBlobParameter.target_spatial_height)
  return target_spatial_height_;
}
inline void ResizeBlobParameter::set_target_spatial_height(::google::protobuf::int32 value) {
  set_has_target_spatial_height();
  target_spatial_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.ResizeBlobParameter.target_spatial_height)
}

// -------------------------------------------------------------------

// RoiResizeParameter

// optional int32 target_spatial_width = 1 [default = 6];
inline bool RoiResizeParameter::has_target_spatial_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoiResizeParameter::set_has_target_spatial_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoiResizeParameter::clear_has_target_spatial_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoiResizeParameter::clear_target_spatial_width() {
  target_spatial_width_ = 6;
  clear_has_target_spatial_width();
}
inline ::google::protobuf::int32 RoiResizeParameter::target_spatial_width() const {
  // @@protoc_insertion_point(field_get:caffe.RoiResizeParameter.target_spatial_width)
  return target_spatial_width_;
}
inline void RoiResizeParameter::set_target_spatial_width(::google::protobuf::int32 value) {
  set_has_target_spatial_width();
  target_spatial_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.RoiResizeParameter.target_spatial_width)
}

// optional int32 target_spatial_height = 2 [default = 6];
inline bool RoiResizeParameter::has_target_spatial_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoiResizeParameter::set_has_target_spatial_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoiResizeParameter::clear_has_target_spatial_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoiResizeParameter::clear_target_spatial_height() {
  target_spatial_height_ = 6;
  clear_has_target_spatial_height();
}
inline ::google::protobuf::int32 RoiResizeParameter::target_spatial_height() const {
  // @@protoc_insertion_point(field_get:caffe.RoiResizeParameter.target_spatial_height)
  return target_spatial_height_;
}
inline void RoiResizeParameter::set_target_spatial_height(::google::protobuf::int32 value) {
  set_has_target_spatial_height();
  target_spatial_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.RoiResizeParameter.target_spatial_height)
}

// -------------------------------------------------------------------

// RoiAlignParameter

// optional int32 roi_resized_width = 1 [default = 6];
inline bool RoiAlignParameter::has_roi_resized_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoiAlignParameter::set_has_roi_resized_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoiAlignParameter::clear_has_roi_resized_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoiAlignParameter::clear_roi_resized_width() {
  roi_resized_width_ = 6;
  clear_has_roi_resized_width();
}
inline ::google::protobuf::int32 RoiAlignParameter::roi_resized_width() const {
  // @@protoc_insertion_point(field_get:caffe.RoiAlignParameter.roi_resized_width)
  return roi_resized_width_;
}
inline void RoiAlignParameter::set_roi_resized_width(::google::protobuf::int32 value) {
  set_has_roi_resized_width();
  roi_resized_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.RoiAlignParameter.roi_resized_width)
}

// optional int32 roi_resized_height = 2 [default = 6];
inline bool RoiAlignParameter::has_roi_resized_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoiAlignParameter::set_has_roi_resized_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoiAlignParameter::clear_has_roi_resized_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoiAlignParameter::clear_roi_resized_height() {
  roi_resized_height_ = 6;
  clear_has_roi_resized_height();
}
inline ::google::protobuf::int32 RoiAlignParameter::roi_resized_height() const {
  // @@protoc_insertion_point(field_get:caffe.RoiAlignParameter.roi_resized_height)
  return roi_resized_height_;
}
inline void RoiAlignParameter::set_roi_resized_height(::google::protobuf::int32 value) {
  set_has_roi_resized_height();
  roi_resized_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.RoiAlignParameter.roi_resized_height)
}

// optional int32 inter_times = 3 [default = 1];
inline bool RoiAlignParameter::has_inter_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoiAlignParameter::set_has_inter_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoiAlignParameter::clear_has_inter_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoiAlignParameter::clear_inter_times() {
  inter_times_ = 1;
  clear_has_inter_times();
}
inline ::google::protobuf::int32 RoiAlignParameter::inter_times() const {
  // @@protoc_insertion_point(field_get:caffe.RoiAlignParameter.inter_times)
  return inter_times_;
}
inline void RoiAlignParameter::set_inter_times(::google::protobuf::int32 value) {
  set_has_inter_times();
  inter_times_ = value;
  // @@protoc_insertion_point(field_set:caffe.RoiAlignParameter.inter_times)
}

// optional float spatial_scale = 4 [default = 1];
inline bool RoiAlignParameter::has_spatial_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoiAlignParameter::set_has_spatial_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoiAlignParameter::clear_has_spatial_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoiAlignParameter::clear_spatial_scale() {
  spatial_scale_ = 1;
  clear_has_spatial_scale();
}
inline float RoiAlignParameter::spatial_scale() const {
  // @@protoc_insertion_point(field_get:caffe.RoiAlignParameter.spatial_scale)
  return spatial_scale_;
}
inline void RoiAlignParameter::set_spatial_scale(float value) {
  set_has_spatial_scale();
  spatial_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.RoiAlignParameter.spatial_scale)
}

// -------------------------------------------------------------------

// RoiDataParameter

// optional int32 net_input_width = 1 [default = 300];
inline bool RoiDataParameter::has_net_input_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoiDataParameter::set_has_net_input_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoiDataParameter::clear_has_net_input_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoiDataParameter::clear_net_input_width() {
  net_input_width_ = 300;
  clear_has_net_input_width();
}
inline ::google::protobuf::int32 RoiDataParameter::net_input_width() const {
  // @@protoc_insertion_point(field_get:caffe.RoiDataParameter.net_input_width)
  return net_input_width_;
}
inline void RoiDataParameter::set_net_input_width(::google::protobuf::int32 value) {
  set_has_net_input_width();
  net_input_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.RoiDataParameter.net_input_width)
}

// optional int32 net_input_height = 2 [default = 300];
inline bool RoiDataParameter::has_net_input_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoiDataParameter::set_has_net_input_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoiDataParameter::clear_has_net_input_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoiDataParameter::clear_net_input_height() {
  net_input_height_ = 300;
  clear_has_net_input_height();
}
inline ::google::protobuf::int32 RoiDataParameter::net_input_height() const {
  // @@protoc_insertion_point(field_get:caffe.RoiDataParameter.net_input_height)
  return net_input_height_;
}
inline void RoiDataParameter::set_net_input_height(::google::protobuf::int32 value) {
  set_has_net_input_height();
  net_input_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.RoiDataParameter.net_input_height)
}

// -------------------------------------------------------------------

// ReshapeParameter

// optional .caffe.BlobShape shape = 1;
inline bool ReshapeParameter::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReshapeParameter::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReshapeParameter::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReshapeParameter::clear_shape() {
  if (shape_ != NULL) shape_->::caffe::BlobShape::Clear();
  clear_has_shape();
}
inline const ::caffe::BlobShape& ReshapeParameter::shape() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.shape)
  return shape_ != NULL ? *shape_ : *default_instance_->shape_;
}
inline ::caffe::BlobShape* ReshapeParameter::mutable_shape() {
  set_has_shape();
  if (shape_ == NULL) {
    shape_ = new ::caffe::BlobShape;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ReshapeParameter.shape)
  return shape_;
}
inline ::caffe::BlobShape* ReshapeParameter::release_shape() {
  // @@protoc_insertion_point(field_release:caffe.ReshapeParameter.shape)
  clear_has_shape();
  ::caffe::BlobShape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline void ReshapeParameter::set_allocated_shape(::caffe::BlobShape* shape) {
  delete shape_;
  shape_ = shape;
  if (shape) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ReshapeParameter.shape)
}

// optional int32 axis = 2 [default = 0];
inline bool ReshapeParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReshapeParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReshapeParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReshapeParameter::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::google::protobuf::int32 ReshapeParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.axis)
  return axis_;
}
inline void ReshapeParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReshapeParameter.axis)
}

// optional int32 num_axes = 3 [default = -1];
inline bool ReshapeParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReshapeParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReshapeParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReshapeParameter::clear_num_axes() {
  num_axes_ = -1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 ReshapeParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.ReshapeParameter.num_axes)
  return num_axes_;
}
inline void ReshapeParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.ReshapeParameter.num_axes)
}

// -------------------------------------------------------------------

// ROIPoolingParameter

// optional int32 pooled_h = 1 [default = 0];
inline bool ROIPoolingParameter::has_pooled_h() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ROIPoolingParameter::set_has_pooled_h() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ROIPoolingParameter::clear_has_pooled_h() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ROIPoolingParameter::clear_pooled_h() {
  pooled_h_ = 0;
  clear_has_pooled_h();
}
inline ::google::protobuf::int32 ROIPoolingParameter::pooled_h() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.pooled_h)
  return pooled_h_;
}
inline void ROIPoolingParameter::set_pooled_h(::google::protobuf::int32 value) {
  set_has_pooled_h();
  pooled_h_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.pooled_h)
}

// optional int32 pooled_w = 2 [default = 0];
inline bool ROIPoolingParameter::has_pooled_w() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ROIPoolingParameter::set_has_pooled_w() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ROIPoolingParameter::clear_has_pooled_w() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ROIPoolingParameter::clear_pooled_w() {
  pooled_w_ = 0;
  clear_has_pooled_w();
}
inline ::google::protobuf::int32 ROIPoolingParameter::pooled_w() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.pooled_w)
  return pooled_w_;
}
inline void ROIPoolingParameter::set_pooled_w(::google::protobuf::int32 value) {
  set_has_pooled_w();
  pooled_w_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.pooled_w)
}

// optional float spatial_scale = 3 [default = 1];
inline bool ROIPoolingParameter::has_spatial_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ROIPoolingParameter::set_has_spatial_scale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ROIPoolingParameter::clear_has_spatial_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ROIPoolingParameter::clear_spatial_scale() {
  spatial_scale_ = 1;
  clear_has_spatial_scale();
}
inline float ROIPoolingParameter::spatial_scale() const {
  // @@protoc_insertion_point(field_get:caffe.ROIPoolingParameter.spatial_scale)
  return spatial_scale_;
}
inline void ROIPoolingParameter::set_spatial_scale(float value) {
  set_has_spatial_scale();
  spatial_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.ROIPoolingParameter.spatial_scale)
}

// -------------------------------------------------------------------

// BoxMatchingParameter

// optional float overlap_threshold = 1 [default = 0.5];
inline bool BoxMatchingParameter::has_overlap_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoxMatchingParameter::set_has_overlap_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoxMatchingParameter::clear_has_overlap_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoxMatchingParameter::clear_overlap_threshold() {
  overlap_threshold_ = 0.5f;
  clear_has_overlap_threshold();
}
inline float BoxMatchingParameter::overlap_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.BoxMatchingParameter.overlap_threshold)
  return overlap_threshold_;
}
inline void BoxMatchingParameter::set_overlap_threshold(float value) {
  set_has_overlap_threshold();
  overlap_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.BoxMatchingParameter.overlap_threshold)
}

// optional bool use_difficult_gt = 2 [default = false];
inline bool BoxMatchingParameter::has_use_difficult_gt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BoxMatchingParameter::set_has_use_difficult_gt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BoxMatchingParameter::clear_has_use_difficult_gt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BoxMatchingParameter::clear_use_difficult_gt() {
  use_difficult_gt_ = false;
  clear_has_use_difficult_gt();
}
inline bool BoxMatchingParameter::use_difficult_gt() const {
  // @@protoc_insertion_point(field_get:caffe.BoxMatchingParameter.use_difficult_gt)
  return use_difficult_gt_;
}
inline void BoxMatchingParameter::set_use_difficult_gt(bool value) {
  set_has_use_difficult_gt();
  use_difficult_gt_ = value;
  // @@protoc_insertion_point(field_set:caffe.BoxMatchingParameter.use_difficult_gt)
}

// optional float size_threshold = 3 [default = 0.001];
inline bool BoxMatchingParameter::has_size_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BoxMatchingParameter::set_has_size_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BoxMatchingParameter::clear_has_size_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BoxMatchingParameter::clear_size_threshold() {
  size_threshold_ = 0.001f;
  clear_has_size_threshold();
}
inline float BoxMatchingParameter::size_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.BoxMatchingParameter.size_threshold)
  return size_threshold_;
}
inline void BoxMatchingParameter::set_size_threshold(float value) {
  set_has_size_threshold();
  size_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.BoxMatchingParameter.size_threshold)
}

// optional int32 top_k = 4 [default = 100];
inline bool BoxMatchingParameter::has_top_k() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BoxMatchingParameter::set_has_top_k() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BoxMatchingParameter::clear_has_top_k() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BoxMatchingParameter::clear_top_k() {
  top_k_ = 100;
  clear_has_top_k();
}
inline ::google::protobuf::int32 BoxMatchingParameter::top_k() const {
  // @@protoc_insertion_point(field_get:caffe.BoxMatchingParameter.top_k)
  return top_k_;
}
inline void BoxMatchingParameter::set_top_k(::google::protobuf::int32 value) {
  set_has_top_k();
  top_k_ = value;
  // @@protoc_insertion_point(field_set:caffe.BoxMatchingParameter.top_k)
}

// -------------------------------------------------------------------

// ScaleParameter

// optional int32 axis = 1 [default = 1];
inline bool ScaleParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScaleParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScaleParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScaleParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 ScaleParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.axis)
  return axis_;
}
inline void ScaleParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.axis)
}

// optional int32 num_axes = 2 [default = 1];
inline bool ScaleParameter::has_num_axes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScaleParameter::set_has_num_axes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScaleParameter::clear_has_num_axes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScaleParameter::clear_num_axes() {
  num_axes_ = 1;
  clear_has_num_axes();
}
inline ::google::protobuf::int32 ScaleParameter::num_axes() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.num_axes)
  return num_axes_;
}
inline void ScaleParameter::set_num_axes(::google::protobuf::int32 value) {
  set_has_num_axes();
  num_axes_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.num_axes)
}

// optional .caffe.FillerParameter filler = 3;
inline bool ScaleParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScaleParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScaleParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScaleParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
inline const ::caffe::FillerParameter& ScaleParameter::filler() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.filler)
  return filler_ != NULL ? *filler_ : *default_instance_->filler_;
}
inline ::caffe::FillerParameter* ScaleParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ScaleParameter.filler)
  return filler_;
}
inline ::caffe::FillerParameter* ScaleParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.ScaleParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline void ScaleParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ScaleParameter.filler)
}

// optional bool bias_term = 4 [default = false];
inline bool ScaleParameter::has_bias_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScaleParameter::set_has_bias_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScaleParameter::clear_has_bias_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScaleParameter::clear_bias_term() {
  bias_term_ = false;
  clear_has_bias_term();
}
inline bool ScaleParameter::bias_term() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.bias_term)
  return bias_term_;
}
inline void ScaleParameter::set_bias_term(bool value) {
  set_has_bias_term();
  bias_term_ = value;
  // @@protoc_insertion_point(field_set:caffe.ScaleParameter.bias_term)
}

// optional .caffe.FillerParameter bias_filler = 5;
inline bool ScaleParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScaleParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScaleParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScaleParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& ScaleParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.ScaleParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* ScaleParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.ScaleParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* ScaleParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.ScaleParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void ScaleParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.ScaleParameter.bias_filler)
}

// -------------------------------------------------------------------

// SigmoidParameter

// optional .caffe.SigmoidParameter.Engine engine = 1 [default = DEFAULT];
inline bool SigmoidParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SigmoidParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SigmoidParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SigmoidParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::SigmoidParameter_Engine SigmoidParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SigmoidParameter.engine)
  return static_cast< ::caffe::SigmoidParameter_Engine >(engine_);
}
inline void SigmoidParameter::set_engine(::caffe::SigmoidParameter_Engine value) {
  assert(::caffe::SigmoidParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SigmoidParameter.engine)
}

// -------------------------------------------------------------------

// SliceParameter

// optional int32 axis = 3 [default = 1];
inline bool SliceParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SliceParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SliceParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SliceParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 SliceParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.axis)
  return axis_;
}
inline void SliceParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.axis)
}

// repeated uint32 slice_point = 2;
inline int SliceParameter::slice_point_size() const {
  return slice_point_.size();
}
inline void SliceParameter::clear_slice_point() {
  slice_point_.Clear();
}
inline ::google::protobuf::uint32 SliceParameter::slice_point(int index) const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.slice_point)
  return slice_point_.Get(index);
}
inline void SliceParameter::set_slice_point(int index, ::google::protobuf::uint32 value) {
  slice_point_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.slice_point)
}
inline void SliceParameter::add_slice_point(::google::protobuf::uint32 value) {
  slice_point_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.SliceParameter.slice_point)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SliceParameter::slice_point() const {
  // @@protoc_insertion_point(field_list:caffe.SliceParameter.slice_point)
  return slice_point_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SliceParameter::mutable_slice_point() {
  // @@protoc_insertion_point(field_mutable_list:caffe.SliceParameter.slice_point)
  return &slice_point_;
}

// optional uint32 slice_dim = 1 [default = 1];
inline bool SliceParameter::has_slice_dim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SliceParameter::set_has_slice_dim() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SliceParameter::clear_has_slice_dim() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SliceParameter::clear_slice_dim() {
  slice_dim_ = 1u;
  clear_has_slice_dim();
}
inline ::google::protobuf::uint32 SliceParameter::slice_dim() const {
  // @@protoc_insertion_point(field_get:caffe.SliceParameter.slice_dim)
  return slice_dim_;
}
inline void SliceParameter::set_slice_dim(::google::protobuf::uint32 value) {
  set_has_slice_dim();
  slice_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.SliceParameter.slice_dim)
}

// -------------------------------------------------------------------

// SplitLabelParameter

// optional int32 spatial_dim = 1 [default = 147456];
inline bool SplitLabelParameter::has_spatial_dim() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SplitLabelParameter::set_has_spatial_dim() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SplitLabelParameter::clear_has_spatial_dim() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SplitLabelParameter::clear_spatial_dim() {
  spatial_dim_ = 147456;
  clear_has_spatial_dim();
}
inline ::google::protobuf::int32 SplitLabelParameter::spatial_dim() const {
  // @@protoc_insertion_point(field_get:caffe.SplitLabelParameter.spatial_dim)
  return spatial_dim_;
}
inline void SplitLabelParameter::set_spatial_dim(::google::protobuf::int32 value) {
  set_has_spatial_dim();
  spatial_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.SplitLabelParameter.spatial_dim)
}

// optional bool add_parts = 2 [default = false];
inline bool SplitLabelParameter::has_add_parts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SplitLabelParameter::set_has_add_parts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SplitLabelParameter::clear_has_add_parts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SplitLabelParameter::clear_add_parts() {
  add_parts_ = false;
  clear_has_add_parts();
}
inline bool SplitLabelParameter::add_parts() const {
  // @@protoc_insertion_point(field_get:caffe.SplitLabelParameter.add_parts)
  return add_parts_;
}
inline void SplitLabelParameter::set_add_parts(bool value) {
  set_has_add_parts();
  add_parts_ = value;
  // @@protoc_insertion_point(field_set:caffe.SplitLabelParameter.add_parts)
}

// -------------------------------------------------------------------

// SoftmaxParameter

// optional .caffe.SoftmaxParameter.Engine engine = 1 [default = DEFAULT];
inline bool SoftmaxParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoftmaxParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoftmaxParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoftmaxParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::SoftmaxParameter_Engine SoftmaxParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.engine)
  return static_cast< ::caffe::SoftmaxParameter_Engine >(engine_);
}
inline void SoftmaxParameter::set_engine(::caffe::SoftmaxParameter_Engine value) {
  assert(::caffe::SoftmaxParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.engine)
}

// optional int32 axis = 2 [default = 1];
inline bool SoftmaxParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SoftmaxParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SoftmaxParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SoftmaxParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 SoftmaxParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.SoftmaxParameter.axis)
  return axis_;
}
inline void SoftmaxParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.SoftmaxParameter.axis)
}

// -------------------------------------------------------------------

// TanHParameter

// optional .caffe.TanHParameter.Engine engine = 1 [default = DEFAULT];
inline bool TanHParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TanHParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TanHParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TanHParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::TanHParameter_Engine TanHParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.TanHParameter.engine)
  return static_cast< ::caffe::TanHParameter_Engine >(engine_);
}
inline void TanHParameter::set_engine(::caffe::TanHParameter_Engine value) {
  assert(::caffe::TanHParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.TanHParameter.engine)
}

// -------------------------------------------------------------------

// TileParameter

// optional int32 axis = 1 [default = 1];
inline bool TileParameter::has_axis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TileParameter::set_has_axis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TileParameter::clear_has_axis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TileParameter::clear_axis() {
  axis_ = 1;
  clear_has_axis();
}
inline ::google::protobuf::int32 TileParameter::axis() const {
  // @@protoc_insertion_point(field_get:caffe.TileParameter.axis)
  return axis_;
}
inline void TileParameter::set_axis(::google::protobuf::int32 value) {
  set_has_axis();
  axis_ = value;
  // @@protoc_insertion_point(field_set:caffe.TileParameter.axis)
}

// optional int32 tiles = 2;
inline bool TileParameter::has_tiles() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TileParameter::set_has_tiles() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TileParameter::clear_has_tiles() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TileParameter::clear_tiles() {
  tiles_ = 0;
  clear_has_tiles();
}
inline ::google::protobuf::int32 TileParameter::tiles() const {
  // @@protoc_insertion_point(field_get:caffe.TileParameter.tiles)
  return tiles_;
}
inline void TileParameter::set_tiles(::google::protobuf::int32 value) {
  set_has_tiles();
  tiles_ = value;
  // @@protoc_insertion_point(field_set:caffe.TileParameter.tiles)
}

// -------------------------------------------------------------------

// ThresholdParameter

// optional float threshold = 1 [default = 0];
inline bool ThresholdParameter::has_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThresholdParameter::set_has_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThresholdParameter::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThresholdParameter::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
inline float ThresholdParameter::threshold() const {
  // @@protoc_insertion_point(field_get:caffe.ThresholdParameter.threshold)
  return threshold_;
}
inline void ThresholdParameter::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.ThresholdParameter.threshold)
}

// -------------------------------------------------------------------

// VideoDataParameter

// optional .caffe.VideoDataParameter.VideoType video_type = 1 [default = WEBCAM];
inline bool VideoDataParameter::has_video_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoDataParameter::set_has_video_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoDataParameter::clear_has_video_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoDataParameter::clear_video_type() {
  video_type_ = 0;
  clear_has_video_type();
}
inline ::caffe::VideoDataParameter_VideoType VideoDataParameter::video_type() const {
  // @@protoc_insertion_point(field_get:caffe.VideoDataParameter.video_type)
  return static_cast< ::caffe::VideoDataParameter_VideoType >(video_type_);
}
inline void VideoDataParameter::set_video_type(::caffe::VideoDataParameter_VideoType value) {
  assert(::caffe::VideoDataParameter_VideoType_IsValid(value));
  set_has_video_type();
  video_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.VideoDataParameter.video_type)
}

// optional int32 device_id = 2 [default = 0];
inline bool VideoDataParameter::has_device_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoDataParameter::set_has_device_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoDataParameter::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoDataParameter::clear_device_id() {
  device_id_ = 0;
  clear_has_device_id();
}
inline ::google::protobuf::int32 VideoDataParameter::device_id() const {
  // @@protoc_insertion_point(field_get:caffe.VideoDataParameter.device_id)
  return device_id_;
}
inline void VideoDataParameter::set_device_id(::google::protobuf::int32 value) {
  set_has_device_id();
  device_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.VideoDataParameter.device_id)
}

// optional string video_file = 3;
inline bool VideoDataParameter::has_video_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoDataParameter::set_has_video_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoDataParameter::clear_has_video_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoDataParameter::clear_video_file() {
  video_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_file();
}
inline const ::std::string& VideoDataParameter::video_file() const {
  // @@protoc_insertion_point(field_get:caffe.VideoDataParameter.video_file)
  return video_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoDataParameter::set_video_file(const ::std::string& value) {
  set_has_video_file();
  video_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.VideoDataParameter.video_file)
}
inline void VideoDataParameter::set_video_file(const char* value) {
  set_has_video_file();
  video_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.VideoDataParameter.video_file)
}
inline void VideoDataParameter::set_video_file(const char* value, size_t size) {
  set_has_video_file();
  video_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.VideoDataParameter.video_file)
}
inline ::std::string* VideoDataParameter::mutable_video_file() {
  set_has_video_file();
  // @@protoc_insertion_point(field_mutable:caffe.VideoDataParameter.video_file)
  return video_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoDataParameter::release_video_file() {
  // @@protoc_insertion_point(field_release:caffe.VideoDataParameter.video_file)
  clear_has_video_file();
  return video_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoDataParameter::set_allocated_video_file(::std::string* video_file) {
  if (video_file != NULL) {
    set_has_video_file();
  } else {
    clear_has_video_file();
  }
  video_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.VideoDataParameter.video_file)
}

// optional int32 webcam_width = 4 [default = 1280];
inline bool VideoDataParameter::has_webcam_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoDataParameter::set_has_webcam_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoDataParameter::clear_has_webcam_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoDataParameter::clear_webcam_width() {
  webcam_width_ = 1280;
  clear_has_webcam_width();
}
inline ::google::protobuf::int32 VideoDataParameter::webcam_width() const {
  // @@protoc_insertion_point(field_get:caffe.VideoDataParameter.webcam_width)
  return webcam_width_;
}
inline void VideoDataParameter::set_webcam_width(::google::protobuf::int32 value) {
  set_has_webcam_width();
  webcam_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.VideoDataParameter.webcam_width)
}

// optional int32 webcam_height = 5 [default = 720];
inline bool VideoDataParameter::has_webcam_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VideoDataParameter::set_has_webcam_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VideoDataParameter::clear_has_webcam_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VideoDataParameter::clear_webcam_height() {
  webcam_height_ = 720;
  clear_has_webcam_height();
}
inline ::google::protobuf::int32 VideoDataParameter::webcam_height() const {
  // @@protoc_insertion_point(field_get:caffe.VideoDataParameter.webcam_height)
  return webcam_height_;
}
inline void VideoDataParameter::set_webcam_height(::google::protobuf::int32 value) {
  set_has_webcam_height();
  webcam_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.VideoDataParameter.webcam_height)
}

// optional int32 crop_width = 6 [default = 1280];
inline bool VideoDataParameter::has_crop_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VideoDataParameter::set_has_crop_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VideoDataParameter::clear_has_crop_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VideoDataParameter::clear_crop_width() {
  crop_width_ = 1280;
  clear_has_crop_width();
}
inline ::google::protobuf::int32 VideoDataParameter::crop_width() const {
  // @@protoc_insertion_point(field_get:caffe.VideoDataParameter.crop_width)
  return crop_width_;
}
inline void VideoDataParameter::set_crop_width(::google::protobuf::int32 value) {
  set_has_crop_width();
  crop_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.VideoDataParameter.crop_width)
}

// optional int32 crop_height = 7 [default = 720];
inline bool VideoDataParameter::has_crop_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VideoDataParameter::set_has_crop_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VideoDataParameter::clear_has_crop_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VideoDataParameter::clear_crop_height() {
  crop_height_ = 720;
  clear_has_crop_height();
}
inline ::google::protobuf::int32 VideoDataParameter::crop_height() const {
  // @@protoc_insertion_point(field_get:caffe.VideoDataParameter.crop_height)
  return crop_height_;
}
inline void VideoDataParameter::set_crop_height(::google::protobuf::int32 value) {
  set_has_crop_height();
  crop_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.VideoDataParameter.crop_height)
}

// optional float contrast_scale = 8 [default = 1];
inline bool VideoDataParameter::has_contrast_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VideoDataParameter::set_has_contrast_scale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VideoDataParameter::clear_has_contrast_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VideoDataParameter::clear_contrast_scale() {
  contrast_scale_ = 1;
  clear_has_contrast_scale();
}
inline float VideoDataParameter::contrast_scale() const {
  // @@protoc_insertion_point(field_get:caffe.VideoDataParameter.contrast_scale)
  return contrast_scale_;
}
inline void VideoDataParameter::set_contrast_scale(float value) {
  set_has_contrast_scale();
  contrast_scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.VideoDataParameter.contrast_scale)
}

// optional int32 exposure = 9 [default = 0];
inline bool VideoDataParameter::has_exposure() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VideoDataParameter::set_has_exposure() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VideoDataParameter::clear_has_exposure() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VideoDataParameter::clear_exposure() {
  exposure_ = 0;
  clear_has_exposure();
}
inline ::google::protobuf::int32 VideoDataParameter::exposure() const {
  // @@protoc_insertion_point(field_get:caffe.VideoDataParameter.exposure)
  return exposure_;
}
inline void VideoDataParameter::set_exposure(::google::protobuf::int32 value) {
  set_has_exposure();
  exposure_ = value;
  // @@protoc_insertion_point(field_set:caffe.VideoDataParameter.exposure)
}

// optional int32 medianblur_ksize = 10 [default = 3];
inline bool VideoDataParameter::has_medianblur_ksize() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VideoDataParameter::set_has_medianblur_ksize() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VideoDataParameter::clear_has_medianblur_ksize() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VideoDataParameter::clear_medianblur_ksize() {
  medianblur_ksize_ = 3;
  clear_has_medianblur_ksize();
}
inline ::google::protobuf::int32 VideoDataParameter::medianblur_ksize() const {
  // @@protoc_insertion_point(field_get:caffe.VideoDataParameter.medianblur_ksize)
  return medianblur_ksize_;
}
inline void VideoDataParameter::set_medianblur_ksize(::google::protobuf::int32 value) {
  set_has_medianblur_ksize();
  medianblur_ksize_ = value;
  // @@protoc_insertion_point(field_set:caffe.VideoDataParameter.medianblur_ksize)
}

// -------------------------------------------------------------------

// UnifiedDataParameter

// optional string xml_list = 1;
inline bool UnifiedDataParameter::has_xml_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnifiedDataParameter::set_has_xml_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnifiedDataParameter::clear_has_xml_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnifiedDataParameter::clear_xml_list() {
  xml_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_xml_list();
}
inline const ::std::string& UnifiedDataParameter::xml_list() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedDataParameter.xml_list)
  return xml_list_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnifiedDataParameter::set_xml_list(const ::std::string& value) {
  set_has_xml_list();
  xml_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.UnifiedDataParameter.xml_list)
}
inline void UnifiedDataParameter::set_xml_list(const char* value) {
  set_has_xml_list();
  xml_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.UnifiedDataParameter.xml_list)
}
inline void UnifiedDataParameter::set_xml_list(const char* value, size_t size) {
  set_has_xml_list();
  xml_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.UnifiedDataParameter.xml_list)
}
inline ::std::string* UnifiedDataParameter::mutable_xml_list() {
  set_has_xml_list();
  // @@protoc_insertion_point(field_mutable:caffe.UnifiedDataParameter.xml_list)
  return xml_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnifiedDataParameter::release_xml_list() {
  // @@protoc_insertion_point(field_release:caffe.UnifiedDataParameter.xml_list)
  clear_has_xml_list();
  return xml_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnifiedDataParameter::set_allocated_xml_list(::std::string* xml_list) {
  if (xml_list != NULL) {
    set_has_xml_list();
  } else {
    clear_has_xml_list();
  }
  xml_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xml_list);
  // @@protoc_insertion_point(field_set_allocated:caffe.UnifiedDataParameter.xml_list)
}

// optional string xml_root = 2;
inline bool UnifiedDataParameter::has_xml_root() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnifiedDataParameter::set_has_xml_root() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnifiedDataParameter::clear_has_xml_root() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnifiedDataParameter::clear_xml_root() {
  xml_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_xml_root();
}
inline const ::std::string& UnifiedDataParameter::xml_root() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedDataParameter.xml_root)
  return xml_root_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnifiedDataParameter::set_xml_root(const ::std::string& value) {
  set_has_xml_root();
  xml_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.UnifiedDataParameter.xml_root)
}
inline void UnifiedDataParameter::set_xml_root(const char* value) {
  set_has_xml_root();
  xml_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.UnifiedDataParameter.xml_root)
}
inline void UnifiedDataParameter::set_xml_root(const char* value, size_t size) {
  set_has_xml_root();
  xml_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.UnifiedDataParameter.xml_root)
}
inline ::std::string* UnifiedDataParameter::mutable_xml_root() {
  set_has_xml_root();
  // @@protoc_insertion_point(field_mutable:caffe.UnifiedDataParameter.xml_root)
  return xml_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnifiedDataParameter::release_xml_root() {
  // @@protoc_insertion_point(field_release:caffe.UnifiedDataParameter.xml_root)
  clear_has_xml_root();
  return xml_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnifiedDataParameter::set_allocated_xml_root(::std::string* xml_root) {
  if (xml_root != NULL) {
    set_has_xml_root();
  } else {
    clear_has_xml_root();
  }
  xml_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xml_root);
  // @@protoc_insertion_point(field_set_allocated:caffe.UnifiedDataParameter.xml_root)
}

// optional bool shuffle = 3 [default = true];
inline bool UnifiedDataParameter::has_shuffle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnifiedDataParameter::set_has_shuffle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnifiedDataParameter::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnifiedDataParameter::clear_shuffle() {
  shuffle_ = true;
  clear_has_shuffle();
}
inline bool UnifiedDataParameter::shuffle() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedDataParameter.shuffle)
  return shuffle_;
}
inline void UnifiedDataParameter::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedDataParameter.shuffle)
}

// optional int32 rand_skip = 4 [default = 100];
inline bool UnifiedDataParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnifiedDataParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnifiedDataParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnifiedDataParameter::clear_rand_skip() {
  rand_skip_ = 100;
  clear_has_rand_skip();
}
inline ::google::protobuf::int32 UnifiedDataParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedDataParameter.rand_skip)
  return rand_skip_;
}
inline void UnifiedDataParameter::set_rand_skip(::google::protobuf::int32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedDataParameter.rand_skip)
}

// optional int32 batch_size = 5 [default = 24];
inline bool UnifiedDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UnifiedDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UnifiedDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UnifiedDataParameter::clear_batch_size() {
  batch_size_ = 24;
  clear_has_batch_size();
}
inline ::google::protobuf::int32 UnifiedDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedDataParameter.batch_size)
  return batch_size_;
}
inline void UnifiedDataParameter::set_batch_size(::google::protobuf::int32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedDataParameter.batch_size)
}

// repeated float mean_value = 6;
inline int UnifiedDataParameter::mean_value_size() const {
  return mean_value_.size();
}
inline void UnifiedDataParameter::clear_mean_value() {
  mean_value_.Clear();
}
inline float UnifiedDataParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedDataParameter.mean_value)
  return mean_value_.Get(index);
}
inline void UnifiedDataParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.UnifiedDataParameter.mean_value)
}
inline void UnifiedDataParameter::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.UnifiedDataParameter.mean_value)
}
inline const ::google::protobuf::RepeatedField< float >&
UnifiedDataParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.UnifiedDataParameter.mean_value)
  return mean_value_;
}
inline ::google::protobuf::RepeatedField< float >*
UnifiedDataParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.UnifiedDataParameter.mean_value)
  return &mean_value_;
}

// optional bool add_parts = 7 [default = false];
inline bool UnifiedDataParameter::has_add_parts() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UnifiedDataParameter::set_has_add_parts() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UnifiedDataParameter::clear_has_add_parts() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UnifiedDataParameter::clear_add_parts() {
  add_parts_ = false;
  clear_has_add_parts();
}
inline bool UnifiedDataParameter::add_parts() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedDataParameter.add_parts)
  return add_parts_;
}
inline void UnifiedDataParameter::set_add_parts(bool value) {
  set_has_add_parts();
  add_parts_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedDataParameter.add_parts)
}

// optional string parts_xml_dir = 8;
inline bool UnifiedDataParameter::has_parts_xml_dir() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UnifiedDataParameter::set_has_parts_xml_dir() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UnifiedDataParameter::clear_has_parts_xml_dir() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UnifiedDataParameter::clear_parts_xml_dir() {
  parts_xml_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parts_xml_dir();
}
inline const ::std::string& UnifiedDataParameter::parts_xml_dir() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedDataParameter.parts_xml_dir)
  return parts_xml_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnifiedDataParameter::set_parts_xml_dir(const ::std::string& value) {
  set_has_parts_xml_dir();
  parts_xml_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.UnifiedDataParameter.parts_xml_dir)
}
inline void UnifiedDataParameter::set_parts_xml_dir(const char* value) {
  set_has_parts_xml_dir();
  parts_xml_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.UnifiedDataParameter.parts_xml_dir)
}
inline void UnifiedDataParameter::set_parts_xml_dir(const char* value, size_t size) {
  set_has_parts_xml_dir();
  parts_xml_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.UnifiedDataParameter.parts_xml_dir)
}
inline ::std::string* UnifiedDataParameter::mutable_parts_xml_dir() {
  set_has_parts_xml_dir();
  // @@protoc_insertion_point(field_mutable:caffe.UnifiedDataParameter.parts_xml_dir)
  return parts_xml_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnifiedDataParameter::release_parts_xml_dir() {
  // @@protoc_insertion_point(field_release:caffe.UnifiedDataParameter.parts_xml_dir)
  clear_has_parts_xml_dir();
  return parts_xml_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnifiedDataParameter::set_allocated_parts_xml_dir(::std::string* parts_xml_dir) {
  if (parts_xml_dir != NULL) {
    set_has_parts_xml_dir();
  } else {
    clear_has_parts_xml_dir();
  }
  parts_xml_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parts_xml_dir);
  // @@protoc_insertion_point(field_set_allocated:caffe.UnifiedDataParameter.parts_xml_dir)
}

// optional bool add_kps = 9 [default = true];
inline bool UnifiedDataParameter::has_add_kps() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UnifiedDataParameter::set_has_add_kps() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UnifiedDataParameter::clear_has_add_kps() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UnifiedDataParameter::clear_add_kps() {
  add_kps_ = true;
  clear_has_add_kps();
}
inline bool UnifiedDataParameter::add_kps() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedDataParameter.add_kps)
  return add_kps_;
}
inline void UnifiedDataParameter::set_add_kps(bool value) {
  set_has_add_kps();
  add_kps_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedDataParameter.add_kps)
}

// optional bool add_mask = 10 [default = true];
inline bool UnifiedDataParameter::has_add_mask() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UnifiedDataParameter::set_has_add_mask() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UnifiedDataParameter::clear_has_add_mask() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UnifiedDataParameter::clear_add_mask() {
  add_mask_ = true;
  clear_has_add_mask();
}
inline bool UnifiedDataParameter::add_mask() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedDataParameter.add_mask)
  return add_mask_;
}
inline void UnifiedDataParameter::set_add_mask(bool value) {
  set_has_add_mask();
  add_mask_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedDataParameter.add_mask)
}

// repeated string xml_list_multiple = 11;
inline int UnifiedDataParameter::xml_list_multiple_size() const {
  return xml_list_multiple_.size();
}
inline void UnifiedDataParameter::clear_xml_list_multiple() {
  xml_list_multiple_.Clear();
}
inline const ::std::string& UnifiedDataParameter::xml_list_multiple(int index) const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedDataParameter.xml_list_multiple)
  return xml_list_multiple_.Get(index);
}
inline ::std::string* UnifiedDataParameter::mutable_xml_list_multiple(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.UnifiedDataParameter.xml_list_multiple)
  return xml_list_multiple_.Mutable(index);
}
inline void UnifiedDataParameter::set_xml_list_multiple(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.UnifiedDataParameter.xml_list_multiple)
  xml_list_multiple_.Mutable(index)->assign(value);
}
inline void UnifiedDataParameter::set_xml_list_multiple(int index, const char* value) {
  xml_list_multiple_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.UnifiedDataParameter.xml_list_multiple)
}
inline void UnifiedDataParameter::set_xml_list_multiple(int index, const char* value, size_t size) {
  xml_list_multiple_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.UnifiedDataParameter.xml_list_multiple)
}
inline ::std::string* UnifiedDataParameter::add_xml_list_multiple() {
  // @@protoc_insertion_point(field_add_mutable:caffe.UnifiedDataParameter.xml_list_multiple)
  return xml_list_multiple_.Add();
}
inline void UnifiedDataParameter::add_xml_list_multiple(const ::std::string& value) {
  xml_list_multiple_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.UnifiedDataParameter.xml_list_multiple)
}
inline void UnifiedDataParameter::add_xml_list_multiple(const char* value) {
  xml_list_multiple_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.UnifiedDataParameter.xml_list_multiple)
}
inline void UnifiedDataParameter::add_xml_list_multiple(const char* value, size_t size) {
  xml_list_multiple_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.UnifiedDataParameter.xml_list_multiple)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UnifiedDataParameter::xml_list_multiple() const {
  // @@protoc_insertion_point(field_list:caffe.UnifiedDataParameter.xml_list_multiple)
  return xml_list_multiple_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UnifiedDataParameter::mutable_xml_list_multiple() {
  // @@protoc_insertion_point(field_mutable_list:caffe.UnifiedDataParameter.xml_list_multiple)
  return &xml_list_multiple_;
}

// repeated string xml_root_multiple = 12;
inline int UnifiedDataParameter::xml_root_multiple_size() const {
  return xml_root_multiple_.size();
}
inline void UnifiedDataParameter::clear_xml_root_multiple() {
  xml_root_multiple_.Clear();
}
inline const ::std::string& UnifiedDataParameter::xml_root_multiple(int index) const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedDataParameter.xml_root_multiple)
  return xml_root_multiple_.Get(index);
}
inline ::std::string* UnifiedDataParameter::mutable_xml_root_multiple(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.UnifiedDataParameter.xml_root_multiple)
  return xml_root_multiple_.Mutable(index);
}
inline void UnifiedDataParameter::set_xml_root_multiple(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.UnifiedDataParameter.xml_root_multiple)
  xml_root_multiple_.Mutable(index)->assign(value);
}
inline void UnifiedDataParameter::set_xml_root_multiple(int index, const char* value) {
  xml_root_multiple_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.UnifiedDataParameter.xml_root_multiple)
}
inline void UnifiedDataParameter::set_xml_root_multiple(int index, const char* value, size_t size) {
  xml_root_multiple_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.UnifiedDataParameter.xml_root_multiple)
}
inline ::std::string* UnifiedDataParameter::add_xml_root_multiple() {
  // @@protoc_insertion_point(field_add_mutable:caffe.UnifiedDataParameter.xml_root_multiple)
  return xml_root_multiple_.Add();
}
inline void UnifiedDataParameter::add_xml_root_multiple(const ::std::string& value) {
  xml_root_multiple_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.UnifiedDataParameter.xml_root_multiple)
}
inline void UnifiedDataParameter::add_xml_root_multiple(const char* value) {
  xml_root_multiple_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.UnifiedDataParameter.xml_root_multiple)
}
inline void UnifiedDataParameter::add_xml_root_multiple(const char* value, size_t size) {
  xml_root_multiple_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.UnifiedDataParameter.xml_root_multiple)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UnifiedDataParameter::xml_root_multiple() const {
  // @@protoc_insertion_point(field_list:caffe.UnifiedDataParameter.xml_root_multiple)
  return xml_root_multiple_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UnifiedDataParameter::mutable_xml_root_multiple() {
  // @@protoc_insertion_point(field_mutable_list:caffe.UnifiedDataParameter.xml_root_multiple)
  return &xml_root_multiple_;
}

// optional string hisi_data_maps = 13;
inline bool UnifiedDataParameter::has_hisi_data_maps() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UnifiedDataParameter::set_has_hisi_data_maps() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UnifiedDataParameter::clear_has_hisi_data_maps() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UnifiedDataParameter::clear_hisi_data_maps() {
  hisi_data_maps_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hisi_data_maps();
}
inline const ::std::string& UnifiedDataParameter::hisi_data_maps() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedDataParameter.hisi_data_maps)
  return hisi_data_maps_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnifiedDataParameter::set_hisi_data_maps(const ::std::string& value) {
  set_has_hisi_data_maps();
  hisi_data_maps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.UnifiedDataParameter.hisi_data_maps)
}
inline void UnifiedDataParameter::set_hisi_data_maps(const char* value) {
  set_has_hisi_data_maps();
  hisi_data_maps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.UnifiedDataParameter.hisi_data_maps)
}
inline void UnifiedDataParameter::set_hisi_data_maps(const char* value, size_t size) {
  set_has_hisi_data_maps();
  hisi_data_maps_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.UnifiedDataParameter.hisi_data_maps)
}
inline ::std::string* UnifiedDataParameter::mutable_hisi_data_maps() {
  set_has_hisi_data_maps();
  // @@protoc_insertion_point(field_mutable:caffe.UnifiedDataParameter.hisi_data_maps)
  return hisi_data_maps_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnifiedDataParameter::release_hisi_data_maps() {
  // @@protoc_insertion_point(field_release:caffe.UnifiedDataParameter.hisi_data_maps)
  clear_has_hisi_data_maps();
  return hisi_data_maps_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnifiedDataParameter::set_allocated_hisi_data_maps(::std::string* hisi_data_maps) {
  if (hisi_data_maps != NULL) {
    set_has_hisi_data_maps();
  } else {
    clear_has_hisi_data_maps();
  }
  hisi_data_maps_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hisi_data_maps);
  // @@protoc_insertion_point(field_set_allocated:caffe.UnifiedDataParameter.hisi_data_maps)
}

// optional int32 base_bindex = 14 [default = 0];
inline bool UnifiedDataParameter::has_base_bindex() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UnifiedDataParameter::set_has_base_bindex() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UnifiedDataParameter::clear_has_base_bindex() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UnifiedDataParameter::clear_base_bindex() {
  base_bindex_ = 0;
  clear_has_base_bindex();
}
inline ::google::protobuf::int32 UnifiedDataParameter::base_bindex() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedDataParameter.base_bindex)
  return base_bindex_;
}
inline void UnifiedDataParameter::set_base_bindex(::google::protobuf::int32 value) {
  set_has_base_bindex();
  base_bindex_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedDataParameter.base_bindex)
}

// optional bool flag_imginfo = 15 [default = false];
inline bool UnifiedDataParameter::has_flag_imginfo() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UnifiedDataParameter::set_has_flag_imginfo() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UnifiedDataParameter::clear_has_flag_imginfo() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UnifiedDataParameter::clear_flag_imginfo() {
  flag_imginfo_ = false;
  clear_has_flag_imginfo();
}
inline bool UnifiedDataParameter::flag_imginfo() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedDataParameter.flag_imginfo)
  return flag_imginfo_;
}
inline void UnifiedDataParameter::set_flag_imginfo(bool value) {
  set_has_flag_imginfo();
  flag_imginfo_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedDataParameter.flag_imginfo)
}

// optional bool clip_ignoregt = 16 [default = false];
inline bool UnifiedDataParameter::has_clip_ignoregt() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UnifiedDataParameter::set_has_clip_ignoregt() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UnifiedDataParameter::clear_has_clip_ignoregt() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UnifiedDataParameter::clear_clip_ignoregt() {
  clip_ignoregt_ = false;
  clear_has_clip_ignoregt();
}
inline bool UnifiedDataParameter::clip_ignoregt() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedDataParameter.clip_ignoregt)
  return clip_ignoregt_;
}
inline void UnifiedDataParameter::set_clip_ignoregt(bool value) {
  set_has_clip_ignoregt();
  clip_ignoregt_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedDataParameter.clip_ignoregt)
}

// optional bool use_torsowithhead = 17 [default = false];
inline bool UnifiedDataParameter::has_use_torsowithhead() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UnifiedDataParameter::set_has_use_torsowithhead() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UnifiedDataParameter::clear_has_use_torsowithhead() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UnifiedDataParameter::clear_use_torsowithhead() {
  use_torsowithhead_ = false;
  clear_has_use_torsowithhead();
}
inline bool UnifiedDataParameter::use_torsowithhead() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedDataParameter.use_torsowithhead)
  return use_torsowithhead_;
}
inline void UnifiedDataParameter::set_use_torsowithhead(bool value) {
  set_has_use_torsowithhead();
  use_torsowithhead_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedDataParameter.use_torsowithhead)
}

// optional int32 max_neg_num = 18 [default = 15];
inline bool UnifiedDataParameter::has_max_neg_num() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UnifiedDataParameter::set_has_max_neg_num() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UnifiedDataParameter::clear_has_max_neg_num() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UnifiedDataParameter::clear_max_neg_num() {
  max_neg_num_ = 15;
  clear_has_max_neg_num();
}
inline ::google::protobuf::int32 UnifiedDataParameter::max_neg_num() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedDataParameter.max_neg_num)
  return max_neg_num_;
}
inline void UnifiedDataParameter::set_max_neg_num(::google::protobuf::int32 value) {
  set_has_max_neg_num();
  max_neg_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedDataParameter.max_neg_num)
}

// optional int32 neg_rand_skip = 19 [default = 100];
inline bool UnifiedDataParameter::has_neg_rand_skip() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UnifiedDataParameter::set_has_neg_rand_skip() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UnifiedDataParameter::clear_has_neg_rand_skip() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UnifiedDataParameter::clear_neg_rand_skip() {
  neg_rand_skip_ = 100;
  clear_has_neg_rand_skip();
}
inline ::google::protobuf::int32 UnifiedDataParameter::neg_rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedDataParameter.neg_rand_skip)
  return neg_rand_skip_;
}
inline void UnifiedDataParameter::set_neg_rand_skip(::google::protobuf::int32 value) {
  set_has_neg_rand_skip();
  neg_rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedDataParameter.neg_rand_skip)
}

// optional int32 pos_rand_skip = 20 [default = 100];
inline bool UnifiedDataParameter::has_pos_rand_skip() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void UnifiedDataParameter::set_has_pos_rand_skip() {
  _has_bits_[0] |= 0x00080000u;
}
inline void UnifiedDataParameter::clear_has_pos_rand_skip() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void UnifiedDataParameter::clear_pos_rand_skip() {
  pos_rand_skip_ = 100;
  clear_has_pos_rand_skip();
}
inline ::google::protobuf::int32 UnifiedDataParameter::pos_rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.UnifiedDataParameter.pos_rand_skip)
  return pos_rand_skip_;
}
inline void UnifiedDataParameter::set_pos_rand_skip(::google::protobuf::int32 value) {
  set_has_pos_rand_skip();
  pos_rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.UnifiedDataParameter.pos_rand_skip)
}

// -------------------------------------------------------------------

// VideoframeParameter

// optional .caffe.VideoframeParameter.VideoType video_type = 1 [default = WEBCAM];
inline bool VideoframeParameter::has_video_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoframeParameter::set_has_video_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoframeParameter::clear_has_video_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoframeParameter::clear_video_type() {
  video_type_ = 0;
  clear_has_video_type();
}
inline ::caffe::VideoframeParameter_VideoType VideoframeParameter::video_type() const {
  // @@protoc_insertion_point(field_get:caffe.VideoframeParameter.video_type)
  return static_cast< ::caffe::VideoframeParameter_VideoType >(video_type_);
}
inline void VideoframeParameter::set_video_type(::caffe::VideoframeParameter_VideoType value) {
  assert(::caffe::VideoframeParameter_VideoType_IsValid(value));
  set_has_video_type();
  video_type_ = value;
  // @@protoc_insertion_point(field_set:caffe.VideoframeParameter.video_type)
}

// optional int32 device_id = 2 [default = 0];
inline bool VideoframeParameter::has_device_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoframeParameter::set_has_device_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoframeParameter::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoframeParameter::clear_device_id() {
  device_id_ = 0;
  clear_has_device_id();
}
inline ::google::protobuf::int32 VideoframeParameter::device_id() const {
  // @@protoc_insertion_point(field_get:caffe.VideoframeParameter.device_id)
  return device_id_;
}
inline void VideoframeParameter::set_device_id(::google::protobuf::int32 value) {
  set_has_device_id();
  device_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.VideoframeParameter.device_id)
}

// optional string video_file = 3;
inline bool VideoframeParameter::has_video_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoframeParameter::set_has_video_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoframeParameter::clear_has_video_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoframeParameter::clear_video_file() {
  video_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_file();
}
inline const ::std::string& VideoframeParameter::video_file() const {
  // @@protoc_insertion_point(field_get:caffe.VideoframeParameter.video_file)
  return video_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoframeParameter::set_video_file(const ::std::string& value) {
  set_has_video_file();
  video_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.VideoframeParameter.video_file)
}
inline void VideoframeParameter::set_video_file(const char* value) {
  set_has_video_file();
  video_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.VideoframeParameter.video_file)
}
inline void VideoframeParameter::set_video_file(const char* value, size_t size) {
  set_has_video_file();
  video_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.VideoframeParameter.video_file)
}
inline ::std::string* VideoframeParameter::mutable_video_file() {
  set_has_video_file();
  // @@protoc_insertion_point(field_mutable:caffe.VideoframeParameter.video_file)
  return video_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoframeParameter::release_video_file() {
  // @@protoc_insertion_point(field_release:caffe.VideoframeParameter.video_file)
  clear_has_video_file();
  return video_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoframeParameter::set_allocated_video_file(::std::string* video_file) {
  if (video_file != NULL) {
    set_has_video_file();
  } else {
    clear_has_video_file();
  }
  video_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.VideoframeParameter.video_file)
}

// optional int32 webcam_width = 4 [default = 1280];
inline bool VideoframeParameter::has_webcam_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoframeParameter::set_has_webcam_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoframeParameter::clear_has_webcam_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoframeParameter::clear_webcam_width() {
  webcam_width_ = 1280;
  clear_has_webcam_width();
}
inline ::google::protobuf::int32 VideoframeParameter::webcam_width() const {
  // @@protoc_insertion_point(field_get:caffe.VideoframeParameter.webcam_width)
  return webcam_width_;
}
inline void VideoframeParameter::set_webcam_width(::google::protobuf::int32 value) {
  set_has_webcam_width();
  webcam_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.VideoframeParameter.webcam_width)
}

// optional int32 webcam_height = 5 [default = 720];
inline bool VideoframeParameter::has_webcam_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VideoframeParameter::set_has_webcam_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VideoframeParameter::clear_has_webcam_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VideoframeParameter::clear_webcam_height() {
  webcam_height_ = 720;
  clear_has_webcam_height();
}
inline ::google::protobuf::int32 VideoframeParameter::webcam_height() const {
  // @@protoc_insertion_point(field_get:caffe.VideoframeParameter.webcam_height)
  return webcam_height_;
}
inline void VideoframeParameter::set_webcam_height(::google::protobuf::int32 value) {
  set_has_webcam_height();
  webcam_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.VideoframeParameter.webcam_height)
}

// optional int32 initial_frame = 6 [default = 0];
inline bool VideoframeParameter::has_initial_frame() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VideoframeParameter::set_has_initial_frame() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VideoframeParameter::clear_has_initial_frame() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VideoframeParameter::clear_initial_frame() {
  initial_frame_ = 0;
  clear_has_initial_frame();
}
inline ::google::protobuf::int32 VideoframeParameter::initial_frame() const {
  // @@protoc_insertion_point(field_get:caffe.VideoframeParameter.initial_frame)
  return initial_frame_;
}
inline void VideoframeParameter::set_initial_frame(::google::protobuf::int32 value) {
  set_has_initial_frame();
  initial_frame_ = value;
  // @@protoc_insertion_point(field_set:caffe.VideoframeParameter.initial_frame)
}

// optional bool normalize = 7 [default = true];
inline bool VideoframeParameter::has_normalize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VideoframeParameter::set_has_normalize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VideoframeParameter::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VideoframeParameter::clear_normalize() {
  normalize_ = true;
  clear_has_normalize();
}
inline bool VideoframeParameter::normalize() const {
  // @@protoc_insertion_point(field_get:caffe.VideoframeParameter.normalize)
  return normalize_;
}
inline void VideoframeParameter::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:caffe.VideoframeParameter.normalize)
}

// repeated float mean_value = 8;
inline int VideoframeParameter::mean_value_size() const {
  return mean_value_.size();
}
inline void VideoframeParameter::clear_mean_value() {
  mean_value_.Clear();
}
inline float VideoframeParameter::mean_value(int index) const {
  // @@protoc_insertion_point(field_get:caffe.VideoframeParameter.mean_value)
  return mean_value_.Get(index);
}
inline void VideoframeParameter::set_mean_value(int index, float value) {
  mean_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.VideoframeParameter.mean_value)
}
inline void VideoframeParameter::add_mean_value(float value) {
  mean_value_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.VideoframeParameter.mean_value)
}
inline const ::google::protobuf::RepeatedField< float >&
VideoframeParameter::mean_value() const {
  // @@protoc_insertion_point(field_list:caffe.VideoframeParameter.mean_value)
  return mean_value_;
}
inline ::google::protobuf::RepeatedField< float >*
VideoframeParameter::mutable_mean_value() {
  // @@protoc_insertion_point(field_mutable_list:caffe.VideoframeParameter.mean_value)
  return &mean_value_;
}

// -------------------------------------------------------------------

// VideoTrackerParameter

// optional bool is_type_video = 1 [default = true];
inline bool VideoTrackerParameter::has_is_type_video() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoTrackerParameter::set_has_is_type_video() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoTrackerParameter::clear_has_is_type_video() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoTrackerParameter::clear_is_type_video() {
  is_type_video_ = true;
  clear_has_is_type_video();
}
inline bool VideoTrackerParameter::is_type_video() const {
  // @@protoc_insertion_point(field_get:caffe.VideoTrackerParameter.is_type_video)
  return is_type_video_;
}
inline void VideoTrackerParameter::set_is_type_video(bool value) {
  set_has_is_type_video();
  is_type_video_ = value;
  // @@protoc_insertion_point(field_set:caffe.VideoTrackerParameter.is_type_video)
}

// optional string video_file = 2;
inline bool VideoTrackerParameter::has_video_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoTrackerParameter::set_has_video_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoTrackerParameter::clear_has_video_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoTrackerParameter::clear_video_file() {
  video_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_video_file();
}
inline const ::std::string& VideoTrackerParameter::video_file() const {
  // @@protoc_insertion_point(field_get:caffe.VideoTrackerParameter.video_file)
  return video_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoTrackerParameter::set_video_file(const ::std::string& value) {
  set_has_video_file();
  video_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.VideoTrackerParameter.video_file)
}
inline void VideoTrackerParameter::set_video_file(const char* value) {
  set_has_video_file();
  video_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.VideoTrackerParameter.video_file)
}
inline void VideoTrackerParameter::set_video_file(const char* value, size_t size) {
  set_has_video_file();
  video_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.VideoTrackerParameter.video_file)
}
inline ::std::string* VideoTrackerParameter::mutable_video_file() {
  set_has_video_file();
  // @@protoc_insertion_point(field_mutable:caffe.VideoTrackerParameter.video_file)
  return video_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoTrackerParameter::release_video_file() {
  // @@protoc_insertion_point(field_release:caffe.VideoTrackerParameter.video_file)
  clear_has_video_file();
  return video_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoTrackerParameter::set_allocated_video_file(::std::string* video_file) {
  if (video_file != NULL) {
    set_has_video_file();
  } else {
    clear_has_video_file();
  }
  video_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.VideoTrackerParameter.video_file)
}

// optional int32 initial_frame = 3 [default = 0];
inline bool VideoTrackerParameter::has_initial_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoTrackerParameter::set_has_initial_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoTrackerParameter::clear_has_initial_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoTrackerParameter::clear_initial_frame() {
  initial_frame_ = 0;
  clear_has_initial_frame();
}
inline ::google::protobuf::int32 VideoTrackerParameter::initial_frame() const {
  // @@protoc_insertion_point(field_get:caffe.VideoTrackerParameter.initial_frame)
  return initial_frame_;
}
inline void VideoTrackerParameter::set_initial_frame(::google::protobuf::int32 value) {
  set_has_initial_frame();
  initial_frame_ = value;
  // @@protoc_insertion_point(field_set:caffe.VideoTrackerParameter.initial_frame)
}

// optional int32 webcam_width = 4 [default = 1280];
inline bool VideoTrackerParameter::has_webcam_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoTrackerParameter::set_has_webcam_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoTrackerParameter::clear_has_webcam_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoTrackerParameter::clear_webcam_width() {
  webcam_width_ = 1280;
  clear_has_webcam_width();
}
inline ::google::protobuf::int32 VideoTrackerParameter::webcam_width() const {
  // @@protoc_insertion_point(field_get:caffe.VideoTrackerParameter.webcam_width)
  return webcam_width_;
}
inline void VideoTrackerParameter::set_webcam_width(::google::protobuf::int32 value) {
  set_has_webcam_width();
  webcam_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.VideoTrackerParameter.webcam_width)
}

// optional int32 webcam_height = 5 [default = 720];
inline bool VideoTrackerParameter::has_webcam_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VideoTrackerParameter::set_has_webcam_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VideoTrackerParameter::clear_has_webcam_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VideoTrackerParameter::clear_webcam_height() {
  webcam_height_ = 720;
  clear_has_webcam_height();
}
inline ::google::protobuf::int32 VideoTrackerParameter::webcam_height() const {
  // @@protoc_insertion_point(field_get:caffe.VideoTrackerParameter.webcam_height)
  return webcam_height_;
}
inline void VideoTrackerParameter::set_webcam_height(::google::protobuf::int32 value) {
  set_has_webcam_height();
  webcam_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.VideoTrackerParameter.webcam_height)
}

// optional int32 device_id = 6 [default = 0];
inline bool VideoTrackerParameter::has_device_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VideoTrackerParameter::set_has_device_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VideoTrackerParameter::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VideoTrackerParameter::clear_device_id() {
  device_id_ = 0;
  clear_has_device_id();
}
inline ::google::protobuf::int32 VideoTrackerParameter::device_id() const {
  // @@protoc_insertion_point(field_get:caffe.VideoTrackerParameter.device_id)
  return device_id_;
}
inline void VideoTrackerParameter::set_device_id(::google::protobuf::int32 value) {
  set_has_device_id();
  device_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.VideoTrackerParameter.device_id)
}

// optional bool save_videos = 7 [default = false];
inline bool VideoTrackerParameter::has_save_videos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VideoTrackerParameter::set_has_save_videos() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VideoTrackerParameter::clear_has_save_videos() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VideoTrackerParameter::clear_save_videos() {
  save_videos_ = false;
  clear_has_save_videos();
}
inline bool VideoTrackerParameter::save_videos() const {
  // @@protoc_insertion_point(field_get:caffe.VideoTrackerParameter.save_videos)
  return save_videos_;
}
inline void VideoTrackerParameter::set_save_videos(bool value) {
  set_has_save_videos();
  save_videos_ = value;
  // @@protoc_insertion_point(field_set:caffe.VideoTrackerParameter.save_videos)
}

// optional string output_folder = 8;
inline bool VideoTrackerParameter::has_output_folder() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VideoTrackerParameter::set_has_output_folder() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VideoTrackerParameter::clear_has_output_folder() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VideoTrackerParameter::clear_output_folder() {
  output_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_folder();
}
inline const ::std::string& VideoTrackerParameter::output_folder() const {
  // @@protoc_insertion_point(field_get:caffe.VideoTrackerParameter.output_folder)
  return output_folder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoTrackerParameter::set_output_folder(const ::std::string& value) {
  set_has_output_folder();
  output_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.VideoTrackerParameter.output_folder)
}
inline void VideoTrackerParameter::set_output_folder(const char* value) {
  set_has_output_folder();
  output_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.VideoTrackerParameter.output_folder)
}
inline void VideoTrackerParameter::set_output_folder(const char* value, size_t size) {
  set_has_output_folder();
  output_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.VideoTrackerParameter.output_folder)
}
inline ::std::string* VideoTrackerParameter::mutable_output_folder() {
  set_has_output_folder();
  // @@protoc_insertion_point(field_mutable:caffe.VideoTrackerParameter.output_folder)
  return output_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoTrackerParameter::release_output_folder() {
  // @@protoc_insertion_point(field_release:caffe.VideoTrackerParameter.output_folder)
  clear_has_output_folder();
  return output_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoTrackerParameter::set_allocated_output_folder(::std::string* output_folder) {
  if (output_folder != NULL) {
    set_has_output_folder();
  } else {
    clear_has_output_folder();
  }
  output_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.VideoTrackerParameter.output_folder)
}

// -------------------------------------------------------------------

// VisualizeposeParameter

// optional bool is_type_coco = 1 [default = true];
inline bool VisualizeposeParameter::has_is_type_coco() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VisualizeposeParameter::set_has_is_type_coco() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VisualizeposeParameter::clear_has_is_type_coco() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VisualizeposeParameter::clear_is_type_coco() {
  is_type_coco_ = true;
  clear_has_is_type_coco();
}
inline bool VisualizeposeParameter::is_type_coco() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeposeParameter.is_type_coco)
  return is_type_coco_;
}
inline void VisualizeposeParameter::set_is_type_coco(bool value) {
  set_has_is_type_coco();
  is_type_coco_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualizeposeParameter.is_type_coco)
}

// optional .caffe.VisualizeposeParameter.DrawType type = 2 [default = POSE];
inline bool VisualizeposeParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VisualizeposeParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VisualizeposeParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VisualizeposeParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::caffe::VisualizeposeParameter_DrawType VisualizeposeParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeposeParameter.type)
  return static_cast< ::caffe::VisualizeposeParameter_DrawType >(type_);
}
inline void VisualizeposeParameter::set_type(::caffe::VisualizeposeParameter_DrawType value) {
  assert(::caffe::VisualizeposeParameter_DrawType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualizeposeParameter.type)
}

// optional int32 part_id = 3 [default = 0];
inline bool VisualizeposeParameter::has_part_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VisualizeposeParameter::set_has_part_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VisualizeposeParameter::clear_has_part_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VisualizeposeParameter::clear_part_id() {
  part_id_ = 0;
  clear_has_part_id();
}
inline ::google::protobuf::int32 VisualizeposeParameter::part_id() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeposeParameter.part_id)
  return part_id_;
}
inline void VisualizeposeParameter::set_part_id(::google::protobuf::int32 value) {
  set_has_part_id();
  part_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualizeposeParameter.part_id)
}

// optional int32 from_part = 4 [default = 0];
inline bool VisualizeposeParameter::has_from_part() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VisualizeposeParameter::set_has_from_part() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VisualizeposeParameter::clear_has_from_part() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VisualizeposeParameter::clear_from_part() {
  from_part_ = 0;
  clear_has_from_part();
}
inline ::google::protobuf::int32 VisualizeposeParameter::from_part() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeposeParameter.from_part)
  return from_part_;
}
inline void VisualizeposeParameter::set_from_part(::google::protobuf::int32 value) {
  set_has_from_part();
  from_part_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualizeposeParameter.from_part)
}

// optional int32 vec_id = 12 [default = 0];
inline bool VisualizeposeParameter::has_vec_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VisualizeposeParameter::set_has_vec_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VisualizeposeParameter::clear_has_vec_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VisualizeposeParameter::clear_vec_id() {
  vec_id_ = 0;
  clear_has_vec_id();
}
inline ::google::protobuf::int32 VisualizeposeParameter::vec_id() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeposeParameter.vec_id)
  return vec_id_;
}
inline void VisualizeposeParameter::set_vec_id(::google::protobuf::int32 value) {
  set_has_vec_id();
  vec_id_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualizeposeParameter.vec_id)
}

// optional int32 from_vec = 13 [default = 0];
inline bool VisualizeposeParameter::has_from_vec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VisualizeposeParameter::set_has_from_vec() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VisualizeposeParameter::clear_has_from_vec() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VisualizeposeParameter::clear_from_vec() {
  from_vec_ = 0;
  clear_has_from_vec();
}
inline ::google::protobuf::int32 VisualizeposeParameter::from_vec() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeposeParameter.from_vec)
  return from_vec_;
}
inline void VisualizeposeParameter::set_from_vec(::google::protobuf::int32 value) {
  set_has_from_vec();
  from_vec_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualizeposeParameter.from_vec)
}

// optional float pose_threshold = 5 [default = 0.05];
inline bool VisualizeposeParameter::has_pose_threshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VisualizeposeParameter::set_has_pose_threshold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VisualizeposeParameter::clear_has_pose_threshold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VisualizeposeParameter::clear_pose_threshold() {
  pose_threshold_ = 0.05f;
  clear_has_pose_threshold();
}
inline float VisualizeposeParameter::pose_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeposeParameter.pose_threshold)
  return pose_threshold_;
}
inline void VisualizeposeParameter::set_pose_threshold(float value) {
  set_has_pose_threshold();
  pose_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualizeposeParameter.pose_threshold)
}

// optional bool write_frames = 6 [default = false];
inline bool VisualizeposeParameter::has_write_frames() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VisualizeposeParameter::set_has_write_frames() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VisualizeposeParameter::clear_has_write_frames() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VisualizeposeParameter::clear_write_frames() {
  write_frames_ = false;
  clear_has_write_frames();
}
inline bool VisualizeposeParameter::write_frames() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeposeParameter.write_frames)
  return write_frames_;
}
inline void VisualizeposeParameter::set_write_frames(bool value) {
  set_has_write_frames();
  write_frames_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualizeposeParameter.write_frames)
}

// optional string output_directory = 7 [default = ""];
inline bool VisualizeposeParameter::has_output_directory() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VisualizeposeParameter::set_has_output_directory() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VisualizeposeParameter::clear_has_output_directory() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VisualizeposeParameter::clear_output_directory() {
  output_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_directory();
}
inline const ::std::string& VisualizeposeParameter::output_directory() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeposeParameter.output_directory)
  return output_directory_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VisualizeposeParameter::set_output_directory(const ::std::string& value) {
  set_has_output_directory();
  output_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.VisualizeposeParameter.output_directory)
}
inline void VisualizeposeParameter::set_output_directory(const char* value) {
  set_has_output_directory();
  output_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.VisualizeposeParameter.output_directory)
}
inline void VisualizeposeParameter::set_output_directory(const char* value, size_t size) {
  set_has_output_directory();
  output_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.VisualizeposeParameter.output_directory)
}
inline ::std::string* VisualizeposeParameter::mutable_output_directory() {
  set_has_output_directory();
  // @@protoc_insertion_point(field_mutable:caffe.VisualizeposeParameter.output_directory)
  return output_directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VisualizeposeParameter::release_output_directory() {
  // @@protoc_insertion_point(field_release:caffe.VisualizeposeParameter.output_directory)
  clear_has_output_directory();
  return output_directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VisualizeposeParameter::set_allocated_output_directory(::std::string* output_directory) {
  if (output_directory != NULL) {
    set_has_output_directory();
  } else {
    clear_has_output_directory();
  }
  output_directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_directory);
  // @@protoc_insertion_point(field_set_allocated:caffe.VisualizeposeParameter.output_directory)
}

// optional bool visualize = 8 [default = true];
inline bool VisualizeposeParameter::has_visualize() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VisualizeposeParameter::set_has_visualize() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VisualizeposeParameter::clear_has_visualize() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VisualizeposeParameter::clear_visualize() {
  visualize_ = true;
  clear_has_visualize();
}
inline bool VisualizeposeParameter::visualize() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeposeParameter.visualize)
  return visualize_;
}
inline void VisualizeposeParameter::set_visualize(bool value) {
  set_has_visualize();
  visualize_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualizeposeParameter.visualize)
}

// optional bool draw_skeleton = 9 [default = true];
inline bool VisualizeposeParameter::has_draw_skeleton() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VisualizeposeParameter::set_has_draw_skeleton() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VisualizeposeParameter::clear_has_draw_skeleton() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VisualizeposeParameter::clear_draw_skeleton() {
  draw_skeleton_ = true;
  clear_has_draw_skeleton();
}
inline bool VisualizeposeParameter::draw_skeleton() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeposeParameter.draw_skeleton)
  return draw_skeleton_;
}
inline void VisualizeposeParameter::set_draw_skeleton(bool value) {
  set_has_draw_skeleton();
  draw_skeleton_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualizeposeParameter.draw_skeleton)
}

// optional bool print_score = 10 [default = false];
inline bool VisualizeposeParameter::has_print_score() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VisualizeposeParameter::set_has_print_score() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VisualizeposeParameter::clear_has_print_score() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VisualizeposeParameter::clear_print_score() {
  print_score_ = false;
  clear_has_print_score();
}
inline bool VisualizeposeParameter::print_score() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeposeParameter.print_score)
  return print_score_;
}
inline void VisualizeposeParameter::set_print_score(bool value) {
  set_has_print_score();
  print_score_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualizeposeParameter.print_score)
}

// -------------------------------------------------------------------

// AllocateIdParameter

// optional float match_iou_thre = 1 [default = 0.2];
inline bool AllocateIdParameter::has_match_iou_thre() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllocateIdParameter::set_has_match_iou_thre() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllocateIdParameter::clear_has_match_iou_thre() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllocateIdParameter::clear_match_iou_thre() {
  match_iou_thre_ = 0.2f;
  clear_has_match_iou_thre();
}
inline float AllocateIdParameter::match_iou_thre() const {
  // @@protoc_insertion_point(field_get:caffe.AllocateIdParameter.match_iou_thre)
  return match_iou_thre_;
}
inline void AllocateIdParameter::set_match_iou_thre(float value) {
  set_has_match_iou_thre();
  match_iou_thre_ = value;
  // @@protoc_insertion_point(field_set:caffe.AllocateIdParameter.match_iou_thre)
}

// optional float thre_for_cal_similarity = 2 [default = 0.6];
inline bool AllocateIdParameter::has_thre_for_cal_similarity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllocateIdParameter::set_has_thre_for_cal_similarity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllocateIdParameter::clear_has_thre_for_cal_similarity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllocateIdParameter::clear_thre_for_cal_similarity() {
  thre_for_cal_similarity_ = 0.6f;
  clear_has_thre_for_cal_similarity();
}
inline float AllocateIdParameter::thre_for_cal_similarity() const {
  // @@protoc_insertion_point(field_get:caffe.AllocateIdParameter.thre_for_cal_similarity)
  return thre_for_cal_similarity_;
}
inline void AllocateIdParameter::set_thre_for_cal_similarity(float value) {
  set_has_thre_for_cal_similarity();
  thre_for_cal_similarity_ = value;
  // @@protoc_insertion_point(field_set:caffe.AllocateIdParameter.thre_for_cal_similarity)
}

// optional float occu_coverage_thre = 3 [default = 0.1];
inline bool AllocateIdParameter::has_occu_coverage_thre() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllocateIdParameter::set_has_occu_coverage_thre() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllocateIdParameter::clear_has_occu_coverage_thre() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllocateIdParameter::clear_occu_coverage_thre() {
  occu_coverage_thre_ = 0.1f;
  clear_has_occu_coverage_thre();
}
inline float AllocateIdParameter::occu_coverage_thre() const {
  // @@protoc_insertion_point(field_get:caffe.AllocateIdParameter.occu_coverage_thre)
  return occu_coverage_thre_;
}
inline void AllocateIdParameter::set_occu_coverage_thre(float value) {
  set_has_occu_coverage_thre();
  occu_coverage_thre_ = value;
  // @@protoc_insertion_point(field_set:caffe.AllocateIdParameter.occu_coverage_thre)
}

// optional float scale_for_update_str = 4 [default = 0.1];
inline bool AllocateIdParameter::has_scale_for_update_str() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AllocateIdParameter::set_has_scale_for_update_str() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AllocateIdParameter::clear_has_scale_for_update_str() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AllocateIdParameter::clear_scale_for_update_str() {
  scale_for_update_str_ = 0.1f;
  clear_has_scale_for_update_str();
}
inline float AllocateIdParameter::scale_for_update_str() const {
  // @@protoc_insertion_point(field_get:caffe.AllocateIdParameter.scale_for_update_str)
  return scale_for_update_str_;
}
inline void AllocateIdParameter::set_scale_for_update_str(float value) {
  set_has_scale_for_update_str();
  scale_for_update_str_ = value;
  // @@protoc_insertion_point(field_set:caffe.AllocateIdParameter.scale_for_update_str)
}

// optional float scale_for_update_area = 5 [default = 0.5];
inline bool AllocateIdParameter::has_scale_for_update_area() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AllocateIdParameter::set_has_scale_for_update_area() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AllocateIdParameter::clear_has_scale_for_update_area() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AllocateIdParameter::clear_scale_for_update_area() {
  scale_for_update_area_ = 0.5f;
  clear_has_scale_for_update_area();
}
inline float AllocateIdParameter::scale_for_update_area() const {
  // @@protoc_insertion_point(field_get:caffe.AllocateIdParameter.scale_for_update_area)
  return scale_for_update_area_;
}
inline void AllocateIdParameter::set_scale_for_update_area(float value) {
  set_has_scale_for_update_area();
  scale_for_update_area_ = value;
  // @@protoc_insertion_point(field_set:caffe.AllocateIdParameter.scale_for_update_area)
}

// optional float split_iou_thre = 6 [default = 0.2];
inline bool AllocateIdParameter::has_split_iou_thre() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AllocateIdParameter::set_has_split_iou_thre() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AllocateIdParameter::clear_has_split_iou_thre() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AllocateIdParameter::clear_split_iou_thre() {
  split_iou_thre_ = 0.2f;
  clear_has_split_iou_thre();
}
inline float AllocateIdParameter::split_iou_thre() const {
  // @@protoc_insertion_point(field_get:caffe.AllocateIdParameter.split_iou_thre)
  return split_iou_thre_;
}
inline void AllocateIdParameter::set_split_iou_thre(float value) {
  set_has_split_iou_thre();
  split_iou_thre_ = value;
  // @@protoc_insertion_point(field_set:caffe.AllocateIdParameter.split_iou_thre)
}

// optional float split_simi_thre = 7 [default = 0.6];
inline bool AllocateIdParameter::has_split_simi_thre() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AllocateIdParameter::set_has_split_simi_thre() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AllocateIdParameter::clear_has_split_simi_thre() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AllocateIdParameter::clear_split_simi_thre() {
  split_simi_thre_ = 0.6f;
  clear_has_split_simi_thre();
}
inline float AllocateIdParameter::split_simi_thre() const {
  // @@protoc_insertion_point(field_get:caffe.AllocateIdParameter.split_simi_thre)
  return split_simi_thre_;
}
inline void AllocateIdParameter::set_split_simi_thre(float value) {
  set_has_split_simi_thre();
  split_simi_thre_ = value;
  // @@protoc_insertion_point(field_set:caffe.AllocateIdParameter.split_simi_thre)
}

// -------------------------------------------------------------------

// VisualizeBoxposeParameter

// optional .caffe.VisualizeBoxposeParameter.BPDrawType type = 1 [default = POSE];
inline bool VisualizeBoxposeParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VisualizeBoxposeParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VisualizeBoxposeParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VisualizeBoxposeParameter::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::caffe::VisualizeBoxposeParameter_BPDrawType VisualizeBoxposeParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeBoxposeParameter.type)
  return static_cast< ::caffe::VisualizeBoxposeParameter_BPDrawType >(type_);
}
inline void VisualizeBoxposeParameter::set_type(::caffe::VisualizeBoxposeParameter_BPDrawType value) {
  assert(::caffe::VisualizeBoxposeParameter_BPDrawType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualizeBoxposeParameter.type)
}

// optional float pose_threshold = 2 [default = 0.05];
inline bool VisualizeBoxposeParameter::has_pose_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VisualizeBoxposeParameter::set_has_pose_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VisualizeBoxposeParameter::clear_has_pose_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VisualizeBoxposeParameter::clear_pose_threshold() {
  pose_threshold_ = 0.05f;
  clear_has_pose_threshold();
}
inline float VisualizeBoxposeParameter::pose_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeBoxposeParameter.pose_threshold)
  return pose_threshold_;
}
inline void VisualizeBoxposeParameter::set_pose_threshold(float value) {
  set_has_pose_threshold();
  pose_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualizeBoxposeParameter.pose_threshold)
}

// optional bool write_frames = 3 [default = false];
inline bool VisualizeBoxposeParameter::has_write_frames() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VisualizeBoxposeParameter::set_has_write_frames() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VisualizeBoxposeParameter::clear_has_write_frames() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VisualizeBoxposeParameter::clear_write_frames() {
  write_frames_ = false;
  clear_has_write_frames();
}
inline bool VisualizeBoxposeParameter::write_frames() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeBoxposeParameter.write_frames)
  return write_frames_;
}
inline void VisualizeBoxposeParameter::set_write_frames(bool value) {
  set_has_write_frames();
  write_frames_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualizeBoxposeParameter.write_frames)
}

// optional string output_directory = 4 [default = ""];
inline bool VisualizeBoxposeParameter::has_output_directory() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VisualizeBoxposeParameter::set_has_output_directory() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VisualizeBoxposeParameter::clear_has_output_directory() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VisualizeBoxposeParameter::clear_output_directory() {
  output_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_directory();
}
inline const ::std::string& VisualizeBoxposeParameter::output_directory() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeBoxposeParameter.output_directory)
  return output_directory_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VisualizeBoxposeParameter::set_output_directory(const ::std::string& value) {
  set_has_output_directory();
  output_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.VisualizeBoxposeParameter.output_directory)
}
inline void VisualizeBoxposeParameter::set_output_directory(const char* value) {
  set_has_output_directory();
  output_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.VisualizeBoxposeParameter.output_directory)
}
inline void VisualizeBoxposeParameter::set_output_directory(const char* value, size_t size) {
  set_has_output_directory();
  output_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.VisualizeBoxposeParameter.output_directory)
}
inline ::std::string* VisualizeBoxposeParameter::mutable_output_directory() {
  set_has_output_directory();
  // @@protoc_insertion_point(field_mutable:caffe.VisualizeBoxposeParameter.output_directory)
  return output_directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VisualizeBoxposeParameter::release_output_directory() {
  // @@protoc_insertion_point(field_release:caffe.VisualizeBoxposeParameter.output_directory)
  clear_has_output_directory();
  return output_directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VisualizeBoxposeParameter::set_allocated_output_directory(::std::string* output_directory) {
  if (output_directory != NULL) {
    set_has_output_directory();
  } else {
    clear_has_output_directory();
  }
  output_directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_directory);
  // @@protoc_insertion_point(field_set_allocated:caffe.VisualizeBoxposeParameter.output_directory)
}

// optional bool visualize = 5 [default = true];
inline bool VisualizeBoxposeParameter::has_visualize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VisualizeBoxposeParameter::set_has_visualize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VisualizeBoxposeParameter::clear_has_visualize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VisualizeBoxposeParameter::clear_visualize() {
  visualize_ = true;
  clear_has_visualize();
}
inline bool VisualizeBoxposeParameter::visualize() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeBoxposeParameter.visualize)
  return visualize_;
}
inline void VisualizeBoxposeParameter::set_visualize(bool value) {
  set_has_visualize();
  visualize_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualizeBoxposeParameter.visualize)
}

// optional bool print_score = 6 [default = false];
inline bool VisualizeBoxposeParameter::has_print_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VisualizeBoxposeParameter::set_has_print_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VisualizeBoxposeParameter::clear_has_print_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VisualizeBoxposeParameter::clear_print_score() {
  print_score_ = false;
  clear_has_print_score();
}
inline bool VisualizeBoxposeParameter::print_score() const {
  // @@protoc_insertion_point(field_get:caffe.VisualizeBoxposeParameter.print_score)
  return print_score_;
}
inline void VisualizeBoxposeParameter::set_print_score(bool value) {
  set_has_print_score();
  print_score_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualizeBoxposeParameter.print_score)
}

// -------------------------------------------------------------------

// VisualMaskParameter

// optional float kps_threshold = 1 [default = 0.6];
inline bool VisualMaskParameter::has_kps_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VisualMaskParameter::set_has_kps_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VisualMaskParameter::clear_has_kps_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VisualMaskParameter::clear_kps_threshold() {
  kps_threshold_ = 0.6f;
  clear_has_kps_threshold();
}
inline float VisualMaskParameter::kps_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.VisualMaskParameter.kps_threshold)
  return kps_threshold_;
}
inline void VisualMaskParameter::set_kps_threshold(float value) {
  set_has_kps_threshold();
  kps_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualMaskParameter.kps_threshold)
}

// optional float mask_threshold = 2 [default = 0.5];
inline bool VisualMaskParameter::has_mask_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VisualMaskParameter::set_has_mask_threshold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VisualMaskParameter::clear_has_mask_threshold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VisualMaskParameter::clear_mask_threshold() {
  mask_threshold_ = 0.5f;
  clear_has_mask_threshold();
}
inline float VisualMaskParameter::mask_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.VisualMaskParameter.mask_threshold)
  return mask_threshold_;
}
inline void VisualMaskParameter::set_mask_threshold(float value) {
  set_has_mask_threshold();
  mask_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualMaskParameter.mask_threshold)
}

// optional bool write_frames = 3 [default = false];
inline bool VisualMaskParameter::has_write_frames() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VisualMaskParameter::set_has_write_frames() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VisualMaskParameter::clear_has_write_frames() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VisualMaskParameter::clear_write_frames() {
  write_frames_ = false;
  clear_has_write_frames();
}
inline bool VisualMaskParameter::write_frames() const {
  // @@protoc_insertion_point(field_get:caffe.VisualMaskParameter.write_frames)
  return write_frames_;
}
inline void VisualMaskParameter::set_write_frames(bool value) {
  set_has_write_frames();
  write_frames_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualMaskParameter.write_frames)
}

// optional string output_directory = 4 [default = ""];
inline bool VisualMaskParameter::has_output_directory() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VisualMaskParameter::set_has_output_directory() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VisualMaskParameter::clear_has_output_directory() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VisualMaskParameter::clear_output_directory() {
  output_directory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_directory();
}
inline const ::std::string& VisualMaskParameter::output_directory() const {
  // @@protoc_insertion_point(field_get:caffe.VisualMaskParameter.output_directory)
  return output_directory_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VisualMaskParameter::set_output_directory(const ::std::string& value) {
  set_has_output_directory();
  output_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.VisualMaskParameter.output_directory)
}
inline void VisualMaskParameter::set_output_directory(const char* value) {
  set_has_output_directory();
  output_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.VisualMaskParameter.output_directory)
}
inline void VisualMaskParameter::set_output_directory(const char* value, size_t size) {
  set_has_output_directory();
  output_directory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.VisualMaskParameter.output_directory)
}
inline ::std::string* VisualMaskParameter::mutable_output_directory() {
  set_has_output_directory();
  // @@protoc_insertion_point(field_mutable:caffe.VisualMaskParameter.output_directory)
  return output_directory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VisualMaskParameter::release_output_directory() {
  // @@protoc_insertion_point(field_release:caffe.VisualMaskParameter.output_directory)
  clear_has_output_directory();
  return output_directory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VisualMaskParameter::set_allocated_output_directory(::std::string* output_directory) {
  if (output_directory != NULL) {
    set_has_output_directory();
  } else {
    clear_has_output_directory();
  }
  output_directory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_directory);
  // @@protoc_insertion_point(field_set_allocated:caffe.VisualMaskParameter.output_directory)
}

// optional bool show_kps = 5 [default = false];
inline bool VisualMaskParameter::has_show_kps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VisualMaskParameter::set_has_show_kps() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VisualMaskParameter::clear_has_show_kps() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VisualMaskParameter::clear_show_kps() {
  show_kps_ = false;
  clear_has_show_kps();
}
inline bool VisualMaskParameter::show_kps() const {
  // @@protoc_insertion_point(field_get:caffe.VisualMaskParameter.show_kps)
  return show_kps_;
}
inline void VisualMaskParameter::set_show_kps(bool value) {
  set_has_show_kps();
  show_kps_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualMaskParameter.show_kps)
}

// optional bool show_mask = 6 [default = false];
inline bool VisualMaskParameter::has_show_mask() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VisualMaskParameter::set_has_show_mask() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VisualMaskParameter::clear_has_show_mask() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VisualMaskParameter::clear_show_mask() {
  show_mask_ = false;
  clear_has_show_mask();
}
inline bool VisualMaskParameter::show_mask() const {
  // @@protoc_insertion_point(field_get:caffe.VisualMaskParameter.show_mask)
  return show_mask_;
}
inline void VisualMaskParameter::set_show_mask(bool value) {
  set_has_show_mask();
  show_mask_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualMaskParameter.show_mask)
}

// optional bool print_score = 7 [default = false];
inline bool VisualMaskParameter::has_print_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VisualMaskParameter::set_has_print_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VisualMaskParameter::clear_has_print_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VisualMaskParameter::clear_print_score() {
  print_score_ = false;
  clear_has_print_score();
}
inline bool VisualMaskParameter::print_score() const {
  // @@protoc_insertion_point(field_get:caffe.VisualMaskParameter.print_score)
  return print_score_;
}
inline void VisualMaskParameter::set_print_score(bool value) {
  set_has_print_score();
  print_score_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualMaskParameter.print_score)
}

// optional int32 max_dis_size = 8 [default = 1000];
inline bool VisualMaskParameter::has_max_dis_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VisualMaskParameter::set_has_max_dis_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VisualMaskParameter::clear_has_max_dis_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VisualMaskParameter::clear_max_dis_size() {
  max_dis_size_ = 1000;
  clear_has_max_dis_size();
}
inline ::google::protobuf::int32 VisualMaskParameter::max_dis_size() const {
  // @@protoc_insertion_point(field_get:caffe.VisualMaskParameter.max_dis_size)
  return max_dis_size_;
}
inline void VisualMaskParameter::set_max_dis_size(::google::protobuf::int32 value) {
  set_has_max_dis_size();
  max_dis_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.VisualMaskParameter.max_dis_size)
}

// -------------------------------------------------------------------

// WindowDataParameter

// optional string source = 1;
inline bool WindowDataParameter::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WindowDataParameter::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WindowDataParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WindowDataParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& WindowDataParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.source)
}
inline void WindowDataParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.source)
}
inline void WindowDataParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.source)
}
inline ::std::string* WindowDataParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WindowDataParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.source)
}

// optional float scale = 2 [default = 1];
inline bool WindowDataParameter::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WindowDataParameter::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WindowDataParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WindowDataParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float WindowDataParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.scale)
  return scale_;
}
inline void WindowDataParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.scale)
}

// optional string mean_file = 3;
inline bool WindowDataParameter::has_mean_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WindowDataParameter::set_has_mean_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WindowDataParameter::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WindowDataParameter::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& WindowDataParameter::mean_file() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.mean_file)
  return mean_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.mean_file)
}
inline void WindowDataParameter::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.mean_file)
}
inline void WindowDataParameter::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.mean_file)
}
inline ::std::string* WindowDataParameter::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WindowDataParameter::release_mean_file() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.mean_file)
}

// optional uint32 batch_size = 4;
inline bool WindowDataParameter::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WindowDataParameter::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WindowDataParameter::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WindowDataParameter::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 WindowDataParameter::batch_size() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.batch_size)
  return batch_size_;
}
inline void WindowDataParameter::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.batch_size)
}

// optional uint32 crop_size = 5 [default = 0];
inline bool WindowDataParameter::has_crop_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WindowDataParameter::set_has_crop_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WindowDataParameter::clear_has_crop_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WindowDataParameter::clear_crop_size() {
  crop_size_ = 0u;
  clear_has_crop_size();
}
inline ::google::protobuf::uint32 WindowDataParameter::crop_size() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.crop_size)
  return crop_size_;
}
inline void WindowDataParameter::set_crop_size(::google::protobuf::uint32 value) {
  set_has_crop_size();
  crop_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.crop_size)
}

// optional bool mirror = 6 [default = false];
inline bool WindowDataParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WindowDataParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WindowDataParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WindowDataParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool WindowDataParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.mirror)
  return mirror_;
}
inline void WindowDataParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.mirror)
}

// optional float fg_threshold = 7 [default = 0.5];
inline bool WindowDataParameter::has_fg_threshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WindowDataParameter::set_has_fg_threshold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WindowDataParameter::clear_has_fg_threshold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WindowDataParameter::clear_fg_threshold() {
  fg_threshold_ = 0.5f;
  clear_has_fg_threshold();
}
inline float WindowDataParameter::fg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.fg_threshold)
  return fg_threshold_;
}
inline void WindowDataParameter::set_fg_threshold(float value) {
  set_has_fg_threshold();
  fg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.fg_threshold)
}

// optional float bg_threshold = 8 [default = 0.5];
inline bool WindowDataParameter::has_bg_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WindowDataParameter::set_has_bg_threshold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WindowDataParameter::clear_has_bg_threshold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WindowDataParameter::clear_bg_threshold() {
  bg_threshold_ = 0.5f;
  clear_has_bg_threshold();
}
inline float WindowDataParameter::bg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.bg_threshold)
  return bg_threshold_;
}
inline void WindowDataParameter::set_bg_threshold(float value) {
  set_has_bg_threshold();
  bg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.bg_threshold)
}

// optional float fg_fraction = 9 [default = 0.25];
inline bool WindowDataParameter::has_fg_fraction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WindowDataParameter::set_has_fg_fraction() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WindowDataParameter::clear_has_fg_fraction() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WindowDataParameter::clear_fg_fraction() {
  fg_fraction_ = 0.25f;
  clear_has_fg_fraction();
}
inline float WindowDataParameter::fg_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.fg_fraction)
  return fg_fraction_;
}
inline void WindowDataParameter::set_fg_fraction(float value) {
  set_has_fg_fraction();
  fg_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.fg_fraction)
}

// optional uint32 context_pad = 10 [default = 0];
inline bool WindowDataParameter::has_context_pad() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WindowDataParameter::set_has_context_pad() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WindowDataParameter::clear_has_context_pad() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WindowDataParameter::clear_context_pad() {
  context_pad_ = 0u;
  clear_has_context_pad();
}
inline ::google::protobuf::uint32 WindowDataParameter::context_pad() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.context_pad)
  return context_pad_;
}
inline void WindowDataParameter::set_context_pad(::google::protobuf::uint32 value) {
  set_has_context_pad();
  context_pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.context_pad)
}

// optional string crop_mode = 11 [default = "warp"];
inline bool WindowDataParameter::has_crop_mode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WindowDataParameter::set_has_crop_mode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WindowDataParameter::clear_has_crop_mode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WindowDataParameter::clear_crop_mode() {
  crop_mode_.ClearToDefaultNoArena(_default_crop_mode_);
  clear_has_crop_mode();
}
inline const ::std::string& WindowDataParameter::crop_mode() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.crop_mode)
  return crop_mode_.GetNoArena(_default_crop_mode_);
}
inline void WindowDataParameter::set_crop_mode(const ::std::string& value) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(_default_crop_mode_, value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.crop_mode)
}
inline void WindowDataParameter::set_crop_mode(const char* value) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(_default_crop_mode_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.crop_mode)
}
inline void WindowDataParameter::set_crop_mode(const char* value, size_t size) {
  set_has_crop_mode();
  crop_mode_.SetNoArena(_default_crop_mode_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.crop_mode)
}
inline ::std::string* WindowDataParameter::mutable_crop_mode() {
  set_has_crop_mode();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.crop_mode)
  return crop_mode_.MutableNoArena(_default_crop_mode_);
}
inline ::std::string* WindowDataParameter::release_crop_mode() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.crop_mode)
  clear_has_crop_mode();
  return crop_mode_.ReleaseNoArena(_default_crop_mode_);
}
inline void WindowDataParameter::set_allocated_crop_mode(::std::string* crop_mode) {
  if (crop_mode != NULL) {
    set_has_crop_mode();
  } else {
    clear_has_crop_mode();
  }
  crop_mode_.SetAllocatedNoArena(_default_crop_mode_, crop_mode);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.crop_mode)
}

// optional bool cache_images = 12 [default = false];
inline bool WindowDataParameter::has_cache_images() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WindowDataParameter::set_has_cache_images() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WindowDataParameter::clear_has_cache_images() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WindowDataParameter::clear_cache_images() {
  cache_images_ = false;
  clear_has_cache_images();
}
inline bool WindowDataParameter::cache_images() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.cache_images)
  return cache_images_;
}
inline void WindowDataParameter::set_cache_images(bool value) {
  set_has_cache_images();
  cache_images_ = value;
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.cache_images)
}

// optional string root_folder = 13 [default = ""];
inline bool WindowDataParameter::has_root_folder() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void WindowDataParameter::set_has_root_folder() {
  _has_bits_[0] |= 0x00001000u;
}
inline void WindowDataParameter::clear_has_root_folder() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void WindowDataParameter::clear_root_folder() {
  root_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_root_folder();
}
inline const ::std::string& WindowDataParameter::root_folder() const {
  // @@protoc_insertion_point(field_get:caffe.WindowDataParameter.root_folder)
  return root_folder_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_root_folder(const ::std::string& value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.WindowDataParameter.root_folder)
}
inline void WindowDataParameter::set_root_folder(const char* value) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.WindowDataParameter.root_folder)
}
inline void WindowDataParameter::set_root_folder(const char* value, size_t size) {
  set_has_root_folder();
  root_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.WindowDataParameter.root_folder)
}
inline ::std::string* WindowDataParameter::mutable_root_folder() {
  set_has_root_folder();
  // @@protoc_insertion_point(field_mutable:caffe.WindowDataParameter.root_folder)
  return root_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WindowDataParameter::release_root_folder() {
  // @@protoc_insertion_point(field_release:caffe.WindowDataParameter.root_folder)
  clear_has_root_folder();
  return root_folder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WindowDataParameter::set_allocated_root_folder(::std::string* root_folder) {
  if (root_folder != NULL) {
    set_has_root_folder();
  } else {
    clear_has_root_folder();
  }
  root_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_folder);
  // @@protoc_insertion_point(field_set_allocated:caffe.WindowDataParameter.root_folder)
}

// -------------------------------------------------------------------

// SPPParameter

// optional uint32 pyramid_height = 1;
inline bool SPPParameter::has_pyramid_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPPParameter::set_has_pyramid_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPPParameter::clear_has_pyramid_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPPParameter::clear_pyramid_height() {
  pyramid_height_ = 0u;
  clear_has_pyramid_height();
}
inline ::google::protobuf::uint32 SPPParameter::pyramid_height() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.pyramid_height)
  return pyramid_height_;
}
inline void SPPParameter::set_pyramid_height(::google::protobuf::uint32 value) {
  set_has_pyramid_height();
  pyramid_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.pyramid_height)
}

// optional .caffe.SPPParameter.PoolMethod pool = 2 [default = MAX];
inline bool SPPParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SPPParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SPPParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SPPParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::caffe::SPPParameter_PoolMethod SPPParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.pool)
  return static_cast< ::caffe::SPPParameter_PoolMethod >(pool_);
}
inline void SPPParameter::set_pool(::caffe::SPPParameter_PoolMethod value) {
  assert(::caffe::SPPParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.pool)
}

// optional .caffe.SPPParameter.Engine engine = 6 [default = DEFAULT];
inline bool SPPParameter::has_engine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SPPParameter::set_has_engine() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SPPParameter::clear_has_engine() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SPPParameter::clear_engine() {
  engine_ = 0;
  clear_has_engine();
}
inline ::caffe::SPPParameter_Engine SPPParameter::engine() const {
  // @@protoc_insertion_point(field_get:caffe.SPPParameter.engine)
  return static_cast< ::caffe::SPPParameter_Engine >(engine_);
}
inline void SPPParameter::set_engine(::caffe::SPPParameter_Engine value) {
  assert(::caffe::SPPParameter_Engine_IsValid(value));
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:caffe.SPPParameter.engine)
}

// -------------------------------------------------------------------

// V1LayerParameter

// repeated string bottom = 2;
inline int V1LayerParameter::bottom_size() const {
  return bottom_.size();
}
inline void V1LayerParameter::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& V1LayerParameter::bottom(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.bottom)
  return bottom_.Get(index);
}
inline ::std::string* V1LayerParameter::mutable_bottom(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.bottom)
  return bottom_.Mutable(index);
}
inline void V1LayerParameter::set_bottom(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.bottom)
  bottom_.Mutable(index)->assign(value);
}
inline void V1LayerParameter::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.bottom)
}
inline ::std::string* V1LayerParameter::add_bottom() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.bottom)
  return bottom_.Add();
}
inline void V1LayerParameter::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.bottom)
}
inline void V1LayerParameter::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.bottom)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.bottom)
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_bottom() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.bottom)
  return &bottom_;
}

// repeated string top = 3;
inline int V1LayerParameter::top_size() const {
  return top_.size();
}
inline void V1LayerParameter::clear_top() {
  top_.Clear();
}
inline const ::std::string& V1LayerParameter::top(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.top)
  return top_.Get(index);
}
inline ::std::string* V1LayerParameter::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.top)
  return top_.Mutable(index);
}
inline void V1LayerParameter::set_top(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.top)
  top_.Mutable(index)->assign(value);
}
inline void V1LayerParameter::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.top)
}
inline void V1LayerParameter::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.top)
}
inline ::std::string* V1LayerParameter::add_top() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.top)
  return top_.Add();
}
inline void V1LayerParameter::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.top)
}
inline void V1LayerParameter::add_top(const char* value) {
  top_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.top)
}
inline void V1LayerParameter::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.top)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::top() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.top)
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.top)
  return &top_;
}

// optional string name = 4;
inline bool V1LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void V1LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void V1LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void V1LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& V1LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V1LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.name)
}
inline void V1LayerParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.name)
}
inline void V1LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.name)
}
inline ::std::string* V1LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V1LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V1LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.name)
}

// repeated .caffe.NetStateRule include = 32;
inline int V1LayerParameter::include_size() const {
  return include_.size();
}
inline void V1LayerParameter::clear_include() {
  include_.Clear();
}
inline const ::caffe::NetStateRule& V1LayerParameter::include(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.include)
  return include_.Get(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::mutable_include(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.include)
  return include_.Mutable(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::add_include() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.include)
  return include_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
V1LayerParameter::mutable_include() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.include)
  return &include_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
V1LayerParameter::include() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.include)
  return include_;
}

// repeated .caffe.NetStateRule exclude = 33;
inline int V1LayerParameter::exclude_size() const {
  return exclude_.size();
}
inline void V1LayerParameter::clear_exclude() {
  exclude_.Clear();
}
inline const ::caffe::NetStateRule& V1LayerParameter::exclude(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.exclude)
  return exclude_.Get(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::mutable_exclude(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.exclude)
  return exclude_.Mutable(index);
}
inline ::caffe::NetStateRule* V1LayerParameter::add_exclude() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.exclude)
  return exclude_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >*
V1LayerParameter::mutable_exclude() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.exclude)
  return &exclude_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::NetStateRule >&
V1LayerParameter::exclude() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.exclude)
  return exclude_;
}

// optional .caffe.V1LayerParameter.LayerType type = 5;
inline bool V1LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void V1LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void V1LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void V1LayerParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::caffe::V1LayerParameter_LayerType V1LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.type)
  return static_cast< ::caffe::V1LayerParameter_LayerType >(type_);
}
inline void V1LayerParameter::set_type(::caffe::V1LayerParameter_LayerType value) {
  assert(::caffe::V1LayerParameter_LayerType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.type)
}

// repeated .caffe.BlobProto blobs = 6;
inline int V1LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void V1LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& V1LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* V1LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* V1LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blobs)
  return blobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
V1LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blobs)
  return &blobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
V1LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blobs)
  return blobs_;
}

// repeated string param = 1001;
inline int V1LayerParameter::param_size() const {
  return param_.size();
}
inline void V1LayerParameter::clear_param() {
  param_.Clear();
}
inline const ::std::string& V1LayerParameter::param(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.param)
  return param_.Get(index);
}
inline ::std::string* V1LayerParameter::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.param)
  return param_.Mutable(index);
}
inline void V1LayerParameter::set_param(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.param)
  param_.Mutable(index)->assign(value);
}
inline void V1LayerParameter::set_param(int index, const char* value) {
  param_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe.V1LayerParameter.param)
}
inline void V1LayerParameter::set_param(int index, const char* value, size_t size) {
  param_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe.V1LayerParameter.param)
}
inline ::std::string* V1LayerParameter::add_param() {
  // @@protoc_insertion_point(field_add_mutable:caffe.V1LayerParameter.param)
  return param_.Add();
}
inline void V1LayerParameter::add_param(const ::std::string& value) {
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.param)
}
inline void V1LayerParameter::add_param(const char* value) {
  param_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe.V1LayerParameter.param)
}
inline void V1LayerParameter::add_param(const char* value, size_t size) {
  param_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe.V1LayerParameter.param)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
V1LayerParameter::param() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.param)
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
V1LayerParameter::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.param)
  return &param_;
}

// repeated .caffe.V1LayerParameter.DimCheckMode blob_share_mode = 1002;
inline int V1LayerParameter::blob_share_mode_size() const {
  return blob_share_mode_.size();
}
inline void V1LayerParameter::clear_blob_share_mode() {
  blob_share_mode_.Clear();
}
inline ::caffe::V1LayerParameter_DimCheckMode V1LayerParameter::blob_share_mode(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blob_share_mode)
  return static_cast< ::caffe::V1LayerParameter_DimCheckMode >(blob_share_mode_.Get(index));
}
inline void V1LayerParameter::set_blob_share_mode(int index, ::caffe::V1LayerParameter_DimCheckMode value) {
  assert(::caffe::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.blob_share_mode)
}
inline void V1LayerParameter::add_blob_share_mode(::caffe::V1LayerParameter_DimCheckMode value) {
  assert(::caffe::V1LayerParameter_DimCheckMode_IsValid(value));
  blob_share_mode_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blob_share_mode)
}
inline const ::google::protobuf::RepeatedField<int>&
V1LayerParameter::blob_share_mode() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blob_share_mode)
  return blob_share_mode_;
}
inline ::google::protobuf::RepeatedField<int>*
V1LayerParameter::mutable_blob_share_mode() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blob_share_mode)
  return &blob_share_mode_;
}

// repeated float blobs_lr = 7;
inline int V1LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
inline void V1LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
inline float V1LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.blobs_lr)
  return blobs_lr_.Get(index);
}
inline void V1LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.blobs_lr)
}
inline void V1LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.blobs_lr)
}
inline const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.blobs_lr)
  return blobs_lr_;
}
inline ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.blobs_lr)
  return &blobs_lr_;
}

// repeated float weight_decay = 8;
inline int V1LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
inline void V1LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
inline float V1LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.weight_decay)
  return weight_decay_.Get(index);
}
inline void V1LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.weight_decay)
}
inline void V1LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.weight_decay)
}
inline const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.weight_decay)
  return weight_decay_;
}
inline ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.weight_decay)
  return &weight_decay_;
}

// repeated float loss_weight = 35;
inline int V1LayerParameter::loss_weight_size() const {
  return loss_weight_.size();
}
inline void V1LayerParameter::clear_loss_weight() {
  loss_weight_.Clear();
}
inline float V1LayerParameter::loss_weight(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.loss_weight)
  return loss_weight_.Get(index);
}
inline void V1LayerParameter::set_loss_weight(int index, float value) {
  loss_weight_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V1LayerParameter.loss_weight)
}
inline void V1LayerParameter::add_loss_weight(float value) {
  loss_weight_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V1LayerParameter.loss_weight)
}
inline const ::google::protobuf::RepeatedField< float >&
V1LayerParameter::loss_weight() const {
  // @@protoc_insertion_point(field_list:caffe.V1LayerParameter.loss_weight)
  return loss_weight_;
}
inline ::google::protobuf::RepeatedField< float >*
V1LayerParameter::mutable_loss_weight() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V1LayerParameter.loss_weight)
  return &loss_weight_;
}

// optional .caffe.AccuracyParameter accuracy_param = 27;
inline bool V1LayerParameter::has_accuracy_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void V1LayerParameter::set_has_accuracy_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void V1LayerParameter::clear_has_accuracy_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void V1LayerParameter::clear_accuracy_param() {
  if (accuracy_param_ != NULL) accuracy_param_->::caffe::AccuracyParameter::Clear();
  clear_has_accuracy_param();
}
inline const ::caffe::AccuracyParameter& V1LayerParameter::accuracy_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.accuracy_param)
  return accuracy_param_ != NULL ? *accuracy_param_ : *default_instance_->accuracy_param_;
}
inline ::caffe::AccuracyParameter* V1LayerParameter::mutable_accuracy_param() {
  set_has_accuracy_param();
  if (accuracy_param_ == NULL) {
    accuracy_param_ = new ::caffe::AccuracyParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.accuracy_param)
  return accuracy_param_;
}
inline ::caffe::AccuracyParameter* V1LayerParameter::release_accuracy_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.accuracy_param)
  clear_has_accuracy_param();
  ::caffe::AccuracyParameter* temp = accuracy_param_;
  accuracy_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_accuracy_param(::caffe::AccuracyParameter* accuracy_param) {
  delete accuracy_param_;
  accuracy_param_ = accuracy_param;
  if (accuracy_param) {
    set_has_accuracy_param();
  } else {
    clear_has_accuracy_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.accuracy_param)
}

// optional .caffe.ArgMaxParameter argmax_param = 23;
inline bool V1LayerParameter::has_argmax_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void V1LayerParameter::set_has_argmax_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void V1LayerParameter::clear_has_argmax_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void V1LayerParameter::clear_argmax_param() {
  if (argmax_param_ != NULL) argmax_param_->::caffe::ArgMaxParameter::Clear();
  clear_has_argmax_param();
}
inline const ::caffe::ArgMaxParameter& V1LayerParameter::argmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.argmax_param)
  return argmax_param_ != NULL ? *argmax_param_ : *default_instance_->argmax_param_;
}
inline ::caffe::ArgMaxParameter* V1LayerParameter::mutable_argmax_param() {
  set_has_argmax_param();
  if (argmax_param_ == NULL) {
    argmax_param_ = new ::caffe::ArgMaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.argmax_param)
  return argmax_param_;
}
inline ::caffe::ArgMaxParameter* V1LayerParameter::release_argmax_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.argmax_param)
  clear_has_argmax_param();
  ::caffe::ArgMaxParameter* temp = argmax_param_;
  argmax_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_argmax_param(::caffe::ArgMaxParameter* argmax_param) {
  delete argmax_param_;
  argmax_param_ = argmax_param;
  if (argmax_param) {
    set_has_argmax_param();
  } else {
    clear_has_argmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.argmax_param)
}

// optional .caffe.ConcatParameter concat_param = 9;
inline bool V1LayerParameter::has_concat_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void V1LayerParameter::set_has_concat_param() {
  _has_bits_[0] |= 0x00004000u;
}
inline void V1LayerParameter::clear_has_concat_param() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void V1LayerParameter::clear_concat_param() {
  if (concat_param_ != NULL) concat_param_->::caffe::ConcatParameter::Clear();
  clear_has_concat_param();
}
inline const ::caffe::ConcatParameter& V1LayerParameter::concat_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.concat_param)
  return concat_param_ != NULL ? *concat_param_ : *default_instance_->concat_param_;
}
inline ::caffe::ConcatParameter* V1LayerParameter::mutable_concat_param() {
  set_has_concat_param();
  if (concat_param_ == NULL) {
    concat_param_ = new ::caffe::ConcatParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.concat_param)
  return concat_param_;
}
inline ::caffe::ConcatParameter* V1LayerParameter::release_concat_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.concat_param)
  clear_has_concat_param();
  ::caffe::ConcatParameter* temp = concat_param_;
  concat_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_concat_param(::caffe::ConcatParameter* concat_param) {
  delete concat_param_;
  concat_param_ = concat_param;
  if (concat_param) {
    set_has_concat_param();
  } else {
    clear_has_concat_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.concat_param)
}

// optional .caffe.ContrastiveLossParameter contrastive_loss_param = 40;
inline bool V1LayerParameter::has_contrastive_loss_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void V1LayerParameter::set_has_contrastive_loss_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void V1LayerParameter::clear_has_contrastive_loss_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void V1LayerParameter::clear_contrastive_loss_param() {
  if (contrastive_loss_param_ != NULL) contrastive_loss_param_->::caffe::ContrastiveLossParameter::Clear();
  clear_has_contrastive_loss_param();
}
inline const ::caffe::ContrastiveLossParameter& V1LayerParameter::contrastive_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_ != NULL ? *contrastive_loss_param_ : *default_instance_->contrastive_loss_param_;
}
inline ::caffe::ContrastiveLossParameter* V1LayerParameter::mutable_contrastive_loss_param() {
  set_has_contrastive_loss_param();
  if (contrastive_loss_param_ == NULL) {
    contrastive_loss_param_ = new ::caffe::ContrastiveLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.contrastive_loss_param)
  return contrastive_loss_param_;
}
inline ::caffe::ContrastiveLossParameter* V1LayerParameter::release_contrastive_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.contrastive_loss_param)
  clear_has_contrastive_loss_param();
  ::caffe::ContrastiveLossParameter* temp = contrastive_loss_param_;
  contrastive_loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_contrastive_loss_param(::caffe::ContrastiveLossParameter* contrastive_loss_param) {
  delete contrastive_loss_param_;
  contrastive_loss_param_ = contrastive_loss_param;
  if (contrastive_loss_param) {
    set_has_contrastive_loss_param();
  } else {
    clear_has_contrastive_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.contrastive_loss_param)
}

// optional .caffe.ConvolutionParameter convolution_param = 10;
inline bool V1LayerParameter::has_convolution_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void V1LayerParameter::set_has_convolution_param() {
  _has_bits_[0] |= 0x00010000u;
}
inline void V1LayerParameter::clear_has_convolution_param() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void V1LayerParameter::clear_convolution_param() {
  if (convolution_param_ != NULL) convolution_param_->::caffe::ConvolutionParameter::Clear();
  clear_has_convolution_param();
}
inline const ::caffe::ConvolutionParameter& V1LayerParameter::convolution_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.convolution_param)
  return convolution_param_ != NULL ? *convolution_param_ : *default_instance_->convolution_param_;
}
inline ::caffe::ConvolutionParameter* V1LayerParameter::mutable_convolution_param() {
  set_has_convolution_param();
  if (convolution_param_ == NULL) {
    convolution_param_ = new ::caffe::ConvolutionParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.convolution_param)
  return convolution_param_;
}
inline ::caffe::ConvolutionParameter* V1LayerParameter::release_convolution_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.convolution_param)
  clear_has_convolution_param();
  ::caffe::ConvolutionParameter* temp = convolution_param_;
  convolution_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_convolution_param(::caffe::ConvolutionParameter* convolution_param) {
  delete convolution_param_;
  convolution_param_ = convolution_param;
  if (convolution_param) {
    set_has_convolution_param();
  } else {
    clear_has_convolution_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.convolution_param)
}

// optional .caffe.DataParameter data_param = 11;
inline bool V1LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void V1LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void V1LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void V1LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::caffe::DataParameter::Clear();
  clear_has_data_param();
}
inline const ::caffe::DataParameter& V1LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.data_param)
  return data_param_ != NULL ? *data_param_ : *default_instance_->data_param_;
}
inline ::caffe::DataParameter* V1LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) {
    data_param_ = new ::caffe::DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.data_param)
  return data_param_;
}
inline ::caffe::DataParameter* V1LayerParameter::release_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.data_param)
  clear_has_data_param();
  ::caffe::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_data_param(::caffe::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.data_param)
}

// optional .caffe.DropoutParameter dropout_param = 12;
inline bool V1LayerParameter::has_dropout_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void V1LayerParameter::set_has_dropout_param() {
  _has_bits_[0] |= 0x00040000u;
}
inline void V1LayerParameter::clear_has_dropout_param() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void V1LayerParameter::clear_dropout_param() {
  if (dropout_param_ != NULL) dropout_param_->::caffe::DropoutParameter::Clear();
  clear_has_dropout_param();
}
inline const ::caffe::DropoutParameter& V1LayerParameter::dropout_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.dropout_param)
  return dropout_param_ != NULL ? *dropout_param_ : *default_instance_->dropout_param_;
}
inline ::caffe::DropoutParameter* V1LayerParameter::mutable_dropout_param() {
  set_has_dropout_param();
  if (dropout_param_ == NULL) {
    dropout_param_ = new ::caffe::DropoutParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.dropout_param)
  return dropout_param_;
}
inline ::caffe::DropoutParameter* V1LayerParameter::release_dropout_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.dropout_param)
  clear_has_dropout_param();
  ::caffe::DropoutParameter* temp = dropout_param_;
  dropout_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_dropout_param(::caffe::DropoutParameter* dropout_param) {
  delete dropout_param_;
  dropout_param_ = dropout_param;
  if (dropout_param) {
    set_has_dropout_param();
  } else {
    clear_has_dropout_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.dropout_param)
}

// optional .caffe.DummyDataParameter dummy_data_param = 26;
inline bool V1LayerParameter::has_dummy_data_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void V1LayerParameter::set_has_dummy_data_param() {
  _has_bits_[0] |= 0x00080000u;
}
inline void V1LayerParameter::clear_has_dummy_data_param() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void V1LayerParameter::clear_dummy_data_param() {
  if (dummy_data_param_ != NULL) dummy_data_param_->::caffe::DummyDataParameter::Clear();
  clear_has_dummy_data_param();
}
inline const ::caffe::DummyDataParameter& V1LayerParameter::dummy_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.dummy_data_param)
  return dummy_data_param_ != NULL ? *dummy_data_param_ : *default_instance_->dummy_data_param_;
}
inline ::caffe::DummyDataParameter* V1LayerParameter::mutable_dummy_data_param() {
  set_has_dummy_data_param();
  if (dummy_data_param_ == NULL) {
    dummy_data_param_ = new ::caffe::DummyDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.dummy_data_param)
  return dummy_data_param_;
}
inline ::caffe::DummyDataParameter* V1LayerParameter::release_dummy_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.dummy_data_param)
  clear_has_dummy_data_param();
  ::caffe::DummyDataParameter* temp = dummy_data_param_;
  dummy_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_dummy_data_param(::caffe::DummyDataParameter* dummy_data_param) {
  delete dummy_data_param_;
  dummy_data_param_ = dummy_data_param;
  if (dummy_data_param) {
    set_has_dummy_data_param();
  } else {
    clear_has_dummy_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.dummy_data_param)
}

// optional .caffe.EltwiseParameter eltwise_param = 24;
inline bool V1LayerParameter::has_eltwise_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void V1LayerParameter::set_has_eltwise_param() {
  _has_bits_[0] |= 0x00100000u;
}
inline void V1LayerParameter::clear_has_eltwise_param() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void V1LayerParameter::clear_eltwise_param() {
  if (eltwise_param_ != NULL) eltwise_param_->::caffe::EltwiseParameter::Clear();
  clear_has_eltwise_param();
}
inline const ::caffe::EltwiseParameter& V1LayerParameter::eltwise_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.eltwise_param)
  return eltwise_param_ != NULL ? *eltwise_param_ : *default_instance_->eltwise_param_;
}
inline ::caffe::EltwiseParameter* V1LayerParameter::mutable_eltwise_param() {
  set_has_eltwise_param();
  if (eltwise_param_ == NULL) {
    eltwise_param_ = new ::caffe::EltwiseParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.eltwise_param)
  return eltwise_param_;
}
inline ::caffe::EltwiseParameter* V1LayerParameter::release_eltwise_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.eltwise_param)
  clear_has_eltwise_param();
  ::caffe::EltwiseParameter* temp = eltwise_param_;
  eltwise_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_eltwise_param(::caffe::EltwiseParameter* eltwise_param) {
  delete eltwise_param_;
  eltwise_param_ = eltwise_param;
  if (eltwise_param) {
    set_has_eltwise_param();
  } else {
    clear_has_eltwise_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.eltwise_param)
}

// optional .caffe.ExpParameter exp_param = 41;
inline bool V1LayerParameter::has_exp_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void V1LayerParameter::set_has_exp_param() {
  _has_bits_[0] |= 0x00200000u;
}
inline void V1LayerParameter::clear_has_exp_param() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void V1LayerParameter::clear_exp_param() {
  if (exp_param_ != NULL) exp_param_->::caffe::ExpParameter::Clear();
  clear_has_exp_param();
}
inline const ::caffe::ExpParameter& V1LayerParameter::exp_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.exp_param)
  return exp_param_ != NULL ? *exp_param_ : *default_instance_->exp_param_;
}
inline ::caffe::ExpParameter* V1LayerParameter::mutable_exp_param() {
  set_has_exp_param();
  if (exp_param_ == NULL) {
    exp_param_ = new ::caffe::ExpParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.exp_param)
  return exp_param_;
}
inline ::caffe::ExpParameter* V1LayerParameter::release_exp_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.exp_param)
  clear_has_exp_param();
  ::caffe::ExpParameter* temp = exp_param_;
  exp_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_exp_param(::caffe::ExpParameter* exp_param) {
  delete exp_param_;
  exp_param_ = exp_param;
  if (exp_param) {
    set_has_exp_param();
  } else {
    clear_has_exp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.exp_param)
}

// optional .caffe.HDF5DataParameter hdf5_data_param = 13;
inline bool V1LayerParameter::has_hdf5_data_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void V1LayerParameter::set_has_hdf5_data_param() {
  _has_bits_[0] |= 0x00400000u;
}
inline void V1LayerParameter::clear_has_hdf5_data_param() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void V1LayerParameter::clear_hdf5_data_param() {
  if (hdf5_data_param_ != NULL) hdf5_data_param_->::caffe::HDF5DataParameter::Clear();
  clear_has_hdf5_data_param();
}
inline const ::caffe::HDF5DataParameter& V1LayerParameter::hdf5_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hdf5_data_param)
  return hdf5_data_param_ != NULL ? *hdf5_data_param_ : *default_instance_->hdf5_data_param_;
}
inline ::caffe::HDF5DataParameter* V1LayerParameter::mutable_hdf5_data_param() {
  set_has_hdf5_data_param();
  if (hdf5_data_param_ == NULL) {
    hdf5_data_param_ = new ::caffe::HDF5DataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hdf5_data_param)
  return hdf5_data_param_;
}
inline ::caffe::HDF5DataParameter* V1LayerParameter::release_hdf5_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hdf5_data_param)
  clear_has_hdf5_data_param();
  ::caffe::HDF5DataParameter* temp = hdf5_data_param_;
  hdf5_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_hdf5_data_param(::caffe::HDF5DataParameter* hdf5_data_param) {
  delete hdf5_data_param_;
  hdf5_data_param_ = hdf5_data_param;
  if (hdf5_data_param) {
    set_has_hdf5_data_param();
  } else {
    clear_has_hdf5_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hdf5_data_param)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 14;
inline bool V1LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void V1LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[0] |= 0x00800000u;
}
inline void V1LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void V1LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
inline const ::caffe::HDF5OutputParameter& V1LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_ : *default_instance_->hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* V1LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* V1LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hdf5_output_param)
}

// optional .caffe.HingeLossParameter hinge_loss_param = 29;
inline bool V1LayerParameter::has_hinge_loss_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void V1LayerParameter::set_has_hinge_loss_param() {
  _has_bits_[0] |= 0x01000000u;
}
inline void V1LayerParameter::clear_has_hinge_loss_param() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void V1LayerParameter::clear_hinge_loss_param() {
  if (hinge_loss_param_ != NULL) hinge_loss_param_->::caffe::HingeLossParameter::Clear();
  clear_has_hinge_loss_param();
}
inline const ::caffe::HingeLossParameter& V1LayerParameter::hinge_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.hinge_loss_param)
  return hinge_loss_param_ != NULL ? *hinge_loss_param_ : *default_instance_->hinge_loss_param_;
}
inline ::caffe::HingeLossParameter* V1LayerParameter::mutable_hinge_loss_param() {
  set_has_hinge_loss_param();
  if (hinge_loss_param_ == NULL) {
    hinge_loss_param_ = new ::caffe::HingeLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.hinge_loss_param)
  return hinge_loss_param_;
}
inline ::caffe::HingeLossParameter* V1LayerParameter::release_hinge_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.hinge_loss_param)
  clear_has_hinge_loss_param();
  ::caffe::HingeLossParameter* temp = hinge_loss_param_;
  hinge_loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_hinge_loss_param(::caffe::HingeLossParameter* hinge_loss_param) {
  delete hinge_loss_param_;
  hinge_loss_param_ = hinge_loss_param;
  if (hinge_loss_param) {
    set_has_hinge_loss_param();
  } else {
    clear_has_hinge_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.hinge_loss_param)
}

// optional .caffe.ImageDataParameter image_data_param = 15;
inline bool V1LayerParameter::has_image_data_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void V1LayerParameter::set_has_image_data_param() {
  _has_bits_[0] |= 0x02000000u;
}
inline void V1LayerParameter::clear_has_image_data_param() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void V1LayerParameter::clear_image_data_param() {
  if (image_data_param_ != NULL) image_data_param_->::caffe::ImageDataParameter::Clear();
  clear_has_image_data_param();
}
inline const ::caffe::ImageDataParameter& V1LayerParameter::image_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.image_data_param)
  return image_data_param_ != NULL ? *image_data_param_ : *default_instance_->image_data_param_;
}
inline ::caffe::ImageDataParameter* V1LayerParameter::mutable_image_data_param() {
  set_has_image_data_param();
  if (image_data_param_ == NULL) {
    image_data_param_ = new ::caffe::ImageDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.image_data_param)
  return image_data_param_;
}
inline ::caffe::ImageDataParameter* V1LayerParameter::release_image_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.image_data_param)
  clear_has_image_data_param();
  ::caffe::ImageDataParameter* temp = image_data_param_;
  image_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_image_data_param(::caffe::ImageDataParameter* image_data_param) {
  delete image_data_param_;
  image_data_param_ = image_data_param;
  if (image_data_param) {
    set_has_image_data_param();
  } else {
    clear_has_image_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.image_data_param)
}

// optional .caffe.InfogainLossParameter infogain_loss_param = 16;
inline bool V1LayerParameter::has_infogain_loss_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void V1LayerParameter::set_has_infogain_loss_param() {
  _has_bits_[0] |= 0x04000000u;
}
inline void V1LayerParameter::clear_has_infogain_loss_param() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void V1LayerParameter::clear_infogain_loss_param() {
  if (infogain_loss_param_ != NULL) infogain_loss_param_->::caffe::InfogainLossParameter::Clear();
  clear_has_infogain_loss_param();
}
inline const ::caffe::InfogainLossParameter& V1LayerParameter::infogain_loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.infogain_loss_param)
  return infogain_loss_param_ != NULL ? *infogain_loss_param_ : *default_instance_->infogain_loss_param_;
}
inline ::caffe::InfogainLossParameter* V1LayerParameter::mutable_infogain_loss_param() {
  set_has_infogain_loss_param();
  if (infogain_loss_param_ == NULL) {
    infogain_loss_param_ = new ::caffe::InfogainLossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.infogain_loss_param)
  return infogain_loss_param_;
}
inline ::caffe::InfogainLossParameter* V1LayerParameter::release_infogain_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.infogain_loss_param)
  clear_has_infogain_loss_param();
  ::caffe::InfogainLossParameter* temp = infogain_loss_param_;
  infogain_loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_infogain_loss_param(::caffe::InfogainLossParameter* infogain_loss_param) {
  delete infogain_loss_param_;
  infogain_loss_param_ = infogain_loss_param;
  if (infogain_loss_param) {
    set_has_infogain_loss_param();
  } else {
    clear_has_infogain_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.infogain_loss_param)
}

// optional .caffe.InnerProductParameter inner_product_param = 17;
inline bool V1LayerParameter::has_inner_product_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void V1LayerParameter::set_has_inner_product_param() {
  _has_bits_[0] |= 0x08000000u;
}
inline void V1LayerParameter::clear_has_inner_product_param() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void V1LayerParameter::clear_inner_product_param() {
  if (inner_product_param_ != NULL) inner_product_param_->::caffe::InnerProductParameter::Clear();
  clear_has_inner_product_param();
}
inline const ::caffe::InnerProductParameter& V1LayerParameter::inner_product_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.inner_product_param)
  return inner_product_param_ != NULL ? *inner_product_param_ : *default_instance_->inner_product_param_;
}
inline ::caffe::InnerProductParameter* V1LayerParameter::mutable_inner_product_param() {
  set_has_inner_product_param();
  if (inner_product_param_ == NULL) {
    inner_product_param_ = new ::caffe::InnerProductParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.inner_product_param)
  return inner_product_param_;
}
inline ::caffe::InnerProductParameter* V1LayerParameter::release_inner_product_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.inner_product_param)
  clear_has_inner_product_param();
  ::caffe::InnerProductParameter* temp = inner_product_param_;
  inner_product_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_inner_product_param(::caffe::InnerProductParameter* inner_product_param) {
  delete inner_product_param_;
  inner_product_param_ = inner_product_param;
  if (inner_product_param) {
    set_has_inner_product_param();
  } else {
    clear_has_inner_product_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.inner_product_param)
}

// optional .caffe.LRNParameter lrn_param = 18;
inline bool V1LayerParameter::has_lrn_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void V1LayerParameter::set_has_lrn_param() {
  _has_bits_[0] |= 0x10000000u;
}
inline void V1LayerParameter::clear_has_lrn_param() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void V1LayerParameter::clear_lrn_param() {
  if (lrn_param_ != NULL) lrn_param_->::caffe::LRNParameter::Clear();
  clear_has_lrn_param();
}
inline const ::caffe::LRNParameter& V1LayerParameter::lrn_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.lrn_param)
  return lrn_param_ != NULL ? *lrn_param_ : *default_instance_->lrn_param_;
}
inline ::caffe::LRNParameter* V1LayerParameter::mutable_lrn_param() {
  set_has_lrn_param();
  if (lrn_param_ == NULL) {
    lrn_param_ = new ::caffe::LRNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.lrn_param)
  return lrn_param_;
}
inline ::caffe::LRNParameter* V1LayerParameter::release_lrn_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.lrn_param)
  clear_has_lrn_param();
  ::caffe::LRNParameter* temp = lrn_param_;
  lrn_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_lrn_param(::caffe::LRNParameter* lrn_param) {
  delete lrn_param_;
  lrn_param_ = lrn_param;
  if (lrn_param) {
    set_has_lrn_param();
  } else {
    clear_has_lrn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.lrn_param)
}

// optional .caffe.MemoryDataParameter memory_data_param = 22;
inline bool V1LayerParameter::has_memory_data_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void V1LayerParameter::set_has_memory_data_param() {
  _has_bits_[0] |= 0x20000000u;
}
inline void V1LayerParameter::clear_has_memory_data_param() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void V1LayerParameter::clear_memory_data_param() {
  if (memory_data_param_ != NULL) memory_data_param_->::caffe::MemoryDataParameter::Clear();
  clear_has_memory_data_param();
}
inline const ::caffe::MemoryDataParameter& V1LayerParameter::memory_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.memory_data_param)
  return memory_data_param_ != NULL ? *memory_data_param_ : *default_instance_->memory_data_param_;
}
inline ::caffe::MemoryDataParameter* V1LayerParameter::mutable_memory_data_param() {
  set_has_memory_data_param();
  if (memory_data_param_ == NULL) {
    memory_data_param_ = new ::caffe::MemoryDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.memory_data_param)
  return memory_data_param_;
}
inline ::caffe::MemoryDataParameter* V1LayerParameter::release_memory_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.memory_data_param)
  clear_has_memory_data_param();
  ::caffe::MemoryDataParameter* temp = memory_data_param_;
  memory_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_memory_data_param(::caffe::MemoryDataParameter* memory_data_param) {
  delete memory_data_param_;
  memory_data_param_ = memory_data_param;
  if (memory_data_param) {
    set_has_memory_data_param();
  } else {
    clear_has_memory_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.memory_data_param)
}

// optional .caffe.MVNParameter mvn_param = 34;
inline bool V1LayerParameter::has_mvn_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void V1LayerParameter::set_has_mvn_param() {
  _has_bits_[0] |= 0x40000000u;
}
inline void V1LayerParameter::clear_has_mvn_param() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void V1LayerParameter::clear_mvn_param() {
  if (mvn_param_ != NULL) mvn_param_->::caffe::MVNParameter::Clear();
  clear_has_mvn_param();
}
inline const ::caffe::MVNParameter& V1LayerParameter::mvn_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.mvn_param)
  return mvn_param_ != NULL ? *mvn_param_ : *default_instance_->mvn_param_;
}
inline ::caffe::MVNParameter* V1LayerParameter::mutable_mvn_param() {
  set_has_mvn_param();
  if (mvn_param_ == NULL) {
    mvn_param_ = new ::caffe::MVNParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.mvn_param)
  return mvn_param_;
}
inline ::caffe::MVNParameter* V1LayerParameter::release_mvn_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.mvn_param)
  clear_has_mvn_param();
  ::caffe::MVNParameter* temp = mvn_param_;
  mvn_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_mvn_param(::caffe::MVNParameter* mvn_param) {
  delete mvn_param_;
  mvn_param_ = mvn_param;
  if (mvn_param) {
    set_has_mvn_param();
  } else {
    clear_has_mvn_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.mvn_param)
}

// optional .caffe.PoolingParameter pooling_param = 19;
inline bool V1LayerParameter::has_pooling_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void V1LayerParameter::set_has_pooling_param() {
  _has_bits_[0] |= 0x80000000u;
}
inline void V1LayerParameter::clear_has_pooling_param() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void V1LayerParameter::clear_pooling_param() {
  if (pooling_param_ != NULL) pooling_param_->::caffe::PoolingParameter::Clear();
  clear_has_pooling_param();
}
inline const ::caffe::PoolingParameter& V1LayerParameter::pooling_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.pooling_param)
  return pooling_param_ != NULL ? *pooling_param_ : *default_instance_->pooling_param_;
}
inline ::caffe::PoolingParameter* V1LayerParameter::mutable_pooling_param() {
  set_has_pooling_param();
  if (pooling_param_ == NULL) {
    pooling_param_ = new ::caffe::PoolingParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.pooling_param)
  return pooling_param_;
}
inline ::caffe::PoolingParameter* V1LayerParameter::release_pooling_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.pooling_param)
  clear_has_pooling_param();
  ::caffe::PoolingParameter* temp = pooling_param_;
  pooling_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_pooling_param(::caffe::PoolingParameter* pooling_param) {
  delete pooling_param_;
  pooling_param_ = pooling_param;
  if (pooling_param) {
    set_has_pooling_param();
  } else {
    clear_has_pooling_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.pooling_param)
}

// optional .caffe.PowerParameter power_param = 21;
inline bool V1LayerParameter::has_power_param() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void V1LayerParameter::set_has_power_param() {
  _has_bits_[1] |= 0x00000001u;
}
inline void V1LayerParameter::clear_has_power_param() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void V1LayerParameter::clear_power_param() {
  if (power_param_ != NULL) power_param_->::caffe::PowerParameter::Clear();
  clear_has_power_param();
}
inline const ::caffe::PowerParameter& V1LayerParameter::power_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.power_param)
  return power_param_ != NULL ? *power_param_ : *default_instance_->power_param_;
}
inline ::caffe::PowerParameter* V1LayerParameter::mutable_power_param() {
  set_has_power_param();
  if (power_param_ == NULL) {
    power_param_ = new ::caffe::PowerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.power_param)
  return power_param_;
}
inline ::caffe::PowerParameter* V1LayerParameter::release_power_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.power_param)
  clear_has_power_param();
  ::caffe::PowerParameter* temp = power_param_;
  power_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_power_param(::caffe::PowerParameter* power_param) {
  delete power_param_;
  power_param_ = power_param;
  if (power_param) {
    set_has_power_param();
  } else {
    clear_has_power_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.power_param)
}

// optional .caffe.ReLUParameter relu_param = 30;
inline bool V1LayerParameter::has_relu_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void V1LayerParameter::set_has_relu_param() {
  _has_bits_[1] |= 0x00000002u;
}
inline void V1LayerParameter::clear_has_relu_param() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void V1LayerParameter::clear_relu_param() {
  if (relu_param_ != NULL) relu_param_->::caffe::ReLUParameter::Clear();
  clear_has_relu_param();
}
inline const ::caffe::ReLUParameter& V1LayerParameter::relu_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.relu_param)
  return relu_param_ != NULL ? *relu_param_ : *default_instance_->relu_param_;
}
inline ::caffe::ReLUParameter* V1LayerParameter::mutable_relu_param() {
  set_has_relu_param();
  if (relu_param_ == NULL) {
    relu_param_ = new ::caffe::ReLUParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.relu_param)
  return relu_param_;
}
inline ::caffe::ReLUParameter* V1LayerParameter::release_relu_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.relu_param)
  clear_has_relu_param();
  ::caffe::ReLUParameter* temp = relu_param_;
  relu_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_relu_param(::caffe::ReLUParameter* relu_param) {
  delete relu_param_;
  relu_param_ = relu_param;
  if (relu_param) {
    set_has_relu_param();
  } else {
    clear_has_relu_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.relu_param)
}

// optional .caffe.SigmoidParameter sigmoid_param = 38;
inline bool V1LayerParameter::has_sigmoid_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void V1LayerParameter::set_has_sigmoid_param() {
  _has_bits_[1] |= 0x00000004u;
}
inline void V1LayerParameter::clear_has_sigmoid_param() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void V1LayerParameter::clear_sigmoid_param() {
  if (sigmoid_param_ != NULL) sigmoid_param_->::caffe::SigmoidParameter::Clear();
  clear_has_sigmoid_param();
}
inline const ::caffe::SigmoidParameter& V1LayerParameter::sigmoid_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.sigmoid_param)
  return sigmoid_param_ != NULL ? *sigmoid_param_ : *default_instance_->sigmoid_param_;
}
inline ::caffe::SigmoidParameter* V1LayerParameter::mutable_sigmoid_param() {
  set_has_sigmoid_param();
  if (sigmoid_param_ == NULL) {
    sigmoid_param_ = new ::caffe::SigmoidParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.sigmoid_param)
  return sigmoid_param_;
}
inline ::caffe::SigmoidParameter* V1LayerParameter::release_sigmoid_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.sigmoid_param)
  clear_has_sigmoid_param();
  ::caffe::SigmoidParameter* temp = sigmoid_param_;
  sigmoid_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_sigmoid_param(::caffe::SigmoidParameter* sigmoid_param) {
  delete sigmoid_param_;
  sigmoid_param_ = sigmoid_param;
  if (sigmoid_param) {
    set_has_sigmoid_param();
  } else {
    clear_has_sigmoid_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.sigmoid_param)
}

// optional .caffe.SoftmaxParameter softmax_param = 39;
inline bool V1LayerParameter::has_softmax_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void V1LayerParameter::set_has_softmax_param() {
  _has_bits_[1] |= 0x00000008u;
}
inline void V1LayerParameter::clear_has_softmax_param() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void V1LayerParameter::clear_softmax_param() {
  if (softmax_param_ != NULL) softmax_param_->::caffe::SoftmaxParameter::Clear();
  clear_has_softmax_param();
}
inline const ::caffe::SoftmaxParameter& V1LayerParameter::softmax_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.softmax_param)
  return softmax_param_ != NULL ? *softmax_param_ : *default_instance_->softmax_param_;
}
inline ::caffe::SoftmaxParameter* V1LayerParameter::mutable_softmax_param() {
  set_has_softmax_param();
  if (softmax_param_ == NULL) {
    softmax_param_ = new ::caffe::SoftmaxParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.softmax_param)
  return softmax_param_;
}
inline ::caffe::SoftmaxParameter* V1LayerParameter::release_softmax_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.softmax_param)
  clear_has_softmax_param();
  ::caffe::SoftmaxParameter* temp = softmax_param_;
  softmax_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_softmax_param(::caffe::SoftmaxParameter* softmax_param) {
  delete softmax_param_;
  softmax_param_ = softmax_param;
  if (softmax_param) {
    set_has_softmax_param();
  } else {
    clear_has_softmax_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.softmax_param)
}

// optional .caffe.SliceParameter slice_param = 31;
inline bool V1LayerParameter::has_slice_param() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void V1LayerParameter::set_has_slice_param() {
  _has_bits_[1] |= 0x00000010u;
}
inline void V1LayerParameter::clear_has_slice_param() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void V1LayerParameter::clear_slice_param() {
  if (slice_param_ != NULL) slice_param_->::caffe::SliceParameter::Clear();
  clear_has_slice_param();
}
inline const ::caffe::SliceParameter& V1LayerParameter::slice_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.slice_param)
  return slice_param_ != NULL ? *slice_param_ : *default_instance_->slice_param_;
}
inline ::caffe::SliceParameter* V1LayerParameter::mutable_slice_param() {
  set_has_slice_param();
  if (slice_param_ == NULL) {
    slice_param_ = new ::caffe::SliceParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.slice_param)
  return slice_param_;
}
inline ::caffe::SliceParameter* V1LayerParameter::release_slice_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.slice_param)
  clear_has_slice_param();
  ::caffe::SliceParameter* temp = slice_param_;
  slice_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_slice_param(::caffe::SliceParameter* slice_param) {
  delete slice_param_;
  slice_param_ = slice_param;
  if (slice_param) {
    set_has_slice_param();
  } else {
    clear_has_slice_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.slice_param)
}

// optional .caffe.TanHParameter tanh_param = 37;
inline bool V1LayerParameter::has_tanh_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void V1LayerParameter::set_has_tanh_param() {
  _has_bits_[1] |= 0x00000020u;
}
inline void V1LayerParameter::clear_has_tanh_param() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void V1LayerParameter::clear_tanh_param() {
  if (tanh_param_ != NULL) tanh_param_->::caffe::TanHParameter::Clear();
  clear_has_tanh_param();
}
inline const ::caffe::TanHParameter& V1LayerParameter::tanh_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.tanh_param)
  return tanh_param_ != NULL ? *tanh_param_ : *default_instance_->tanh_param_;
}
inline ::caffe::TanHParameter* V1LayerParameter::mutable_tanh_param() {
  set_has_tanh_param();
  if (tanh_param_ == NULL) {
    tanh_param_ = new ::caffe::TanHParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.tanh_param)
  return tanh_param_;
}
inline ::caffe::TanHParameter* V1LayerParameter::release_tanh_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.tanh_param)
  clear_has_tanh_param();
  ::caffe::TanHParameter* temp = tanh_param_;
  tanh_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_tanh_param(::caffe::TanHParameter* tanh_param) {
  delete tanh_param_;
  tanh_param_ = tanh_param;
  if (tanh_param) {
    set_has_tanh_param();
  } else {
    clear_has_tanh_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.tanh_param)
}

// optional .caffe.ThresholdParameter threshold_param = 25;
inline bool V1LayerParameter::has_threshold_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void V1LayerParameter::set_has_threshold_param() {
  _has_bits_[1] |= 0x00000040u;
}
inline void V1LayerParameter::clear_has_threshold_param() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void V1LayerParameter::clear_threshold_param() {
  if (threshold_param_ != NULL) threshold_param_->::caffe::ThresholdParameter::Clear();
  clear_has_threshold_param();
}
inline const ::caffe::ThresholdParameter& V1LayerParameter::threshold_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.threshold_param)
  return threshold_param_ != NULL ? *threshold_param_ : *default_instance_->threshold_param_;
}
inline ::caffe::ThresholdParameter* V1LayerParameter::mutable_threshold_param() {
  set_has_threshold_param();
  if (threshold_param_ == NULL) {
    threshold_param_ = new ::caffe::ThresholdParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.threshold_param)
  return threshold_param_;
}
inline ::caffe::ThresholdParameter* V1LayerParameter::release_threshold_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.threshold_param)
  clear_has_threshold_param();
  ::caffe::ThresholdParameter* temp = threshold_param_;
  threshold_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_threshold_param(::caffe::ThresholdParameter* threshold_param) {
  delete threshold_param_;
  threshold_param_ = threshold_param;
  if (threshold_param) {
    set_has_threshold_param();
  } else {
    clear_has_threshold_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.threshold_param)
}

// optional .caffe.WindowDataParameter window_data_param = 20;
inline bool V1LayerParameter::has_window_data_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void V1LayerParameter::set_has_window_data_param() {
  _has_bits_[1] |= 0x00000080u;
}
inline void V1LayerParameter::clear_has_window_data_param() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void V1LayerParameter::clear_window_data_param() {
  if (window_data_param_ != NULL) window_data_param_->::caffe::WindowDataParameter::Clear();
  clear_has_window_data_param();
}
inline const ::caffe::WindowDataParameter& V1LayerParameter::window_data_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.window_data_param)
  return window_data_param_ != NULL ? *window_data_param_ : *default_instance_->window_data_param_;
}
inline ::caffe::WindowDataParameter* V1LayerParameter::mutable_window_data_param() {
  set_has_window_data_param();
  if (window_data_param_ == NULL) {
    window_data_param_ = new ::caffe::WindowDataParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.window_data_param)
  return window_data_param_;
}
inline ::caffe::WindowDataParameter* V1LayerParameter::release_window_data_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.window_data_param)
  clear_has_window_data_param();
  ::caffe::WindowDataParameter* temp = window_data_param_;
  window_data_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_window_data_param(::caffe::WindowDataParameter* window_data_param) {
  delete window_data_param_;
  window_data_param_ = window_data_param;
  if (window_data_param) {
    set_has_window_data_param();
  } else {
    clear_has_window_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.window_data_param)
}

// optional .caffe.TransformationParameter transform_param = 36;
inline bool V1LayerParameter::has_transform_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void V1LayerParameter::set_has_transform_param() {
  _has_bits_[1] |= 0x00000100u;
}
inline void V1LayerParameter::clear_has_transform_param() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void V1LayerParameter::clear_transform_param() {
  if (transform_param_ != NULL) transform_param_->::caffe::TransformationParameter::Clear();
  clear_has_transform_param();
}
inline const ::caffe::TransformationParameter& V1LayerParameter::transform_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.transform_param)
  return transform_param_ != NULL ? *transform_param_ : *default_instance_->transform_param_;
}
inline ::caffe::TransformationParameter* V1LayerParameter::mutable_transform_param() {
  set_has_transform_param();
  if (transform_param_ == NULL) {
    transform_param_ = new ::caffe::TransformationParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.transform_param)
  return transform_param_;
}
inline ::caffe::TransformationParameter* V1LayerParameter::release_transform_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.transform_param)
  clear_has_transform_param();
  ::caffe::TransformationParameter* temp = transform_param_;
  transform_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_transform_param(::caffe::TransformationParameter* transform_param) {
  delete transform_param_;
  transform_param_ = transform_param;
  if (transform_param) {
    set_has_transform_param();
  } else {
    clear_has_transform_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.transform_param)
}

// optional .caffe.LossParameter loss_param = 42;
inline bool V1LayerParameter::has_loss_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void V1LayerParameter::set_has_loss_param() {
  _has_bits_[1] |= 0x00000200u;
}
inline void V1LayerParameter::clear_has_loss_param() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void V1LayerParameter::clear_loss_param() {
  if (loss_param_ != NULL) loss_param_->::caffe::LossParameter::Clear();
  clear_has_loss_param();
}
inline const ::caffe::LossParameter& V1LayerParameter::loss_param() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.loss_param)
  return loss_param_ != NULL ? *loss_param_ : *default_instance_->loss_param_;
}
inline ::caffe::LossParameter* V1LayerParameter::mutable_loss_param() {
  set_has_loss_param();
  if (loss_param_ == NULL) {
    loss_param_ = new ::caffe::LossParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.loss_param)
  return loss_param_;
}
inline ::caffe::LossParameter* V1LayerParameter::release_loss_param() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.loss_param)
  clear_has_loss_param();
  ::caffe::LossParameter* temp = loss_param_;
  loss_param_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_loss_param(::caffe::LossParameter* loss_param) {
  delete loss_param_;
  loss_param_ = loss_param;
  if (loss_param) {
    set_has_loss_param();
  } else {
    clear_has_loss_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.loss_param)
}

// optional .caffe.V0LayerParameter layer = 1;
inline bool V1LayerParameter::has_layer() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void V1LayerParameter::set_has_layer() {
  _has_bits_[1] |= 0x00000400u;
}
inline void V1LayerParameter::clear_has_layer() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void V1LayerParameter::clear_layer() {
  if (layer_ != NULL) layer_->::caffe::V0LayerParameter::Clear();
  clear_has_layer();
}
inline const ::caffe::V0LayerParameter& V1LayerParameter::layer() const {
  // @@protoc_insertion_point(field_get:caffe.V1LayerParameter.layer)
  return layer_ != NULL ? *layer_ : *default_instance_->layer_;
}
inline ::caffe::V0LayerParameter* V1LayerParameter::mutable_layer() {
  set_has_layer();
  if (layer_ == NULL) {
    layer_ = new ::caffe::V0LayerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V1LayerParameter.layer)
  return layer_;
}
inline ::caffe::V0LayerParameter* V1LayerParameter::release_layer() {
  // @@protoc_insertion_point(field_release:caffe.V1LayerParameter.layer)
  clear_has_layer();
  ::caffe::V0LayerParameter* temp = layer_;
  layer_ = NULL;
  return temp;
}
inline void V1LayerParameter::set_allocated_layer(::caffe::V0LayerParameter* layer) {
  delete layer_;
  layer_ = layer;
  if (layer) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V1LayerParameter.layer)
}

// -------------------------------------------------------------------

// V0LayerParameter

// optional string name = 1;
inline bool V0LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void V0LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void V0LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void V0LayerParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& V0LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.name)
}
inline void V0LayerParameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.name)
}
inline void V0LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.name)
}
inline ::std::string* V0LayerParameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V0LayerParameter::release_name() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.name)
}

// optional string type = 2;
inline bool V0LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void V0LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void V0LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void V0LayerParameter::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& V0LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.type)
}
inline void V0LayerParameter::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.type)
}
inline void V0LayerParameter::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.type)
}
inline ::std::string* V0LayerParameter::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V0LayerParameter::release_type() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.type)
}

// optional uint32 num_output = 3;
inline bool V0LayerParameter::has_num_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void V0LayerParameter::set_has_num_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void V0LayerParameter::clear_has_num_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void V0LayerParameter::clear_num_output() {
  num_output_ = 0u;
  clear_has_num_output();
}
inline ::google::protobuf::uint32 V0LayerParameter::num_output() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.num_output)
  return num_output_;
}
inline void V0LayerParameter::set_num_output(::google::protobuf::uint32 value) {
  set_has_num_output();
  num_output_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.num_output)
}

// optional bool biasterm = 4 [default = true];
inline bool V0LayerParameter::has_biasterm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void V0LayerParameter::set_has_biasterm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void V0LayerParameter::clear_has_biasterm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void V0LayerParameter::clear_biasterm() {
  biasterm_ = true;
  clear_has_biasterm();
}
inline bool V0LayerParameter::biasterm() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.biasterm)
  return biasterm_;
}
inline void V0LayerParameter::set_biasterm(bool value) {
  set_has_biasterm();
  biasterm_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.biasterm)
}

// optional .caffe.FillerParameter weight_filler = 5;
inline bool V0LayerParameter::has_weight_filler() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void V0LayerParameter::set_has_weight_filler() {
  _has_bits_[0] |= 0x00000010u;
}
inline void V0LayerParameter::clear_has_weight_filler() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void V0LayerParameter::clear_weight_filler() {
  if (weight_filler_ != NULL) weight_filler_->::caffe::FillerParameter::Clear();
  clear_has_weight_filler();
}
inline const ::caffe::FillerParameter& V0LayerParameter::weight_filler() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.weight_filler)
  return weight_filler_ != NULL ? *weight_filler_ : *default_instance_->weight_filler_;
}
inline ::caffe::FillerParameter* V0LayerParameter::mutable_weight_filler() {
  set_has_weight_filler();
  if (weight_filler_ == NULL) {
    weight_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.weight_filler)
  return weight_filler_;
}
inline ::caffe::FillerParameter* V0LayerParameter::release_weight_filler() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.weight_filler)
  clear_has_weight_filler();
  ::caffe::FillerParameter* temp = weight_filler_;
  weight_filler_ = NULL;
  return temp;
}
inline void V0LayerParameter::set_allocated_weight_filler(::caffe::FillerParameter* weight_filler) {
  delete weight_filler_;
  weight_filler_ = weight_filler;
  if (weight_filler) {
    set_has_weight_filler();
  } else {
    clear_has_weight_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.weight_filler)
}

// optional .caffe.FillerParameter bias_filler = 6;
inline bool V0LayerParameter::has_bias_filler() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void V0LayerParameter::set_has_bias_filler() {
  _has_bits_[0] |= 0x00000020u;
}
inline void V0LayerParameter::clear_has_bias_filler() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void V0LayerParameter::clear_bias_filler() {
  if (bias_filler_ != NULL) bias_filler_->::caffe::FillerParameter::Clear();
  clear_has_bias_filler();
}
inline const ::caffe::FillerParameter& V0LayerParameter::bias_filler() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.bias_filler)
  return bias_filler_ != NULL ? *bias_filler_ : *default_instance_->bias_filler_;
}
inline ::caffe::FillerParameter* V0LayerParameter::mutable_bias_filler() {
  set_has_bias_filler();
  if (bias_filler_ == NULL) {
    bias_filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.bias_filler)
  return bias_filler_;
}
inline ::caffe::FillerParameter* V0LayerParameter::release_bias_filler() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.bias_filler)
  clear_has_bias_filler();
  ::caffe::FillerParameter* temp = bias_filler_;
  bias_filler_ = NULL;
  return temp;
}
inline void V0LayerParameter::set_allocated_bias_filler(::caffe::FillerParameter* bias_filler) {
  delete bias_filler_;
  bias_filler_ = bias_filler;
  if (bias_filler) {
    set_has_bias_filler();
  } else {
    clear_has_bias_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.bias_filler)
}

// optional uint32 pad = 7 [default = 0];
inline bool V0LayerParameter::has_pad() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void V0LayerParameter::set_has_pad() {
  _has_bits_[0] |= 0x00000040u;
}
inline void V0LayerParameter::clear_has_pad() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void V0LayerParameter::clear_pad() {
  pad_ = 0u;
  clear_has_pad();
}
inline ::google::protobuf::uint32 V0LayerParameter::pad() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.pad)
  return pad_;
}
inline void V0LayerParameter::set_pad(::google::protobuf::uint32 value) {
  set_has_pad();
  pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.pad)
}

// optional uint32 kernelsize = 8;
inline bool V0LayerParameter::has_kernelsize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void V0LayerParameter::set_has_kernelsize() {
  _has_bits_[0] |= 0x00000080u;
}
inline void V0LayerParameter::clear_has_kernelsize() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void V0LayerParameter::clear_kernelsize() {
  kernelsize_ = 0u;
  clear_has_kernelsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::kernelsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.kernelsize)
  return kernelsize_;
}
inline void V0LayerParameter::set_kernelsize(::google::protobuf::uint32 value) {
  set_has_kernelsize();
  kernelsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.kernelsize)
}

// optional uint32 group = 9 [default = 1];
inline bool V0LayerParameter::has_group() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void V0LayerParameter::set_has_group() {
  _has_bits_[0] |= 0x00000100u;
}
inline void V0LayerParameter::clear_has_group() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void V0LayerParameter::clear_group() {
  group_ = 1u;
  clear_has_group();
}
inline ::google::protobuf::uint32 V0LayerParameter::group() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.group)
  return group_;
}
inline void V0LayerParameter::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.group)
}

// optional uint32 stride = 10 [default = 1];
inline bool V0LayerParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void V0LayerParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000200u;
}
inline void V0LayerParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void V0LayerParameter::clear_stride() {
  stride_ = 1u;
  clear_has_stride();
}
inline ::google::protobuf::uint32 V0LayerParameter::stride() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.stride)
  return stride_;
}
inline void V0LayerParameter::set_stride(::google::protobuf::uint32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.stride)
}

// optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];
inline bool V0LayerParameter::has_pool() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void V0LayerParameter::set_has_pool() {
  _has_bits_[0] |= 0x00000400u;
}
inline void V0LayerParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void V0LayerParameter::clear_pool() {
  pool_ = 0;
  clear_has_pool();
}
inline ::caffe::V0LayerParameter_PoolMethod V0LayerParameter::pool() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.pool)
  return static_cast< ::caffe::V0LayerParameter_PoolMethod >(pool_);
}
inline void V0LayerParameter::set_pool(::caffe::V0LayerParameter_PoolMethod value) {
  assert(::caffe::V0LayerParameter_PoolMethod_IsValid(value));
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.pool)
}

// optional float dropout_ratio = 12 [default = 0.5];
inline bool V0LayerParameter::has_dropout_ratio() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void V0LayerParameter::set_has_dropout_ratio() {
  _has_bits_[0] |= 0x00000800u;
}
inline void V0LayerParameter::clear_has_dropout_ratio() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void V0LayerParameter::clear_dropout_ratio() {
  dropout_ratio_ = 0.5f;
  clear_has_dropout_ratio();
}
inline float V0LayerParameter::dropout_ratio() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.dropout_ratio)
  return dropout_ratio_;
}
inline void V0LayerParameter::set_dropout_ratio(float value) {
  set_has_dropout_ratio();
  dropout_ratio_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.dropout_ratio)
}

// optional uint32 local_size = 13 [default = 5];
inline bool V0LayerParameter::has_local_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void V0LayerParameter::set_has_local_size() {
  _has_bits_[0] |= 0x00001000u;
}
inline void V0LayerParameter::clear_has_local_size() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void V0LayerParameter::clear_local_size() {
  local_size_ = 5u;
  clear_has_local_size();
}
inline ::google::protobuf::uint32 V0LayerParameter::local_size() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.local_size)
  return local_size_;
}
inline void V0LayerParameter::set_local_size(::google::protobuf::uint32 value) {
  set_has_local_size();
  local_size_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.local_size)
}

// optional float alpha = 14 [default = 1];
inline bool V0LayerParameter::has_alpha() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void V0LayerParameter::set_has_alpha() {
  _has_bits_[0] |= 0x00002000u;
}
inline void V0LayerParameter::clear_has_alpha() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void V0LayerParameter::clear_alpha() {
  alpha_ = 1;
  clear_has_alpha();
}
inline float V0LayerParameter::alpha() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.alpha)
  return alpha_;
}
inline void V0LayerParameter::set_alpha(float value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.alpha)
}

// optional float beta = 15 [default = 0.75];
inline bool V0LayerParameter::has_beta() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void V0LayerParameter::set_has_beta() {
  _has_bits_[0] |= 0x00004000u;
}
inline void V0LayerParameter::clear_has_beta() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void V0LayerParameter::clear_beta() {
  beta_ = 0.75f;
  clear_has_beta();
}
inline float V0LayerParameter::beta() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.beta)
  return beta_;
}
inline void V0LayerParameter::set_beta(float value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.beta)
}

// optional float k = 22 [default = 1];
inline bool V0LayerParameter::has_k() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void V0LayerParameter::set_has_k() {
  _has_bits_[0] |= 0x00008000u;
}
inline void V0LayerParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void V0LayerParameter::clear_k() {
  k_ = 1;
  clear_has_k();
}
inline float V0LayerParameter::k() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.k)
  return k_;
}
inline void V0LayerParameter::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.k)
}

// optional string source = 16;
inline bool V0LayerParameter::has_source() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void V0LayerParameter::set_has_source() {
  _has_bits_[0] |= 0x00010000u;
}
inline void V0LayerParameter::clear_has_source() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void V0LayerParameter::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& V0LayerParameter::source() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.source)
}
inline void V0LayerParameter::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.source)
}
inline void V0LayerParameter::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.source)
}
inline ::std::string* V0LayerParameter::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V0LayerParameter::release_source() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.source)
}

// optional float scale = 17 [default = 1];
inline bool V0LayerParameter::has_scale() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void V0LayerParameter::set_has_scale() {
  _has_bits_[0] |= 0x00020000u;
}
inline void V0LayerParameter::clear_has_scale() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void V0LayerParameter::clear_scale() {
  scale_ = 1;
  clear_has_scale();
}
inline float V0LayerParameter::scale() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.scale)
  return scale_;
}
inline void V0LayerParameter::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.scale)
}

// optional string meanfile = 18;
inline bool V0LayerParameter::has_meanfile() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void V0LayerParameter::set_has_meanfile() {
  _has_bits_[0] |= 0x00040000u;
}
inline void V0LayerParameter::clear_has_meanfile() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void V0LayerParameter::clear_meanfile() {
  meanfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_meanfile();
}
inline const ::std::string& V0LayerParameter::meanfile() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.meanfile)
  return meanfile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_meanfile(const ::std::string& value) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.meanfile)
}
inline void V0LayerParameter::set_meanfile(const char* value) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.meanfile)
}
inline void V0LayerParameter::set_meanfile(const char* value, size_t size) {
  set_has_meanfile();
  meanfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.meanfile)
}
inline ::std::string* V0LayerParameter::mutable_meanfile() {
  set_has_meanfile();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.meanfile)
  return meanfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* V0LayerParameter::release_meanfile() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.meanfile)
  clear_has_meanfile();
  return meanfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void V0LayerParameter::set_allocated_meanfile(::std::string* meanfile) {
  if (meanfile != NULL) {
    set_has_meanfile();
  } else {
    clear_has_meanfile();
  }
  meanfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), meanfile);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.meanfile)
}

// optional uint32 batchsize = 19;
inline bool V0LayerParameter::has_batchsize() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void V0LayerParameter::set_has_batchsize() {
  _has_bits_[0] |= 0x00080000u;
}
inline void V0LayerParameter::clear_has_batchsize() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void V0LayerParameter::clear_batchsize() {
  batchsize_ = 0u;
  clear_has_batchsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::batchsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.batchsize)
  return batchsize_;
}
inline void V0LayerParameter::set_batchsize(::google::protobuf::uint32 value) {
  set_has_batchsize();
  batchsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.batchsize)
}

// optional uint32 cropsize = 20 [default = 0];
inline bool V0LayerParameter::has_cropsize() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void V0LayerParameter::set_has_cropsize() {
  _has_bits_[0] |= 0x00100000u;
}
inline void V0LayerParameter::clear_has_cropsize() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void V0LayerParameter::clear_cropsize() {
  cropsize_ = 0u;
  clear_has_cropsize();
}
inline ::google::protobuf::uint32 V0LayerParameter::cropsize() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.cropsize)
  return cropsize_;
}
inline void V0LayerParameter::set_cropsize(::google::protobuf::uint32 value) {
  set_has_cropsize();
  cropsize_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.cropsize)
}

// optional bool mirror = 21 [default = false];
inline bool V0LayerParameter::has_mirror() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void V0LayerParameter::set_has_mirror() {
  _has_bits_[0] |= 0x00200000u;
}
inline void V0LayerParameter::clear_has_mirror() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void V0LayerParameter::clear_mirror() {
  mirror_ = false;
  clear_has_mirror();
}
inline bool V0LayerParameter::mirror() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.mirror)
  return mirror_;
}
inline void V0LayerParameter::set_mirror(bool value) {
  set_has_mirror();
  mirror_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.mirror)
}

// repeated .caffe.BlobProto blobs = 50;
inline int V0LayerParameter::blobs_size() const {
  return blobs_.size();
}
inline void V0LayerParameter::clear_blobs() {
  blobs_.Clear();
}
inline const ::caffe::BlobProto& V0LayerParameter::blobs(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.blobs)
  return blobs_.Get(index);
}
inline ::caffe::BlobProto* V0LayerParameter::mutable_blobs(int index) {
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.blobs)
  return blobs_.Mutable(index);
}
inline ::caffe::BlobProto* V0LayerParameter::add_blobs() {
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.blobs)
  return blobs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >*
V0LayerParameter::mutable_blobs() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.blobs)
  return &blobs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe::BlobProto >&
V0LayerParameter::blobs() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.blobs)
  return blobs_;
}

// repeated float blobs_lr = 51;
inline int V0LayerParameter::blobs_lr_size() const {
  return blobs_lr_.size();
}
inline void V0LayerParameter::clear_blobs_lr() {
  blobs_lr_.Clear();
}
inline float V0LayerParameter::blobs_lr(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.blobs_lr)
  return blobs_lr_.Get(index);
}
inline void V0LayerParameter::set_blobs_lr(int index, float value) {
  blobs_lr_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.blobs_lr)
}
inline void V0LayerParameter::add_blobs_lr(float value) {
  blobs_lr_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.blobs_lr)
}
inline const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::blobs_lr() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.blobs_lr)
  return blobs_lr_;
}
inline ::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_blobs_lr() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.blobs_lr)
  return &blobs_lr_;
}

// repeated float weight_decay = 52;
inline int V0LayerParameter::weight_decay_size() const {
  return weight_decay_.size();
}
inline void V0LayerParameter::clear_weight_decay() {
  weight_decay_.Clear();
}
inline float V0LayerParameter::weight_decay(int index) const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.weight_decay)
  return weight_decay_.Get(index);
}
inline void V0LayerParameter::set_weight_decay(int index, float value) {
  weight_decay_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.weight_decay)
}
inline void V0LayerParameter::add_weight_decay(float value) {
  weight_decay_.Add(value);
  // @@protoc_insertion_point(field_add:caffe.V0LayerParameter.weight_decay)
}
inline const ::google::protobuf::RepeatedField< float >&
V0LayerParameter::weight_decay() const {
  // @@protoc_insertion_point(field_list:caffe.V0LayerParameter.weight_decay)
  return weight_decay_;
}
inline ::google::protobuf::RepeatedField< float >*
V0LayerParameter::mutable_weight_decay() {
  // @@protoc_insertion_point(field_mutable_list:caffe.V0LayerParameter.weight_decay)
  return &weight_decay_;
}

// optional uint32 rand_skip = 53 [default = 0];
inline bool V0LayerParameter::has_rand_skip() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void V0LayerParameter::set_has_rand_skip() {
  _has_bits_[0] |= 0x02000000u;
}
inline void V0LayerParameter::clear_has_rand_skip() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void V0LayerParameter::clear_rand_skip() {
  rand_skip_ = 0u;
  clear_has_rand_skip();
}
inline ::google::protobuf::uint32 V0LayerParameter::rand_skip() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.rand_skip)
  return rand_skip_;
}
inline void V0LayerParameter::set_rand_skip(::google::protobuf::uint32 value) {
  set_has_rand_skip();
  rand_skip_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.rand_skip)
}

// optional float det_fg_threshold = 54 [default = 0.5];
inline bool V0LayerParameter::has_det_fg_threshold() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void V0LayerParameter::set_has_det_fg_threshold() {
  _has_bits_[0] |= 0x04000000u;
}
inline void V0LayerParameter::clear_has_det_fg_threshold() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void V0LayerParameter::clear_det_fg_threshold() {
  det_fg_threshold_ = 0.5f;
  clear_has_det_fg_threshold();
}
inline float V0LayerParameter::det_fg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_fg_threshold)
  return det_fg_threshold_;
}
inline void V0LayerParameter::set_det_fg_threshold(float value) {
  set_has_det_fg_threshold();
  det_fg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_fg_threshold)
}

// optional float det_bg_threshold = 55 [default = 0.5];
inline bool V0LayerParameter::has_det_bg_threshold() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void V0LayerParameter::set_has_det_bg_threshold() {
  _has_bits_[0] |= 0x08000000u;
}
inline void V0LayerParameter::clear_has_det_bg_threshold() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void V0LayerParameter::clear_det_bg_threshold() {
  det_bg_threshold_ = 0.5f;
  clear_has_det_bg_threshold();
}
inline float V0LayerParameter::det_bg_threshold() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_bg_threshold)
  return det_bg_threshold_;
}
inline void V0LayerParameter::set_det_bg_threshold(float value) {
  set_has_det_bg_threshold();
  det_bg_threshold_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_bg_threshold)
}

// optional float det_fg_fraction = 56 [default = 0.25];
inline bool V0LayerParameter::has_det_fg_fraction() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void V0LayerParameter::set_has_det_fg_fraction() {
  _has_bits_[0] |= 0x10000000u;
}
inline void V0LayerParameter::clear_has_det_fg_fraction() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void V0LayerParameter::clear_det_fg_fraction() {
  det_fg_fraction_ = 0.25f;
  clear_has_det_fg_fraction();
}
inline float V0LayerParameter::det_fg_fraction() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_fg_fraction)
  return det_fg_fraction_;
}
inline void V0LayerParameter::set_det_fg_fraction(float value) {
  set_has_det_fg_fraction();
  det_fg_fraction_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_fg_fraction)
}

// optional uint32 det_context_pad = 58 [default = 0];
inline bool V0LayerParameter::has_det_context_pad() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void V0LayerParameter::set_has_det_context_pad() {
  _has_bits_[0] |= 0x20000000u;
}
inline void V0LayerParameter::clear_has_det_context_pad() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void V0LayerParameter::clear_det_context_pad() {
  det_context_pad_ = 0u;
  clear_has_det_context_pad();
}
inline ::google::protobuf::uint32 V0LayerParameter::det_context_pad() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_context_pad)
  return det_context_pad_;
}
inline void V0LayerParameter::set_det_context_pad(::google::protobuf::uint32 value) {
  set_has_det_context_pad();
  det_context_pad_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_context_pad)
}

// optional string det_crop_mode = 59 [default = "warp"];
inline bool V0LayerParameter::has_det_crop_mode() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void V0LayerParameter::set_has_det_crop_mode() {
  _has_bits_[0] |= 0x40000000u;
}
inline void V0LayerParameter::clear_has_det_crop_mode() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void V0LayerParameter::clear_det_crop_mode() {
  det_crop_mode_.ClearToDefaultNoArena(_default_det_crop_mode_);
  clear_has_det_crop_mode();
}
inline const ::std::string& V0LayerParameter::det_crop_mode() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.det_crop_mode)
  return det_crop_mode_.GetNoArena(_default_det_crop_mode_);
}
inline void V0LayerParameter::set_det_crop_mode(const ::std::string& value) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(_default_det_crop_mode_, value);
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.det_crop_mode)
}
inline void V0LayerParameter::set_det_crop_mode(const char* value) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(_default_det_crop_mode_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe.V0LayerParameter.det_crop_mode)
}
inline void V0LayerParameter::set_det_crop_mode(const char* value, size_t size) {
  set_has_det_crop_mode();
  det_crop_mode_.SetNoArena(_default_det_crop_mode_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe.V0LayerParameter.det_crop_mode)
}
inline ::std::string* V0LayerParameter::mutable_det_crop_mode() {
  set_has_det_crop_mode();
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.det_crop_mode)
  return det_crop_mode_.MutableNoArena(_default_det_crop_mode_);
}
inline ::std::string* V0LayerParameter::release_det_crop_mode() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.det_crop_mode)
  clear_has_det_crop_mode();
  return det_crop_mode_.ReleaseNoArena(_default_det_crop_mode_);
}
inline void V0LayerParameter::set_allocated_det_crop_mode(::std::string* det_crop_mode) {
  if (det_crop_mode != NULL) {
    set_has_det_crop_mode();
  } else {
    clear_has_det_crop_mode();
  }
  det_crop_mode_.SetAllocatedNoArena(_default_det_crop_mode_, det_crop_mode);
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.det_crop_mode)
}

// optional int32 new_num = 60 [default = 0];
inline bool V0LayerParameter::has_new_num() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void V0LayerParameter::set_has_new_num() {
  _has_bits_[0] |= 0x80000000u;
}
inline void V0LayerParameter::clear_has_new_num() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void V0LayerParameter::clear_new_num() {
  new_num_ = 0;
  clear_has_new_num();
}
inline ::google::protobuf::int32 V0LayerParameter::new_num() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_num)
  return new_num_;
}
inline void V0LayerParameter::set_new_num(::google::protobuf::int32 value) {
  set_has_new_num();
  new_num_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_num)
}

// optional int32 new_channels = 61 [default = 0];
inline bool V0LayerParameter::has_new_channels() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void V0LayerParameter::set_has_new_channels() {
  _has_bits_[1] |= 0x00000001u;
}
inline void V0LayerParameter::clear_has_new_channels() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void V0LayerParameter::clear_new_channels() {
  new_channels_ = 0;
  clear_has_new_channels();
}
inline ::google::protobuf::int32 V0LayerParameter::new_channels() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_channels)
  return new_channels_;
}
inline void V0LayerParameter::set_new_channels(::google::protobuf::int32 value) {
  set_has_new_channels();
  new_channels_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_channels)
}

// optional int32 new_height = 62 [default = 0];
inline bool V0LayerParameter::has_new_height() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void V0LayerParameter::set_has_new_height() {
  _has_bits_[1] |= 0x00000002u;
}
inline void V0LayerParameter::clear_has_new_height() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void V0LayerParameter::clear_new_height() {
  new_height_ = 0;
  clear_has_new_height();
}
inline ::google::protobuf::int32 V0LayerParameter::new_height() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_height)
  return new_height_;
}
inline void V0LayerParameter::set_new_height(::google::protobuf::int32 value) {
  set_has_new_height();
  new_height_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_height)
}

// optional int32 new_width = 63 [default = 0];
inline bool V0LayerParameter::has_new_width() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void V0LayerParameter::set_has_new_width() {
  _has_bits_[1] |= 0x00000004u;
}
inline void V0LayerParameter::clear_has_new_width() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void V0LayerParameter::clear_new_width() {
  new_width_ = 0;
  clear_has_new_width();
}
inline ::google::protobuf::int32 V0LayerParameter::new_width() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.new_width)
  return new_width_;
}
inline void V0LayerParameter::set_new_width(::google::protobuf::int32 value) {
  set_has_new_width();
  new_width_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.new_width)
}

// optional bool shuffle_images = 64 [default = false];
inline bool V0LayerParameter::has_shuffle_images() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void V0LayerParameter::set_has_shuffle_images() {
  _has_bits_[1] |= 0x00000008u;
}
inline void V0LayerParameter::clear_has_shuffle_images() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void V0LayerParameter::clear_shuffle_images() {
  shuffle_images_ = false;
  clear_has_shuffle_images();
}
inline bool V0LayerParameter::shuffle_images() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.shuffle_images)
  return shuffle_images_;
}
inline void V0LayerParameter::set_shuffle_images(bool value) {
  set_has_shuffle_images();
  shuffle_images_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.shuffle_images)
}

// optional uint32 concat_dim = 65 [default = 1];
inline bool V0LayerParameter::has_concat_dim() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void V0LayerParameter::set_has_concat_dim() {
  _has_bits_[1] |= 0x00000010u;
}
inline void V0LayerParameter::clear_has_concat_dim() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void V0LayerParameter::clear_concat_dim() {
  concat_dim_ = 1u;
  clear_has_concat_dim();
}
inline ::google::protobuf::uint32 V0LayerParameter::concat_dim() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.concat_dim)
  return concat_dim_;
}
inline void V0LayerParameter::set_concat_dim(::google::protobuf::uint32 value) {
  set_has_concat_dim();
  concat_dim_ = value;
  // @@protoc_insertion_point(field_set:caffe.V0LayerParameter.concat_dim)
}

// optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;
inline bool V0LayerParameter::has_hdf5_output_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void V0LayerParameter::set_has_hdf5_output_param() {
  _has_bits_[1] |= 0x00000020u;
}
inline void V0LayerParameter::clear_has_hdf5_output_param() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void V0LayerParameter::clear_hdf5_output_param() {
  if (hdf5_output_param_ != NULL) hdf5_output_param_->::caffe::HDF5OutputParameter::Clear();
  clear_has_hdf5_output_param();
}
inline const ::caffe::HDF5OutputParameter& V0LayerParameter::hdf5_output_param() const {
  // @@protoc_insertion_point(field_get:caffe.V0LayerParameter.hdf5_output_param)
  return hdf5_output_param_ != NULL ? *hdf5_output_param_ : *default_instance_->hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* V0LayerParameter::mutable_hdf5_output_param() {
  set_has_hdf5_output_param();
  if (hdf5_output_param_ == NULL) {
    hdf5_output_param_ = new ::caffe::HDF5OutputParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.V0LayerParameter.hdf5_output_param)
  return hdf5_output_param_;
}
inline ::caffe::HDF5OutputParameter* V0LayerParameter::release_hdf5_output_param() {
  // @@protoc_insertion_point(field_release:caffe.V0LayerParameter.hdf5_output_param)
  clear_has_hdf5_output_param();
  ::caffe::HDF5OutputParameter* temp = hdf5_output_param_;
  hdf5_output_param_ = NULL;
  return temp;
}
inline void V0LayerParameter::set_allocated_hdf5_output_param(::caffe::HDF5OutputParameter* hdf5_output_param) {
  delete hdf5_output_param_;
  hdf5_output_param_ = hdf5_output_param;
  if (hdf5_output_param) {
    set_has_hdf5_output_param();
  } else {
    clear_has_hdf5_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.V0LayerParameter.hdf5_output_param)
}

// -------------------------------------------------------------------

// PReLUParameter

// optional .caffe.FillerParameter filler = 1;
inline bool PReLUParameter::has_filler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PReLUParameter::set_has_filler() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PReLUParameter::clear_has_filler() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PReLUParameter::clear_filler() {
  if (filler_ != NULL) filler_->::caffe::FillerParameter::Clear();
  clear_has_filler();
}
inline const ::caffe::FillerParameter& PReLUParameter::filler() const {
  // @@protoc_insertion_point(field_get:caffe.PReLUParameter.filler)
  return filler_ != NULL ? *filler_ : *default_instance_->filler_;
}
inline ::caffe::FillerParameter* PReLUParameter::mutable_filler() {
  set_has_filler();
  if (filler_ == NULL) {
    filler_ = new ::caffe::FillerParameter;
  }
  // @@protoc_insertion_point(field_mutable:caffe.PReLUParameter.filler)
  return filler_;
}
inline ::caffe::FillerParameter* PReLUParameter::release_filler() {
  // @@protoc_insertion_point(field_release:caffe.PReLUParameter.filler)
  clear_has_filler();
  ::caffe::FillerParameter* temp = filler_;
  filler_ = NULL;
  return temp;
}
inline void PReLUParameter::set_allocated_filler(::caffe::FillerParameter* filler) {
  delete filler_;
  filler_ = filler;
  if (filler) {
    set_has_filler();
  } else {
    clear_has_filler();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe.PReLUParameter.filler)
}

// optional bool channel_shared = 2 [default = false];
inline bool PReLUParameter::has_channel_shared() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PReLUParameter::set_has_channel_shared() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PReLUParameter::clear_has_channel_shared() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PReLUParameter::clear_channel_shared() {
  channel_shared_ = false;
  clear_has_channel_shared();
}
inline bool PReLUParameter::channel_shared() const {
  // @@protoc_insertion_point(field_get:caffe.PReLUParameter.channel_shared)
  return channel_shared_;
}
inline void PReLUParameter::set_channel_shared(bool value) {
  set_has_channel_shared();
  channel_shared_ = value;
  // @@protoc_insertion_point(field_set:caffe.PReLUParameter.channel_shared)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::caffe::EmitConstraint_EmitType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::EmitConstraint_EmitType>() {
  return ::caffe::EmitConstraint_EmitType_descriptor();
}
template <> struct is_proto_enum< ::caffe::AnnotatedPersonDatum_AnnotatedPersonType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::AnnotatedPersonDatum_AnnotatedPersonType>() {
  return ::caffe::AnnotatedPersonDatum_AnnotatedPersonType_descriptor();
}
template <> struct is_proto_enum< ::caffe::AnnotatedDatum_AnnotationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::AnnotatedDatum_AnnotationType>() {
  return ::caffe::AnnotatedDatum_AnnotationType_descriptor();
}
template <> struct is_proto_enum< ::caffe::FillerParameter_VarianceNorm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::FillerParameter_VarianceNorm>() {
  return ::caffe::FillerParameter_VarianceNorm_descriptor();
}
template <> struct is_proto_enum< ::caffe::SolverParameter_SnapshotFormat> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverParameter_SnapshotFormat>() {
  return ::caffe::SolverParameter_SnapshotFormat_descriptor();
}
template <> struct is_proto_enum< ::caffe::SolverParameter_SolverMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverParameter_SolverMode>() {
  return ::caffe::SolverParameter_SolverMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::SolverParameter_SolverType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SolverParameter_SolverType>() {
  return ::caffe::SolverParameter_SolverType_descriptor();
}
template <> struct is_proto_enum< ::caffe::ParamSpec_DimCheckMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ParamSpec_DimCheckMode>() {
  return ::caffe::ParamSpec_DimCheckMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::SegAccuracyParameter_AccuracyMetric> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SegAccuracyParameter_AccuracyMetric>() {
  return ::caffe::SegAccuracyParameter_AccuracyMetric_descriptor();
}
template <> struct is_proto_enum< ::caffe::MarginInnerProductParameter_MarginType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::MarginInnerProductParameter_MarginType>() {
  return ::caffe::MarginInnerProductParameter_MarginType_descriptor();
}
template <> struct is_proto_enum< ::caffe::ResizeParameter_Resize_mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ResizeParameter_Resize_mode>() {
  return ::caffe::ResizeParameter_Resize_mode_descriptor();
}
template <> struct is_proto_enum< ::caffe::ResizeParameter_Pad_mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ResizeParameter_Pad_mode>() {
  return ::caffe::ResizeParameter_Pad_mode_descriptor();
}
template <> struct is_proto_enum< ::caffe::ResizeParameter_Interp_mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ResizeParameter_Interp_mode>() {
  return ::caffe::ResizeParameter_Interp_mode_descriptor();
}
template <> struct is_proto_enum< ::caffe::UnifiedTransformationParameter_PutToBlob_mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::UnifiedTransformationParameter_PutToBlob_mode>() {
  return ::caffe::UnifiedTransformationParameter_PutToBlob_mode_descriptor();
}
template <> struct is_proto_enum< ::caffe::LossParameter_NormalizationMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LossParameter_NormalizationMode>() {
  return ::caffe::LossParameter_NormalizationMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::ConvolutionParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ConvolutionParameter_Engine>() {
  return ::caffe::ConvolutionParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::DataParameter_DB> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::DataParameter_DB>() {
  return ::caffe::DataParameter_DB_descriptor();
}
template <> struct is_proto_enum< ::caffe::McBoxLossParameter_CodeLocType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::McBoxLossParameter_CodeLocType>() {
  return ::caffe::McBoxLossParameter_CodeLocType_descriptor();
}
template <> struct is_proto_enum< ::caffe::DetectionOutputParameter_NmsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::DetectionOutputParameter_NmsType>() {
  return ::caffe::DetectionOutputParameter_NmsType_descriptor();
}
template <> struct is_proto_enum< ::caffe::DetectionOutputParameter_SoftType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::DetectionOutputParameter_SoftType>() {
  return ::caffe::DetectionOutputParameter_SoftType_descriptor();
}
template <> struct is_proto_enum< ::caffe::EltwiseParameter_EltwiseOp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::EltwiseParameter_EltwiseOp>() {
  return ::caffe::EltwiseParameter_EltwiseOp_descriptor();
}
template <> struct is_proto_enum< ::caffe::HingeLossParameter_Norm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::HingeLossParameter_Norm>() {
  return ::caffe::HingeLossParameter_Norm_descriptor();
}
template <> struct is_proto_enum< ::caffe::ReorgParameter_SampleType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ReorgParameter_SampleType>() {
  return ::caffe::ReorgParameter_SampleType_descriptor();
}
template <> struct is_proto_enum< ::caffe::LRNParameter_NormRegion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LRNParameter_NormRegion>() {
  return ::caffe::LRNParameter_NormRegion_descriptor();
}
template <> struct is_proto_enum< ::caffe::LRNParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::LRNParameter_Engine>() {
  return ::caffe::LRNParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::MultiBoxLossParameter_LocLossType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::MultiBoxLossParameter_LocLossType>() {
  return ::caffe::MultiBoxLossParameter_LocLossType_descriptor();
}
template <> struct is_proto_enum< ::caffe::MultiBoxLossParameter_ConfLossType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::MultiBoxLossParameter_ConfLossType>() {
  return ::caffe::MultiBoxLossParameter_ConfLossType_descriptor();
}
template <> struct is_proto_enum< ::caffe::MultiBoxLossParameter_MatchType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::MultiBoxLossParameter_MatchType>() {
  return ::caffe::MultiBoxLossParameter_MatchType_descriptor();
}
template <> struct is_proto_enum< ::caffe::BBoxLossParameter_EffectiveMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::BBoxLossParameter_EffectiveMode>() {
  return ::caffe::BBoxLossParameter_EffectiveMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::BBoxLossParameter_MatchTypeAnchorGT> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::BBoxLossParameter_MatchTypeAnchorGT>() {
  return ::caffe::BBoxLossParameter_MatchTypeAnchorGT_descriptor();
}
template <> struct is_proto_enum< ::caffe::DenseBBoxLossParameter_EffectiveMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::DenseBBoxLossParameter_EffectiveMode>() {
  return ::caffe::DenseBBoxLossParameter_EffectiveMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::MultiMcBoxLossParameter_ConfLossType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::MultiMcBoxLossParameter_ConfLossType>() {
  return ::caffe::MultiMcBoxLossParameter_ConfLossType_descriptor();
}
template <> struct is_proto_enum< ::caffe::PoolingParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PoolingParameter_PoolMethod>() {
  return ::caffe::PoolingParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe::PoolingParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PoolingParameter_Engine>() {
  return ::caffe::PoolingParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::PriorBoxParameter_CodeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::PriorBoxParameter_CodeType>() {
  return ::caffe::PriorBoxParameter_CodeType_descriptor();
}
template <> struct is_proto_enum< ::caffe::ReductionParameter_ReductionOp> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ReductionParameter_ReductionOp>() {
  return ::caffe::ReductionParameter_ReductionOp_descriptor();
}
template <> struct is_proto_enum< ::caffe::ReLUParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::ReLUParameter_Engine>() {
  return ::caffe::ReLUParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::SigmoidParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SigmoidParameter_Engine>() {
  return ::caffe::SigmoidParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::SoftmaxParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SoftmaxParameter_Engine>() {
  return ::caffe::SoftmaxParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::TanHParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::TanHParameter_Engine>() {
  return ::caffe::TanHParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::VideoDataParameter_VideoType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::VideoDataParameter_VideoType>() {
  return ::caffe::VideoDataParameter_VideoType_descriptor();
}
template <> struct is_proto_enum< ::caffe::VideoframeParameter_VideoType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::VideoframeParameter_VideoType>() {
  return ::caffe::VideoframeParameter_VideoType_descriptor();
}
template <> struct is_proto_enum< ::caffe::VisualizeposeParameter_DrawType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::VisualizeposeParameter_DrawType>() {
  return ::caffe::VisualizeposeParameter_DrawType_descriptor();
}
template <> struct is_proto_enum< ::caffe::VisualizeBoxposeParameter_BPDrawType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::VisualizeBoxposeParameter_BPDrawType>() {
  return ::caffe::VisualizeBoxposeParameter_BPDrawType_descriptor();
}
template <> struct is_proto_enum< ::caffe::SPPParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SPPParameter_PoolMethod>() {
  return ::caffe::SPPParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe::SPPParameter_Engine> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::SPPParameter_Engine>() {
  return ::caffe::SPPParameter_Engine_descriptor();
}
template <> struct is_proto_enum< ::caffe::V1LayerParameter_LayerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::V1LayerParameter_LayerType>() {
  return ::caffe::V1LayerParameter_LayerType_descriptor();
}
template <> struct is_proto_enum< ::caffe::V1LayerParameter_DimCheckMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::V1LayerParameter_DimCheckMode>() {
  return ::caffe::V1LayerParameter_DimCheckMode_descriptor();
}
template <> struct is_proto_enum< ::caffe::V0LayerParameter_PoolMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::V0LayerParameter_PoolMethod>() {
  return ::caffe::V0LayerParameter_PoolMethod_descriptor();
}
template <> struct is_proto_enum< ::caffe::Phase> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::caffe::Phase>() {
  return ::caffe::Phase_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_caffe_2eproto__INCLUDED
